<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小源Bの博客</title>
  
  <subtitle>zj&amp;ycy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hackycy.github.io/"/>
  <updated>2019-04-12T10:02:19.290Z</updated>
  <id>http://hackycy.github.io/</id>
  
  <author>
    <name>hackycy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android混淆(Proguard)详解</title>
    <link href="http://hackycy.github.io/2019/04/12/Android%E6%B7%B7%E6%B7%86-Proguard-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://hackycy.github.io/2019/04/12/Android混淆-Proguard-详解/</id>
    <published>2019-04-12T09:11:12.000Z</published>
    <updated>2019-04-12T10:02:19.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="混淆的作用及好处"><a href="#混淆的作用及好处" class="headerlink" title="混淆的作用及好处"></a>混淆的作用及好处</h1><p>混淆属于整个应用程序开发生命周期偏后期阶段的技术了，所以要考虑应用的安全性及性能的问题，混淆就是为了这种需求产生的一种技术，简单说，混淆就是将关键字和关键类名，修改为无意义的字符以起到迷惑试图反编译去查看源码的人。在一定程度上能过滤掉一些入门反编译者，混淆是保障Android程序源码安全的第一道门槛，<br>以上谈了下混淆的作用，而混淆的好处除了能保证源码安全性之外就大概是通过修改关键字为无意义字符串，或者剔除某些辅助类，比如Log，从而减少文件大小。</p><a id="more"></a><h1 id="混淆的原理"><a href="#混淆的原理" class="headerlink" title="混淆的原理"></a>混淆的原理</h1><p><a href="https://www.guardsquare.com/en/products/proguard" target="_blank" rel="noopener">proguard官网</a></p><p>Java 是一种跨平台的、解释型语言，Java 源代码编译成中间”字节码”存储于 class 文件中。由于跨平台的需要，Java   字节码中包括了很多源代码信息，如变量名、方法名，并且通过这些名称来访问变量和方法，这些符号带有许多语义信息，很容易被反编译成 Java 源代码。为了防止这种现象，我们可以使用 Java 混淆器对 Java 字节码进行混淆。<br>混淆就是对发布出去的程序进行重新组织和处理，使得处理后的代码与处理前代码完成相同的功能，而混淆后的代码很难被反编译，即使反编译成功也很难得出程序的真正语义。被混淆过的程序代码，仍然遵照原来的档案格式和指令集，执行结果也与混淆前一样，只是混淆器将代码中的所有变量、函数、类的名称变为简短的英文字母代号，在缺乏相应的函数名和程序注释的况下，即使被反编译，也将难以阅读。同时混淆是不可逆的，在混淆的过程中一些不影响正常运行的信息将永久丢失，这些信息的丢失使程序变得更加难以理解。<br>混淆器的作用不仅仅是保护代码，它也有精简编译后程序大小的作用。由于以上介绍的缩短变量和函数名以及丢失部分信息的原因， 编译后 jar 文件体积大约能减少25%，这对当前费用较贵的无线网络传输是有一定意义的。</p><h1 id="混淆的具体使用"><a href="#混淆的具体使用" class="headerlink" title="混淆的具体使用"></a>混淆的具体使用</h1><p>模块(Module)下的build.gradle的配置</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">  buildTypes&#123;</span><br><span class="line">    release &#123; </span><br><span class="line">       <span class="comment">// 是否进行混淆  </span></span><br><span class="line">       minifyEnabled <span class="keyword">false</span>  </span><br><span class="line">       <span class="comment">// 混淆文件的位置，其中'proguard-android.txt'为sdk默认的混淆配置，</span></span><br><span class="line">       <span class="comment">//'proguard-rules.pro' 是该模块下的混淆配置</span></span><br><span class="line">       proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span>  </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是proguard在模块下build.gradle文件中的配置信息，其中<code>proguard-android.txt</code>为sdk默认的混淆配置，<code>proguard-rules.pro</code>是在默认配置的基础上针对本模块做出的针对性混淆处理。</p><ul><li>proguard-android.txt 这个文件是系统默认混淆文件一般不需要做修改</li><li>在 debug 版下也可以开启混淆做为测试</li><li>Gradle 2.2 之后，defaultProguardFile 没有使用 SDK 目录下的 proguard-android.txt，而是使用了 gradle 自带的 proguard-android.txt，不同的 gradle 版本带有不同的默认混淆文件，比如在项目根目录的 build/intermediates/proguard-files/proguard-android.txt-2.3.3，即为 gradle 自带的混淆文件。在 proguard-android.txt-2.3.3 文件中也写有说明，Gradle 2.2 之后自带混淆文件</li></ul><blockquote><p>注：proguard-android.txt的位置位于android-sdk/tools/proguard/proguard-android.txt</p></blockquote><h1 id="混淆规则"><a href="#混淆规则" class="headerlink" title="混淆规则"></a>混淆规则</h1><p>这个语法的作用是定义出 <strong>不需要</strong>混淆的源代码，那么编译时会自动将未定义的部分全都混淆。而如下是不需要混淆的</p><ul><li>Android 四大组件</li><li>native方法</li><li>Java 反射用到的类</li><li>自定义控件</li><li>枚举类</li><li>JavaBean</li><li>Parcelable、Serializable 序列化类</li><li>WebView 与 JS 交互所用到的类和方法</li></ul><h1 id="混淆基本指令"><a href="#混淆基本指令" class="headerlink" title="混淆基本指令"></a>混淆基本指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 代码混淆压缩比，在 0~7 之间</span><br><span class="line">-optimizationpasses 5</span><br><span class="line"></span><br><span class="line"># 混合时不使用大小写混合，混合后的类名为小写</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"></span><br><span class="line"># 指定不忽略非公共库的类和类成员</span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line">-dontskipnonpubliclibraryclassmembers</span><br><span class="line"></span><br><span class="line"># 这句话能够使我们的项目混淆后产生映射文件</span><br><span class="line"># 包含有类名-&gt;混淆后类名的映射关系</span><br><span class="line">-verbose</span><br><span class="line"></span><br><span class="line"># 不做预校验，preverify是proguard的四个步骤之一，Android不需要preverify，去掉这一步能够加快混淆速度</span><br><span class="line">-dontpreverify</span><br><span class="line"></span><br><span class="line"># 保留Annotation不混淆</span><br><span class="line">-keepattributes *Annotation*,InnerClasses</span><br><span class="line"></span><br><span class="line"># 避免混淆泛型</span><br><span class="line">-keepattributes Signature</span><br><span class="line"></span><br><span class="line"># 抛出异常时保留代码行号</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line"></span><br><span class="line"># 指定混淆是采用的算法，后面的参数是一个过滤器</span><br><span class="line"># 这个过滤器是 Google 推荐的算法，一般不做修改</span><br><span class="line">-optimizations !code/simplification/arithmetic,!code/simplification/cast,!field/*,!class/merging/*</span><br><span class="line"></span><br><span class="line"># 是否允许改变作用域的，可以提高优化效果</span><br><span class="line"># 但是，如果你的代码是一个库的话，最好不要配置这个选项，因为它可能会导致一些 private 变量被改成 public，谨慎使用</span><br><span class="line">#-allowaccessmodification</span><br><span class="line"></span><br><span class="line"># 指定一些接口可能会被合并，即使一些子类没有同时实现两个接口的方法。这种情况在java源码中是不允许存在的，但是在java字节码中是允许存在的。</span><br><span class="line"># 它的作用是通过合并接口减少类的数量，从而达到减少输出文件体积的效果。仅在 optimize 阶段有效。</span><br><span class="line"># 如果在开启后没有任何影响可以使用，这项配置对于一些虚拟机的65535方法数限制是有一定效果的，谨慎使用</span><br><span class="line">#-mergeinterfacesaggressively</span><br><span class="line"></span><br><span class="line"># 输出所有找不到引用和一些其它错误的警告，但是继续执行处理过程。不处理警告有些危险，所以在清楚配置的具体作用的时候再使用</span><br><span class="line">-ignorewarnings</span><br></pre></td></tr></table></figure><h1 id="混淆日志"><a href="#混淆日志" class="headerlink" title="混淆日志"></a>混淆日志</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># APK 包内所有 class 的内部结构</span><br><span class="line">-dump proguard/class_files.txt</span><br><span class="line"># 未混淆的类和成员</span><br><span class="line">-printseeds proguard/seeds.txt</span><br><span class="line"># 列出从 APK 中删除的代码</span><br><span class="line">-printusage proguard/unused.txt</span><br><span class="line"># 混淆前后的映射，这个文件在追踪异常的时候是有用的</span><br><span class="line">-printmapping proguard/mapping.txt</span><br></pre></td></tr></table></figure><h1 id="其他自定义混淆规则"><a href="#其他自定义混淆规则" class="headerlink" title="其他自定义混淆规则"></a>其他自定义混淆规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># JavaBean 实体类不能混淆，一般会将实体类统一放到一个包下，you.package.path 请改成你自己的项目路径</span><br><span class="line">-keep public class com.frame.mvp.entity.** &#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 网页中的 JavaScript 进行交互，you.package.path 请改成你自己的项目路径</span><br><span class="line">#-keepclassmembers class you.package.path.JSInterface &#123;</span><br><span class="line">#    &lt;methods&gt;;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># 需要通过反射来调用的类，没有可忽略，you.package.path 请改成你自己的项目路径</span><br><span class="line">#-keep class you.package.path.** &#123; *; &#125;</span><br></pre></td></tr></table></figure><h1 id="一些不是很常用但比较实用的混淆命令"><a href="#一些不是很常用但比较实用的混淆命令" class="headerlink" title="一些不是很常用但比较实用的混淆命令"></a>一些不是很常用但比较实用的混淆命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 所有重新命名的包都重新打包，并把所有的类移动到所给定的包下面。如果没有指定 packagename，那么所有的类都会被移动到根目录下</span><br><span class="line"># 如果需要从目录中读取资源文件，移动包的位置可能会导致异常，谨慎使用</span><br><span class="line"># you.package.path 请改成你自己的项目路径</span><br><span class="line">-flatternpackagehierarchy</span><br><span class="line"></span><br><span class="line"># 所有重新命名过的类都重新打包，并把他们移动到指定的packagename目录下。如果没有指定 packagename，同样把他们放到根目录下面。</span><br><span class="line"># 这项配置会覆盖-flatternpackagehierarchy的配置。它可以代码体积更小，并且更加难以理解。</span><br><span class="line"># you.package.path 请改成你自己的项目路径</span><br><span class="line">-repackageclasses you.package.path</span><br><span class="line"></span><br><span class="line"># 指定一个文本文件用来生成混淆后的名字。默认情况下，混淆后的名字一般为 a、b、c 这种。</span><br><span class="line"># 通过使用配置的字典文件，可以使用一些非英文字符做为类名。成员变量名、方法名。字典文件中的空格，标点符号，重复的词，还有以&apos;#&apos;开头的行都会被忽略。</span><br><span class="line"># 需要注意的是添加了字典并不会显著提高混淆的效果，只不过是更不利与人类的阅读。正常的编译器会自动处理他们，并且输出出来的jar包也可以轻易的换个字典再重新混淆一次。</span><br><span class="line"># 最有用的做法一般是选择已经在类文件中存在的字符串做字典，这样可以稍微压缩包的体积。</span><br><span class="line"># 字典文件的格式：一行一个单词，空行忽略，重复忽略</span><br><span class="line">-obfuscationdictionary</span><br><span class="line"></span><br><span class="line"># 指定一个混淆类名的字典，字典格式与 -obfuscationdictionary 相同</span><br><span class="line">#-classobfuscationdictionary</span><br><span class="line"># 指定一个混淆包名的字典，字典格式与 -obfuscationdictionary 相同</span><br><span class="line">-packageobfuscationdictionary</span><br><span class="line"></span><br><span class="line"># 混淆的时候大量使用重载，多个方法名使用同一个混淆名，但是他们的方法签名不同。这可以使包的体积减小一部分，也可以加大理解的难度。仅在混淆阶段有效。</span><br><span class="line"># 这个参数在 JDK 版本上有一定的限制，可能会导致一些未知的错误，谨慎使用</span><br><span class="line">-overloadaggressively</span><br><span class="line"></span><br><span class="line"># 方法同名混淆后亦同名，方法不同名混淆后亦不同名。不使用该选项时，类成员可被映射到相同的名称。因此该选项会增加些许输出文件的大小。</span><br><span class="line">-useuniqueclassmembernames</span><br><span class="line"></span><br><span class="line"># 指定在混淆的时候不使用大小写混用的类名。默认情况下，混淆后的类名可能同时包含大写字母和小写字母。</span><br><span class="line"># 这样生成jar包并没有什么问题。只有在大小写不敏感的系统（例如windows）上解压时，才会涉及到这个问题。</span><br><span class="line"># 因为大小写不区分，可能会导致部分文件在解压的时候相互覆盖。如果有在windows系统上解压输出包的需求的话，可以加上这个配置。</span><br><span class="line">-dontusemixedcaseclassnames</span><br></pre></td></tr></table></figure><h1 id="Android开发常用不需要混淆指令"><a href="#Android开发常用不需要混淆指令" class="headerlink" title="Android开发常用不需要混淆指令"></a>Android开发常用不需要混淆指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"># Android 四大组件相关</span><br><span class="line">-keep public class * extends android.app.Activity</span><br><span class="line">-keep public class * extends android.app.Appliction</span><br><span class="line">-keep public class * extends android.app.Service</span><br><span class="line">-keep public class * extends android.content.BroadcastReceiver</span><br><span class="line">-keep public class * extends android.content.ContentProvider</span><br><span class="line">-keep public class * extends android.app.backup.BackupAgentHelper</span><br><span class="line">-keep public class * extends android.preference.Preference</span><br><span class="line">-keep public class * extends android.view.View</span><br><span class="line">-keep public class com.android.vending.licensing.ILicensingService</span><br><span class="line"></span><br><span class="line"># Fragment</span><br><span class="line">-keep public class * extends android.support.v4.app.Fragment</span><br><span class="line">-keep public class * extends android.app.Fragment</span><br><span class="line"></span><br><span class="line"># 保留support下的所有类及其内部类</span><br><span class="line">-keep class android.support.** &#123; *; &#125;</span><br><span class="line">-keep interface android.support.** &#123; *; &#125;</span><br><span class="line">-dontwarn android.support.**</span><br><span class="line"></span><br><span class="line"># 保留 R 下面的资源</span><br><span class="line">-keep class **.R$* &#123;*;&#125;</span><br><span class="line">-keepclassmembers class **.R$* &#123;</span><br><span class="line">    public static &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留本地 native 方法不被混淆</span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留在 Activity 中的方法参数是 view 的方法，</span><br><span class="line"># 这样以来我们在 layout 中写的 onClick 就不会被影响</span><br><span class="line">-keepclassmembers class * extends android.app.Activity&#123;</span><br><span class="line">    public void *(android.view.View);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留枚举类不被混淆</span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    public static **[] values();</span><br><span class="line">    public static ** valueOf(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留自定义控件（继承自View）不被混淆</span><br><span class="line">-keep public class * extends android.view.View&#123;</span><br><span class="line">    *** get*();</span><br><span class="line">    void set*(***);</span><br><span class="line">    public &lt;init&gt;(android.content.Context);</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留 Parcelable 序列化类不被混淆</span><br><span class="line">-keep class * implements android.os.Parcelable &#123;</span><br><span class="line">  public static final android.os.Parcelable$Creator *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留 Serializable 序列化的类不被混淆</span><br><span class="line">-keepclassmembers class * implements java.io.Serializable &#123;</span><br><span class="line">    static final long serialVersionUID;</span><br><span class="line">    private static final java.io.ObjectStreamField[] serialPersistentFields;</span><br><span class="line">    private void writeObject(java.io.ObjectOutputStream);</span><br><span class="line">    private void readObject(java.io.ObjectInputStream);</span><br><span class="line">    java.lang.Object writeReplace();</span><br><span class="line">    java.lang.Object readResolve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 对于带有回调函数的 onXXEvent 的，不能被混淆</span><br><span class="line">-keepclassmembers class * &#123;</span><br><span class="line">    void *(**On*Event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># WebView，没有使用 WebView 请注释掉</span><br><span class="line">-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;</span><br><span class="line">   public *;</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class="line">    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);</span><br><span class="line">    public boolean *(android.webkit.WebView, java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class="line">    public void *(android.webkit.webView, jav.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆使用了 @Keep 注解相关的类</span><br><span class="line">-keep class android.support.annotation.Keep</span><br><span class="line"></span><br><span class="line">-keep @android.support.annotation.Keep class * &#123;*;&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;init&gt;(...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 删除代码中 Log 相关的代码，如果删除了一些预料之外的代码，很容易就会导致代码崩溃，谨慎使用</span><br><span class="line">-assumenosideeffects class android.util.Log&#123;</span><br><span class="line">   public static boolean isLoggable(java.lang.String,int);</span><br><span class="line">   public static int v(...);</span><br><span class="line">   public static int i(...);</span><br><span class="line">   public static int w(...);</span><br><span class="line">   public static int d(...);</span><br><span class="line">   public static int e(...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 删除自定义Log工具</span><br><span class="line">-assumenosideeffects class com.example.Log.Logger&#123;</span><br><span class="line">   public static int v(...);</span><br><span class="line">   public static int i(...);</span><br><span class="line">   public static int w(...);</span><br><span class="line">   public static int d(...);</span><br><span class="line">   public static int e(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">-ignorewarnings                     # 忽略警告，避免打包时某些警告出现  </span><br><span class="line">-optimizationpasses 5               # 指定代码的压缩级别  </span><br><span class="line">-dontusemixedcaseclassnames         # 是否使用大小写混合  </span><br><span class="line">-dontskipnonpubliclibraryclasses    # 是否混淆第三方jar  </span><br><span class="line">-dontpreverify                      # 混淆时是否做预校验  </span><br><span class="line">-verbose                            # 混淆时是否记录日志  </span><br><span class="line">-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*        # 混淆时所采用的算法  </span><br><span class="line">  </span><br><span class="line">-libraryjars   libs/treecore.jar  </span><br><span class="line">  </span><br><span class="line">-dontwarn android.support.v4.**     #缺省proguard 会检查每一个引用是否正确，但是第三方库里面往往有些不会用到的类，没有正确引用。如果不配置的话，系统就会报错。  </span><br><span class="line">-dontwarn android.os.**  </span><br><span class="line">-keep class android.support.v4.** &#123; *; &#125;        # 保持哪些类不被混淆  </span><br><span class="line">-keep class com.baidu.** &#123; *; &#125;    </span><br><span class="line">-keep class vi.com.gdi.bgl.android.**&#123;*;&#125;  </span><br><span class="line">-keep class android.os.**&#123;*;&#125;  </span><br><span class="line">  </span><br><span class="line">-keep interface android.support.v4.app.** &#123; *; &#125;    </span><br><span class="line">-keep public class * extends android.support.v4.**    </span><br><span class="line">-keep public class * extends android.app.Fragment  </span><br><span class="line">  </span><br><span class="line">-keep public class * extends android.app.Activity  </span><br><span class="line">-keep public class * extends android.app.Application  </span><br><span class="line">-keep public class * extends android.app.Service  </span><br><span class="line">-keep public class * extends android.content.BroadcastReceiver  </span><br><span class="line">-keep public class * extends android.content.ContentProvider  </span><br><span class="line">-keep public class * extends android.support.v4.widget  </span><br><span class="line">-keep public class * extends com.sqlcrypt.database  </span><br><span class="line">-keep public class * extends com.sqlcrypt.database.sqlite  </span><br><span class="line">-keep public class * extends com.treecore.**  </span><br><span class="line">-keep public class * extends de.greenrobot.dao.**  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">-keepclasseswithmembernames class * &#123;       # 保持 native 方法不被混淆  </span><br><span class="line">    native &lt;methods&gt;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">-keepclasseswithmembers class * &#123;            # 保持自定义控件类不被混淆  </span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">-keepclasseswithmembers class * &#123;            # 保持自定义控件类不被混淆  </span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">-keepclassmembers class * extends android.app.Activity &#123; //保持类成员  </span><br><span class="line">   public void *(android.view.View);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">-keepclassmembers enum * &#123;                  # 保持枚举 enum 类不被混淆  </span><br><span class="line">    public static **[] values();  </span><br><span class="line">    public static ** valueOf(java.lang.String);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">-keep class * implements android.os.Parcelable &#123;    # 保持 Parcelable 不被混淆  </span><br><span class="line">  public static final android.os.Parcelable$Creator *;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">-keep class MyClass;                              # 保持自己定义的类不被混淆</span><br></pre></td></tr></table></figure><h1 id="资源混淆"><a href="#资源混淆" class="headerlink" title="资源混淆"></a>资源混淆</h1><p><code>AndResGuard</code>是一个帮助你缩小APK大小的工具，他的原理类似Java Proguard，但是只针对资源。他会将原本冗长的资源路径变短，例如将<code>res/drawable/wechat变为r/d/a</code>。</p><p><code>AndResGuard</code>不涉及编译过程，只需输入一个apk(无论签名与否，<code>debug</code>版，<code>release</code>版均可，在处理过程中会直接将原签名删除)，可得到一个实现资源混淆后的apk(若在配置文件中输入签名信息，可自动重签名并对齐，得到可直接发布的apk)以及对应资源ID的mapping文件。</p><p><a href="https://github.com/shwenzhang/AndResGuard/blob/master/README.zh-cn.md" target="_blank" rel="noopener">github</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=208135658&amp;idx=1&amp;sn=ac9bd6b4927e9e82f9fa14e396183a8f#rd" target="_blank" rel="noopener">原理</a></p><h1 id="丧心病狂的混淆操作"><a href="#丧心病狂的混淆操作" class="headerlink" title="丧心病狂的混淆操作"></a>丧心病狂的混淆操作</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.jianshu.com/p/60e82aafcfd0" target="_blank" rel="noopener">https://www.jianshu.com/p/60e82aafcfd0</a></p><p><a href="https://rockycoder.cn/android/2018/03/15/Android-proguard-rules.html" target="_blank" rel="noopener">https://rockycoder.cn/android/2018/03/15/Android-proguard-rules.html</a></p><p><a href="https://juejin.im/post/5ae7edc7f265da0b776f7a95" target="_blank" rel="noopener">https://juejin.im/post/5ae7edc7f265da0b776f7a95</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;混淆的作用及好处&quot;&gt;&lt;a href=&quot;#混淆的作用及好处&quot; class=&quot;headerlink&quot; title=&quot;混淆的作用及好处&quot;&gt;&lt;/a&gt;混淆的作用及好处&lt;/h1&gt;&lt;p&gt;混淆属于整个应用程序开发生命周期偏后期阶段的技术了，所以要考虑应用的安全性及性能的问题，混淆就是为了这种需求产生的一种技术，简单说，混淆就是将关键字和关键类名，修改为无意义的字符以起到迷惑试图反编译去查看源码的人。在一定程度上能过滤掉一些入门反编译者，混淆是保障Android程序源码安全的第一道门槛，&lt;br&gt;以上谈了下混淆的作用，而混淆的好处除了能保证源码安全性之外就大概是通过修改关键字为无意义字符串，或者剔除某些辅助类，比如Log，从而减少文件大小。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Mac应用程序无法打开或文件损坏的处理方法</title>
    <link href="http://hackycy.github.io/2019/04/12/Mac%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E6%88%96%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>http://hackycy.github.io/2019/04/12/Mac应用程序无法打开或文件损坏的处理方法/</id>
    <published>2019-04-12T08:23:11.000Z</published>
    <updated>2019-04-12T08:37:18.235Z</updated>
    
    <content type="html"><![CDATA[<p>今天安装一些软件时遇到了 <strong>无法打开或文件损坏的Mac应用程序</strong>，所以查了一下解决办法，记录在了博客下。</p><p>本人机器系统版本<code>Mojave 10.14.4</code></p><a id="more"></a><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>大多数用户在安装 Mac 应用时，经常会遇到提示 “ XXX.app 已损坏，打不开。您应该将它移到废纸篓 ” 或 “ 打不开 XXX.app，因为它来自身份不明的开发者 ” ，如下图所示：</p><p><img src="f1.png" alt=""></p><p><img src="f2.png" alt=""></p><p><strong>1. 打开系统偏好设置界面，进入安全性与隐私</strong></p><p><img src="f3.jpeg" alt=""></p><p><strong>2. 点按左下角的锁头图标，解锁更改权限</strong></p><p><strong>3. 将允许从以下位置下载的应用，更改为 “ 任何来源 ” ，然后再打开应用即可</strong></p><p><img src="f4.jpeg" alt=""></p><p>若没有“任何来源”这个选项（<code>macOS Sierra 10.12</code>及以上的用户可能会遇到），按以下步骤执行：<br>打开终端<code>（Terminal.app）</code><br>拷贝粘贴<code>sudo spctl --master-disable</code>，按回车键</p><p>输入你的账户密码，按回车键确认执行（该密码不会显示，直接输入即可）</p><p><img src="f5.png" alt=""></p><p><img src="f6.png" alt=""></p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>如安装应用时，出现 “ 打不开 XXX.app，因为它来自身份不明的开发者 ” ，并提示你的软件在什么位置什么时间下载了磁盘影像。如图所示：</p><p><img src="f7.png" alt=""></p><p><strong>1、将软件放入“应用程序”后，点击软件 右键-打开 ，如图所示：</strong></p><p><img src="f8.png" alt=""></p><p><strong>2、弹出以下对话框后，你打开即可。</strong></p><p><img src="f9.png" alt=""></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.puasu.com/article/share/201805/10.html" target="_blank" rel="noopener">http://www.puasu.com/article/share/201805/10.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天安装一些软件时遇到了 &lt;strong&gt;无法打开或文件损坏的Mac应用程序&lt;/strong&gt;，所以查了一下解决办法，记录在了博客下。&lt;/p&gt;
&lt;p&gt;本人机器系统版本&lt;code&gt;Mojave 10.14.4&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://hackycy.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="Mac" scheme="http://hackycy.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>移动端前端开发之viewport</title>
    <link href="http://hackycy.github.io/2019/04/11/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B9%8Bviewport/"/>
    <id>http://hackycy.github.io/2019/04/11/移动端前端开发之viewport/</id>
    <published>2019-04-11T09:13:02.000Z</published>
    <updated>2019-04-12T17:22:36.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>浏览器的<code>viewport</code>是可以看到Web内容的窗口区域，通常与渲染出的页面的大小不同，这种情况下，浏览器会提供滚动条以滚动访问所有内容。</p><p>窄屏幕设备（如移动设备）在一个虚拟窗口或视口中渲染页面，这个窗口或视口通常比屏幕宽；然后缩小渲染的结果，以便在一屏内显示所有内容。然后用户可以移动、缩放以查看页面的不同区域。例如，如果移动屏幕的宽度为640px，则可能会用980px的虚拟视口渲染页面，然后缩小页面以适应640px的窗口大小。</p><p>这样做是因为许多页面没有做移动端优化，在小窗口渲染时会乱掉（或看起来乱）。所以，这种虚拟视口是一种让未做移动端优化的网站在窄屏设备上看起来更好的办法。</p><a id="more"></a><h1 id="移动浏览器的问题"><a href="#移动浏览器的问题" class="headerlink" title="移动浏览器的问题"></a>移动浏览器的问题</h1><p>当我们将移​​动浏览器与桌面浏览器进行比较时，最明显的区别是屏幕尺寸。移动浏览器显示的桌面优化网站显着少于桌面浏览器; 通过缩小直到文本不可读的小，或者只显示适合屏幕的网站的一小部分。</p><p>移动屏幕远小于桌面屏幕; 考虑最大宽度为400px，有时候要少得多。（有些手机报告的宽度较大，但它们正在撒谎 - 或者至少给我们无用的信息。）</p><p>平板电脑设备的中间层，如iPad或传闻中的基于HP webOS的平板设备，将弥合桌面和移动设备之间的差距，但这不会改变根本问题。网站也必须在移动设备上运行，因此我们必须让它们在小屏幕上显示。</p><p>最重要的问题集中在CSS上，尤其是视口的尺寸。如果我们一对一地复制桌面模型，我们的CSS就会开始惨不忍睹。</p><p>让我们回到我们的侧边栏吧width: 10%。如果移动浏览器与桌面浏览器完全相同，那么它们最多只能生成40px宽的元素，而且这个元素太窄了。你的液体布局看起来会非常可怕。</p><p>解决问题的一种方法是为移动浏览器构建一个特殊网站。即使除了你是否应该这样做的根本问题之外，实际的问题是只有极少数的网站所有者被充分利用以满足移动设备的需求。</p><p>移动浏览器供应商希望为他们的客户提供最佳体验，现在这意味着“尽可能像桌面一样。”因此需要一些技巧。</p><h1 id="设备像素和CSS像素"><a href="#设备像素和CSS像素" class="headerlink" title="设备像素和CSS像素"></a>设备像素和CSS像素</h1><p>讲解viewport视口前先来了解一下这两个概念，这两个概念虽然都是说像素，但是此像素非彼像素。</p><h2 id="设备像素"><a href="#设备像素" class="headerlink" title="设备像素"></a>设备像素</h2><p><strong>设备像素</strong>（device pixel）是物理概念，指的是设备中使用的物理像素。<br>例如iPhone中的分辨率为<code>640px * 1136px</code></p><h2 id="CSS像素"><a href="#CSS像素" class="headerlink" title="CSS像素"></a>CSS像素</h2><p><strong>CSS像素</strong>（css pixel）是Web编程概念，指的是CSS样式代码中使用的逻辑像素。</p><p>在CSS规范中，长度单位分为两类：绝对（absolute）单位和相对（relative）单位。而px是一个相对单位，相对于设备像素。</p><p>比如iPhone5使用的是Retina视网膜屏幕，使用<code>2px * 2px</code>的设备像素代表<code>1px * 1px</code>的CSS像素。所以设备像素为<code>640px * 1136px</code>，而CSS像素为<code>320px * 568px</code>。</p><blockquote><p>设备独立像素（Device Independent Pixel）简写DIP</p></blockquote><p>设备独立像素也叫 <strong>密度无关像素</strong> ，可以认为是计算机坐标系统中的一个点，这个点表示一个可以由程序使用并控制的虚拟像素，可以由相关系统转换为物理像素。设备独立像素是一个整体概念，包括了css像素，比如:css像素，只是在android 机中，css像素不叫 “css像素了”，而叫“设备独立像素”。</p><blockquote><p>CSS像素 =设备独立像素 = 逻辑像素</p></blockquote><h2 id="设备像素与CSS像素的关系"><a href="#设备像素与CSS像素的关系" class="headerlink" title="设备像素与CSS像素的关系"></a>设备像素与CSS像素的关系</h2><p>了解它们间的关系时，先来了解两个概念：<code>ppi</code>和<code>dpr</code></p><blockquote><p>PPI像素密度(pixel per inch) | DPR设备像素比(device pixel ratio)</p></blockquote><h3 id="PPI"><a href="#PPI" class="headerlink" title="PPI"></a>PPI</h3><p><code>ppi</code>:表示每英寸所拥有的像素数目，数值越高，代表显示屏能够以越高的密度显示图像。即每英寸像素取值，更确切的说法应该是像素密度，也就是衡量单位物理面积内拥有像素值的情况。</p><p><code>ppi</code>的计算公式可以查阅资料<a href="https://zh.wikipedia.org/wiki/%E6%AF%8F%E8%8B%B1%E5%AF%B8%E5%83%8F%E7%B4%A0" target="_blank" rel="noopener">ppi计算公式</a>。</p><p><img src="ppicalc.png" alt=""></p><p>来算一下数学</p><p><img src="calclizi.png" alt=""></p><p>图中以屏幕尺寸为4寸的<code>iPhone 5s</code>为例，分辨率为<code>1136x640</code>，代入公式像素密度为<code>326PPI</code>。计算结果会有出入。</p><h3 id="DPR"><a href="#DPR" class="headerlink" title="DPR"></a>DPR</h3><p>设备像素比（DPR）定义了设备像素和设备独立像素的转换关系，即一个设备像素对应多少个设备独立像素（CSS像素）。</p><p>计算公式为：<code>设备的水平物理像素 / 设备PPI</code>。</p><p>在一台移动终端中，设备像素的大小是固定的，不可变的。但是<code>设备独立像素dip</code>是可以被拉长或压缩的。</p><p><img src="whatisdip.png" alt=""></p><p>例如iPhone5s中使用的是Retina视网膜屏幕，即PPI超过300的都叫做超高密度屏幕，只不过苹果公司给了换了个高大上的名字：Retina视网膜屏幕。</p><p>但是在普通屏幕下1个设备像素等于一个CSS像素的设备已经很少了，比如 Iphone 5s 设备像素比为2，Iphone 6s 设备像素比为3。至于安卓机中的设备像素比就更多了，有1.3、1.5、2、3等等。</p><p><strong>如何理解DPR</strong></p><p>设备像素比(dpr) 是指在移动开发中1个css像素占用多少设备像素，如2代表1个css像素用2x2个设备像素来绘制。</p><p>设备像素比(dpr)，公式为<code>1px = (dpr)^2 * 1dp</code>，可以理解为1px由多少个设备像素组成；</p><h3 id="设备像素和独立设备像素的关系"><a href="#设备像素和独立设备像素的关系" class="headerlink" title="设备像素和独立设备像素的关系"></a>设备像素和独立设备像素的关系</h3><p>以iPhone6/7/8为例：</p><blockquote><p>设备宽高为375×667，可以理解为设备独立像素(或css像素)。<br>dpr为2，根据上面的计算公式，其物理像素就应该×2，为750×1334。</p></blockquote><p><img src="csspixel.png" alt=""></p><p>上图中可以看出，对于这样的css样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 2<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 2<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>在不同的屏幕上(普通屏幕 vs retina屏幕)，css像素所呈现的大小(物理尺寸)是一致的，不同的是1个css像素所对应的物理像素个数是不一致的。</p><p>在普通屏幕下，1个css像素 对应 1个物理像素(1:1)。 在retina 屏幕下，1个css像素对应 4个物理像素(1:4)。</p><h2 id="window-devicePixelRatio"><a href="#window-devicePixelRatio" class="headerlink" title="window.devicePixelRatio"></a>window.devicePixelRatio</h2><p><code>window.devicePixelRatio</code>是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例。<br>公式表示就是：<code>window.devicePixelRatio = 物理像素 / dips</code>。</p><p>dip或dp,（device independent pixels，设备独立像素）与屏幕密度有关。dip可以用来辅助区分视网膜设备还是非视网膜设备。</p><blockquote><p>DPI等同于PPI，<a href="http://mitblog.pixnet.net/blog/post/37708222-%E5%83%8F%E7%B4%A0%28pixel%29%E8%88%87%E8%A7%A3%E6%9E%90%E5%BA%A6%28dpi%29%E3%80%81dpi-%E8%A8%88%E7%AE%97%E3%80%81dpi-pixel%E3%80%81dp" target="_blank" rel="noopener">链接</a></p></blockquote><p>所有非视网膜屏幕的iphone在垂直的时候，宽度为320物理像素。当你使用<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code>的时候，会设置视窗布局宽度（不同于视觉区域宽度，不放大显示情况下，两者大小一致，见下图）为320px, 于是，页面很自然地覆盖在屏幕上。</p><p>这样，非视网膜屏幕的iphone上，屏幕物理像素320像素，独立像素也是320像素，因此，window.devicePixelRatio等于1.</p><p>而对于视网膜屏幕的iphone，如iphone4s, 纵向显示的时候，屏幕物理像素640像素。同样，当用户设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code>的时候，其视区宽度并不是640像素，而是320像素，这是为了有更好的阅读体验 – 更合适的文字大小。</p><p>这样，在视网膜屏幕的iphone上，屏幕物理像素640像素，独立像素还是320像素，因此，<code>window.devicePixelRatio</code>等于<code>2</code>.</p><blockquote><p>在css中，可以通过-webkit-device-pixel-ratio，webkit-min-device-pixel-ratio和-webkit-max-device-pixel-ratio进行媒体查询，对不同dpr的设备，做一些样式适配(这里只针对webkit内核的浏览器和webview)。</p></blockquote><p><strong>兼容性</strong></p><p>来自<a href="https://caniuse.com/#search=window.devicePixelRatio" target="_blank" rel="noopener">caniuse.com</a></p><p><img src="caniusedevicepixelratio.png" alt=""></p><p>喜忧参半。好的是Safari, Android WebKit, Chrome 22+(Android), Opera Mobile, BlackBerry WebKit, QQ, Palm WebKit, 及Dolfin都能正确实现该属性。</p><p>当然，大部分这些浏览器仍然运行在<code>devicePixelRatio</code>值应该为<code>1</code>的系统上，当它们移动到视网膜类似设备时候，可能就会遇到问题。</p><blockquote><p>注意：你可以为这个 window.devicePixelRatio 重新赋值，但并不会对最终的显示造成任何的影响。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.devicePixelRatio = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.devicePixelRatio); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><h2 id="设计师和前端工程师之间如何协同"><a href="#设计师和前端工程师之间如何协同" class="headerlink" title="设计师和前端工程师之间如何协同"></a>设计师和前端工程师之间如何协同</h2><p>一般由设计师按照设备像素(device pixel)为单位制作设计稿。<br>前端工程师，参照相关的设备像素比(device pixel ratio)，进行换算以及编码。</p><h1 id="px、dp、dpi、sp"><a href="#px、dp、dpi、sp" class="headerlink" title="px、dp、dpi、sp"></a>px、dp、dpi、sp</h1><p>px（ pixel） 像素，可以简单的理解为一个点或方块，用以颜色的显示（单位），一般指印刷品或屏幕设置设备的颜色显示定义。dip（device independent pixels）设备独立像素.<br>不同设备有不同的显示效果,这个和设备硬件有关，多为了支持WVGA、HVGA和QVGA 使用，不依赖像素。 </p><p>dpi（dots per inch）分辨率、解析度，每英寸像素数，多用于屏幕显示领域。类似的有ppi（Pixels per inch）多用于印刷领域。分辨率越高，则每英寸内包含的像素数越大。</p><p>sp (scaled pixels）像素（图像）缩放，在 常规情况下，尺寸大的图像（像素数量或密度高）缩放为小图像（像素数量或密度小）时清晰度不变或清晰（原图模糊时），逆向则反之。但可以通过像素插值/超样采集等技术实现相对清晰（计算轮廓边缘模拟出相似或智能分析增加清晰度、圆润感）。</p><p>px（像素）和dpi（分辨率）的关系，分辨率表示每英寸内包含多少个像素，比如分辨率为72dpi时，即表明每英寸内有72个像素。在屏幕显示时像素和屏幕上的点可以是点对点或非点对点。</p><p>sp（像素缩放）和px、dpi之间没有直接换算关系，比如一个原始图像为100×100px时，把它缩放为60×60或40×80（等比例缩放或自由缩放）相关的像素排列和原始颜色会打乱，减低或保持包含颜色数量（在常规放大时不会增加包含的颜色数量），边缘颜色数量会减少。</p><h1 id="viewport视口"><a href="#viewport视口" class="headerlink" title="viewport视口"></a>viewport视口</h1><p>因为手机屏幕比较小，所以视口太窄而无法作为css布局的基础，在移动端可拆分为三种视口，一种为可视视口(visual viewport)、布局视口(layout viewport)和理想视口(ideal viewport)。</p><p>先来认识一下可视视口和布局视口</p><h2 id="可视视口"><a href="#可视视口" class="headerlink" title="可视视口"></a>可视视口</h2><p>可视视口就是目前在屏幕上显示页面的一部分。用户可以滚动以更改用户自己所看到的部分，或者缩放以更改可视窗口的大小。</p><p><img src="visualviewport.jpg" alt=""></p><p>但是，CSS布局（尤其是百分比宽度）是相对于布局视口计算的， 布局视口比视觉视口宽得多。</p><p>因此，<code>&lt;html&gt;</code>元素最初采用布局视口的宽度，并且您的CSS被解释为屏幕明显比手机屏幕宽。这可确保您网站的布局与桌面浏览器上的布局相同。</p><p>布局视口有多宽？这与浏览器不同。<code>Safari iPhone</code>使用<code>980px</code>，<code>Opera</code>使用<code>850px</code>，<code>Android WebKit</code>使用<code>800px</code>和<code>IE</code>使用<code>974px</code>。</p><p><strong>视觉视口和缩放比例的关系为：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前缩放值 = 理想视口宽度  / 视觉视口宽度</span><br></pre></td></tr></table></figure><p>所以，当用户放大时，视觉视口将会变小，CSS 像素将跨越更多的物理像素。</p><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>两个视口都以CSS像素为单位进行测量。但是，当视觉视口尺寸随着缩放而变化时（如果放大，屏幕上的CSS像素较少），布局视口尺寸保持不变。（如果他们没有，您的页面将不断重排，因为重新计算百分比宽度。）</p><h2 id="布局视口"><a href="#布局视口" class="headerlink" title="布局视口"></a>布局视口</h2><p>一般移动设备的浏览器都默认设置了一个 viewport 元标签，定义一个虚拟的布局视口（layout viewport），用于解决早期的页面在手机上显示的问题。iOS, Android 基本都将这个视口分辨率设置为 980px，所以 PC 上的网页基本能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p><p><strong>完全缩小的情况下：visual viewport = layout viewport</strong></p><p><img src="vv=lv.jpg" alt=""></p><p>浏览器选择了布局视口的尺寸，使其在完全缩小模式下完全覆盖屏幕（因此等于可视视口）.</p><p><strong>不完全缩小的情况下：layout viewport &gt; visual viewport</strong></p><p><img src="lv&gt;vv.jpg" alt=""></p><p>布局视口的宽度和高度等于在不完全缩小模式下可以在屏幕上显示的任何宽度和高度。当用户放大这些尺寸时保持不变。</p><p>在放大和缩小的过程中，<code>visual viewport</code>和<code>layout viewport</code>的宽，高都没发生任何的变化,变化的仅仅就像是用户拿着这个<code>visual viewport</code>去远离或者靠近<code>layout viewport</code>，在远离或者靠近的过程中，就会呈现出缩放的效果来。</p><blockquote><p>布局视口的宽度/高度可以通过<code>document.documentElement.clientWidth / Height</code>获取。</p></blockquote><h2 id="布局视口和可视视口的联系"><a href="#布局视口和可视视口的联系" class="headerlink" title="布局视口和可视视口的联系"></a>布局视口和可视视口的联系</h2><p>可以把<code>layout viewport</code>理解为一张完全遮住并且不能更边大小的白纸，把<code>visual viewport</code>理解为一个有边框的透视器，你可以通过这个透视器来查看这张白纸的内容。通过这个透视器你可以一点点的看到白纸部分内容，这里所能看到的就是<code>visual viewport</code>。你也可以靠近或者远离的方式来透视白纸（白纸静止不动），你看的内容可以变多或者变少，但是白纸<code>layout viewport</code>自身的大小和形状是不会发生改变的。</p><h2 id="理想视口"><a href="#理想视口" class="headerlink" title="理想视口"></a>理想视口</h2><p>布局视口的默认宽度并不是一个理想的宽度，于是 Apple 和其他浏览器厂商引入了理想视口的概念，它对设备而言是最理想的布局视口尺寸。显示在理想视口中的网站具有最理想的宽度，用户无需进行缩放。</p><p>理想视口的值其实就是屏幕分辨率的值，它对应的像素叫做设备逻辑像素（device independent pixel, dip）。dip 和设备的物理像素无关，一个 dip 在任意像素密度的设备屏幕上都占据相同的空间。如果用户没有进行缩放，那么一个 CSS 像素就等于一个 dip。</p><p>用下面的方法可以使布局视口与理想视口的宽度一致：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="视口的设置"><a href="#视口的设置" class="headerlink" title="视口的设置"></a>视口的设置</h2><p>移动设备默认的viewport是layout viewport，也就是那个比屏幕要宽的viewport，但在进行移动设备网站的开发时，我们需要的是ideal viewport。那么怎么才能得到ideal viewport呢？这就该轮到meta标签出场了。</p><p>我们可以使用视口元标签（viewport meta 标签）来进行布局视口的设置。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在苹果的规范中，meta viewport 有6个属性(暂且把content中的那些东西称为一个个属性和值)，如下：</p><table><thead><tr><th>属性</th><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>正整数或device-width</td><td>定义视口的宽度，单位为像素</td></tr><tr><td>height</td><td>正整数或device-height</td><td>定义视口的高度，单位为像素，一般不用</td></tr><tr><td>initial-scale</td><td>[0.0-10.0]</td><td>定义初始缩放值</td></tr><tr><td>minimum-scale</td><td>[0.0-10.0]</td><td>定义放大最大比例，它必须小于或等于maximum-scale设置</td></tr><tr><td>maximum-scale</td><td>[0.0-10.0]</td><td>定义缩小最小比例，它必须大于或等于minimum-scale设置</td></tr><tr><td>user-scalable</td><td>yes / no</td><td>定义是否允许用户手动缩放页面，默认值 yes</td></tr></tbody></table><p><strong>有几点需要注意：</strong></p><ul><li>viewport 标签只对移动端浏览器有效，对 PC 端浏览器是无效的</li><li>当缩放比例为 100% 时，dip 宽度 = CSS 像素宽度 = 理想视口的宽度 = 布局视口的宽度</li><li>单独设置 initial-scale 或 width 都会有兼容性问题，所以设置布局视口为理想视口的最佳方法是同时设置这两个属性</li><li>即使设置了 user-scalable = no，在 Android Chrome 浏览器中也可以强制启用手动缩放</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://segmentfault.com/a/1190000015884091" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015884091</a></p><p><a href="https://www.quirksmode.org/mobile/viewports.html" target="_blank" rel="noopener">https://www.quirksmode.org/mobile/viewports.html</a></p><p><a href="https://www.quirksmode.org/mobile/viewports2.html" target="_blank" rel="noopener">https://www.quirksmode.org/mobile/viewports2.html</a></p><p><a href="https://www.quirksmode.org/mobile/metaviewport/" target="_blank" rel="noopener">https://www.quirksmode.org/mobile/metaviewport/</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag</a></p><p><a href="https://www.jianshu.com/p/af6dad66e49a" target="_blank" rel="noopener">https://www.jianshu.com/p/af6dad66e49a</a></p><p><a href="http://viewportsizes.com" target="_blank" rel="noopener">http://viewportsizes.com</a></p><p><a href="https://juejin.im/post/5bb6c62be51d450e47142c60" target="_blank" rel="noopener">https://juejin.im/post/5bb6c62be51d450e47142c60</a></p><p><a href="https://www.jianshu.com/p/3d28f4959c5a" target="_blank" rel="noopener">https://www.jianshu.com/p/3d28f4959c5a</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;浏览器的&lt;code&gt;viewport&lt;/code&gt;是可以看到Web内容的窗口区域，通常与渲染出的页面的大小不同，这种情况下，浏览器会提供滚动条以滚动访问所有内容。&lt;/p&gt;
&lt;p&gt;窄屏幕设备（如移动设备）在一个虚拟窗口或视口中渲染页面，这个窗口或视口通常比屏幕宽；然后缩小渲染的结果，以便在一屏内显示所有内容。然后用户可以移动、缩放以查看页面的不同区域。例如，如果移动屏幕的宽度为640px，则可能会用980px的虚拟视口渲染页面，然后缩小页面以适应640px的窗口大小。&lt;/p&gt;
&lt;p&gt;这样做是因为许多页面没有做移动端优化，在小窗口渲染时会乱掉（或看起来乱）。所以，这种虚拟视口是一种让未做移动端优化的网站在窄屏设备上看起来更好的办法。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://hackycy.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://hackycy.github.io/tags/HTML/"/>
    
      <category term="移动端适配" scheme="http://hackycy.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android build.gradle配置详解</title>
    <link href="http://hackycy.github.io/2019/04/10/Android-build-gradle%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://hackycy.github.io/2019/04/10/Android-build-gradle配置详解/</id>
    <published>2019-04-10T04:21:25.000Z</published>
    <updated>2019-04-10T06:41:38.111Z</updated>
    
    <content type="html"><![CDATA[<p>AS是采用gradle来进行构建项目，而gradle是基于groovy语言。这里了解一下项目中gradle的详细配置。</p><a id="more"></a><p><img src="project.png" alt="一个最简单的项目结构"></p><h1 id="Project的build-gradle文件"><a href="#Project的build-gradle文件" class="headerlink" title="Project的build.gradle文件"></a>Project的build.gradle文件</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()<span class="comment">//从Android Studio3.0后新增了google()配置，可以引用google上的开源项</span></span><br><span class="line">        jcenter()<span class="comment">//是一个类似于github的代码托管仓库，声明了jcenter()配置，可以轻松引用 jcenter上的开源项目</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.3.2'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;<span class="comment">//这里是项目本身需要的依赖，比如项目所需的maven库</span></span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行gradle clean时，执行此处定义的task任务。</span></span><br><span class="line"><span class="comment">// 该任务继承自Delete，删除根目录中的build目录。</span></span><br><span class="line"><span class="comment">// 相当于执行Delete.delete(rootProject.buildDir)。</span></span><br><span class="line"><span class="comment">// gradle使用groovy语言，调用method时可以不用加（）。</span></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>buildscript{}</code>闭包是gradle脚本执行所需要的依赖，分别是对应的maven库和插件<ul><li><code>repositories{}</code>闭包：配置远程仓库,该闭包中声明了jcenter()和google()的配置，其中jcenter是一个代码托管仓库，上面托管了很多Android开源项目，在这里配置了jcenter后我们可以在项目中方便引用jcenter上的开源项目，从Android Studio3.0后新增了google()配置，可以引用google上的开源项目</li><li><code>dependencies{}</code>闭包：配置构建工具,该闭包使用classpath声明了一个Gradle插件，由于Gradle并不只是用来构建Android项目，因此此处引入相关插件来构建Android项目，其中’3.0.0’为该插件的版本号，可以根据最新的版本号来调整</li></ul></li><li><code>allprojects{}</code>闭包是项目本身需要的依赖，比如项目所需要的maven库</li><li><code>task clean(type: Delete)</code>是运行gradle clean时，执行此处定义的task任务，该任务继承自Delete，删除根目录中的build目录。其中buildscript包含repositories闭包和dependencies闭包</li></ul><h1 id="Module的build-gradle文件"><a href="#Module的build-gradle文件" class="headerlink" title="Module的build.gradle文件"></a>Module的build.gradle文件</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"cn.net.sweetlover.myapplication"</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:28.0.0'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.1.3'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.2'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="apply-plugin"><a href="#apply-plugin" class="headerlink" title="apply plugin"></a>apply plugin</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明是Android程序，</span></span><br><span class="line"><span class="comment">//com.android.application 表示这是一个应用程序模块</span></span><br><span class="line"><span class="comment">//com.android.library 标识这是一个库模块</span></span><br><span class="line"><span class="comment">//而这区别：前者可以直接运行，后着是依附别的应用程序运行</span></span><br><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br></pre></td></tr></table></figure><p>apply plugin表示应用了一个插件，一般有两种值可选：</p><ul><li><code>com.android.application</code>，表示该模块为应用程序模块，可以直接运行，打包得到的是<code>apk</code>文件</li><li><code>com.android.library</code>，表示该模块为库模块，只能作为代码库依附与别的应用程序模块来运行，打包得到的是<code>aar</code>文件</li></ul><h2 id="android-闭包"><a href="#android-闭包" class="headerlink" title="android{}闭包"></a>android{}闭包</h2><p>这个闭包主要为了配置项目构建的各种属性：</p><h3 id="signingConfigs"><a href="#signingConfigs" class="headerlink" title="signingConfigs{}"></a>signingConfigs{}</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;<span class="comment">// 自动化打包配置</span></span><br><span class="line">        release &#123;<span class="comment">// 线上环境</span></span><br><span class="line">            keyAlias <span class="string">'test'</span></span><br><span class="line">            keyPassword <span class="string">'123456'</span></span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'test.keystore'</span>)</span><br><span class="line">            storePassword <span class="string">'123456'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;<span class="comment">// 开发环境</span></span><br><span class="line">            keyAlias <span class="string">'test'</span></span><br><span class="line">            keyPassword <span class="string">'123456'</span></span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'test.keystore'</span>)</span><br><span class="line">            storePassword <span class="string">'123456'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以手动添加签名配置，也可以通过<code>Project Structure</code>-&gt;<code>app</code>-&gt;<code>Singing</code>，点击下面<code>+</code>号填入配置信息即可生成代码配置。</p><p><img src="sign_auto.png" alt="AS配置"></p><p>签名配置完成后可以方便带签名打包，在module的<code>Build Variants</code>中有两个<code>Type</code>，分别是<code>debug</code>和<code>release</code>，可以选择任意一个类型进行打包，并且他们会利用各自配置的Key进行打包，执行 Run app或者<code>Build</code>-&gt;<code>Build apk</code>就会自动在<code>module name/app/build/outputs/apk</code>路径下生成Apk文件。另一种打包方式是Build-&gt;Generate Signed APK填写签名信息生成Apk。</p><h3 id="compileSdkVersion"><a href="#compileSdkVersion" class="headerlink" title="compileSdkVersion"></a>compileSdkVersion</h3><p>设置编译时用的Android版本</p><h3 id="buildToolsVersion"><a href="#buildToolsVersion" class="headerlink" title="buildToolsVersion"></a>buildToolsVersion</h3><p>设置编译时使用的构建工具的版本，Android Studio3.0后去除此项配置</p><h3 id="defaultConfig"><a href="#defaultConfig" class="headerlink" title="defaultConfig{}"></a>defaultConfig{}</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"cn.net.sweetlover.myapplication"</span><span class="comment">//项目的包名</span></span><br><span class="line">        minSdkVersion <span class="number">16</span><span class="comment">//项目最低兼容的版本</span></span><br><span class="line">        targetSdkVersion <span class="number">27</span><span class="comment">//项目的目标版本</span></span><br><span class="line">        versionCode <span class="number">1</span><span class="comment">//版本号</span></span><br><span class="line">        versionName <span class="string">"1.0"</span><span class="comment">//版本名称</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span><span class="comment">//表明要使用AndroidJUnitRunner进行单元测试</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><code>applicationId</code>：指定了项目的包名。</li><li><code>minSdkVersion</code>:指定项目最低兼容的版本，如果设备小于这个版本或者大于maxSdkVersion(一般不用)将无法安装这个应用，这里指定为16，表示最低兼容到Android 4.1系统。</li><li><code>targetSdkVersion</code>:指定项目的目标版本，表示在该目标版本上已经做过充分测试，系统会为该应用启动一些对应该目标系统的最新功能特性，Android系统平台的行为变更，只有targetSdkVersion的属性值被设置为大于或等于该系统平台的API版本时，才会生效。例如，若指定targetSdkVersion值为22，则表示该程序最高只在Android5.1版本上做过充分测试，在Android6.0系统上（对应targetSdkVersion为23）拥有的新特性如系统运行时权限等功能就不会被启用。</li><li><code>versionCode</code>:表示版本号，一般每次打包上线时该值只能增加，打包后看不见。</li><li><code>versionName</code>:表示版本名称，展示在应用市场上。</li><li><code>testInstrumentationRunner</code>:<code>&quot;android.support.test.runner.AndroidJUnitRunner&quot;</code>表明要使用<code>AndroidJUnitRunner</code>进行单元测试。</li></ul><h3 id="buildTypes"><a href="#buildTypes" class="headerlink" title="buildTypes{}"></a>buildTypes{}</h3><p>这个闭包主要指定生成安装文件的主要配置，一般包含两个子闭包，一个是<code>debug</code>闭包，用于指定生成测试版安装文件的配置，可以忽略不写；另一个是<code>release</code>闭包，用于指定生成正式版安装文件的配置。两者能配置的参数相同，最大的区别默认属性配置不一样，两种模式支持的属性配置如下图：</p><p><img src="buildtype.png" alt=""></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;<span class="comment">// 生产/测试环境配置</span></span><br><span class="line">        release &#123;<span class="comment">// 生产环境</span></span><br><span class="line">            buildConfigField(<span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"false"</span>)<span class="comment">//配置Log日志</span></span><br><span class="line">            buildConfigField(<span class="string">"String"</span>, <span class="string">"URL_PERFIX"</span>, <span class="string">"\"https://release.cn/\""</span>)<span class="comment">// 配置URL前缀</span></span><br><span class="line">            minifyEnabled <span class="keyword">false</span><span class="comment">//是否对代码进行混淆</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span><span class="comment">//指定混淆的规则文件</span></span><br><span class="line">            signingConfig signingConfigs.release<span class="comment">//设置签名信息</span></span><br><span class="line">            pseudoLocalesEnabled <span class="keyword">false</span><span class="comment">//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多</span></span><br><span class="line">            zipAlignEnabled <span class="keyword">true</span><span class="comment">//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率</span></span><br><span class="line">            applicationIdSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">            versionNameSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;<span class="comment">// 测试环境</span></span><br><span class="line">            buildConfigField(<span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span>)<span class="comment">//配置Log日志</span></span><br><span class="line">            buildConfigField(<span class="string">"String"</span>, <span class="string">"URL_PERFIX"</span>, <span class="string">"\"https://test.com/\""</span>)<span class="comment">// 配置URL前缀</span></span><br><span class="line">            minifyEnabled <span class="keyword">false</span><span class="comment">//是否对代码进行混淆</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span><span class="comment">//指定混淆的规则文件</span></span><br><span class="line">            signingConfig signingConfigs.debug<span class="comment">//设置签名信息</span></span><br><span class="line">            debuggable <span class="keyword">false</span><span class="comment">//是否支持断点调试</span></span><br><span class="line">            jniDebuggable <span class="keyword">false</span><span class="comment">//是否可以调试NDK代码</span></span><br><span class="line">            renderscriptDebuggable <span class="keyword">false</span><span class="comment">//是否开启渲染脚本就是一些c写的渲染方法</span></span><br><span class="line">            zipAlignEnabled <span class="keyword">true</span><span class="comment">//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率</span></span><br><span class="line">            pseudoLocalesEnabled <span class="keyword">false</span><span class="comment">//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多</span></span><br><span class="line">            applicationIdSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">            versionNameSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>release{}</code>闭包和<code>debug{}</code>闭包两者能配置的参数相同，最大的区别默认属性配置不一样：</p><ul><li><code>minifyEnabled</code>:表明是否对代码进行混淆，true表示对代码进行混淆，false表示对代码不进行混淆，默认的是false。</li><li><code>proguardFiles</code>:指定混淆的规则文件，这里指定了<code>proguard-android.txt</code>文件和<code>proguard-rules.pro</code>文件两个文件，<code>proguard-android.txt</code>文件为默认的混淆文件，里面定义了一些通用的混淆规则。<code>proguard-rules.pro</code>文件位于当前项目的根目录下，可以在该文件中定义一些项目特有的混淆规则。</li><li><code>buildConfigField</code>:用于解决Beta版本服务和Release版本服务地址不同或者一些Log打印需求控制的。 <strong>例如：配置buildConfigField(“boolean”, “LOG_DEBUG”, “true”)</strong>，这个方法接收三个非空的参数，第一个：确定值的类型，第二个：指定key的名字，第三个：传值，调用的时候BuildConfig.LOG_DEBUG即可调用。</li><li><code>debuggable</code>:表示是否支持断点调试，release默认为false，debug默认为true。</li><li><code>jniDebuggable</code>:表示是否可以调试NDK代码，使用lldb进行c和c++代码调试，release默认为false。</li><li><code>signingConfig</code>:设置签名信息，通过<code>signingConfigs.release</code>或者<code>signingConfigs.debug</code>，配置相应的签名，但是添加此配置前必须先添加<code>signingConfigs</code>闭包，添加相应的签名信息。</li><li><code>renderscriptDebuggable</code>:表示是否开启渲染脚本就是一些c写的渲染方法，默认为false。</li><li><code>renderscriptOptimLevel</code>:表示渲染等级，默认是3。</li><li><code>pseudoLocalesEnabled</code>:是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多。</li><li><code>applicationIdSuffix</code>:和defaultConfig中配置是一的，这里是在applicationId 中添加了一个后缀，一般使用的不多。</li><li><code>versionNameSuffix</code>:表示添加版本名称的后缀，一般使用的不多。</li><li><code>zipAlignEnabled</code>:表示是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率，release和debug默认都为true。</li></ul><h3 id="sourceSets"><a href="#sourceSets" class="headerlink" title="sourceSets{}"></a>sourceSets{}</h3><p>配置目录指向</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span> &#123;<span class="comment">//目录指向配置</span></span><br><span class="line">        main &#123;</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]<span class="comment">//指定lib库目录</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置 <code>jniLibs.srcDirs = [&#39;libs&#39;]</code>，可以在<code>Android studio</code>的<code>Android</code>视图下生成<code>jniLibs</code>文件夹，可以方便我们存放jar包和库文件，其中<code>Android</code>视图下的<code>jniLibs</code>和<code>project</code>视图下的<code>libs</code>指向同一文件夹（app→libs），如下图所示：</p><p><img src="sourceset.png" alt=""></p><h3 id="packagingOptions"><a href="#packagingOptions" class="headerlink" title="packagingOptions{}"></a>packagingOptions{}</h3><p>打包时的相关配置</p><p>当项目中依赖的第三方库越来越多时，有可能会出现两个依赖库中存在同一个（名称）文件。如果这样，Gradle在打包时就会提示错误（警告）。那么就可以根据提示，然后使用以下方法将重复的文件剔除，比较常用的是通过exclude去除重复的文件，例如：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">packagingOptions&#123;</span><br><span class="line">        <span class="comment">//pickFirsts做用是 当有重复文件时 打包会报错 这样配置会使用第一个匹配的文件打包进入apk</span></span><br><span class="line">        <span class="comment">// 表示当apk中有重复的META-INF目录下有重复的LICENSE文件时  只用第一个 这样打包就不会报错</span></span><br><span class="line">        pickFirsts = [<span class="string">'META-INF/LICENSE'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">//merges何必 当出现重复文件时 合并重复的文件 然后打包入apk</span></span><br><span class="line">        <span class="comment">//这个是有默认值得 merges = [] 这样会把默默认值去掉  所以我们用下面这种方式 在默认值后添加</span></span><br><span class="line">        merge <span class="string">'META-INF/LICENSE'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个是在同时使用butterknife、dagger2做的一个处理。同理，遇到类似的问题，只要根据gradle的提示，做类似处理即可。</span></span><br><span class="line">        <span class="keyword">exclude</span> <span class="string">'META-INF/services/javax.annotation.processing.Processor'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="productFlavors"><a href="#productFlavors" class="headerlink" title="productFlavors{}"></a>productFlavors{}</h3><p>多渠道配置</p><p>这个配置是经常会使用到的，通常在适配多个渠道的时候，需要为特定的渠道做部分特殊的处理，比如设置不同的包名、应用名等。场景：当我们使用友盟统计时，通常需要设置一个渠道ID，那么我们就可以利用productFlavors来生成对应渠道信息的包，如：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">android &#123;  </span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        wandoujia &#123;</span><br><span class="line">            <span class="comment">//豌豆荚渠道包配置</span></span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"wandoujia"</span>]</span><br><span class="line">            <span class="comment">//manifestPlaceholders的使用在后续章节（AndroidManifest里的占位符）中介绍</span></span><br><span class="line">        &#125;</span><br><span class="line">        xiaomi &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"xiaomi"</span>]</span><br><span class="line">            applicationId <span class="string">"com.wiky.gradle.xiaomi"</span> <span class="comment">//配置包名</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        _360 &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"_360"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更简洁的方式：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;  </span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        wandoujia &#123;&#125;</span><br><span class="line">        xiaomi &#123;&#125;</span><br><span class="line">        _360 &#123;&#125;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    productFlavors.all &#123; </span><br><span class="line">        <span class="comment">//批量修改，类似一个循序遍历</span></span><br><span class="line">        flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name] </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完之后，在命令行窗口中（Terminal）中输入<code>gradlew assembleRelease</code>（windows）即可开始打包，在Mac系统中对应指令是<code>./gradlew assembleRelease</code>。当然，如果想要debug版本的包，将指令中<code>assembleRelease</code>改为<code>assembleDebug</code>即可。最后生成的包还是在<code>app/build/outputs/apk</code>中，默认命名格式如<code>app-wandoujia-release-unsigned.apk</code>，在module的<code>Build Variants</code>中可以选择相应的渠道。<br>注：Android Studio3.0需在主app的build.gradle里面的</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">    targetSdkVersion：***</span><br><span class="line">    minSdkVersion ：***</span><br><span class="line">    versionCode：***</span><br><span class="line">    versionName ：***</span><br><span class="line">    <span class="comment">//版本名后面添加一句话，意思就是flavor dimension 它的维度就是该版本号，这样维度就是都是统一的了</span></span><br><span class="line">    flavorDimensions <span class="string">"versionCode"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lintOptions"><a href="#lintOptions" class="headerlink" title="lintOptions{}"></a>lintOptions{}</h3><p>代码扫描分析</p><p>Lint 是Android Studio 提供的 代码扫描分析工具，它可以帮助我们发现代码结构/质量问题，同时提供一些解决方案，而且这个过程不需要我们手写测试用例。</p><p>Lint 发现的每个问题都有描述信息和等级（和测试发现 bug 很相似），我们可以很方便地定位问题，同时按照严重程度进行解决。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序在编译的时候会检查lint，有任何错误提示会停止build，我们可以关闭这个开关</span></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError <span class="keyword">false</span> <span class="comment">//即使报错也不会停止打包</span></span><br><span class="line">        checkReleaseBuilds <span class="keyword">false</span>  <span class="comment">//打包release版本的时候进行检测</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies{}"></a>dependencies{}</h2><p>该闭包定义了项目的依赖关系，一般项目都有三种依赖方式：本地依赖、库依赖和远程依赖。本地依赖可以对本地的jar包或目录添加依赖关系，库依赖可以对项目中的库模块添加依赖关系，远程依赖可以对jcener库上的开源项目添加依赖关系。从Android Studio3.0后<code>compile</code>引入库不在使用，而是通过<code>api</code>和<code>implementation</code>，<code>api</code>完全等同于以前的<code>compile</code>，用<code>api</code>引入的库整个项目都可以使用，用<code>implementation</code>引入的库只有对应的Module能使用，其他Module不能使用，由于之前的项目统一用<code>compile</code>依赖，导致的情况就是模块耦合性太高，不利于项目拆解，使用<code>implementation</code>之后虽然使用起来复杂了但是做到降低偶合兴提高安全性。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:28.0.0'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.1.3'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.2'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>implementation fileTree(include: [&#39;*.jar&#39;], dir: &#39;libs&#39;)</code>：<code>implementation fileTree</code>是一个本地依赖声明，表示将libs目录下所有.jar后缀的文件都添加到项目的构建路径当中。</p><p><code>testImplementation</code>和<code>androidTestImplementation</code>：表示声明测试用例库。</p><h2 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明是Android程序，</span></span><br><span class="line"><span class="comment">//com.android.application 表示这是一个应用程序模块</span></span><br><span class="line"><span class="comment">//com.android.library 标识这是一个库模块</span></span><br><span class="line"><span class="comment">//而这区别：前者可以直接运行，后着是依附别的应用程序运行</span></span><br><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    signingConfigs &#123;<span class="comment">// 自动化打包配置</span></span><br><span class="line">        release &#123;<span class="comment">// 线上环境</span></span><br><span class="line">            keyAlias <span class="string">'test'</span></span><br><span class="line">            keyPassword <span class="string">'123456'</span></span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'test.jks'</span>)</span><br><span class="line">            storePassword <span class="string">'123456'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;<span class="comment">// 开发环境</span></span><br><span class="line">            keyAlias <span class="string">'test'</span></span><br><span class="line">            keyPassword <span class="string">'123456'</span></span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'test.jks'</span>)</span><br><span class="line">            storePassword <span class="string">'123456'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileSdkVersion <span class="number">27</span><span class="comment">//设置编译时用的Android版本</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"cn.net.sweetlover.myapplication"</span><span class="comment">//项目的包名</span></span><br><span class="line">        minSdkVersion <span class="number">16</span><span class="comment">//项目最低兼容的版本</span></span><br><span class="line">        targetSdkVersion <span class="number">27</span><span class="comment">//项目的目标版本</span></span><br><span class="line">        versionCode <span class="number">1</span><span class="comment">//版本号</span></span><br><span class="line">        versionName <span class="string">"1.0"</span><span class="comment">//版本名称</span></span><br><span class="line">        flavorDimensions <span class="string">"versionCode"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span><span class="comment">//表明要使用AndroidJUnitRunner进行单元测试</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;<span class="comment">// 生产/测试环境配置</span></span><br><span class="line">        release &#123;<span class="comment">// 生产环境</span></span><br><span class="line">            buildConfigField(<span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"false"</span>)<span class="comment">//配置Log日志</span></span><br><span class="line">            buildConfigField(<span class="string">"String"</span>, <span class="string">"URL_PERFIX"</span>, <span class="string">"\"https://release.cn/\""</span>)<span class="comment">// 配置URL前缀</span></span><br><span class="line">            minifyEnabled <span class="keyword">false</span><span class="comment">//是否对代码进行混淆</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span><span class="comment">//指定混淆的规则文件</span></span><br><span class="line">            signingConfig signingConfigs.release<span class="comment">//设置签名信息</span></span><br><span class="line">            pseudoLocalesEnabled <span class="keyword">false</span><span class="comment">//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多</span></span><br><span class="line">            zipAlignEnabled <span class="keyword">true</span><span class="comment">//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率</span></span><br><span class="line">            applicationIdSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">            versionNameSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;<span class="comment">// 测试环境</span></span><br><span class="line">            buildConfigField(<span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span>)<span class="comment">//配置Log日志</span></span><br><span class="line">            buildConfigField(<span class="string">"String"</span>, <span class="string">"URL_PERFIX"</span>, <span class="string">"\"https://test.com/\""</span>)<span class="comment">// 配置URL前缀</span></span><br><span class="line">            minifyEnabled <span class="keyword">false</span><span class="comment">//是否对代码进行混淆</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span><span class="comment">//指定混淆的规则文件</span></span><br><span class="line">            signingConfig signingConfigs.debug<span class="comment">//设置签名信息</span></span><br><span class="line">            debuggable <span class="keyword">false</span><span class="comment">//是否支持断点调试</span></span><br><span class="line">            jniDebuggable <span class="keyword">false</span><span class="comment">//是否可以调试NDK代码</span></span><br><span class="line">            renderscriptDebuggable <span class="keyword">false</span><span class="comment">//是否开启渲染脚本就是一些c写的渲染方法</span></span><br><span class="line">            zipAlignEnabled <span class="keyword">true</span><span class="comment">//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率</span></span><br><span class="line">            pseudoLocalesEnabled <span class="keyword">false</span><span class="comment">//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多</span></span><br><span class="line">            applicationIdSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">            versionNameSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">sourceSets</span> &#123;<span class="comment">//目录指向配置</span></span><br><span class="line">        main &#123;</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]<span class="comment">//指定lib库目录</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    packagingOptions&#123;<span class="comment">//打包时的相关配置</span></span><br><span class="line">        <span class="comment">//pickFirsts做用是 当有重复文件时 打包会报错 这样配置会使用第一个匹配的文件打包进入apk</span></span><br><span class="line">        <span class="comment">// 表示当apk中有重复的META-INF目录下有重复的LICENSE文件时  只用第一个 这样打包就不会报错</span></span><br><span class="line">        pickFirsts = [<span class="string">'META-INF/LICENSE'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">//merges何必 当出现重复文件时 合并重复的文件 然后打包入apk</span></span><br><span class="line">        <span class="comment">//这个是有默认值得 merges = [] 这样会把默默认值去掉  所以我们用下面这种方式 在默认值后添加</span></span><br><span class="line">        merge <span class="string">'META-INF/LICENSE'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个是在同时使用butterknife、dagger2做的一个处理。同理，遇到类似的问题，只要根据gradle的提示，做类似处理即可。</span></span><br><span class="line">        <span class="keyword">exclude</span> <span class="string">'META-INF/services/javax.annotation.processing.Processor'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        wandoujia &#123;&#125;</span><br><span class="line">        xiaomi &#123;&#125;</span><br><span class="line">        _360 &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    productFlavors.all &#123;</span><br><span class="line">            <span class="comment">//批量修改，类似一个循序遍历</span></span><br><span class="line">        flavor -&gt; flavor.manifestPlaceholders = [IFLYTEK_CHANNEL: name]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//程序在编译的时候会检查lint，有任何错误提示会停止build，我们可以关闭这个开关</span></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError <span class="keyword">false</span></span><br><span class="line">        <span class="comment">//即使报错也不会停止打包</span></span><br><span class="line">        checkReleaseBuilds <span class="keyword">false</span></span><br><span class="line">        <span class="comment">//打包release版本的时候进行检测</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">//项目的依赖关系</span></span><br><span class="line">    implementation <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</span><br><span class="line">    <span class="comment">//本地jar包依赖</span></span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:27.1.1'</span></span><br><span class="line">    <span class="comment">//远程依赖</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.1.2'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    <span class="comment">//声明测试用例库</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.2'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><h2 id="AS一键生成"><a href="#AS一键生成" class="headerlink" title="AS一键生成"></a>AS一键生成</h2><p>1、AS菜单中<code>Build</code>-&gt;<code>Generate Signed APK</code>点击</p><p><img src="signcreate1.png" alt=""></p><p>2、点击<code>Create New...</code></p><blockquote><p>”Create new…”新建一个签名文件<br>”Choose existing…”选择一个已经存在的签名文件</p></blockquote><p>3、填写完整的签名信息。</p><p><img src="newkeystore.png" alt=""></p><p>填写完毕点击<code>OK</code></p><p><strong>参数介绍</strong></p><ul><li><code>Key store path</code> : 签名文件路径</li><li><code>Password</code> : 签名密码</li><li><code>Confirm</code> : 确认密码</li><li><code>Alias</code> : 别名</li><li><code>Validity ( years )</code> : 有限期 （年）</li><li><code>First and Last Name</code> : 全名</li><li><code>Organizational Unit</code> : 组织单位</li><li><code>Organization</code> : 组织</li><li><code>City or Locality</code> : 城市或地方</li><li><code>State or Province</code> : 州或省</li><li><code>Country Code(XX)</code> : 国家代码</li></ul><blockquote><p>这里密码统一填写“android”，别名写个“key”即可。其他的信息根据实际情况和需求填写，并不很重要。</p></blockquote><p>4、生成文件名后缀为<code>keystore</code></p><p><img src="lastcreate.png" alt=""></p><blockquote><p>选V1打包出来的app是jar的（一般这种就是当做第三方导入项目来用的），<br>选v2打包出来的APP是apk版本的（也就是可以直接在手机上安装的，可是上线的）；</p></blockquote><p>一般情况下两个同时选择即可。然后点击<code>Finish</code>完成生成签名。</p><p><strong>原因：</strong></p><p>v2的用途解释：<br>1.用于验证其完整性的APK的加密签名现在位于ZIP中央目录之前。<br>2.这个签名是在整个APK文件的二进制内容上计算和验证的，而不是在v1的归档文件中解压缩文件内容。<br>3.一个APK可以同时由v1和v2签名同时签署，所以它仍然可以向后兼容以前的Android版本。</p><p>但是只设置v2会引起7.0以下会直接安装完显示未安装，7.0以上则使用了V2的方式验证 </p><p>报错信息为：<code>INSTALL_PARSE_FAILED_NO_CERTIFICATES</code>。</p><p>同时设置V1和V2则所有机型都没问题。而只设置v1签名并不会影响什么，但是在7.0上不会使用更安全的验证方式</p><blockquote><p>如果你想在使用Android分级插件时禁用添加v1或v2的签名，你可以将这些行添加到你的signingConfig部分。<br>v1SigningEnabled false<br>v2SigningEnabled false</p></blockquote><h2 id="命令行生成"><a href="#命令行生成" class="headerlink" title="命令行生成"></a>命令行生成</h2><p>配置jdk后</p><p>运行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> forever -keyalg RSA -validity 10000 -keystore forever.keystore</span><br></pre></td></tr></table></figure></p><p><strong>这里关键文字的代表意义：</strong></p><ul><li>forever：keystore的别名alias</li><li>10000：keystore的有效天数</li><li>forever.keystore：keystore的名称</li></ul><p>1、第一次输入的秘钥库口令即为forever.keystore的密码<br>2、然后填写相关的信息<br>3、生成对应的forever.keystore，文件地址在cmd命令的对应路径下面</p><p><img src="cmdcreate.png" alt=""></p><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><h2 id="Project的setting-gradle文件"><a href="#Project的setting-gradle文件" class="headerlink" title="Project的setting.gradle文件"></a>Project的setting.gradle文件</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">':app'</span></span><br></pre></td></tr></table></figure><p>setting.gradle 文件在 初始化过程中被执行，构建器通过<code>setting.gradle</code> 文件中的内容了解哪些模块将被<code>build</code>。</p><blockquote><p>注意：单模块项目不一定需要有 setting 文件，但一旦有多个模块，必须要有 setting 文件，同时也要写明所有要构建的模块，否则 gradle 不会 build 不包括的模块。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AS是采用gradle来进行构建项目，而gradle是基于groovy语言。这里了解一下项目中gradle的详细配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>IOS pch预编译头文件使用</title>
    <link href="http://hackycy.github.io/2019/04/08/IOS-pch%E9%A2%84%E7%BC%96%E8%AF%91%E5%A4%B4%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://hackycy.github.io/2019/04/08/IOS-pch预编译头文件使用/</id>
    <published>2019-04-08T04:19:05.000Z</published>
    <updated>2019-04-08T04:44:22.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PCH是什么"><a href="#PCH是什么" class="headerlink" title="PCH是什么"></a>PCH是什么</h1><p>PCH文件是一个标准的预编译头文件( Pre-Compiled Header)，在Xcode6之前的版本中，系统模板会在Supporting Files文件夹自动创建。但在Xcode6之后的版本中取消了这一文件，如果我们需要使用pch文件，则需要手动创建。去掉的主要的原因:</p><a id="more"></a><blockquote><p>1、去掉自动导入的系统框架类库的头文件，可以提高原文件的复用性，便于迁移。<br>2、一个体积大的Prefix Header会大大增加编译时间。</p></blockquote><p>再来看看pch的作用：</p><blockquote><p>1.存放一些全局的宏(整个项目中都用得上的宏)。<br>2.用来包含一些头文件(整个项目中都用得上的头文件)。<br>3.能自动打开或者关闭日志输出功能。</p></blockquote><p>如果你的pch文件确实很大，那那肯定影响编译速度，苹果去掉他可能是要加快编译时间增加用户体验。虽然失去了编程的便利性。事实上，正确运用pch文件时预编译后的头文件会被缓存起来，再次编译的时候就不需要重新编译pch文件中导入的内容，编译速度并不会降低很多。很重要的一点就是pch文件确实给我们编程带来便利，我们不用在每个文件内重复引用另一个文件；那怎样才能提高编译速度呢？降低编译速度的罪魁祸首就是大量的共用性不高的宏定义和头文件的引入。编译的时候整个工程范围地查找和替换这些宏定义字段，重复导入这些头文件，不慢就奇怪了。</p><h1 id="PCH创建"><a href="#PCH创建" class="headerlink" title="PCH创建"></a>PCH创建</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><img src="create_pch.png" alt="PCH文件创建"></p><p>点击创建，输入文件名即可。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在项目-&gt;<code>Build Settings</code>下</p><ul><li><p>找到该<code>Precompile Prefix Header</code>项设置为<code>YES</code>,这样的话pch会被预编译，预编译后的pch文件会被缓存起来，从而提高编译速度。当 <code>Precompile Prefix Header</code> 为<code>NO</code>时，那么pch不会被预编译，而是在每一个用到它导入的框架类库的<code>.m</code>文件中编译一次</p></li><li><p>找到<code>Prefix Header</code>项</p></li></ul><p><img src="pch_config.png" alt=""></p><p>双击可弹出输入框，给Prefix Header设置路径，只需要点击pch文件然后按住鼠标左键拖过来就行，但是<code>/Users/zjyzy/WorkPlace/xcode/AllDemo/BarDemo/BarDemo/PrefixHeader.pch</code>代表的是绝对路径，当用别的电脑时就不能识别了，这时就可以用到<code>$(SRCROOT)</code>来替换，在iOS中<code>$(SRCROOT)</code>代表的是项目根目录下，路径形式为：<br><code>$(SRCROOT)/当前工程名字/需要包含头文件所在文件夹</code><br>所以把路径改为:<br><code>$(SRCROOT)/BarDemo/PrefixHeader.pch</code></p><h1 id="PCH使用"><a href="#PCH使用" class="headerlink" title="PCH使用"></a>PCH使用</h1><p>一般来说在你向pch添加全局的头文件之前,必须添加以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __OBJC__</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这个宏定义的作用是保证只有oc文件可以调用pch里面的头文件，一些非OC语言不能调用，比如.cpp,.mm。如果不加入，那么如果代码中带有.cpp,.mm文件，那么将报错。NSObjCRuntime.h  NSObject.h  NSZone.h将会报出编译异常。<br>这样你就可以在pch文件当中添加一些常用头文件、宏定义了。</p><h2 id="宏来自定义只能在debug环境下使用输出日志"><a href="#宏来自定义只能在debug环境下使用输出日志" class="headerlink" title="宏来自定义只能在debug环境下使用输出日志"></a>宏来自定义只能在debug环境下使用输出日志</h2><p>在pch文件下添加如下代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __OBJC__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TTLog(...) NSLog(__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TTLog(...);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><blockquote><p><code>TTLog</code>为自定义名称,在项目中输出则将<code>NSLog</code>替换为<code>TTLog</code>即可。</p></blockquote><p><strong>宏定义的debug /release切换，见下图操作步骤</strong></p><p><img src="rd.png" alt=""></p><p>在选择了<code>Edit Scheme</code>后<code>run info</code>中切换<code>debug/release</code>模式</p><p><img src="rd2.png" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://my.oschina.net/goboy/blog/1838003" target="_blank" rel="noopener">https://my.oschina.net/goboy/blog/1838003</a></p><p><a href="https://www.jianshu.com/p/a1d61f5cc454" target="_blank" rel="noopener">https://www.jianshu.com/p/a1d61f5cc454</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PCH是什么&quot;&gt;&lt;a href=&quot;#PCH是什么&quot; class=&quot;headerlink&quot; title=&quot;PCH是什么&quot;&gt;&lt;/a&gt;PCH是什么&lt;/h1&gt;&lt;p&gt;PCH文件是一个标准的预编译头文件( Pre-Compiled Header)，在Xcode6之前的版本中，系统模板会在Supporting Files文件夹自动创建。但在Xcode6之后的版本中取消了这一文件，如果我们需要使用pch文件，则需要手动创建。去掉的主要的原因:&lt;/p&gt;
    
    </summary>
    
      <category term="Ios" scheme="http://hackycy.github.io/categories/Ios/"/>
    
    
      <category term="Ios" scheme="http://hackycy.github.io/tags/Ios/"/>
    
  </entry>
  
  <entry>
    <title>IOS状态栏、导航栏使用总结</title>
    <link href="http://hackycy.github.io/2019/04/04/IOS%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://hackycy.github.io/2019/04/04/IOS状态栏、导航栏使用总结/</id>
    <published>2019-04-04T07:08:36.000Z</published>
    <updated>2019-04-08T04:11:11.605Z</updated>
    
    <content type="html"><![CDATA[<p><strong>状态栏与导航栏的位置如下图</strong></p><a id="more"></a><p><strong>iOS7之前：</strong>状态栏与导航栏是分开的；<br><strong>iOS7之后：</strong>状态栏与导航栏合在一起；导航部分总高度(64)= 状态栏高度(20) +导航栏内容高度((44）</p><p><strong>iPhoneX以后：</strong>状态栏的高度变为44，导航栏部分总高度(88) = 状态栏(44) + 导航栏内容高度(44)</p><p><img src="statusbar.png" alt=""></p><p>我们可以通过<code>[UIApplication sharedApplication].statusBarFrame.size</code>获取状态栏的size（一般没有刘海时的高度为<code>20</code>，有刘海时的高度为44）。通过<code>self.navigationController.navigationBar.frame.size</code>来获取导航栏的size。</p><h1 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h1><p>状态栏内容包括信号、时间、电量等，只有两种颜色样式（黑或白）。</p><h2 id="状态栏显示和隐藏"><a href="#状态栏显示和隐藏" class="headerlink" title="状态栏显示和隐藏"></a>状态栏显示和隐藏</h2><p>全局控制：通过 <strong>info.plist</strong>设置，或者调用全局方法。<br>分页控制：在视图控制器里通过 <strong>prefersStatusBarHidden</strong>方法设置。</p><h3 id="全局控制"><a href="#全局控制" class="headerlink" title="全局控制"></a>全局控制</h3><p>默认设置或者手动设置 <strong>info.plist</strong>文件中<code>View controller-based status bar appearance</code>设置为<code>NO</code>，此时状态栏需要全局设置，有两种方式设置。</p><p><strong>方法1:</strong></p><p>依次进入<code>Targets</code>-&gt;<code>General</code>-&gt;<code>Deployment Info</code>，然后可进行进行设置如下:</p><p><img src="hidestatusbar.png" alt=""></p><p>在<code>info.plist</code>文件中添加<code>Status bar is initially hidden</code>设置为<code>YES</code>，则隐藏启动页状态栏，否则反之。和直接在项目中设置相同。</p><p><img src="statusbar_infop.png" alt=""></p><p><strong>方法2:</strong></p><p>代码设置：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//已过时</span></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarHidden:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐</span></span><br><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].statusBarHidden = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>使用代码控制全局的状态栏，代码的位置很重要；在AppDelegate中写入可以设置整个App页面的状态栏样式；<br>如果需要单独设置其中一个页面隐藏状态栏，需要在进入页面时设置隐藏，退出页面时设置显示，以保证不影响其他页面的状态栏样式。</p><h3 id="分页控制"><a href="#分页控制" class="headerlink" title="分页控制"></a>分页控制</h3><p>手动设置 <strong>info.plist</strong>文件中<code>View controller-based status bar appearance</code>设置为<code>YES</code>，此时全局状态设置是无效的，需要分页设置才能修改其样式，即：在每个视图控制器或者控制器基类中使用如下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重写该方法</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)prefersStatusBarHidden &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;<span class="comment">//设置显示，YES为隐藏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态栏颜色"><a href="#状态栏颜色" class="headerlink" title="状态栏颜色"></a>状态栏颜色</h2><p>状态栏分前后两个部分，要分清。</p><ul><li>文字部分：就是指电池、时间等部分</li><li>背景部分：就是显示黑色或者图片的部分</li></ul><h3 id="文字部分"><a href="#文字部分" class="headerlink" title="文字部分"></a>文字部分</h3><p>简单来说，就是设置显示电池电量、时间、网络部分标示的颜色， 这里只能设置两种颜色：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//黑色</span></span><br><span class="line"><span class="built_in">UIStatusBarStyleDefault</span></span><br><span class="line"><span class="comment">//白色</span></span><br><span class="line"><span class="built_in">UIStatusBarStyleLightContent</span></span><br></pre></td></tr></table></figure><p>全局控制：通过 <strong>info.plist</strong>设置，或者调用全局方法。<br>分页控制：在视图控制器里通过 <strong>preferredStatusBarStyle</strong>方法设置。</p><h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><p>默认设置或者手动设置 <strong>info.plist</strong>文件中<code>View controller-based status bar appearance</code>设置为<code>NO</code>，此时状态栏需要全局设置，有两种方式设置。</p><p><strong>方法1:</strong></p><p>依次进入<code>Targets</code>-&gt;<code>General</code>-&gt;<code>Deployment Info</code>，然后可进行进行设置如下:</p><p><img src="statusbar_fontbg.png" alt=""></p><p><strong>方法2:</strong></p><p>代码设置:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UIStatusBarStyleDefault | UIStatusBarStyleLightContent</span></span><br><span class="line"><span class="comment">//UIStatusBarStyleDefault,黑色(默认)</span></span><br><span class="line"><span class="comment">//UIStatusBarStyleLightContent,白色</span></span><br><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].statusBarStyle = <span class="built_in">UIStatusBarStyleLightContent</span>;</span><br></pre></td></tr></table></figure><h4 id="分页设置"><a href="#分页设置" class="headerlink" title="分页设置"></a>分页设置</h4><p>手动设置 <strong>info.plist</strong>文件中<code>View controller-based status bar appearance</code>设置为<code>YES</code>，此时全局状态设置是无效的，需要分页设置才能修改其样式，即：在每个视图控制器或者控制器基类中使用如下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重写该方法</span></span><br><span class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIStatusBarStyleLightContent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别注意：</strong></p><p>但是，这里存在一个问题：如果当前视图控制器是<code>UINavigationController</code>的子视图控制器，<code>preferredStatusBarStyle</code>方法并不会被调用。这是因为导航控制器里的<code>preferredStatusBarStyle</code>才具有修改状态栏样式的能力。</p><p>解决方法：</p><ul><li>方法1:添加子类控制器</li></ul><p>我们需要使用自定义的子类导航控制器，在其中添加如下的代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle &#123;</span><br><span class="line">    <span class="built_in">UIViewController</span> *topVC = <span class="keyword">self</span>.topViewController;</span><br><span class="line">    <span class="keyword">return</span> [topVC preferredStatusBarStyle];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法2:放弃preferredStatusBarStyle该方法</li></ul><p>直接不使用preferredStatusBarStyle方法，而是直接在当前视图控制器中调用如下方法修改状态栏。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//状态栏和导航栏背景色为白色，状态栏文字为黑色</span></span><br><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.barStyle = <span class="built_in">UIBarStyleDefault</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//状态栏和导航栏背景色为黑色，状态栏文字为白色</span></span><br><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.barStyle = <span class="built_in">UIBarStyleBlack</span>;</span><br></pre></td></tr></table></figure><h3 id="背景部分"><a href="#背景部分" class="headerlink" title="背景部分"></a>背景部分</h3><p>背景部分，简单来说，就是状态栏的背景颜色，其实系统状态栏的背景颜色一直是透明的状态，当有导航栏时，导航栏背景是什么颜色，状态栏就是什么颜色，没有导航栏时，状态栏背后的视图时什么颜色，它就是什么颜色。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置状态栏与到导航栏都是不透明</span></span><br><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.translucent = <span class="literal">NO</span>;</span><br><span class="line"><span class="comment">// 这个方法是设置导航栏背景颜色，状态栏也会随之变色</span></span><br><span class="line">[<span class="keyword">self</span>.navigationController.navigationBar setBarTintColor:[<span class="built_in">UIColor</span> redColor]];</span><br></pre></td></tr></table></figure><p><strong>单独设置</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置状态栏背景颜色</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param color 设置颜色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setStatusBarBackgroundColor:(<span class="built_in">UIColor</span> *)color &#123;</span><br><span class="line">    <span class="built_in">UIView</span> *statusBar = [[[<span class="built_in">UIApplication</span> sharedApplication] valueForKey:<span class="string">@"statusBarWindow"</span>] valueForKey:<span class="string">@"statusBar"</span>];</span><br><span class="line">    <span class="keyword">if</span> ([statusBar respondsToSelector:<span class="keyword">@selector</span>(setBackgroundColor:)]) &#123;</span><br><span class="line">        statusBar.backgroundColor = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>效果图</strong></p><p><img src="statusbar_bg.png" alt=""></p><blockquote><p>如果是单独设置某个页面的状态栏背景色，还需要在离开页面时恢复原样。</p></blockquote><h2 id="状态栏常用宏定义"><a href="#状态栏常用宏定义" class="headerlink" title="状态栏常用宏定义"></a>状态栏常用宏定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 设备参数</span></span><br><span class="line"><span class="comment">//屏幕宽</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_ScreenWidth   [[UIScreen mainScreen] bounds].size.width</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//屏幕高</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_ScreenHeight  [[UIScreen mainScreen] bounds].size.height</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断设备类型是否iPhoneX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_ISIphoneX    (([UIScreen mainScreen].bounds.size.height/[UIScreen mainScreen].bounds.size.width) &gt;= 2.16)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导航栏高度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_NavBarHeight (ZS_ISIphoneX ? 88.f : 64.f)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//状态栏高度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_StatusBarHeight (ZS_ISIphoneX ? 44.f : 20.f)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导航栏内容高度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_NavBarContentHeight 44.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//标签栏高度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_TabBarHeight (ZS_ISIphoneX ? 49.f + 34.f : 49.f)</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：自iOS11之后，Apple引入Safe Area(安全区)的概念，这将是比宏定义更加有效的适配方法。</p></blockquote><h1 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h1><h2 id="导航栏样式"><a href="#导航栏样式" class="headerlink" title="导航栏样式"></a>导航栏样式</h2><p>设置导航栏样式可分为全局设置或分页设置</p><h3 id="全局设置-1"><a href="#全局设置-1" class="headerlink" title="全局设置"></a>全局设置</h3><p>全局设置在<code>AppDelegate</code>中设置，在整个app都会生效</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置导航栏背景颜色</span></span><br><span class="line">[[<span class="built_in">UINavigationBar</span> appearance] setBarTintColor:[<span class="built_in">UIColor</span> redColor]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置导航栏背景图片</span></span><br><span class="line">[[<span class="built_in">UINavigationBar</span> appearance] setBackgroundImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"bg"</span>] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置导航栏标题样式</span></span><br><span class="line">[[<span class="built_in">UINavigationBar</span> appearance] setTitleTextAttributes:[<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:</span><br><span class="line">                                                          [<span class="built_in">UIColor</span> redColor], <span class="built_in">NSForegroundColorAttributeName</span>,</span><br><span class="line">                                                          [<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">25</span>], <span class="built_in">NSFontAttributeName</span>,</span><br><span class="line">                                                          <span class="literal">nil</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置导航栏返回按钮的颜色</span></span><br><span class="line">[[<span class="built_in">UINavigationBar</span> appearance] setTintColor:[<span class="built_in">UIColor</span> redColor]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置导航栏隐藏</span></span><br><span class="line">[[<span class="built_in">UINavigationBar</span> appearance] setHidden:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure><h3 id="分页设置-1"><a href="#分页设置-1" class="headerlink" title="分页设置"></a>分页设置</h3><p>全局设置后，但是有几个页面需求不同，则也可以进行单独的分页设置。</p><p>分页设置的调用方法变为<code>self.navigationController.navigationBar</code>。<br>并且分页设置需要遵循： <strong>进入页面时修改，离开页面时还原</strong>的原则。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入页面时设置颜色：灰色</span></span><br><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController.navigationBar setBarTintColor:[<span class="built_in">UIColor</span> grayColor]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//离开页面时还原为全局设置：橙色</span></span><br><span class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController.navigationBar setBarTintColor:[<span class="built_in">UIColor</span> orangeColor]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导航栏引起的布局问题"><a href="#导航栏引起的布局问题" class="headerlink" title="导航栏引起的布局问题"></a>导航栏引起的布局问题</h2><p>当导航栏透明时会出现以下情况：</p><h3 id="内容偏移属性：automaticallyAdjustsScrollViewInsets"><a href="#内容偏移属性：automaticallyAdjustsScrollViewInsets" class="headerlink" title="内容偏移属性：automaticallyAdjustsScrollViewInsets"></a>内容偏移属性：automaticallyAdjustsScrollViewInsets</h3><p>automaticallyAdjustsScrollViewInsets是视图控制器的一个属性，默认为YES，用于优化滑动类视图(继承于UIScrollView的视图)在视图控制里的显示：</p><p>iOS系统的导航栏UINavigationBar与标签栏UITabBar默认都是半透明模糊效果，在这种情况下系统会对视图控制器的UI布局进行优化： <strong>视图控制器里面第一个被添加进去的视图是滑动类视图，并且其Frame是整个屏幕大小时，系统会自动调整其contenInset，以保证滑动视图里的内容不被UINavigationBar与UITabBar遮挡。</strong></p><p>但是对于普通的视图，此时我们仍然需要注意：非滑动视图的布局仍然要考虑导航栏和标签栏高度，注意不被遮挡，比如布局的时候加上导航栏高度，以免内容被导航栏遮挡。</p><p>我们可以通过一段代码来测试一下效果，在默认导航栏(半透明)的视图控制器里添加如下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UITextView是滑动视图，内容自动向下偏移，不会被导航栏覆盖</span></span><br><span class="line">    <span class="built_in">UITextView</span> *leftTextView = [[<span class="built_in">UITextView</span> alloc] init];</span><br><span class="line">    leftTextView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>,<span class="number">100</span>, <span class="number">675</span>);</span><br><span class="line">    leftTextView.backgroundColor = [<span class="built_in">UIColor</span> lightGrayColor];</span><br><span class="line">    leftTextView.text = <span class="string">@"君不见，黄河之水天上来，奔流到海不复回。君不见，高堂明镜悲白发，朝如青丝暮成雪。人生得意须尽欢，莫使金樽空对月。天生我材必有用，千金散尽还复来。"</span>;</span><br><span class="line">    leftTextView.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">18</span>];</span><br><span class="line">    leftTextView.editable = <span class="literal">NO</span>;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:leftTextView];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//UIView是非滑动视图，内容被导航栏部分覆盖</span></span><br><span class="line">    <span class="built_in">UIView</span> *rightView= [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">150</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)];</span><br><span class="line">    rightView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:rightView];</span><br></pre></td></tr></table></figure><p><img src="auto.png" alt="导航栏透明情况下，滑动视图自动偏移，普通视图被遮挡"></p><p>这里会发现非滑动视图会被导航栏遮挡，但是滑动视图即使延伸到了导航栏下，但是其内容部分却自动向下偏移了，没有被导航栏遮挡住，这是因为系统自动优化了其内边距。</p><p>其实，这种系统的优化也是可以控制关闭的，关闭优化之后，滑动视图就会和普通视图一样，如果还设置其布局的原点是(0,0),其内容就会被导航栏所覆盖，关键代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//automaticallyAdjustsScrollViewInsets在11.0后失效，所以需要判断</span></span><br><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">11.0</span>,*)) &#123;</span><br><span class="line">       scrollView.contentInsetAdjustmentBehavior = <span class="built_in">UIScrollViewContentInsetAdjustmentNever</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="comment">//automaticallyAdjustsScrollViewIn，关闭自动偏移的系统优化</span></span><br><span class="line">       <span class="keyword">self</span>.automaticallyAdjustsScrollViewInsets = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="边缘延伸属性：edgesForExtendedLayout"><a href="#边缘延伸属性：edgesForExtendedLayout" class="headerlink" title="边缘延伸属性：edgesForExtendedLayout"></a>边缘延伸属性：edgesForExtendedLayout</h3><p>edgesForExtendedLayout也是视图控制器的布局属性，默认值是UIRectEdgeAll，即：当前视图控制器里各种UI控件会忽略导航栏和标签的存在，布局时若设置其原点设置为(0,0)，视图会延伸显示到导航栏的下面被覆盖。</p><p>所以我们可以设置<code>self.edgesForExtendedLayout=UIRectEdgeNone</code>，此时视图控制器里内容就会避开导航栏和标签栏了.</p><h2 id="导航栏透明"><a href="#导航栏透明" class="headerlink" title="导航栏透明"></a>导航栏透明</h2><p>导航栏布局问题都是因为导航栏透明度影响，但是需求没有必要透明，那么视图控制器里的控件就会默认从(0,64)开始布局了，设置导航栏不透明的方法如下:</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.translucent= <span class="literal">NO</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;状态栏与导航栏的位置如下图&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ios" scheme="http://hackycy.github.io/categories/Ios/"/>
    
    
      <category term="Ios" scheme="http://hackycy.github.io/tags/Ios/"/>
    
  </entry>
  
  <entry>
    <title>Android中MVC、MVP、MVVM介绍</title>
    <link href="http://hackycy.github.io/2019/04/01/Android%E4%B8%ADMVC%E3%80%81MVP%E3%80%81MVVM%E4%BB%8B%E7%BB%8D/"/>
    <id>http://hackycy.github.io/2019/04/01/Android中MVC、MVP、MVVM介绍/</id>
    <published>2019-04-01T14:19:32.000Z</published>
    <updated>2019-04-01T15:37:50.270Z</updated>
    
    <content type="html"><![CDATA[<p><strong>MVC,MVP,MVVM简单介绍</strong></p><a id="more"></a><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p><code>MVC</code>全名是<code>Model-View-Controller</code>，是模型(model)-视图(view)-控制器(controller)的缩写，一种软件设计的典范，用一种业务逻辑、数据、界面显示分离的方式来组织代码，在改进和个性化定制洁面以及用户交互的同时，不需要重新编写业务逻辑。其中<code>Model</code>层处理数据，业务逻辑等。<code>View</code>层处理界面的显示结果。<code>Controller</code>层起到桥梁的作用，来控制<code>View</code>层和<code>Model</code>层通信以此来达到分离视图显示和业务逻辑层。</p><p><img src="mvc.png" alt=""></p><p>我们往往把Android中界面部分的实现也理解为采用了MVC框架，常常把Activity理解为MVC模式中的Controller。</p><p><strong>看似没有什么特别的地方，但是由几个需要特别关注的关键点：</strong></p><ul><li>View是把控制权交给Controller，自己不执行业务逻辑。</li><li>Controller执行业务逻辑并且操作Model，但不会直接操作View，可以说它是对View无知的。</li><li>View和Model的同步消息是通过观察着模式进行，而同步操作是由View自己请求Model的数据然后对视图进行更新。</li></ul><h2 id="MVC的优缺点"><a href="#MVC的优缺点" class="headerlink" title="MVC的优缺点"></a>MVC的优缺点</h2><p><strong>优点</strong></p><ul><li>把业务逻辑全部分离到controller中，模块化程度高。当业务逻辑变更的时候，不需要更改view和model，只需要更改controller即可（swappable controller）。</li><li>观察者模式可以做到多视图同时更新</li></ul><p><strong>缺点</strong></p><ul><li>controller测试困难，因为视图同步操作是由view自己执行，而view只能在有UI的环境下运行。在没有UI的环境下对controller进行单元测试的时候，controller业务逻辑的正确性是无法验证的。controller更新model的时候，无法对view的更新操作进行断言。</li><li>view无法组件化。view是强依赖特定的model的，如果需要把这个view抽出来作为另外一个应用程序可服用的组件就困难了，因为不同的程序model是不一样的。</li></ul><h1 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h1><p><code>MVP</code>其实是<code>MVC</code>的一种演进版本，它更简单，将<code>MVC</code>中的<code>Controller</code>改为了<code>Presenter</code>，<code>View</code>通过接口与<code>Presenter</code>进行交互，降低耦合，方便进行单元测试。</p><ul><li><strong>View:</strong>负责绘制UI元素，与用户进行交互（Activity、View、Fragment都可以作为View层）</li><li><strong>Model:</strong>对数据的操作、对网络等的操作，和业务相关的逻辑处理</li><li><strong>Presenter:</strong>作为View与Model交互的中间纽带，处理与用户交互的逻辑。可以把Presenter理解为一个中间层的角色，它接受Model层的数据，并且处理之后传递给View层，还需要处理View层的用户<br>交互等操作。</li></ul><p><img src="mvp.png" alt=""></p><p><strong>关键点</strong></p><ul><li>View不再负责同步的逻辑，而是由Presenter负责。Presenter中既有业务逻辑也有同步逻辑。</li><li>View需要提供操作界面的接口给Presenter进行调用。（关键）</li></ul><p>对比在MVC中，Controller是不能操作View的，View也没有提供相应的接口。而在MVP当中，Presenter可以操作View，View需要提供一组对界面操作的接口给Presenter进行调用。Model仍然通过事件广播自己的变更，但由于Presenter监听而不是View。</p><h2 id="MVP（Passive-View）优缺点"><a href="#MVP（Passive-View）优缺点" class="headerlink" title="MVP（Passive View）优缺点"></a>MVP（Passive View）优缺点</h2><p><strong>优点</strong></p><ul><li>便于测试，Presenter对View是通过接口进行，在对Presenter进行不依赖UI环境的单元测试的时候，可以通过Mock一个View对象，这个对象只需要实现了View的接口即可。然后依赖注入到Presenter中，单元测试的时候就可以完整的测试Presenter业务逻辑的正确性。</li><li>View可以进行组件化。在MVP当中，View不依赖Model。这样就可以让View从特定的业务场景中脱离出来，可以说View可以做到对业务逻辑完全无知。它只需要提供一系列接口提供给上层接操作。这样就可以做到高度可复用的View组件。</li></ul><p><strong>缺点</strong></p><ul><li>Presenter中除了业务逻辑意外，还有大量的View-&gt;Model，Model-&gt;View的手动同步逻辑，造成Presenter比较笨重，维护起来会比较困难。</li></ul><h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><p><code>MVVM</code>模式（Mode-View-ViewModel），和<code>MVP</code>模式相比，<code>MVVM</code>模式用ViewModel替换了Presenter，其他层基本上与<code>MVP</code>模式一直，<code>ViewModel</code>可以理解成是<code>View</code>的数据模型和<code>Presenter</code>的合体。</p><p><code>MVVM</code>采用双向绑定（data-binding）。View的变动，自动反应在ViewModel，反之亦然。这种模式实际上是框架替应用开发者做了一些工作（相当于ViewModel类是由库帮我们生成的），开发者只需要较少代码就能实现比较复杂的交互。</p><p><img src="mvvm.png" alt=""></p><p><strong>MVVM调用关系</strong></p><p>MVVM的调用关系和MVP一样。但是，在ViewModel当中会有一个叫Binder，或者是Data-binding engine的东西。以前全部由Presenter负责的View和Model之间数据同步操作交由给Binder处理。你只需要在View的模版语法当中，指令式地声明View上的显示的内容是和Model的哪一块数据绑定的。当ViewModel对进行Model更新的时候，Binder会自动把数据更新到View上去，当用户对View进行操作（例如表单输入），Binder也会自动把数据更新到Model上去。这种方式称为：Two-way data-binding，双向数据绑定。可以简单而不恰当地理解为一个模版引擎，但是会根据数据变更实时渲染。</p><p><strong>关键点</strong></p><ul><li>MVVM把View和Model的同步逻辑自动化了。以前Presenter负责的View和Model同步不再手动地进行操作，而是交由框架所提供的Binder进行负责。</li><li>只需要告诉Binder，View显示的数据对应的是Model哪一部分即可。</li></ul><h2 id="MVVM优缺点"><a href="#MVVM优缺点" class="headerlink" title="MVVM优缺点"></a>MVVM优缺点</h2><p><strong>优点</strong></p><ul><li>提高可维护性。解决了MVP大量的手动View和Model同步的问题，提供双向绑定机制。提高了代码的可维护性。</li><li>简化测试。因为同步逻辑是交由Binder做的，View跟着Model同时变更，所以只需要保证Model的正确性，View就正确。大大减少了对View同步更新的测试。</li></ul><p><strong>缺点</strong></p><ul><li>过于简单的图形界面不适用，或说牛刀杀鸡。</li><li>对于大型的图形应用程序，视图状态较多，ViewModel的构建和维护的成本都会比较高。</li><li>数据绑定的声明是指令式地写在View的模版当中的，这些内容是没办法去打断点debug的。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>三者，都是后者解决前者遗留的问题，但每个存在必有其的理由。每种模式并不能因为用而用，而是根据业务的需求来定制。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;MVC,MVP,MVVM简单介绍&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>CSS经典面试案例详解</title>
    <link href="http://hackycy.github.io/2019/03/28/CSS%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E6%A1%88%E4%BE%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>http://hackycy.github.io/2019/03/28/CSS经典面试案例详解/</id>
    <published>2019-03-28T15:29:03.000Z</published>
    <updated>2019-04-09T02:34:52.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="包含块"><a href="#包含块" class="headerlink" title="包含块"></a>包含块</h1><p>一个元素的尺寸和位置经常受其包含块的影响，大多数情况下，包含块就是这个元素最近的祖先元素的内容去，但是也不是总是这样的。<br><a id="more"></a></p><p>当一个客户端代理（比如说浏览器）展示一个文档时，对每一个元素，它都产生了一个盒子。每一个盒子都被划分为四个区域。</p><ul><li>内容区</li><li>内边距区</li><li>边框区</li><li>外边距区<br><img src="boxdim.png" alt=""></li></ul><p>很多被误导的观念：一个元素的包含块就是他的父元素的内容区，但并非是这样的。</p><h2 id="包含块有什么影响？"><a href="#包含块有什么影响？" class="headerlink" title="包含块有什么影响？"></a>包含块有什么影响？</h2><p>元素的尺寸及位置，常常会受它的包含块所影响。对于一些属性，例如 width, height, padding, margin，绝对定位元素的偏移值 （比如 position 被设置为 absolute 或 fixed），当我们对其赋予百分比值时，这些值的计算值，就是通过元素的包含块计算得来。</p><h2 id="什么是包含块"><a href="#什么是包含块" class="headerlink" title="什么是包含块"></a>什么是包含块</h2><p>有这么大的影响，那么包含块到底是什么？<br>如果对于浮动元素，其包含块定义为最近的块级祖先元素。但是对于定位的元素则行为相对复杂了。</p><ul><li><p>“根元素”的包含块（也被称为初始包含块）由用户代理建立。在HTML中，根元素就是html元素。不过有些浏览器会使用body作为根元素。在大多数浏览器中，初始包含块是一个视窗大小的矩形。<del>但不代表就是视口。</del></p><blockquote><p>在电脑图形学里面，视口代表了一个可看见的多边形区域（通常来说是矩形）。在浏览器范畴里，它代表的是浏览器中网站可见内容的部分。</p></blockquote></li><li><p>对于一个非根元素，如果其<code>position</code>值是<code>relative</code>或<code>static</code>，包含块则由最近的块级框、表单元格或行内块祖先框的内容边界构成。</p><blockquote><p>当时网页中基本不会使用表单元格、行内块来作为页面的基本布局。</p></blockquote></li><li><p>对于一个非根元素，如果其<code>position</code>值是<code>absolute</code>，包含块设置为最近的<code>position</code>值不是<code>static</code>的祖先元素（可以是任何类型）。</p><ul><li>如果这个祖先元素是块级元素，包含块则设置为该元素的内边距边界，换句话说就是由边框界定的区域。</li><li>如果这个祖先元素是行内元素，包含块则设置为该祖先元素的内容边界。在从左向右的语言中，包含块的上边界和左边界是该祖先元素中第一个框内容区的上边界和左边界，包含块的下边界和右边界是最后一个框内容区的下边界和右边界。而从右向左读的语言中，包含块的右边界对应于第一个框的右内容边界，包含块的左边界则取自最后一个框的做内容边界，上下边界也是一样。</li><li>如果没有祖先，元素的包含块定义为初始包含块。</li></ul></li></ul><p><strong>看一下案例，对于包含块的影响</strong></p><h3 id="初始包含块"><a href="#初始包含块" class="headerlink" title="初始包含块"></a>初始包含块</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        html &#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="css">            <span class="comment">/*margin: 30px;*/</span></span></span><br><span class="line"><span class="undefined">            border: 1px red solid;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*margin: 30px;*/</span></span></span><br><span class="line"><span class="undefined">            border: 1px pink solid;</span></span><br><span class="line"><span class="undefined">            height: 90%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: beige;</span></span><br><span class="line"><span class="undefined">            width: 400px;</span></span><br><span class="line"><span class="undefined">            height: 800px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 200px */</span></span></span><br><span class="line"><span class="undefined">            width: 50%;  </span></span><br><span class="line"><span class="css">            <span class="comment">/* 200px */</span></span></span><br><span class="line"><span class="undefined">            height: 50%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 40px */</span></span></span><br><span class="line"><span class="undefined">            margin: 10%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 40px */</span></span></span><br><span class="line"><span class="undefined">            padding: 10%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>content标签为静态定位，则wrap标签为他的包含块，所以content标签的高和宽的百分比值有wrap包含块的高和宽来决定，margin和padding的百分比值则由wrap包含块的宽来决定。</p><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">            display: inline;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 200px */</span></span></span><br><span class="line"><span class="undefined">            width: 50%;  </span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 40px */</span></span></span><br><span class="line"><span class="undefined">            margin: 10%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 40px */</span></span></span><br><span class="line"><span class="undefined">            padding: 10%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与案例1相似的结构，但是wrap元素变成了内联元素，则wrap不是content的包含块，没有祖先元素能够成为content的包含块，则content的包含块为初始包含块。所以content的宽和高的百分比值将不再由wrap元素决定。</p><h3 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            left: 0px;</span></span><br><span class="line"><span class="undefined">            top: 0px;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">            width: 500px;</span></span><br><span class="line"><span class="undefined">            height: 500px;</span></span><br><span class="line"><span class="undefined">            padding: 50px 50px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 300px */</span></span></span><br><span class="line"><span class="undefined">            width: 50%; </span></span><br><span class="line"><span class="css">            <span class="comment">/* 150px */</span></span></span><br><span class="line"><span class="undefined">            height: 25%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 60px */</span></span></span><br><span class="line"><span class="undefined">            padding: 10%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 60px */</span></span></span><br><span class="line"><span class="undefined">            margin: 10%;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与案例1相似的结构，wrap和content元素都开启了绝对定位，那么wrap元素则为content元素的包含块，所以content的百分比值有wrap元素来决定，但是注意wrap的盒模型有padding值，计算时需要加上。</p><blockquote><p>如果包含块的 box-sizing 值设置为 border-box ，就没有这个问题。</p></blockquote><h3 id="案例四"><a href="#案例四" class="headerlink" title="案例四"></a>案例四</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 400px;</span></span><br><span class="line"><span class="undefined">            height: 300px;</span></span><br><span class="line"><span class="undefined">            margin: 50px;</span></span><br><span class="line"><span class="undefined">            padding: 30px;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: fixed;</span></span><br><span class="line"><span class="undefined">            left: 0;</span></span><br><span class="line"><span class="undefined">            top: 0;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 50% vw */</span></span></span><br><span class="line"><span class="undefined">            width: 50%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 50% scroll h  */</span></span></span><br><span class="line"><span class="undefined">            height: 50%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 10% vw */</span></span></span><br><span class="line"><span class="undefined">            margin: 10%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 10% vw */</span></span></span><br><span class="line"><span class="undefined">            padding: 10%;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>content元素的包含块的定位为<code>fixed</code>，所以他的包含块即为初始包含块（屏幕上，也即是viewport）,content元素则会随着浏览器窗口的大小的变化而变化。</p><h3 id="案例五"><a href="#案例五" class="headerlink" title="案例五"></a>案例五</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            background: beige;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        section &#123;</span></span><br><span class="line"><span class="undefined">            transform: rotate(0deg);</span></span><br><span class="line"><span class="undefined">            width: 400px;</span></span><br><span class="line"><span class="undefined">            height: 160px;</span></span><br><span class="line"><span class="undefined">            background: lightgray;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        p &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            left: 80px;</span></span><br><span class="line"><span class="undefined">            top: 30px;</span></span><br><span class="line"><span class="undefined">            width: 50%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* == 200px */</span></span></span><br><span class="line"><span class="undefined">            height: 25%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* == 40px */</span></span></span><br><span class="line"><span class="undefined">            margin: 5%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* == 20px */</span></span></span><br><span class="line"><span class="undefined">            padding: 5%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* == 20px */</span></span></span><br><span class="line"><span class="undefined">            background: cyan;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个示例中，P 元素的 position 为 absolute，所以它的包含块是 <section>，也就是距离它最近的一个 transform 值不为 none 的父元素。</section></p><h1 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h1><p>left、top、right、bottom、width、height默认值为auto。<br>margin、padding默认值为0。</p><h1 id="浮动元素层级"><a href="#浮动元素层级" class="headerlink" title="浮动元素层级"></a>浮动元素层级</h1><p>看一个案例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#up</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#down</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"up"</span>&gt;</span>upupup<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"down"</span>&gt;</span>downdowndown<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>原来<code>up</code>id的元素不开启浮动的情况下，两个块级元素上下排列，但是开启了<code>up</code>id的元素的浮动后，<br><code>down</code>id的元素由于收到了<code>up</code>元素的影响顶了上去，但是发现文字并没有跟着上去。<br>解释：<br><strong>在浮动的情况下，元素层级只提升半层，元素分两层，一层与盒模型相关，一层与文字相关。</strong></p><h1 id="负margin详解"><a href="#负margin详解" class="headerlink" title="负margin详解"></a>负margin详解</h1><p><a href="https://www.w3cplus.com/css/the-definitive-guide-to-using-negative-margins.html" target="_blank" rel="noopener">负margin用法权威指南</a></p><p>何为负margin</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#content &#123;margin-left:-100px;&#125;</span><br></pre></td></tr></table></figure><ul><li>负margin是标准的CSS，在w3c中，margin属性值是允许出现负值的</li><li>负margin不是一种hack方法</li><li>不脱离文档流（在不使用浮动的情况下）</li><li>完全兼容</li><li>浮动会影响负margin的使用</li><li><del>dreamveaver不解析负margin（前端工程师不推荐使用，也不应该在设计视图中检查网站）</del></li></ul><p>**作用在static元素上的负margin属性值<br><img src="negative-margin-1.jpg" alt=""><br>当static元素没有设定成浮动的元素，上图中说明了负margin对static元素的作用。</p><p>当static元素的<code>margin-left/margin-right</code>被赋予负值时，元素将被拉进指定方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box1</span> &#123;<span class="attribute">margin-top </span>: -<span class="number">10px</span>;&#125;</span><br><span class="line"><span class="comment">/*元素向上移动10px*/</span></span><br></pre></td></tr></table></figure><p>当static元素的<code>margin-bottom/margin-right</code>被赋予负值时，会将后续的元素拖拉进来，覆盖原来的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box1</span> &#123;<span class="attribute">margin-bottom </span>: -<span class="number">10px</span>;&#125;</span><br><span class="line"><span class="comment">/*box1后续的元素将向上移动10px，box1本身不会移动*/</span></span><br></pre></td></tr></table></figure><p><strong>作用在浮动元素上的负margin属性值</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mydiv1"</span>&gt;</span>First<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mydiv2"</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 应用在与浮动相反方向的负margin */</span></span><br><span class="line"><span class="selector-id">#mydiv1</span> &#123;<span class="attribute">float</span>:left; <span class="attribute">margin-right</span>:-<span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure><p>如果给一个浮动元素加上相反方向的负margin，则会使行间距为0且内容重叠。这对于创建1列是100%宽度而其他列是固定宽度（比如100px）的自适应布局来说是非常有用的方法。</p><p>若两个元素都为浮动，且#mydiv1的元素设定margin-right为20px。这样#mydiv2会认为#mydiv1的宽度比原来宽度缩短了20px（因此会导致重叠）。但有意思的是，#mydiv1的内容不受影响，保持原有的宽度。</p><p>如果负margin等于实际宽度，则元素会被完全覆盖。这是因为元素的完全宽度等于margin，padding，border，width相加而成，所以如果负margin等于余下三者的和，那元素的实际宽度也就变成了0px。</p><h1 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h1><p>看圣杯布局前，先看看如何实现三列布局</p><p><strong>三列布局需求：</strong></p><ul><li>两边固定，中间自适应</li><li>当中列要完整显示</li><li>当中列优先加载</li></ul><h2 id="定位实现"><a href="#定位实现" class="headerlink" title="定位实现"></a>定位实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 两倍的left+right */</span></span></span><br><span class="line"><span class="undefined">            min-width: 600px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 400px;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            left: 0;</span></span><br><span class="line"><span class="undefined">            top: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            right: 0;</span></span><br><span class="line"><span class="undefined">            top: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#middle</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 400px;</span></span><br><span class="line"><span class="undefined">            padding: 0 200px;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是页面的整体布局很少会使用定位来实现，而且定位需要一个容器，容器的定位必须是相对定位，定位会提升元素层级，这样布局会相对复杂。</p><h2 id="浮动实现"><a href="#浮动实现" class="headerlink" title="浮动实现"></a>浮动实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 两倍的left+right */</span></span></span><br><span class="line"><span class="undefined">            min-width: 600px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 400px;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: right;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#middle</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 400px;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，浮动来实现三列布局比使用定位来实现三列布局更加方便。但是也造成一个问题，中间列按照文档的加载顺序，无法做到中间列优先加载，所以圣杯布局就出现了。</p><h2 id="实现圣杯布局"><a href="#实现圣杯布局" class="headerlink" title="实现圣杯布局"></a>实现圣杯布局</h2><p>完整实现代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#header</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: gray;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            line-height: 50px;</span></span><br><span class="line"><span class="undefined">            height: 50px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#middle</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 1、中间自适应，给予宽度100%，middle的包含块为container */</span></span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#middle</span>, <span class="selector-id">#left</span>, <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 2、三个块设置浮动，且middle宽度为100%，则left，和right换行显示 */</span></span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="undefined">            /* 3、解决left，设置margin-left为-100%，因为left的包含块和middle的包含块是同一个，</span></span><br><span class="line"><span class="undefined">            则-100%的值等于middle的宽度，则left被拉成与middle同行显示且靠middle左边对齐 */</span></span><br><span class="line"><span class="undefined">            margin-left: -100%;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 6、将自己往外拉自身的宽度值 */</span></span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">            left: -200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 4、同理，只需要设置负值为与自身宽度相同，则被拉上与middle同行显示，且右边与middle右边对其 */</span></span></span><br><span class="line"><span class="undefined">            margin-left: -200px;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 7、将自己往外拉自身的宽度值 */</span></span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">            right: -200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#middle</span> &#123;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="undefined">            /* 5、完成后，但是middle宽度还是整个的100%，left与right其实只是盖着它们，并没有把内容设置到中间，但是这里不能简单的设置padding值，</span></span><br><span class="line"><span class="undefined">            因为中间的宽度是100&amp;设定死的，而且left的margin也会随之变化，</span></span><br><span class="line"><span class="undefined">            所以要给它们三个的父元素container设置padding值，然后再将left和right往外拉 */</span></span><br><span class="line"><span class="undefined">            padding: 0 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 0、解决高度塌陷 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="undefined">            *zoom: 1;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">            content: "";</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            clear: both;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>圣杯布局结合了浮动、定位等技术，但最重要一点是使用了<code>负margin</code>的用法。</p><h1 id="伪等高布局"><a href="#伪等高布局" class="headerlink" title="伪等高布局"></a>伪等高布局</h1><p>通常我们会遇到一些需求，要求两列高度相同，但是两列内容所撑开的高度不一定相同，伪等高布局就出现了。</p><p>实现代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0 400px;</span></span><br><span class="line"><span class="undefined">            border: 1px black solid;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 父容器设置内容溢出显示 */</span></span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            width: 400px;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            width: 400px;</span></span><br><span class="line"><span class="undefined">            background-color: gray;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置padding，让内容撑开一定高度 */</span></span></span><br><span class="line"><span class="undefined">            padding-bottom: 10000px;</span></span><br><span class="line"><span class="css">            <span class="comment">/*内容边界在收缩回来。*/</span></span></span><br><span class="line"><span class="undefined">            margin-bottom: -10000px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 解决高度塌陷 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="undefined">            *zoom: 1;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">            content: "";</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            clear: both;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样多列也是如此运用，但是原理还是利用了<code>负margin</code>的特性来实现。</p><h1 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h1><p>因为圣杯布局外部整体布局还是会使用到定位，这样还是会对页面布局产生比较大的影响，那么双飞翼布局就出现了，对比圣杯，仅仅只是加了一个标签来搭建整体结构，不会使用到定位这些元素来影响到整体的布局。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#header</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">            line-height: 50px;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> <span class="selector-class">.left</span>, <span class="selector-id">#container</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            margin-left: -100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            margin-left: -200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: aqua;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> <span class="selector-class">.middle</span> <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="undefined">            padding: 0 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 解决高度塌陷 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="undefined">            *zoom: 1;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">            content: "";</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            clear: both;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对比圣杯布局，就是在middle里再加一个元素用来做内容的容器，那么这个容器再设置padding就不会影响到两侧元素了 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                middle content</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h1><p>先看一段代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        html &#123;</span></span><br><span class="line"><span class="undefined">            margin: 30px;</span></span><br><span class="line"><span class="undefined">            border: 1px black solid;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            margin: 30px;</span></span><br><span class="line"><span class="undefined">            border: 1px black solid;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 5000px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看看这时候的滚动条作用与谁身上，不是body，也不是html，而是作用与<code>文档</code>上。</p><p>再看一个案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        html &#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            margin: 30px;</span></span><br><span class="line"><span class="undefined">            border: 1px black solid;</span></span><br><span class="line"><span class="undefined">            overflow: scroll;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            margin: 30px;</span></span><br><span class="line"><span class="undefined">            border: 1px black solid;</span></span><br><span class="line"><span class="undefined">            overflow: scroll;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 5000px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>body和html都添加了高度为100%的属性值，而它俩的包含块为初始包含块，所以它们两个高度为视口的高度。而两个都添加了overflow为scroll时，不仅文档出现了滚动条，而且body身上也出现了滚动条。</p><h1 id="静止系统默认滚动条"><a href="#静止系统默认滚动条" class="headerlink" title="静止系统默认滚动条"></a>静止系统默认滚动条</h1><p>看到上面的例子后，如何静止掉系统的默认滚动条。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        html,body &#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            overflow: auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 5000px;"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="解决IE6下fixed固定定位失效问题"><a href="#解决IE6下fixed固定定位失效问题" class="headerlink" title="解决IE6下fixed固定定位失效问题"></a>解决IE6下fixed固定定位失效问题</h1><p>实现代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="comment">/* 隐藏系统滚动条 */</span></span></span><br><span class="line"><span class="undefined">        html,</span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            overflow: scroll;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            left: 50px;</span></span><br><span class="line"><span class="undefined">            top: 50px;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 5000px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到test元素仅仅只是设置了绝对定位，但是作用基本等同于固定定位。<br><strong>解释：</strong>因为这里隐藏了系统的默认滚动条，body显示的滚动条并不会移动视口，只有系统的滚动条才会移动视口。body的滚动条仅仅只是移动的body内的元素。而test元素的包含块是视口，所以就算滚动条怎么移动，test元素也不会移动，这就是另类解决fixed定位失效的问题解决办法。</p><h1 id="粘连布局"><a href="#粘连布局" class="headerlink" title="粘连布局"></a>粘连布局</h1><p>可能会遇到一种需求，我们有一个内容<code>main</code></p><ul><li>当<code>main</code>的高度足够长的时候，<code>footer</code>应该紧跟在<code>main</code>元素后面</li><li>当<code>main</code>元素比较短的时候（比如小于屏幕的高度），我们期望这个<code>footer</code>元素能够粘连在屏幕底部</li></ul><p>实现代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body,</span></span><br><span class="line"><span class="undefined">        html &#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            min-height: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="undefined">            padding-bottom: 50px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">            height: 50px;</span></span><br><span class="line"><span class="undefined">            line-height: 50px;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="comment">/* 将自己拉上去一个自己的高度 */</span></span></span><br><span class="line"><span class="undefined">            margin-top: -50px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 必须要放在wrap外面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内容少的时候，footer粘在底部，当内容过多时滚动并紧跟内容。也是简单的<code>负margin</code>的运用。</p><h1 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">BFC</a></h1><p>理解BFC是什么前我们先来理解另外两个概念：<code>Box</code>和<code>FC</code>(即formatting context)</p><h2 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h2><p>一个页面是由很多个<code>Box</code>组成的，元素的类型和<code>display</code>属性决定了这个<code>Box</code>的类型。不同类型的<code>Box</code>，会参与不同的Formatting Context。</p><p><code>Block Level</code>的box会参与形成<code>BFC</code>，比如<code>display</code>值为<code>block</code>，<code>list-item</code>，<code>table</code>的元素。</p><p><code>Inline Level</code>的box会参与形成<code>IFC</code>，比如<code>display</code>值为<code>inline</code>，<code>inline-table</code>，<code>inline-block</code>的元素。</p><h2 id="FC-Formatting-Context"><a href="#FC-Formatting-Context" class="headerlink" title="FC(Formatting Context)"></a>FC(Formatting Context)</h2><p>它是W3C CSS2.1规范中的一个概念，定义的是页面中的一块渲染区域，并且有一套渲染规则，它 <strong>决定了其子元素将如何定位</strong>，以及和 <strong>其他元素的关系和相互作用</strong>。</p><p>常见的<code>Formatting Context</code>有：<code>Block Formatting Context</code>(BFC|块级格式化上下文)和<code>Inline Formatting Context</code>(IFC|行内格式化上下文)。</p><h2 id="IFC、BFC布局规则"><a href="#IFC、BFC布局规则" class="headerlink" title="IFC、BFC布局规则"></a>IFC、BFC布局规则</h2><h3 id="IFC布局规则"><a href="#IFC布局规则" class="headerlink" title="IFC布局规则"></a>IFC布局规则</h3><p>在行内格式化上下文中，框（boxes）一个接一个的水平排列，起点是包含块的顶部。水平方向上的<code>margin</code>，<code>border</code>和<code>padding</code>在框之间得到保留。框在垂直方向上可以以不同的方式对齐：它们的顶部或者底部对其，或根据其中文字的基线对其。包含那些框的长方形区域，会形成一行，叫做行框。</p><h3 id="BFC布局规则【重要】"><a href="#BFC布局规则【重要】" class="headerlink" title="BFC布局规则【重要】"></a>BFC布局规则【重要】</h3><ul><li>内部的Box会在垂直方向，一个接一个的放置。</li><li>Box垂直方向的距离由<code>margin</code>决定。属于同一个BFC的两个相邻Box的<code>margin</code>会发生重叠</li><li>每个元素的左外边缘（margin-left），与包含块的左边（<code>contain box left</code>)相接触（对于从左往右的格式化，否则相反）。即使存在浮动也是如此。除非这个元素自己形成了一个新的BFC。</li><li>BFC的区域不会与<code>float box</code>重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算BFC的高度时，浮动元素也参与计算。</li></ul><h2 id="块格式化上下文（Block-Formatting-Context，BFC）"><a href="#块格式化上下文（Block-Formatting-Context，BFC）" class="headerlink" title="块格式化上下文（Block Formatting Context，BFC）"></a>块格式化上下文（Block Formatting Context，BFC）</h2><p>是Web页面的可视化CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p><p>下列方式会创建 <strong>块格式化上下文：</strong></p><ul><li>根元素或包含根元素的元素</li><li>浮动元素（元素的 <code>float</code> 不是 <code>none</code>）</li><li>绝对定位元素（元素的 <code>position</code> 为 <code>absolute</code> 或 <code>fixed</code>）</li><li>行内块元素（元素的 <code>display</code> 为 <code>inline-block</code>）</li><li>表格单元格（元素的 <code>display</code>为 <code>table-cell</code>，HTML表格单元格默认为该值）</li><li>表格标题（元素的 <code>display</code> 为 <code>table-caption</code>，HTML表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 <code>display</code>为 <code>table</code>、<code>table-row</code>、 <code>table-row-group</code>、<code>table-header-group</code>、<code>table-footer-group</code>（分别是<code>HTML table、row、tbody、thead、tfoot</code>的默认属性）或 <code>inline-table</code>）</li><li><code>overflow</code> 值不为 <code>visible</code> 的块元素</li><li><code>display</code> 值为 <code>flow-root</code> 的元素</li><li><code>contain</code> 值为 <code>layout</code>、<code>content</code>或 <code>strict</code> 的元素</li><li>弹性元素（<code>display</code>为 <code>flex</code> 或 <code>inline-flex</code>元素的直接子元素）</li><li>网格元素（<code>display</code>为 <code>grid</code> 或 <code>inline-grid</code> 元素的直接子元素）</li><li>多列容器（元素的 <code>column-count</code> 或 <code>column-width</code> 不为 <code>auto</code>，包括 <code>column-count</code> 为 1）</li><li><code>column-span</code> 为 <code>all</code> 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。</li></ul><blockquote><p>块格式化上下文包含创建它的元素内部的所有内容.</p></blockquote><p>块格式化上下文对浮动定位（参见 float）与清除浮动（参见 clear）都很重要。浮动定位和清除浮动时只会应用于同一个BFC内的元素。浮动不会影响其它BFC中元素的布局，而清除浮动只能清除同一BFC中在它前面的元素的浮动。外边距折叠（Margin collapsing）也只会发生在属于同一BFC的块级元素之间。</p><p>简单来说：BFC就是一个容器，来管理块级元素。</p><h1 id="IE下的BFC（hasLayout）"><a href="#IE下的BFC（hasLayout）" class="headerlink" title="IE下的BFC（hasLayout）"></a>IE下的BFC（hasLayout）</h1><p>IE5、6、7下没有BFC的概念，但有类似于BFC相同的概念<code>hasLayout</code>。</p><p>hasLayout可以简单看作是IE5.5/6/7中的<code>BFC(Block Formatting Context)</code>。也就是一个元素要么自己对自身内容进行组织和尺寸计算(即可通过width/height来设置自身的宽高)，要么由其containing block来组织和尺寸计算。而IFC（即没有拥有布局）而言，则是元素无法对自身内容进行组织和尺寸计算，而是由自身内容来决定其尺寸（即仅能通过line-height设置内容行距，通过行距来支撑元素的高度；也无法通过width设置元素宽度，仅能由内容来决定而已）。</p><p>当hasLayout为true时(就是所谓的”拥有布局”)，相当于元素产生新BFC，元素自己对自身内容进行组织和尺寸计算;</p><p>当hasLayout为false时(就是所谓的”不拥有布局”)，相当于元素不产生新BFC，元素由其所属的containing block进行组织和尺寸计算。</p><p>和产生新BFC的特性一样，hasLayout无法通过CSS属性直接设置，而是通过某些CSS属性间接开启这一特性。不同的是某些CSS属性是以不可逆方式间接开启hasLayout为true。并且默认产生新BFC的只有html元素，而默认hasLayout为true的元素就不只有html元素了。</p><p>另外我们可以通过object.currentStyle.hasLayout属性来判断元素是否开启了hasLayout特性。</p><p>必须说明： **IE8及以上浏览器使用了全新的显示引擎，已经不再使用hasLayout属性，因为hasLayout属性只针对IE7以下。</p><p><strong>默认拥有布局的元素</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>, <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>, <span class="tag">&lt;<span class="name">tr</span>&gt;</span>, <span class="tag">&lt;<span class="name">th</span>&gt;</span>, <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>,<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>, <span class="tag">&lt;<span class="name">button</span>&gt;</span>, <span class="tag">&lt;<span class="name">select</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>, <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>, <span class="tag">&lt;<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span>, <span class="tag">&lt;<span class="name">embed</span>&gt;</span>, <span class="tag">&lt;<span class="name">object</span>&gt;</span>, <span class="tag">&lt;<span class="name">applet</span>&gt;</span>,<span class="tag">&lt;<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>如何触发hasLayout</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span></span><br><span class="line"><span class="selector-tag">height</span>: (除 <span class="selector-tag">auto</span> 外任何值)</span><br><span class="line"><span class="selector-tag">width</span>: (除 <span class="selector-tag">auto</span> 外任何值)</span><br><span class="line"><span class="selector-tag">float</span>: (<span class="selector-tag">left</span> 或 <span class="selector-tag">right</span>)</span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span></span><br><span class="line"><span class="selector-tag">writing-mode</span>: <span class="selector-tag">tb-rl</span></span><br><span class="line"><span class="selector-tag">zoom</span>: (除 <span class="selector-tag">normal</span> 外任意值)</span><br></pre></td></tr></table></figure><p>IE7还有一些额外的属性可触发hasLayout</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">min-height</span>: (任意值)</span><br><span class="line"><span class="selector-tag">min-width</span>: (任意值)</span><br><span class="line"><span class="selector-tag">max-height</span>: (除 <span class="selector-tag">none</span> 外任意值)</span><br><span class="line"><span class="selector-tag">max-width</span>: (除 <span class="selector-tag">none</span> 外任意值)</span><br><span class="line"><span class="selector-tag">overflow</span>: (除 <span class="selector-tag">visible</span> 外任意值，仅用于块级元素)</span><br><span class="line"><span class="selector-tag">overflow-x</span>: (除 <span class="selector-tag">visible</span> 外任意值，仅用于块级元素)</span><br><span class="line"><span class="selector-tag">overflow-y</span>: (除 <span class="selector-tag">visible</span> 外任意值，仅用于块级元素)</span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">fixed</span></span><br></pre></td></tr></table></figure><p>使用hasLayout就是为了兼容一些项目需要运行在IE7以下版本。</p><h1 id="BFC实现自适应两栏布局"><a href="#BFC实现自适应两栏布局" class="headerlink" title="BFC实现自适应两栏布局"></a>BFC实现自适应两栏布局</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: aquamarine;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: green;</span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">            content: "";</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            clear: both;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="undefined">            zoom: 1;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用三列布局的思想来实现两列布局，但是利用BFC的原理可以更简单的实现两列布局。由于left块开启浮动，会使得left显示在middle上层，但是middle还是占满100%，单纯用颜色判断像是两列布局，但是开启left透明度会发现middle占满100%，是浮现在上面，而让middle开启BFC，overflow为hidden即为开启了middle的BFC，BFC的区域并不会和浮动区域重叠，即可实现。</p><h1 id="清除浮动解决高度塌陷的方式"><a href="#清除浮动解决高度塌陷的方式" class="headerlink" title="清除浮动解决高度塌陷的方式"></a>清除浮动解决高度塌陷的方式</h1><h2 id="直接给予高度"><a href="#直接给予高度" class="headerlink" title="直接给予高度"></a>直接给予高度</h2><p>直接计算内容盒子高度，并赋予父容器高度，简单，但是毫无扩展性。</p><h2 id="利用BFC"><a href="#利用BFC" class="headerlink" title="利用BFC"></a>利用BFC</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">            border: 1px black solid;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 利用BFC布局原则，BFC块高度，浮动元素也会参与高度计算，只要满足开启BFC的条件即可 */</span></span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: aqua;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="br标签"><a href="#br标签" class="headerlink" title="br标签"></a>br标签</h2><p><code>&lt;br clear=&quot;all&#39; /&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">            border: 1px black solid;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: aqua;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 利用br标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> <span class="attr">clear</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="空标签清除浮动"><a href="#空标签清除浮动" class="headerlink" title="空标签清除浮动"></a>空标签清除浮动</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">            border: 1px black solid;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: aqua;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="undefined">            clear: both;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 空标签并清除浮动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪元素清除浮动"><a href="#伪元素清除浮动" class="headerlink" title="伪元素清除浮动"></a>伪元素清除浮动</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">            border: 1px black solid;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: aqua;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="undefined">            *zoom: 1;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">            content: "";</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            clear: both;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h1><h2 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h2><p>需要已知自身元素高宽。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">            width: 600px;</span></span><br><span class="line"><span class="undefined">            height: 600px;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#inner</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            left: 50%;</span></span><br><span class="line"><span class="undefined">            top: 50%;</span></span><br><span class="line"><span class="undefined">            margin-left: -50px;</span></span><br><span class="line"><span class="undefined">            margin-top: -50px;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: aqua;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h2><p>需要已知自身元素高宽。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">            width: 600px;</span></span><br><span class="line"><span class="undefined">            height: 600px;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#inner</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            left: 0;</span></span><br><span class="line"><span class="undefined">            top: 0;</span></span><br><span class="line"><span class="undefined">            right: 0;</span></span><br><span class="line"><span class="undefined">            bottom: 0;</span></span><br><span class="line"><span class="undefined">            margin: auto auto;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: aqua;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原理：</p><p>绝对定位盒子特性：高宽有内容撑开下<br>水平方向上：left + right + width + padding + margin = 包含块padding内容区域<br>垂直方向上：top + bottom + width + padding + margin = 包含块padding内容区域</p><p>上述例子中：<br>水平方向上：0 + 0 + 100 + 0 + auto = 600<br>垂直方向上：0 + 0 + 100 + 0 + auto = 600<br>则auto等于250，即可居中。</p><h2 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h2><p>无需知道元素高度，使用transform</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">            width: 600px;</span></span><br><span class="line"><span class="undefined">            height: 600px;</span></span><br><span class="line"><span class="undefined">            background-color: pink;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#inner</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            left: 50%;</span></span><br><span class="line"><span class="undefined">            top: 50%;</span></span><br><span class="line"><span class="undefined">            transform: translate(-50%,-50%);</span></span><br><span class="line"><span class="undefined">            background-color: aqua;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            testaaaaaaa<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            testaaaaaa<span class="tag">&lt;<span class="name">abr</span> /&gt;</span></span><br><span class="line">            testaaaaaa<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            testaaaaaa<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h1><p><img src="line_height.png" alt="行高"></p><p>从上到下四条线分别是顶线、中线、基线、底线，很像才学英语字母时的四线三格</p><p>1.行高是指上下文本行的基线间的垂直距离，即图中两条红线间垂直距离。<br>2.行距是指一行底线到下一行顶线的垂直距离，即第一行粉线和第二行绿线间的垂直距离。<br>3.半行距是行距的一半，即区域3垂直距离/2，区域1，2，3，4的距离之和为行高，而区域1，2，4距离之和为字体size，所以半行距也可以这么算：（行高-字体size）/2 </p><p><strong>内容区：</strong>底线和顶线包裹的区域，即下图深灰色背景区域。<br>文本行中的每个元素都会生成一个内容区，这个由字体的大小确定。这个内容区则会生成一个行内框，如果不存在其他因素，这个行内框就完全等于该元素的内容区，由line-height产生的行间距就是增加和减少各行内框高度的因素之一。</p><p><strong>行内框 :</strong> 行内框是一个浏览器渲染模型中的一个概念，无法显示出来，行内框默认等于内容区域， 将line-height的计算值减去font-size的计算值，这个值就是总行距，这个值可能是个负值，任何将行间距/2 分别应用到内容区的顶部和底部，其结果就是该元素的行内框。</p><p><strong>行框（line box）</strong>，行框是指本行的一个虚拟的矩形框，是浏览器渲染模式中的一个概念，并没有实际显示。默认情况下行框高度等于本行内所有元素中行内框最大的值（一行上垂直对齐时以行高值最大的行内框为基准，其他行内框采用自己的对齐方式向基准对齐，最终计算行框的高度），当有多行内容时，每行都会有自己的行框。</p><p><img src="line_height2.png" alt=""></p><h1 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/vertical-align" target="_blank" rel="noopener">vertical-align</a></h1><p>CSS 的属性 <code>vertical-align</code> 用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。</p><blockquote><p>注意 vertical-align 只对行内元素、表格单元格元素生效：不能用它垂直对齐块级元素。</p></blockquote><h2 id="使行内元素盒模型与其行内元素容器垂直对齐。例如，用于垂直对齐一行文本的内的图片-lt-img-gt-："><a href="#使行内元素盒模型与其行内元素容器垂直对齐。例如，用于垂直对齐一行文本的内的图片-lt-img-gt-：" class="headerlink" title="使行内元素盒模型与其行内元素容器垂直对齐。例如，用于垂直对齐一行文本的内的图片&lt;img&gt;："></a>使行内元素盒模型与其行内元素容器垂直对齐。例如，用于垂直对齐一行文本的内的图片<code>&lt;img&gt;</code>：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 600px;</span></span><br><span class="line"><span class="undefined">            height: 600px;</span></span><br><span class="line"><span class="undefined">            border: 1px red solid;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">            content: "";</span></span><br><span class="line"><span class="undefined">            display: inline-block;</span></span><br><span class="line"><span class="undefined">            height: 50%;</span></span><br><span class="line"><span class="undefined">            width: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.icon</span> &#123;</span></span><br><span class="line"><span class="undefined">            vertical-align: middle; </span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">src</span>=<span class="string">"img/img.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>已放置于<a href="https://github.com/hackycy/CSS-" target="_blank" rel="noopener">github</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://segmentfault.com/a/1190000009545742" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009545742</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;包含块&quot;&gt;&lt;a href=&quot;#包含块&quot; class=&quot;headerlink&quot; title=&quot;包含块&quot;&gt;&lt;/a&gt;包含块&lt;/h1&gt;&lt;p&gt;一个元素的尺寸和位置经常受其包含块的影响，大多数情况下，包含块就是这个元素最近的祖先元素的内容去，但是也不是总是这样的。&lt;br&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://hackycy.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://hackycy.github.io/tags/CSS/"/>
    
      <category term="面试" scheme="http://hackycy.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>跨域介绍以及跨域的方式</title>
    <link href="http://hackycy.github.io/2019/03/27/%E8%B7%A8%E5%9F%9F%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E8%B7%A8%E5%9F%9F%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://hackycy.github.io/2019/03/27/跨域介绍以及跨域的方式/</id>
    <published>2019-03-27T14:40:56.000Z</published>
    <updated>2019-03-27T16:01:11.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前端在与后端进行数据交互时经常会碰到跨域请求，这里在此探讨一下。</p><a id="more"></a><h1 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h1><h2 id="什么是同源策略及其限制内容"><a href="#什么是同源策略及其限制内容" class="headerlink" title="什么是同源策略及其限制内容"></a>什么是同源策略及其限制内容</h2><p>同源策略是一种约定，它是浏览器最核心也是最基本的安全功能，如果少了同源策略，浏览器很容易收到XSS，CSFR等攻击。所谓同源指的是<code>协议+域名+端口</code>三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p><img src="protocozc.jpg" alt=""></p><p><strong>同源策略的限制内容有：</strong></p><ul><li>Cookie、LocalStorage、IndexedDB等存储性内容</li><li>DOM节点</li><li>AJAX请求发送后，结果被浏览器拦截了</li></ul><p>但是有三个标签是允许跨域加载资源</p><ul><li><code>&lt;img src=&quot;...&quot;&gt;</code></li><li><code>&lt;link href=&quot;...&quot;&gt;</code></li><li><code>&lt;script src=&quot;...&quot;&gt;</code></li></ul><h2 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h2><p>当<code>协议</code>、<code>子域名</code>、<code>主域名</code>、<code>端口号</code>中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作<code>跨域</code>，常见的跨域场景如下图所示：</p><table><thead><tr><th>URL</th><th>说明</th><th>是否允许通信</th></tr></thead><tbody><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> <br> <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同一个域名下</td><td>允许</td></tr><tr><td><a href="http://www.a.com/lab/a.js" target="_blank" rel="noopener">http://www.a.com/lab/a.js</a> <br> <a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td><td>同一域名下不同文件夹</td><td>允许</td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a> <br> <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同一域名，不同端口</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> <br> <a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td><td>同一域名，不同协议</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> <br> <a href="http://70.32.92.74/b.js" target="_blank" rel="noopener">http://70.32.92.74/b.js</a></td><td>域名和域名对应ip</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> <br> <a href="http://script.a.com/b.js" target="_blank" rel="noopener">http://script.a.com/b.js</a></td><td>主域相同，子域不同</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> <br> <a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a></td><td>同一域名，不同二级域名</td><td>不允许，cookie这种情况下也不允许</td></tr><tr><td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.js</a> <br> <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>不同域名</td><td>不允许</td></tr></tbody></table><p><strong>特别说明</strong></p><ul><li>如果时协议和端口造成的跨域问题，前端时无能为力的</li><li>在跨域问题上，仅仅是通过“URL的首部“来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议、域名和端口必须匹配“。</li></ul><blockquote><p>请求跨域，那么请求有没有发出去？<br><strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。</strong>，可是通过表单的方式可以发起跨域请求，为什么<code>AJAX</code>就不可以，归根结底，跨域是为了阻止用户读取到另一个域名下的内容，<code>AJAX</code>可以获取响应，浏览器认为这并不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。这同时也说明了跨域并不能完全阻止<code>CSRF</code>，因为请求毕竟是发出去了。</p></blockquote><h1 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h1><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>JSONP原理是利用<code>&lt;script&gt;</code>标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的JSON数据。JSONP请求一定需要对方的服务器做支持才可以。</p><h3 id="JSONP与AJAX对比"><a href="#JSONP与AJAX对比" class="headerlink" title="JSONP与AJAX对比"></a>JSONP与AJAX对比</h3><p>JSONP与AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但是AJAX属于同源策略，JSONP属于非同源策略（跨域请求）</p><h3 id="JSONP优缺点"><a href="#JSONP优缺点" class="headerlink" title="JSONP优缺点"></a>JSONP优缺点</h3><p>JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。<br>缺点是仅支持get方法具有局限性，不安全可能会XSS攻击。</p><h3 id="JSONP的实现流程"><a href="#JSONP的实现流程" class="headerlink" title="JSONP的实现流程"></a>JSONP的实现流程</h3><ul><li>声明一个回调函数，其函数名（如show）当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据（服务器返回的data）。</li><li>创建一个<code>&lt;script&gt;</code>标签，把那个跨域的API数据接口地址，赋值给script的src，还要在这个地址中向服务器传递该参数名（可以通过问好传参：`?callback=show）。</li><li>服务器接受到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串，例如：传递进去的函数名是show，它准备好的数据是show(‘XXX’)。</li><li>最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数<code>show</code>，对返回的数据进行操作。</li></ul><p>在开发中可能会遇到多个JSONP请求的回调函数名是相同的，这时候就需要自己封装一个JSONP函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123; url, params, callback &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="built_in">window</span>[callback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123; ...params, callback &#125; <span class="comment">// wd=b&amp;callback=show</span></span><br><span class="line">    <span class="keyword">let</span> arrs = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">'&amp;'</span>)&#125;</span>`</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(&#123;</span><br><span class="line">  url: <span class="string">'http://127.0.01:8000/say'</span>,</span><br><span class="line">  params: &#123; <span class="attr">wd</span>: <span class="string">'Iloveyou'</span> &#125;,</span><br><span class="line">  callback: <span class="string">'show'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>上面这段代码相当于向<code>http://127.0.0.1:8000/say?wd=Iloveyou&amp;callback=show</code>这个地址请求数据，然后后台返回show(‘I love you’)，最后会允许show()这个函数，打印出’我不爱你’</p><p>后端nodejs<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line">app.get(<span class="string">'/say'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; wd, callback &#125; = req.query</span><br><span class="line">  <span class="built_in">console</span>.log(wd) <span class="comment">// Iloveyou</span></span><br><span class="line">  <span class="built_in">console</span>.log(callback) <span class="comment">// show</span></span><br><span class="line">  res.end(<span class="string">`<span class="subst">$&#123;callback&#125;</span>('我不爱你')`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">8000</span>)</span><br></pre></td></tr></table></figure></p><h3 id="JQuery的jsonp形式"><a href="#JQuery的jsonp形式" class="headerlink" title="JQuery的jsonp形式"></a>JQuery的jsonp形式</h3><p>JSONP都是<code>GET</code>和异步请求，不存在其他的请求方式和同步请求，且JQuery默认就会给JSONP的请求清除缓存。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"http://crossdomain.com/jsonServerResponse"</span>,</span><br><span class="line">dataType:<span class="string">"jsonp"</span>,</span><br><span class="line">type:<span class="string">"get"</span>,<span class="comment">//可以省略</span></span><br><span class="line">jsonpCallback:<span class="string">"show"</span>,<span class="comment">//-&gt;自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略</span></span><br><span class="line">jsonp:<span class="string">"callback"</span>,<span class="comment">//-&gt;把传递函数名的那个形参callback，可省略</span></span><br><span class="line">success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p><strong>CORS需要浏览器和后端同时支持。IE8 和 9 需要通过XDomainRequest来实现。</strong></p><p>浏览器会自动CORS通信，实现CORS通信的关键是后端。只要后端实现了CORS，就实现了跨域。</p><p>服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p><p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求。</p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>只要同时满足一下两大条件，就属于简单请求<br><strong>条件1：使用下列方式之一：</strong></p><ul><li>GET</li><li>HEAD</li><li>POST</li></ul><p><strong>条件2：Content-Type的值仅限于下列三者之一：</strong></p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><p>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</p><h3 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h3><p>不符合以上条件的请求就肯定是复杂请求了。<br>复杂请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。</p><p>我们用PUT向后台请求时，属于复杂请求，后台需做如下配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line"><span class="comment">// 预检的存活时间</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line"><span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">  res.end() </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义后台返回的内容</span></span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>接下来我们看下一个完整复杂请求的例子，并且介绍下CORS请求相关的字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiamen'</span> <span class="comment">// cookie不能跨域</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span> <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, <span class="string">'http://localhost:4000/getData'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'name'</span>, <span class="string">'xiamen'</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(xhr.response)</span><br><span class="line">      <span class="comment">//得到响应头，后台需设置Access-Control-Expose-Headers</span></span><br><span class="line">      <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">'name'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server1.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server2.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="keyword">let</span> whitList = [<span class="string">'http://localhost:3000'</span>] <span class="comment">//设置白名单</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin</span><br><span class="line">  <span class="keyword">if</span> (whitList.includes(origin)) &#123;</span><br><span class="line">    <span class="comment">// 设置哪个源可以访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, origin)</span><br><span class="line">    <span class="comment">// 允许携带哪个头访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line">    <span class="comment">// 允许携带cookie</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 预检的存活时间</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="comment">// 允许返回的头</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">      res.end() <span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.setHeader(<span class="string">'name'</span>, <span class="string">'jw'</span>) <span class="comment">//返回一个响应头，后台需设置</span></span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><p>上述代码由<a href="http://localhost:3000/index.html向http://localhost:4000/跨域请求，正如我们上面所说的，后端是实现" target="_blank" rel="noopener">http://localhost:3000/index.html向http://localhost:4000/跨域请求，正如我们上面所说的，后端是实现</a> CORS 通信的关键。</p><h2 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h2><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p>postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</p><blockquote><p>otherWindow.postMessage(message, targetOrigin, [transfer]);</p></blockquote><ul><li>message: 将要发送到其他 window的数据。</li><li>targetOrigin:通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。</li><li>transfer(可选)：是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</li></ul><p>接下来我们看个例子： <code>http://localhost:3000/a.html</code>页面向<code>http://localhost:4000/b.html</code>传递“我爱你”,然后后者传回”我不爱你”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line">  &lt;iframe src=<span class="string">"http://localhost:4000/b.html"</span> frameborder=<span class="string">"0"</span> id=<span class="string">"frame"</span> onload=<span class="string">"load()"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span> <span class="comment">//等它加载完触发一个事件</span></span><br><span class="line">  <span class="comment">//内嵌在http://localhost:3000/a.html</span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">'frame'</span>)</span><br><span class="line">        frame.contentWindow.postMessage(<span class="string">'我爱你'</span>, <span class="string">'http://localhost:4000'</span>) <span class="comment">//发送数据</span></span><br><span class="line">        <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">//接受返回数据</span></span><br><span class="line">          <span class="built_in">console</span>.log(e.data) <span class="comment">//我不爱你</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span><br><span class="line">  <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data) <span class="comment">//我爱你</span></span><br><span class="line">    e.source.postMessage(<span class="string">'我不爱你'</span>, e.origin)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><p>Websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket和HTTP都是应用层协议，都基于 TCP 协议。但是 <strong>WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据</strong>。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p><p>原生WebSocket API使用起来不太方便，我们使用<code>Socket.io</code>，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p><p>我们先来看个例子：本地文件<code>socket.html</code>向<code>localhost:3000</code>发生数据和接受数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// socket.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>);</span></span><br><span class="line"><span class="javascript">    socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      socket.send(<span class="string">'我爱你'</span>);<span class="comment">//向服务器发送数据</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(e.data);<span class="comment">//接收服务器返回的数据</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);<span class="comment">//记得安装ws</span></span><br><span class="line"><span class="keyword">let</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>:<span class="number">3000</span>&#125;);</span><br><span class="line">wss.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">  ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    ws.send(<span class="string">'我不爱你'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Node中间件代理-两次跨域"><a href="#Node中间件代理-两次跨域" class="headerlink" title="Node中间件代理(两次跨域)"></a>Node中间件代理(两次跨域)</h2><p>实现原理：<strong>同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略</strong>。<br>代理服务器，需要做以下几个步骤：</p><ul><li>接受客户端请求 。</li><li>将<code>请求</code>转发给服务器。</li><li>拿到服务器<code>响应</code>数据。</li><li>将<code>响应</code>转发给客户端。</li></ul><p><img src="nodeproxy.jpg" alt=""></p><p>我们先来看个例子：本地文件index.html文件，通过代理服务器<code>http://localhost:3000</code>向目标服务器<code>http://localhost:4000</code>请求数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// index.html(http://127.0.0.1:5500)</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">'http://localhost:3000'</span>,</span></span><br><span class="line"><span class="javascript">        type: <span class="string">'post'</span>,</span></span><br><span class="line"><span class="javascript">        data: &#123; <span class="attr">name</span>: <span class="string">'xiamen'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        contentType: <span class="string">'application/json;charset=utf-8'</span>,</span></span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(result) <span class="comment">// &#123;"title":"fontend","password":"123456"&#125;</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        error: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(msg)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server1.js 代理服务器(http://localhost:3000)</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">// 第一步：接受客户端请求</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段</span></span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'Content-Type'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 第二步：将请求转发给服务器</span></span><br><span class="line">  <span class="keyword">const</span> proxyRequest = http</span><br><span class="line">    .request(</span><br><span class="line">      &#123;</span><br><span class="line">        host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        port: <span class="number">4000</span>,</span><br><span class="line">        url: <span class="string">'/'</span>,</span><br><span class="line">        method: request.method,</span><br><span class="line">        headers: request.headers</span><br><span class="line">      &#125;,</span><br><span class="line">      serverResponse =&gt; &#123;</span><br><span class="line">        <span class="comment">// 第三步：收到服务器的响应</span></span><br><span class="line">        <span class="keyword">var</span> body = <span class="string">''</span></span><br><span class="line">        serverResponse.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">          body += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        serverResponse.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'The data is '</span> + body)</span><br><span class="line">          <span class="comment">// 第四步：将响应结果转发给浏览器</span></span><br><span class="line">          response.end(body)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    .end()</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The proxyServer is running at http://localhost:3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js(http://localhost:4000)</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">title</span>: <span class="string">'fontend'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    response.end(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">4000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The server is running at http://localhost:4000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在index.html文件打印出<code>{&quot;title&quot;:&quot;fontend&quot;,&quot;password&quot;:&quot;123456&quot;}</code></p><h2 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h2><p>实现原理类似于Node中间件代理，需要你搭建一个中转nginx服务器，用于转发请求。</p><p>使用nginx反向代理实现跨域，是最简单的跨域方式。只需要修改nginx的配置即可解决跨域问题，支持所有浏览器，支持session，不需要修改任何代码，并且不会影响服务器性能。</p><p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p><p>先下载nginx，然后将nginx目录下的nginx.conf修改如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// proxy服务器</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.domain1.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://www.domain2.com:8080;  #反向代理</span><br><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*</span><br><span class="line">        add_header Access-Control-Allow-Credentials true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后通过命令行<code>nginx -s reload</code>启动nginx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 访问nginx中的代理服务器</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.domain1.com:81/?user=admin'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(); js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">// 向前台写cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure><h2 id="window-name-iframe"><a href="#window-name-iframe" class="headerlink" title="window.name + iframe"></a>window.name + iframe</h2><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p><p>其中a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// a.html(http://localhost:3000/b.html)</span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">id</span>=<span class="string">"iframe"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> first = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(first)&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">        iframe.src = <span class="string">'http://localhost:3000/b.html'</span>;</span></span><br><span class="line"><span class="javascript">        first = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第2次onload(同域b.html页)成功后，读取同域window.name中数据</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(iframe.contentWindow.name);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b.html为中间代理页，与a.html同域，内容为空。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// c.html(http://localhost:4000/c.html)</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.name = <span class="string">'我不爱你'</span>  </span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h2 id="location-hash-iframe"><a href="#location-hash-iframe" class="headerlink" title="location.hash + iframe"></a>location.hash + iframe</h2><p>实现原理： a.html欲与c.html跨域相互通信，通过中间页b.html来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><p>具体实现步骤：一开始a.html给c.html传一个hash值，然后c.html收到hash值后，再把hash值传递给b.html，最后b.html将结果放到a.html的hash值中。<br>同样的，a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// a.html</span><br><span class="line"> <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html#iloveyou"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//检测hash的变化</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(location.hash);</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// b.html</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.parent.parent.location.hash = location.hash </span></span><br><span class="line"><span class="javascript">   <span class="comment">//b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面</span></span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// c.html</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hash);</span><br><span class="line"> <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"> iframe.src = <span class="string">'http://localhost:3000/b.html#idontloveyou'</span>;</span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><h2 id="document-domain-iframe"><a href="#document-domain-iframe" class="headerlink" title="document.domain + iframe"></a>document.domain + iframe</h2><p><strong>该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。</strong></p><p>只需要给页面添加<code>document.domain =&#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域。</p><p>实现原理：两个页面都通过js强制设置<code>document.domain</code>为基础主域，就实现了同域。</p><p>我们看个例子：页面<code>a.zf1.cn:3000/a.html</code>获取页面<code>b.zf1.cn:3000/b.html</code>中a的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// a.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> helloa</span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://b.zf1.cn:3000/b.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">id</span>=<span class="string">"frame"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(frame.contentWindow.a);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ b.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   hellob</span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> a = <span class="number">100</span>;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>CORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案</li><li>JSONP只支持GET请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li><li>不管是Node中间件代理还是nginx反向代理，主要是通过同源策略对服务器不加限制。</li><li>日常工作中，用得比较多的跨域方案是cors和nginx反向代理</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage</a></p><p><a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011145364</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前端在与后端进行数据交互时经常会碰到跨域请求，这里在此探讨一下。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://hackycy.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://hackycy.github.io/tags/HTML/"/>
    
      <category term="跨域" scheme="http://hackycy.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>IOS中的Web开发</title>
    <link href="http://hackycy.github.io/2019/03/25/IOS%E4%B8%AD%E7%9A%84Web%E5%BC%80%E5%8F%91/"/>
    <id>http://hackycy.github.io/2019/03/25/IOS中的Web开发/</id>
    <published>2019-03-25T14:19:19.000Z</published>
    <updated>2019-04-07T18:08:43.216Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>移动开发领域近年来已经逐渐告别了野蛮生长的时期，进入了相对成熟的时代。而一直以来 Native 和 Web 的争论从未停止，通过开发者孜孜不倦的努力，Web 的效率和 Native 的体验也一直在寻求着平衡。本文聚焦 iOS 开发和 Web 开发的交叉点，希望能通过简要的介绍，帮助开发者一窥 Hybrid 和大前端的构想。</p></blockquote><a id="more"></a><p><img src="intro.jpg" alt=""></p><h1 id="IOS中web容器与加载"><a href="#IOS中web容器与加载" class="headerlink" title="IOS中web容器与加载"></a>IOS中web容器与加载</h1><h2 id="1、IOS中的Web容器"><a href="#1、IOS中的Web容器" class="headerlink" title="1、IOS中的Web容器"></a>1、IOS中的Web容器</h2><p>目前IOS系统为开发者提供三种方式来展示Web内容</p><h3 id="UIWebView"><a href="#UIWebView" class="headerlink" title="UIWebView"></a>UIWebView</h3><p>UIWebView 从 iOS2 开始就作为 App 内展示 Web 内容的容器，但是长久以来一直遭受开发者的诟病；系统级的内存泄露、极高内存峰值、较差的稳定性、Touch Delay 以及 Javascript 的运行性能及通信限制等等。在 iOS12 以后已经标记为 Deprecated 不再维护。</p><h3 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h3><p>在 iOS 8 中，Apple 引入了新一代的 WebKit framework，同时提供了 WKWebView 用来替代传统的 UIWebView。它更加的稳定、拥有 60fps 滚动刷新率、丰富的手势、KVO、高效的 Web 和 Native 通信，默认进度条等等功能，而最重要的，是使用了和 safari 相同的 Nitro 引擎极大提升了 Javascript 的运行速度。WKWebView 独立的进程管理，也降低了内存占用及 Crash 对主 App 的影响。</p><h3 id="SFSafariViewController"><a href="#SFSafariViewController" class="headerlink" title="SFSafariViewController"></a>SFSafariViewController</h3><p>在 iOS 9 中，Apple 引入了 SFSafariViewController。其特点就是在 App 内可以打开一个高度标准化的、和 Safari 一样界面和特性的页面。同时 SFSafariViewController 支持和 Safari 共享 Cookie 和表单数据等等。</p><h3 id="Web容器选型"><a href="#Web容器选型" class="headerlink" title="Web容器选型"></a>Web容器选型</h3><p>对于 SFSafariViewController：由于其标准化程度之高，使之界面和交互逻辑无法和 App 统一，基于 App 的整体体验的考虑，一般都使用在相对独立的功能和模块中，最常见的就是在 App 内打开 App Store 或者广告、游戏推广的页面。</p><p>对于 UIWebView/WKWebView：如果说之前由于 NSURLProtocol 的问题，好多 App 都在继续使用 UIWebView，那么随着 App 放弃维护 UIWebView（iOS12），全部的 App 应该会陆续的切换到 WKWebView 中来。当然，最初 WKWebView 也为开发者们带来了一些难题，但是随着系统的升级与业务逻辑的适配也逐步的修复，后文会列举几个最为关注的技术点。</p><p>UIWebView/WKWebView 对主 App 内存的影响：<br><img src="memory.jpg" alt=""></p><h2 id="2、WebKit-框架与使用"><a href="#2、WebKit-框架与使用" class="headerlink" title="2、WebKit 框架与使用"></a>2、WebKit 框架与使用</h2><h3 id="WebKit-framework"><a href="#WebKit-framework" class="headerlink" title="WebKit.framework"></a>WebKit.framework</h3><p>WebKit 是一个开源的 Web 浏览器引擎。每当谈到 WebKit，开发者常常迷惑于它和 WebKit2、Safari、iOS 中的 framework、以及 Chromium 等浏览器的关系。</p><p>广义的 WebKit 其实就是指 WebCore，它主要包含了 HTML 和 CSS 的解析、布局和定位这类渲染 HTML 的功能逻辑。而狭义的 WebKit 就是在 WebCore 的基础上，不同平台封装 Javascript 引擎、网络层、GPU 相关的技术（WebGL、视频）、绘制渲染技术以及各个平台对应的接口，形成我们可以用的 WebView 或浏览器，也就是所谓的 WebKit Ports。</p><p><img src="webkit.jpg" alt=""></p><p>比如在 Safari 中 JS 的引擎使用 JavascriptCore，而 Chromium 中使用 V8；渲染方面 Safari 使用 CoreGraphics，而 Chromium 中使用 Skia；网络方面 Safari 使用 CFNetwork，而 Chromium 中使用 Chromium stack 等等。而 WebKit2 是相对于狭义上的 WebKit 架构而言，主要变化是在 API 层支持多进程，分离了 UI 和 Web 接口的进程，使之通过 IPC 来进行通讯。</p><p>对于 iOS 中的 WebKit.framework 就是在 WebCore、底层桥接、JSCore 引擎等核心模块的基础上，针对 iOS 平台的项目封装。它基于新的 WKWebView，提供了一系列浏览特性的设置，以及简单方便的加载回调。而具体类及使用，开发者可以查阅官方文档:</p><blockquote><p><a href="https://developer.apple.com/documentation/webkit" target="_blank" rel="noopener">https://developer.apple.com/documentation/webkit</a></p></blockquote><p><img src="webkit2.jpg" alt=""></p><h3 id="Web-容器使用流程与关键节点"><a href="#Web-容器使用流程与关键节点" class="headerlink" title="Web 容器使用流程与关键节点"></a>Web 容器使用流程与关键节点</h3><p>对于大部分日常使用来说，开发者需要关注的就是 WKWebView 的创建、配置、加载、以及系统回调的接收。</p><p><img src="webrongqi.jpg" alt=""></p><p>对于 Web 开发者，业务逻辑一般通过基于 Web 页面中 Dom 渲染的关键节点来处理。而对于 iOS 开发者，WKWebView 提供的的注册、加载和回调时机，没有明确的与 Web 加载的关键节点相关联。准确的理解和处理两个维度的加载顺序，选择合理的业务逻辑处理时机，才可以实现准确而高效的应用。</p><p><img src="webrongqi2.jpg" alt=""></p><h3 id="WKWebView-常见问题"><a href="#WKWebView-常见问题" class="headerlink" title="WKWebView 常见问题"></a>WKWebView 常见问题</h3><p>使用 WKWebView 带来的另外一个好处，就是我们可以通过源码理解部分加载逻辑，为 Crash 提供一些思路，或者使用一些私有方法处理复杂业务逻辑。</p><p><strong>NSURLProtocol</strong></p><p>WKWebView 最为显著的改变，就是不支持 NSURLProtocol。为了兼容旧的业务逻辑，一部分 App 通过 WKBrowsingContextController 中的非公开方法实现了 NSURLProtocol。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WKBrowsingContextController</span></span><br><span class="line"> + (<span class="keyword">void</span>)registerSchemeForCustomProtocol:(<span class="built_in">NSString</span> *)scheme <span class="built_in">WK_API_DEPRECATED_WITH_REPLACEMENT</span>(<span class="string">"WKURLSchemeHandler"</span>, macos(<span class="number">10.10</span>, <span class="built_in">WK_MAC_TBA</span>), ios(<span class="number">8.0</span>, <span class="built_in">WK_IOS_TBA</span>));</span><br></pre></td></tr></table></figure><p>在 iOS 11 中，系统增加了 setURLSchemeHandler 函数用来拦截自定义的 Scheme。但是不同于 UIWebView，新的函数只能拦截自定义的 Scheme(SchemeRegistry.cpp)，对使用最多的 HTTP/HTTPS 依然不能有效的拦截。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SchemeRegistry</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> StringVectorFunction functions[] &#123;</span><br><span class="line">     builtinSecureSchemes,                <span class="comment">// about;data...</span></span><br><span class="line">     builtinSchemesWithUniqueOrigins,     <span class="comment">// javascript...</span></span><br><span class="line">     builtinEmptyDocumentSchemes,</span><br><span class="line">     builtinCanDisplayOnlyIfCanRequestSchemes,</span><br><span class="line">     builtinCORSEnabledSchemes,           <span class="comment">//http;https</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p><strong>白屏</strong></p><p>通常 WKWebView 白屏的原因主要分两种，一种是由于 Web 的进程 Crash（多见于内部进程通信）；一种就是 WebView 渲染时的错误（Debug 一切正常只是没有对应的内容）。对于白屏的检测，前者在 iOS9 之后系统提供了对应 Crash 的回调函数，同时业界也有通过判断 URL/Title 是否为空的方式作为辅助；后者业界通过视图树对比，判断 SubView 是否包含 WKCompsitingView，以及通过随机点截图等方式作为白屏判断的依据。</p><p>其他 WKWebView 的系统级问题如 Cookie、POST 参数、异步 Javascript 等等一系列的问题，可以通过业务逻辑的调整重新适配。</p><p>由于 WebKit 源码等开放性，我们也可以利用私有方法来简化代码逻辑、实现复杂的产品需求。例如在 WKWebViewPrivate 中可以获得各种页面信息、直接取到 UserAgent、 在 WKBackForwardListPrivate 中可以清理掉全部的跳转历史、以及在 WKContentViewInteraction 中替换方法实现自定义的 MenuItem 等等。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WKWebView</span> (<span class="title">WKPrivate</span>)</span></span><br><span class="line"> <span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *_userAgent <span class="built_in">WK_API_AVAILABLE</span>(macosx(<span class="number">10.11</span>), ios(<span class="number">9.0</span>));</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">@interface</span> <span class="title">WKBackForwardList</span> (<span class="title">WKPrivate</span>)</span></span><br><span class="line"> - (<span class="keyword">void</span>)_removeAllItems;</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">@interface</span> <span class="title">WKContentView</span> (<span class="title">WKInteraction</span>)</span></span><br><span class="line"> - (<span class="built_in">BOOL</span>)canPerformActionForWebView:(SEL)action withSender:(<span class="keyword">id</span>)sender;</span><br></pre></td></tr></table></figure><h2 id="3、App-中的应用场景"><a href="#3、App-中的应用场景" class="headerlink" title="3、App 中的应用场景"></a>3、App 中的应用场景</h2><p>WKWebView 系统提供了四个用于加载渲染 Web 的函数。这四个函数从加载的类型上可以分为两类：加载 URL &amp; 加载 HTML\Data。所以基于此也延伸出两种不同的业务场景：加载 URL 的页面直出类和加载数据的模板渲染类，同时两种类型各自也有不同的优化重点及方向。</p><h3 id="页面直出类"><a href="#页面直出类" class="headerlink" title="页面直出类"></a>页面直出类</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 根据 URL 直接展示 Web 页面</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">WKNavigation</span> *)loadRequest:(<span class="built_in">NSURLRequest</span> *)request;</span><br></pre></td></tr></table></figure><p>通常各类 App 中的 Web 页面加载都是通过加载 URL 的方式，比如嵌入的运营活动页面、广告页面等等。</p><h3 id="模板渲染类"><a href="#模板渲染类" class="headerlink" title="模板渲染类"></a>模板渲染类</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据模板 &amp; 数据渲染 Web 页面</span></span><br><span class="line">  - (<span class="keyword">nullable</span> <span class="built_in">WKNavigation</span> *)loadHTMLString:(<span class="built_in">NSString</span> *)string baseURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)baseURL;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>需要使用 WebView 展示，且交互逻辑较多的页面，最常见的就是资讯类 App 的内容展示页。</p><h1 id="iOS-中-Web-与-Native-的通信"><a href="#iOS-中-Web-与-Native-的通信" class="headerlink" title="iOS 中 Web 与 Native 的通信"></a>iOS 中 Web 与 Native 的通信</h1><p>单纯的使用 Web 容器加载页面已经不能满足复杂的功能，开发者希望数据可以在 Native 和 Web 之间通信传递来实现复杂的功能，而 Javascript 就是通信的媒介。对于有 WebView 的情况，虽然 WKWebView 提供了系统级的方法，但是大部分 App 仍然使用基于 URLScheme 的 WebViewBridge 用以兼容 UIWebView。而脱离了 WebView 容器，系统提供了 JavaScriptCore 的 framework，它也为之后蓬勃发展的跨平台和热修复技术提供了可能。</p><h2 id="1-基于-WebView-的通信"><a href="#1-基于-WebView-的通信" class="headerlink" title="1. 基于 WebView 的通信"></a>1. 基于 WebView 的通信</h2><p>基于 WebView 的通信主要有两个 途径，一个是通过系统或私有方法，获取 WebView 当中的 JSContext，使用系统封装的基于 JSCore 的函数通信。另一类就是通过创建自定义 Scheme 的 iframe Dom，客户端在回调中进行拦截实现。</p><h3 id="UIWebView-amp-WKWebView-系统级"><a href="#UIWebView-amp-WKWebView-系统级" class="headerlink" title="UIWebView &amp; WKWebView 系统级"></a>UIWebView &amp; WKWebView 系统级</h3><p>在 UIWebView 时代没有提供系统级的函数进行 Web 与 Native 的交互，绝大部分 App 都是通过 WebViewJavascriptBridge（下节介绍）来进行的通信。但是由于 JavascriptCore 的存在，对于 UIWebView 来说只要有效的获取到内部的 JSContext，也可以达到目的。目前已知有效的几个私有方法获取 Context 的方法如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过系统废弃函数获取 context</span></span><br><span class="line">  - (<span class="keyword">void</span>)webView:(WebView *)webView didCreateJavaScriptContext:(JSContext *)context forFrame:(WebFrame *)frame;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 valueForKeyPath 获取 context</span></span><br><span class="line">  <span class="keyword">self</span>.jsContext = [_webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</span><br></pre></td></tr></table></figure><p>在 WKWebView 中提供了系统级的 Web 和 Native 通讯机制，通过 Message Handler 的封装使开发效率有了很大的提升。同时系统封装了 JavaScript 对象和 Objective-C 对象的转换逻辑，也进降低了使用的门槛。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js 端发送消息</span></span><br><span class="line">  window.webkit.messageHandlers.&#123;NAME&#125;.postMessage()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Native 在回调中接收</span></span><br><span class="line">  - (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message;</span><br></pre></td></tr></table></figure><h3 id="拦截自定义-Scheme-请求-WebViewJavascriptBridge"><a href="#拦截自定义-Scheme-请求-WebViewJavascriptBridge" class="headerlink" title="拦截自定义 Scheme 请求 - WebViewJavascriptBridge"></a>拦截自定义 Scheme 请求 - WebViewJavascriptBridge</h3><p>由于私有方法的稳定性与审核风险，开发者不愿意使用上文提到的 UIWebView 获取 JSContext 的方式进行通信，所以通常都采用基于 iframe 和自定义 Scheme 的 JavascriptBridge 进行通信。虽然在之后的 WKWebView 提供了系统函数，但是大部分 App 都需要兼容 UIWebView 与 WKWebView，所以目前的使用范围仍然十分广泛。</p><p>在 Github 中类似的开源框架有很多，但是无外乎都是 Web 侧根据固定的格式创建包含通信信息的 Request，之后创建隐式 iFrame 节点请求；Native 侧在相应的 WebView 回调中解析 Request 的 Scheme，之后按照格式解析数据并处理。</p><p>而对于数据传递和回调处理的问题，在兼容两种 WebView、持续的更新的 WebViewJavascriptBridge 中，iFrame request 没有直接传递数据，而是 Web 和 Native 侧维护共同的参数或回调 Queue，Native 通过 Request 中 Scheme 的解析触发对 Queue 里数据的读取。</p><p><img src="jsandnative.jpg" alt=""></p><h2 id="脱离-WebView-的通信-JavaScriptCore"><a href="#脱离-WebView-的通信-JavaScriptCore" class="headerlink" title="脱离 WebView 的通信 JavaScriptCore"></a>脱离 WebView 的通信 JavaScriptCore</h2><h3 id="JavascriptCore"><a href="#JavascriptCore" class="headerlink" title="JavascriptCore"></a>JavascriptCore</h3><p>JavascriptCore 一直作为 WebKit 中内置的 JS 引擎使用，在 iOS7 之后，Apple 对原有的 C/C++ 代码进行了 OC 的封装，成系统级的 framework 供开发者使用。作为一个引擎来讲，JavascriptCore 的词法、语法分析，以及多层次的 JIT 编译技术都是值得深入挖掘和学习的方向，由于篇幅的限制暂且不做深入的讨论。</p><p><img src="jscore.jpg" alt=""></p><h3 id="JavascriptCore-framework"><a href="#JavascriptCore-framework" class="headerlink" title="JavascriptCore.framework"></a>JavascriptCore.framework</h3><p>虽然 JavascriptCore.framework 只暴露了较少的头文件和系统函数，但却提供了在 App 中脱离 WebView 执行 Javascript 的环境和能力。</p><p>JSVirtualMachine：提供了 JS 执行的底层资源及内存。虽然 Java 与 Javascript 没有一点关系，但是同样作为虚拟机，JSVM 和 JVM 做了一部分类似的事情。每个 JSVirtualMachine 独占线程，拥有独立的空间和管理，但是可以包含多个 JSContext。JSContext：提供了 JS 运行的上下文环境和接口。可以不准确的理解为，就是创建了一个 Javascript 中的 Window 对象。JSValue：提供了 OC 和 JS 间数据类型的封装和转换 Type Conversions。除了基本的数据类型，需要注意 OC 中的 Block 转换为 JS 中的 function，Class 转换为 Constructor 等等。</p><p>JSManagedValue：Javascript 使用 GC 机制管理内存，而 OC 采用引用计数的方式管理内存。所以在 JavascriptCore 使用过程中，难免会遇到循环引用以及提前释放的问题。JSManagedValue 解决了在两种环境中的内存管理问题。JSExport：提供了类、属性和实例方法的调用接口。内部实现是在 ProtoType &amp; Constructor 中实现对应的属性和方法。</p><p><img src="jscore2.jpg" alt=""></p><h3 id="使用-JavascriptCore-进行通信"><a href="#使用-JavascriptCore-进行通信" class="headerlink" title="使用 JavascriptCore 进行通信"></a>使用 JavascriptCore 进行通信</h3><p>Native - Web: 通过 JavascriptCore，Native 可以直接在 Context 中执行 JS 语句，和 Web 侧进行通信和交互。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSValue *value = [<span class="keyword">self</span>.jsContext evaluateScript:<span class="string">@"document.cookie"</span>];</span><br></pre></td></tr></table></figure><p>Web - Native: 对于 Web 侧向 Native 的通信，JavascriptCore 提供 两种 方式，注册 Block &amp; Export 协议。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Native</span></span><br><span class="line">  <span class="keyword">self</span>.jsContext[<span class="string">@"addMethod"</span>] = ^ <span class="built_in">NSInteger</span>(<span class="built_in">NSInteger</span> a, <span class="built_in">NSInteger</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//JS</span></span><br><span class="line">  console.log(addMethod(<span class="number">1</span>, <span class="number">2</span>));    <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//Native</span></span><br><span class="line">  <span class="class"><span class="keyword">@protocol</span> <span class="title">testJSExportProtocol</span> &lt;<span class="title">JSExport</span>&gt;</span></span><br><span class="line">  <span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSString</span> *string;</span><br><span class="line">  ...</span><br><span class="line">  <span class="class"><span class="keyword">@interface</span> <span class="title">OCClass</span> : <span class="title">NSObject</span> &lt;<span class="title">testJSExportProtocol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//JS</span></span><br><span class="line">  var OCClass = new OCClass();</span><br><span class="line">  console.log(OCClass.string);</span><br></pre></td></tr></table></figure><p>对于 JavascriptCore 粗浅的理解，可以认为使用 Block 方法，内部是将 Block 保存到保存到一个 Web 环境中的全局的 Object 中，例如 window。而使用 JSExport 方法，则是在 Web 环境中 Object 的 prototype 中创建属性、实例方法；在 constructor 对象中创建类方法，从而实现 Web 中的调用。</p><h2 id="App-中的应用场景"><a href="#App-中的应用场景" class="headerlink" title="App 中的应用场景"></a>App 中的应用场景</h2><p>对于基于 WebView 的通信，主要用于 App 向 H5 页面中注入的 Javascript Open Api，如提供 Native 的拍照、音视频、定位；以及 App 内的登录、分享等等功能。<br>对于 JavaScriptCore，则催生了动态化、跨平台以及热修复等一系列技术的蓬勃发展。</p><h1 id="跨平台与热修复"><a href="#跨平台与热修复" class="headerlink" title="跨平台与热修复"></a>跨平台与热修复</h1><p>近几年来国内外移动端各种方案如雨后春笋般涌现，“Write once, run anywhere”不再是开发者的向往。剥离跨平台技术在 Web 侧 DSL、virtualDom 等方面的优化，以及 Native 侧 Runtime 的应用与封装，对于两端通信的核心，依然是 JavascriptCore。</p><p>而不同于国外开发者对跨平台技术的积极探索，国内开发者也对热修复技术产生了极大的热情。同样作为 Native 和 Web 的交叉 - JavascriptCore，依然承担着整个技术结构中的通信任务。</p><h2 id="1-基于-Web-的热修复技术"><a href="#1-基于-Web-的热修复技术" class="headerlink" title="1. 基于 Web 的热修复技术"></a>1. 基于 Web 的热修复技术</h2><p>对于国内的 iOS 开发者来说，审核周期、敏感业务、支付分成以及 bug 修复都催生了热修复方向的不断探索。在苹果加强审核之前，几乎所有大型的 App 都把热修复当成了 iOS 开发的基础能力，最近在《移动开发还有救么》中也详细的介绍了相关黑科技的前世今生。在所有 iOS 热修复的方案中，基于 Javascript、同时也是影响最大的就是 JSPatch。</p><p>基于上文的分析，对于脱离 WebView 的 Native 和 Web 间的通信，我们只能使用 JavascriptCore。而在 JavascriptCore 中提供了两种方式用于通信，即 Context 注册 Block 的回调，以及 JSExport。对于热修复的场景来说，我们不可能把潜在需要修复的函数都一一使用协议进行注册，更不能对新增方法和删除方法等进行处理，所以在 Native 和 Web 通信这个维度，我们只能采用 Context 注册 Block 的方式。</p><p>确定了通信采用 Block 回调的方式后，热修复就面临着如何在 JS 中调用类以及类的方法问题。由于没有使用 JSExport 等方式，JS 是无法找到相应类等属性和方法，在 JSPathc 中，通过简单的字符串替换，将所有方法都替换成通用函数（__c），然后就可以将相关信息传递给 Native，进而使用 runtime 接口调用方法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 替换全部方法调用</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">NSString</span> *_replaceStr = <span class="string">@".__c(\"$1\")("</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用方法</span></span><br><span class="line">  __c: function(methodName) &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> function()&#123;</span><br><span class="line">          ...</span><br><span class="line">          var ret = instance ? _OC_callI(instance, selectorName, args, isSuper):</span><br><span class="line">                                _OC_callC(clsName, selectorName, args)</span><br><span class="line">          <span class="keyword">return</span> _formatOCToJS(ret)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当然对于 JSPatch 以及其他热修复的项目来说，Web 和 Native 通信只是整个框架中的一个技术点，更多的实现原理和细节由于篇幅的关系暂且不做介绍。</p><h2 id="2-基于-Web-的跨平台技术"><a href="#2-基于-Web-的跨平台技术" class="headerlink" title="2. 基于 Web 的跨平台技术"></a>2. 基于 Web 的跨平台技术</h2><p>随着 Google 开源了基于 Dart 语言的 Flutter，跨平台的技术又进入了一个新的发展阶段。对于传统的跨平台技术来讲，各个公司以 JavascriptCore 作为通信桥梁，围绕着 DSL 的解析、方法表的注册、模块注册通信、参数传递的设计以及 OC Runtime 的运用等不同方向，封装成了一个又一个跨平台的项目。</p><p><img src="rexiufu.jpg" alt=""></p><p>而在其中，以 Javascript 作为前端 DSL 的跨平台技术方案里，FaceBook 的 react-native 以及阿里 (目前托管给了 Apache) 的 Weex 最为流行。在网络上两者的比较文章有很多，集中在学习成本、框架生态、代码侵入、性能以及包大小等, 各个业务可以根据自己的重点选择合理的技术结构。</p><p>而不管是 react-native 还是 Weex,Web 和 Native 的通信桥梁仍然是 JavascriptCore。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//weex 举例</span></span><br><span class="line">JSValue* (^callNativeBlock)(JSValue *, JSValue *, JSValue *) = ^JSValue*(JSValue *instance, JSValue *tasks, JSValue *callback)&#123;</span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">return</span> [JSValue valueWithInt32:(int32_t)callNative(instanceId, tasksArray, callbackId) inContext:[JSContext currentContext]];</span><br><span class="line">&#125;;</span><br><span class="line">_jsContext[<span class="string">@"callNative"</span>] = callNativeBlock;</span><br></pre></td></tr></table></figure><h1 id="iOS-中-Web-相关优化策略"><a href="#iOS-中-Web-相关优化策略" class="headerlink" title="iOS 中 Web 相关优化策略"></a>iOS 中 Web 相关优化策略</h1><p>随着 Web 技术的不断升级以及 App 动态性业务需求的增多，越来越多的 Web 页面加入到了 iOS App 当中。与之对应的，首屏展示速度——这个对于移动客户端 Web 的最重要体验优化，也成为了移动客户端中 Web 业务最重要的优化方向。</p><p>这一章节更为详细的设计与实现，请移步 iOS 新闻类 App 内容页技术探索 (<a href="https://dequan1331.github.io/hybrid-page-kit.html)。" target="_blank" rel="noopener">https://dequan1331.github.io/hybrid-page-kit.html)。</a></p><h2 id="1-不同业务场景的优化策略"><a href="#1-不同业务场景的优化策略" class="headerlink" title="1. 不同业务场景的优化策略"></a>1. 不同业务场景的优化策略</h2><p>对于单纯的 Web 页面来说，业界早已有了合理的优化方向以及成熟的优化方案，而对于移动客户端中的 Web 来说，开发者在进行单一的 Web 优化同时，还可以通过优化 Web 容器以及 Web 页面中数据加载方式等多个途径做出优化。</p><p>所以对于 iOS 开发中的优化来说，就是通过 Native 和 Web 两个维度的优化关键渲染路径，保证 WebView 优先渲染完毕。由此我们梳理了常规 Web 页面整体的加载顺序，从中找出关键渲染路径，继而逐个分析、优化。</p><p><img src="youhua.jpg" alt=""></p><h2 id="2-Web-维度的优化"><a href="#2-Web-维度的优化" class="headerlink" title="2. Web 维度的优化"></a>2. Web 维度的优化</h2><h3 id="通用-Web-优化"><a href="#通用-Web-优化" class="headerlink" title="通用 Web 优化"></a>通用 Web 优化</h3><p>对于 Web 的通用优化方案，一般来说在网络层面，可以通过 DNS 和 CDN 技术减少网络延迟、通过各种 HTTP 缓存技术减少网络请求次数、通过资源压缩和合并减少请求内容等。在渲染层面可以通过精简和优化业务代码、按需加载、防止阻塞、调整加载顺序优化等等。对于这个老生常谈的问题，业内已经有十分成熟和完整的总结，例如《Best Practices for Speeding Up Your Web Site》，已经有了很好的整理和总结。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>脱离较为通用的优化，在对代码侵入宽容度较高的场景中，开发者对 Web 优化有着更为激进的做法。例如在 VasSonic 中，除了 Web 容器复用、数据模板分离、预拉取和通用的优化方式外，还通过自定义 VasSonic 标签将 HTML 页面进行划分，分段进行缓存控制，以达到更高的优化效果。</p><h2 id="3-Native-维度的优化"><a href="#3-Native-维度的优化" class="headerlink" title="3. Native 维度的优化"></a>3. Native 维度的优化</h2><h3 id="容器复用和预热"><a href="#容器复用和预热" class="headerlink" title="容器复用和预热"></a>容器复用和预热</h3><p>WKWebView 虽然 JIT 大幅优化了 JS 的执行速度，但是单纯的加载渲染 HTML，WKWebView 比 UIWebView 慢了很多。根据渲染的不同阶段分别对耗时进行测试，同时对比 UIWebView，我们发现 WKWebView 在初始化及渲染开始前的耗时较多。</p><p><img src="loadingtime.jpg" alt=""></p><p>针对这种情况，业界主流的做法就是复用 &amp; 预热。预热即时在 App 启动时创建一个 WKWebView，使其内部部分逻辑预热已提升加载速度。而复用又分为两种，较为复杂的是处理边界条件已达到真正的复用，还有一种较为 Triky 的办法就是常驻一个空 WKWebView 在内存。</p><p>HybridPageKit 提供了易于集成的完整 WKWebView 重用机制实现, 开发者可以无需关注复用细节，无缝的体验更为高效的 WKWebView。</p><h3 id="Native-并行资源请求-amp-离线包"><a href="#Native-并行资源请求-amp-离线包" class="headerlink" title="Native 并行资源请求 &amp; 离线包"></a>Native 并行资源请求 &amp; 离线包</h3><p>由于 Web 页面内请求流程不可控以及网络环境的影响，对于 Web 的加载来说，网络请求一直是优化的重点。开发者较为常用的做法是使用 Native 并行代理数据请求，替代 Web 内核的资源加载。在客户端初始化页面的同时，并行开始网络请求数据；当 Web 页面渲染时向 Native 获取其代理请求的数据。</p><p>而将并行加载和预加载做到极致的优化，就是离线包的使用。将常用的需要下载资源（HTML 模板、JS 文件、CSS 文件、占位图片）打包，App 选择合适的时机全部下载到本地，当 Web 页面渲染时向 Native 获取其数据。</p><p>通过离线包的使用，Web 页面可以并行（提前）加载页面资源，同时摆脱了网络的影响，提高了页面的加载速度和成功率。当然离线包作为资源动态更新的一个方式，合理的下载时机、增量更新、加密和校验等方面都是需要进行设计和思考的方向，后文会简单介绍。</p><h3 id="复杂-Dom-节点-Native-化实现"><a href="#复杂-Dom-节点-Native-化实现" class="headerlink" title="复杂 Dom 节点 Native 化实现"></a>复杂 Dom 节点 Native 化实现</h3><p>当并行请求资源，客户端代理数据请求的技术方案逐渐成熟时，由于 WKWebView 的限制，开发者不得不面对业务调整和适配。其中保留原有代理逻辑、采用 LocalServer 的方式最为普遍。但是由于 WKWebView 的进程间通信、LocalServer Socket 建立与连接、资源的重复编解码都影响了代理请求的效率。</p><p><img src="dom.jpg" alt=""></p><p>所以对于一些资讯类 App，通常采用 Dom 节点占位、Native 渲染实现的方式进行优化，如图片、地图、音视频等模块。这样不但能减少通信和请求的建立、提供更加友好的交互、也能并行的进行 View 的渲染和处理，同时减少 Web 页面的业务逻辑。</p><p>HybridPageKit 中就提供封装好的功能框架，开发者可以简单的替换 Dom 节点为 NativeView。</p><h3 id="按优先级划分业务逻辑"><a href="#按优先级划分业务逻辑" class="headerlink" title="按优先级划分业务逻辑"></a>按优先级划分业务逻辑</h3><p>从 App 的维度上看，一个 Web 页面从入口点击到渲染完成，或多或少都会有 Native 的业务逻辑并行执行。所以这个角度的优化关键渲染路径，就是优先保证 WebView 以及其他在首屏直接展示的 Native 模块优先渲染。所以承载 Web 页面的 Native 容器，可以根据业务逻辑的优先级，在保证 WebView 模块展示之后，选择合适的时机进行数据加载、视图渲染等。这样就能保证在 Native 的维度上，关键路径优先渲染。</p><p><img src="youxianji.jpg" alt=""></p><h2 id="4-优化整体流程"><a href="#4-优化整体流程" class="headerlink" title="4. 优化整体流程"></a>4. 优化整体流程</h2><p>所以整体上对于客户端来说，我们可以从 Native 维度（容器和数据加载）以及 Web 维度两个方向提升加载速度，按照页面的加载流程，整体的优化方向如下：</p><p><img src="liucheng.jpg" alt=""></p><h1 id="iOS-中-Web-相关延伸业务"><a href="#iOS-中-Web-相关延伸业务" class="headerlink" title="iOS 中 Web 相关延伸业务"></a>iOS 中 Web 相关延伸业务</h1><h2 id="1-模板引擎"><a href="#1-模板引擎" class="headerlink" title="1. 模板引擎"></a>1. 模板引擎</h2><p>为了达到并行加载数据以及并行处理复杂的展示逻辑，对于非直出类型的 Web 页面，绝大部分 App 都采用数据和模板分离下发的方式。而这样的技术架构，导致在客户端内需要增加替换对应 DSL 的模板标签，形成最终的 HTML 的业务逻辑。简单的字符串替换逻辑不但低效，还无法做到合理的组件化管理，以及组件合理的与 Native 交互，而模板引擎相关技术会使这种逻辑和表现分离的业务场景实现的更加简洁和优雅。</p><p>基于模板引擎与数据分离，客户端可以根据数据并行创建子业务模块，同时在子业务模块中处理和 Native 交互的部分如图片裁剪适配、点击跳转等等，生成 HTML 代码片段。之后基于模板进行替换生成完整的页面。这样不但减少了大量的字符串替换逻辑，同时业务也得到了合理拆分。</p><p><img src="template.jpg" alt=""></p><p>模板引擎的本质就是字符串的解析和替换拼接。在 Web 端不同的使用场景有很多不同语法的引擎类型，而在客户端较为流行的，有使用较为复杂的 MGTemplateEngine，它类似于 Smarty，支持部分模板逻辑。也有基于 mustache，Logic-less 的 GRMustache 可供选择。</p><h2 id="2-资源动态更新和管理"><a href="#2-资源动态更新和管理" class="headerlink" title="2. 资源动态更新和管理"></a>2. 资源动态更新和管理</h2><p>无论是离线包、本地注入的 JS、CSS 文件、以及本地化 Web 中的默认图片，目的都是通过提前下载，替换网络请求为本地读取来优化 Web 的加载体验和成功率。而对于这些资源的管理，开发者需要从下载与更新，以及 Web 中的访问这两个方面进行设计优化。</p><h3 id="下载与更新"><a href="#下载与更新" class="headerlink" title="下载与更新"></a>下载与更新</h3><p>下载与重试：对于资源或是离线包的下载，选择合适的时机、失败重载时机、失败重载次数都要根据业务灵活调整。通常为了增加成功率和及时更新，在冷启动、前后台切换、关键的操作节点，或者采用定时轮循的方式，都需要进行资源版本号或 MD5 的判断，用以触发下载逻辑。当然对于服务端来说，合理的灰度控制，也是保证业务稳定的重要途径。</p><p>签名校验：对于动态下载的资源，我们都需要将原文件的签名进行校验，防止在传输过程中被篡改。对于单项加密的办法就是双端对数据进行 MD5 的加密，之后客户端校验 MD5 是否符合预期；而双向加密可以采用 DES 等加密算法，客户端使用公钥对资源验证使用。</p><p>增量更新：为了减少资源和离线包的重复下载，业内大部分使用离线包的场景都采用了增量更新的方式。即客户端在触发请求资源时，带上本地已存在资源的标示，服务端根据标示和最新资源做对比，之后只提供新增或修改的 Patch 供客户端下载。</p><h3 id="基于-LocalServer-的访问"><a href="#基于-LocalServer-的访问" class="headerlink" title="基于 LocalServer 的访问"></a>基于 LocalServer 的访问</h3><p>在完成资源的下载与更新后，如何将 Web 请求重定向到本地，大部分 App 都依赖于 NSURLProtocol。上文提到在 WKWebView 中虽然可以使用私有函数实现（或者 iOS11+ 提供系统函数），但是仍然有许多问题。</p><p>目前业界一部分 App，都采用了集成 LocalServer 的方式，接管部分 Web 请求，从而达到访问本地资源的目的。同时集成了 LocalServer，通过将本地资源封装成 Response，利用 HTTP 的缓存技术，进一步的优化了读取的时间和性能，实现层次化的缓存结构。而使用了本地资源的 HTTP 缓存，就需要考虑缓存的控制和过期时间。通常可以通过在 URL 上增加本地文件的修改时间、或本地文件的 MD5 来确保缓存的有效性。</p><p><img src="localserver.jpg" alt=""></p><h3 id="GCDWebServer-浅析"><a href="#GCDWebServer-浅析" class="headerlink" title="GCDWebServer 浅析"></a>GCDWebServer 浅析</h3><p>排除 Socket 类型，业界流行的 Objc 版针对 HTTP 开源的 WebServer，不外乎年久失修的 CocoaHTTPServer 以及 GCDWebServer。GCDWebServer 是一个基于 GCD 的轻量级服务器，简单的四个模块 - Server / Connection / Request / Reponse，以及通过维护 LIFO 的 Handler 队列传入业务逻辑生成响应。在排除了基于 RFC 的 Request/Response 协议设计之外，关键的代码和流程如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GCDWebServer 端口绑定</span></span><br><span class="line">  bind(listeningSocket, address, length)</span><br><span class="line">  listen(listeningSocket, (<span class="keyword">int</span>)maxPendingConnections)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//GCDWebServer 绑定 Socket 端口并接收数据源</span></span><br><span class="line">  dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_READ, listeningSocket, <span class="number">0</span>, dispatch_get_global_queue(_dispatchQueuePriority, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//GCDWebServer 接收数据并创建 Connection</span></span><br><span class="line">  dispatch_source_set_event_handler(source, ^&#123;</span><br><span class="line">      ...</span><br><span class="line">     GCDWebServerConnection* connection = [(GCDWebServerConnection*)[<span class="keyword">self</span>-&gt;_connectionClass alloc] initWithServer:<span class="keyword">self</span> localAddress:localAddress remoteAddress:remoteAddress socket:socket]; </span><br><span class="line"></span><br><span class="line">  <span class="comment">//GCDWebServerConnection 读取数据</span></span><br><span class="line">  dispatch_read(_socket, length, dispatch_get_global_queue(_server.dispatchQueuePriority, <span class="number">0</span>), ^(dispatch_data_t buffer, <span class="keyword">int</span> error) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//GCDWebServerConnection 处理 GCDWebServerMatchBlock 和 GCDWebServerAsyncProcessBlock</span></span><br><span class="line">  <span class="keyword">self</span>-&gt;_request = <span class="keyword">self</span>-&gt;_handler.matchBlock(requestMethod, requestURL, requestHeaders, requestPath, requestQuery);</span><br><span class="line">  ...</span><br><span class="line">  _handler.asyncProcessBlock(request, [completion <span class="keyword">copy</span>]);</span><br></pre></td></tr></table></figure><p>在 LocalServer 的使用上，也要注意端口的选择 ports used by Apple，以及前后台切换时 suspendInBackground 的设置和业务处理。</p><h2 id="3-Javascript-Open-Api"><a href="#3-Javascript-Open-Api" class="headerlink" title="3.Javascript Open Api"></a>3.Javascript Open Api</h2><p>随着 App 业务的不断发展，单纯的 Web 加载与渲染无法满足复杂的交互逻辑，如拍照、音视频、蓝牙、定位等，同时 App 内也需要统一的登录态，统一的分享逻辑以及支付逻辑等。所以针对第三方的 Web 页面，Native 需要注册相应的 Javascript 接口供 Web 使用。</p><p>对于 Api 需要提供的能力、接口设计和文档规范，不同的业务逻辑和团队代码风格会有不同的定义，微信 JS-SDK 说明文档 就是一个很好的例子。而脱离 Javascript Open Api 对外的接口设计和封装，在内部的实现上也有一些通用的关键因素，这里简单列举几个：</p><h3 id="注入方式和时机"><a href="#注入方式和时机" class="headerlink" title="注入方式和时机"></a>注入方式和时机</h3><p>对于 Javascript 文件的注入，最简单的就是将 JS 文件打包到项目中，使用 WKWebView 提供的系统函数进行注入。这种方式无需网络加载，可以合理的选择注入时机，但是无法动态的进行修改和调整。而对于这部分业务需求需要经常调整的 App 来说，也可以把文件存储到 CDN，通过模板替换或者和 Web 合作者约定，在 Web 的 HTML 中通过 URL 的方式进行加载，这种的方式虽然动态化程度较高，但是需要合作方的配合，同时对于 JS Api 也不能做到拆分的注入。</p><p>针对上面的两种方式的优点不足，一个较为合理的方式是 Javascript 文件采用本地注入的方式，同时建立资源的动态更新系统（上文）。这样一方面支持了动态更新，同时也无需合作方的配合，对于不同的业务场景也可以拆分不同的 Api 进行注入，保证安全。</p><h3 id="安全控制"><a href="#安全控制" class="headerlink" title="安全控制"></a>安全控制</h3><p>对于 Javascript Open Api 设计实现的另一个重要方面，就是安全性的控制。由于完整的 Api 需要支持 Native 登录、Cookies 等较为敏感的信息获取，同时也支持一些对 UI 和体验影响较多的功能如页面跳转、分享等，所以 App 需要一套权限分级的逻辑控制 Web 相关的接口调用，保证体验和安全。</p><p>常规的做法就是对 Javascript Open Api 建立分级的管理，不同权限的 Web 页面只能调用各自权限内的接口。客户端通过 Domain 进行分级，同时支持动态拉取权限 Domain 白名单，灵活的配置 Web 页面的权限。在此基础上 App 内部也可以通过业务逻辑的划分，在 Native 层面使用不同的容器加载页面，而容器根据业务逻辑的不同，注入不同的 JS 文件进行 Api 权限控制。</p><p><img src="safe.jpg" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/dequan1331/HybridPageKit" target="_blank" rel="noopener">https://github.com/dequan1331/HybridPageKit</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;移动开发领域近年来已经逐渐告别了野蛮生长的时期，进入了相对成熟的时代。而一直以来 Native 和 Web 的争论从未停止，通过开发者孜孜不倦的努力，Web 的效率和 Native 的体验也一直在寻求着平衡。本文聚焦 iOS 开发和 Web 开发的交叉点，希望能通过简要的介绍，帮助开发者一窥 Hybrid 和大前端的构想。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Ios" scheme="http://hackycy.github.io/categories/Ios/"/>
    
    
      <category term="Ios" scheme="http://hackycy.github.io/tags/Ios/"/>
    
  </entry>
  
  <entry>
    <title>Android Jetpack架构组件介绍</title>
    <link href="http://hackycy.github.io/2019/03/24/Android-Jetpack%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://hackycy.github.io/2019/03/24/Android-Jetpack架构组件介绍/</id>
    <published>2019-03-24T14:42:08.000Z</published>
    <updated>2019-03-24T15:25:41.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>Google 为了帮助 Android 开发者更快更好地开发 App，推出了一系列组件，这些组件被打包成了一个整体，称作<code>Android Jetpack</code>，它包含的组件如下图所示：</strong><br><a id="more"></a><br><img src="jetpackintro.jpg" alt=""></p><p>老的 <code>support</code> 包被整合进了 <code>Jetpack</code>，例如上图 <code>Foundation</code> 模块的 AppCompat，整合进去之后，包名做了一下修改，全部以 <code>androidx</code> 开头。Android Studio 提供的迁移工具<code>（Refactor &gt; Migrate to AndroidX）</code>可以将源码中的旧包名替换成新的，但是如果 Maven 依赖的产物还未迁移到 <code>AndroidX</code>的话，还需要配置一个工具—— <code>Jetifier</code>，只需要在 <code>build.gradle</code> 中加上两行配置即可：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android.useAndroidX=<span class="keyword">true</span></span><br><span class="line">android.enableJetifier=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><blockquote><p>Jetfier 会在编译阶段直接修改依赖产物的字节码，简单粗暴。</p></blockquote><h1 id="架构大图"><a href="#架构大图" class="headerlink" title="架构大图"></a>架构大图</h1><p>Jetpack 不属于 Android Framework，不是 Android 开发的必需品，它只是应用层开发的一种辅助手段，帮我们解决了一些常见问题，比如版本兼容、API 易用性、生命周期管理等。其中 Architecture 部分的组件（Android Architecture Components，以下简称 AAC）组合起来形成了一套完整的架构解决方案，在没有更好的方案被发明出来之前，我们姑且把 AAC 当做 Android 架构领域的最佳实践，它的出现一定程度上避免了很多不必要的轮子。</p><p>官方给出的架构指导非常明确地表达出了每个架构组件的位置：<br><img src="jiagou.jpg" alt=""></p><p>这张图背后隐含了三大设计思想：</p><ul><li>关注点分离<code>（SOC / Separation Of Concerns）</code></li><li>数据驱动UI<code>（Reactive）</code></li><li>唯一真相源<code>（SSOC / Single Source Of Truth）</code></li></ul><p>SOC 具体到工程实践中就是分层合理，单层的职责越明确，对上下游的依赖越清晰就意味着它的结构更稳定，也<br>更可测（testable）。一个 App 从全局来看，可以划分为三部分：首先是 <code>UI Controller</code> 层，包含 <code>Activity</code> 和 <code>Fragment</code>；其次是 <code>ViewModel</code> 层，既可以做 <code>MVVM</code> 的 <code>VM</code>、<code>MVP</code> 的 <code>P</code>，也可以做 UI 的数据适配，这一层可以实现数据驱动 UI；最后是 <code>Repository</code> 层，它作为 SSOC，是一个 Facade 模式，对上层屏蔽了数据的来源，可以来自 local，也是来自 remote，数据持久化策略向上透明。</p><p>一张架构蓝图，三大设计原则，接下来深入细节，看看组件之间如何配合才能实现这个架构。</p><h1 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h1><p>与 React/Vue 或者 iOS 相比，Android 的生命周期都比较复杂，如果要监听生命周期，一般情况下只能覆写 Activity / Fragment 的回调方法（onCreate、onResume、onPause、onDestroy 等），样板代码少不了，可维护性也变差。</p><p>如果要对生命周期进行简化，可以抽象成一个图，点表示状态，线表示事件：</p><p><img src="androidlifecycle.jpg" alt=""></p><p>Lifecycle 负责处理这些点（states）和线（events），Activity / Fragment 是 LifecycleOwner，监听者则是 LifecycleObserver，一个非常清晰的观察者模式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObserver</span> : <span class="type">LifecycleObserver &#123;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">connectListener</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">disconnectListener</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们的组件需要强绑定声明周期，那么只需要借助 Lifecycle 去监听生命周期的状态和事件即可，再也不用覆写各种回调方法了。下面将要讲到的 LiveData 和 ViewModel 都是 Lifecycle-Aware Components，它们都用到了 Lifecycle。</p><p>Android 生命周期管理不当带来的最大问题就是内存泄露，举一个我们经常遇到的场景：一个异步任务（比如网络请求）持有了 UI 元素的引用，只要任务没有执行完，所有与这个 UI 元素有强引用关系的元素都没法被 GC，如果这样的场景多发生几次，很可能会引起 OOM。</p><p>为了异步对象引用的问题，最早我们使用 AsyncTask，任务执行在 worker thread，执行结果在主线程上发起回调。AsyncTask 的致命缺点是不支持流式数据（stream），而且回调嵌套太深（callback hell），与软件质量衡量指标之一的 maintainable 背道而驰，不好用自然就会慢慢被淘汰。</p><p>后来我们开始使用 RxJava，响应式编程，声明式写法，再借助 retrolambda 这种 backport，即使当年 Android 只支持到 JDK7，我们依然可以利用各种 operator 写出非常简洁的代码，“filter map 我闭~着眼”。RxJava 不但完美解决了线程调度的问题，还为我们提供了 OO 之外的抽象——作用在流上的 lambda，基于函数的抽象。但是，即便完美如斯，生命周期的问题依然无法回避，因为 Java 天生的局限性，一个 lambda 无论伪造地再像高阶函数，它本质上还是一个匿名内部类，这个匿名内部类依然持有对 outer class 实例的引用。于是我们必须通过 CompositeDisposable 来管理订阅关系，发起异步操作时记录订阅，离开页面时取消订阅，仍然需要覆写 onDestory 或者 onPause 。</p><p>如果我们以 Repository 层为界把架构蓝图分为上下两部分的话，上面的部分是数据展示，下面的部分是数据获取，数据获取部分因为要请求 Remote 数据，必然会依赖到线程调度，而数据展示必然运行在 UI 线程，与生命周期强相关，这个时候就需要 LiveData 登场了。</p><h1 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h1><p>LiveData 也是一个观察者模型，但是它是一个与 Lifecycle 绑定了的 Subject，也就是说，只有当 UI 组件处于 ACTIVE 状态时，它的 Observer 才能收到消息，否则会自动切断订阅关系，不用再像 RxJava 那样通过 <code>CompositeDisposable</code> 来手动处理。</p><p>LiveData 的数据类似 EventBus 的 sticky event，不会被消费掉，只要有数据，它的 observer 就会收到通知。如果我们要把 LiveData 用作事件总线，还需要做一些定制，Github 上搜 SingleLiveEvent 可以找到源码实现。</p><p>我们没法直接修改 LiveData 的 value，因为它是不可变的（immutable），可变（mutable）版本是 <code>MutableLiveData</code>，通过调用 <code>setValue</code>（主线程）或 <code>postValue</code>（非主线程）可以修改它的 value。如果我们对外暴露一个 LiveData，但是不希望外部可以改变它的值，可以用如下技巧实现：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> _waveCode = MutableLiveData&lt;String&gt;()</span><br><span class="line"><span class="keyword">val</span> waveCode: LiveData&lt;String&gt; = _waveCode</span><br></pre></td></tr></table></figure><blockquote><p>内部用 MutableLiveData ，可以修改值，对外暴露成 LiveData 类型，只能获取值，不能修改值</p></blockquote><p>LiveData 有一个实现了中介者模式的子类 —— MediatorLiveData，它可以把多个 LiveData 整合成一个，只要任何一个 LiveData 有数据变化，它的观察者就会收到消息：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> liveData1 = ...</span><br><span class="line"><span class="keyword">val</span> liveData2 = ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> liveDataMerger = MediatorLiveData&lt;&gt;();</span><br><span class="line">liveDataMerger.addSource(liveData1) &#123; value -&gt; liveDataMerger.setValue(value))</span><br><span class="line">liveDataMerger.addSource(liveData2) &#123; value -&gt; liveDataMerger.setValue(value))</span><br></pre></td></tr></table></figure><p>综上，我们汇总一下 LiveData 的使用场景：</p><ul><li>LiveData - immutable 版本</li><li>MutableLiveData - mutable 版本</li><li>MediatorLiveData - 可汇总多个数据源</li><li>SingleLiveEvent - 事件总线</li></ul><p>LiveData 只存储最新的数据，虽然用法类似 RxJava2 的 Flowable，但是它不支持背压（backpressure），所以不是一个流（stream），利用 LiveDataReactiveStreams 我们可以实现 Flowable 和 LiveData 的互换。</p><p>如果把异步获取到的数据封装成 Flowable，通过 <code>toLiveData</code> 方法转换成 LiveData，既利用了 RxJava 的线程模型，还消除了 Flowable 与 UI Controller 生命周期的耦合关系，借助 Data Binding 再把 LiveData 绑定到 xml UI 元素上，数据驱动 UI，妥妥的响应式。于是一幅如下模样的数据流向图就被勾勒了出来：</p><p><img src="livedata.jpg" alt=""></p><p>图中右上角的 Local Data 是 AAC 提供的另一个强大武器 —— ORM 框架 Room。</p><h1 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h1><p>数据库作为数据持久层，其重要性不言而喻，当设备处于离线状态时，数据库可用于缓存数据；当多个 App 需要共享数据时，数据库可以作为数据源，但是基于原生 API 徒手写 CRUD 实在是痛苦，虽然 Github 上出现了不少 ORM 框架，但是它们的易用性也不敢让人恭维，直到 Room 出来之后，Android 程序员终于可以像 mybatis 那样轻松地操纵数据库了。</p><p>Room 是 SQLite 之上的应用抽象层，而 SQLite 是一个位于 Android Framework 层的内存型数据库。虽然 Realm 也是一个优秀的数据库，但是它并没有内置于 Android 系统，所会增大 apk 的体积，使用 Room 则没有这方面烦恼。</p><p>Room 的结构抽象得非常简单，数据对象（表名 + 字段）用 <code>@Entity</code> 注解来定义，数据访问用 @Dao 来注解，db 本身则用 <code>@Database</code> 来定义，如果要支持复杂类型，可以定义 <code>@TypeConverters</code>，然后在编译阶段，apt 会根据这些注解生成代码。Room 与 App 其他部分的交互如下图所示：</p><p><img src="room.jpg" alt=""></p><p>Entity 是一个数据实体，表示一条记录，它的用法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity(tableName = <span class="meta-string">"actors"</span>)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span></span>(</span><br><span class="line">        <span class="meta">@PrimaryKey</span> <span class="meta">@ColumnInfo(name = <span class="meta-string">"id"</span>)</span></span><br><span class="line">        <span class="keyword">val</span> actorId: String,</span><br><span class="line">        <span class="keyword">val</span> name: String,</span><br><span class="line">        <span class="keyword">val</span> birthday: Date?,</span><br><span class="line">        <span class="keyword">val</span> pictureUrl: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>Actor</code> 是一个用 <code>@Entity</code> 注解的 data class，它会生成一个名字是 <code>actors</code> 的表，注意到有一个字段是 <code>@Date?</code> ，但是 SQLite 本身不支持这种复杂类型（complex type），所以我们还需要写一个可以转换成基础类型的转换器：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Converters</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TypeConverter</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">timestampToDate</span><span class="params">(value: <span class="type">Long</span>?)</span></span> = value?.let &#123; Date(it) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TypeConverter</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">dateToTimestamp</span><span class="params">(date: <span class="type">Date</span>?)</span></span> = date?.time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换器通过 <code>@TypeConverters</code> 可作用于 <code>class</code>、<code>field</code>、<code>method</code>、<code>parameter</code>，分别代表不同的作用域。比如作用在 <code>@Database</code> 类的上，那么它的作用域就是 db 中出现的所有 <code>@Dao</code> 和 <code>@Entity</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Database(entities = [Actor::class], version = 1, exportSchema = false)</span></span><br><span class="line"><span class="meta">@TypeConverters(Converters::class)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDatabase</span> : <span class="type">RoomDatabase</span></span>() &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">actorDao</span><span class="params">()</span></span>: ActorDao</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Query</code> 中的 SQL 语句可以直接引用方法参数，而且它的返回值可以是 <code>LiveData</code> 类型，也支持 <code>Flowable</code> 类型，也就是说，Room 原生支持响应式，这是对数据驱动最有利的支持，也是 Room 区别于其他 ORM 框架的显著特征。</p><p>至此，我们可以确定，无论数据来自 Remote 还是来自本地 DB，架构蓝图中的 Repository 对 ViewModel 提供的数据可以永远是 LiveData 类型，接下来我们看一下 ViewModel 的妙用。</p><h1 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h1><p>ViewModel 是一个多面手，因为它的生命周期比较长，可以跨越因为配置变动（configuration changed，比如屏幕翻转）引起的 Activity 重建，因此 ViewModel 不能持有对 Activity / Fragment 的引用。</p><p><img src="viewmodel.jpg" alt=""></p><p>如果 ViewModel 中要用到 context 怎么办呢？没关系，框架提供了一个 ViewModel 的子类 <code>AndroidViewModel</code> ，它在构造时需要传入 <code>Application</code> 实例。</p><p>既然 ViewModel 与 UI Controller 无关，当然可以用作 MVP 的 Presenter 层提供 LiveData 给 View 层，因为 LiveData 绑定了 Lifecycle，所以不存在内存泄露的问题。除此之外，ViewModel 也可以用做 MVVM 模式的 VM 层，利用 Data Binding 直接把 ViewModel 的 LiveData 属性绑定到 xml 元素上，xml 中声明式的写法避免了很多样板代码，数据驱动 UI 的最后一步，我们只需要关注数据的变化即可，UI 的状态会自动发生变化。</p><p>ViewModel 配合 Data Binding 的用法与 React 非常相似，ViewModel 实例相当于 state，xml 文件就好比 <code>render</code> 函数，只要 <code>state</code> 数据发生变化，<code>render</code> 就会重新渲染 UI，但是 data binding 还有更强大的一点，它支持双向绑定。举个例子，UI 需要展示一个评论框，允许展示评论，也允许用户修改，那么我们可以直接把 <code>EditText</code> 双向绑定到一个 LiveData 之上，只要用户有输入，我们就可以收到通知，完全不需要通过 Kotlin/Java 来操控 UI：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextInputEditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@=&#123;viewModel.commentText&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>注意，如果要在 xml 中使用 LiveData，需要把 lifecycle owner 赋给 binding：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> binding: MainBinding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.main)</span><br><span class="line"><span class="comment">// Specify the current activity as the lifecycle owner.</span></span><br><span class="line">binding.setLifecycleOwner(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure><p>因为 ViewModel 拿到的数据是 Repository 给的，可能不适用于 UI 元素，所以 ViewModel 还承担了数据适配的工作，有时候我们需要汇总 repository 的多个返回值一次性给到 UI，那么就可以使用 LiveData 的“操作符” <code>Transformations.switchMap</code>，用法可以认为等同于 Rx 的 flatMap；如果只想对 LiveData 的 value 做一些映射，可以使用 <code>Transformations.map</code>，目前 Transformations 只有这两个操作符，因为不管 Kotlin 还是 Java8，都提供了很多声明式的操作符，对流的支持都比较友好，而 <code>LiveData</code>本身不是一个流，所以这两个操作符足矣。</p><p>除了数据适配之外，ViewModel 还有一个强大的用法 —— Fragment 之间共享数据，这样 ViewModel 又扮演了 FLUX 模式中的 store 这一角色，是多个页面（fragment）之间唯一的数据出口。</p><p><img src="viewmodel2.jpg" alt=""></p><p>ViewModel 的用法也非常简单，通过 <code>ViewModelProviders.of</code> 可以获取 ViewModel 实例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> viewModel = ViewModelProviders.of(requireActivity(), factory)</span><br><span class="line">        .<span class="keyword">get</span>(ActorViewModel::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br></pre></td></tr></table></figure><p>一通操作猛如虎之后，UI controller 层变得薄如蝉翼，它只做了一件事情，把数据从左手（ViewModel）倒给了右手（使用了 Data Binding 的 xml）。</p><p>如果把 ViewModel 作为 SSOC（唯一真相源），多个 Fragment 之间共享数据，再利用 SingleLiveEvent 做总线，一个 Activity 配多个 Fragment 的写法就避免了 Activity 之间通过 Intent 传递数据的繁琐。但是 Fragment 的堆栈管理一直是一个让人头疼的问题，AAC 的 Navigation 不但完美解决了这个问题，而且还提供可视化的路由，只需拖拽一下就能生成类型安全的跳转逻辑。</p><h1 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h1><p>Navigation 用一个图（graph）来表示页面间的路由关系，图的节点（node）表示页面，边（edge）表示跳转关系。例如下图 8 个页面的跳转关系，一目了然：</p><p><img src="navigation.jpg" alt=""></p><p>页面与页面之间的连线叫 action，它可以配置进离场动画（Animations），也可以配置出栈行为（Pop Behavior），还支持 Single Top 的启动选项（Launch Options）。进离场动画和启动选项很好理解，出栈行为是一个比较强大的功能，action 箭头所指的方向表示目标页面入栈，箭头的反方向则表示目标页面出栈，而出栈的行为在 Navigation 编辑器中完全可控，我们可以指定要出栈到哪个页面，甚至可以指定目标页面是否也需要出栈：</p><p><img src="navigation2.jpg" alt=""></p><p>针对页面节点，还可以定义它要接收的参数（arguments），支持默认值，从此 Fragment 之间的参数传递变得非常直观，非常安全。</p><p>看一下具体用法，首先在跳转发起页面，通过 apt 生成的跳转函数传入参数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> actorId = getSelectedActorId()</span><br><span class="line"><span class="keyword">val</span> direction = ActorListFragmentDirections.showDetail(actorId)</span><br><span class="line">findNavController().navigate(direction)</span><br></pre></td></tr></table></figure><p>然后利用目标页面生成的 <code>*Args</code> 获取参数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后利用目标页面生成的 *Args 获取参数：</span><br></pre></td></tr></table></figure><blockquote><p>这里的 navArgs 是一个扩展函数，利用了 Kotlin 的 ReadWriteProperty。</p></blockquote><p>几行代码就搞定了页面之间的跳转，而且还是可视化！从没有想过 Android 的页面跳转竟会变得如何简单，但是 Navigation 的方案并不是原创，iOS 的 Storyboard 很早就支持拖拽生成路由。当年 Android 推出 ConstraintLayout 之时，我们都认为是参考了 Storyboard 的页面拖拽，现在再配上 Navigation，从页面到跳转，一个完整的拖拽链路就形成了。平台虽然有差异化，但是使用场景一致的前提下，解决方案也就殊途同归了。</p><p>了解完了与生命周期有关的组件，接下来我们来看细节。</p><h1 id="Paging"><a href="#Paging" class="headerlink" title="Paging"></a>Paging</h1><p>UI 没有办法一次性展示所有的数据，端上的系统资源（电量、内存）也有限制，不可能把所有数据都加载到内存中；而且大批量请求数据不但浪费带宽，在某些网络情况（弱网、慢网）下还会导致请求失败，所以分页是很多情景下的刚需。Github 上有各式各样的解决方案，这一次，Google 直接推出了官方的分页组件——Paging。</p><p>Paging 将分页逻辑拆解为三部分：</p><ul><li>数据源 <code>DataSource</code></li><li>数据块 <code>PagedList</code> </li><li>数据展示 <code>PagedListAdapter</code></li></ul><p>DataSource 的数据来源于后端服务或者本地数据库，并且用三个子类来表示三种分页模式：</p><ul><li><strong>PageKeyedDataSource</strong> - 单页数据以 page key 为标识，例如当前页的 Response 中包含了下一页的 url，这个 url 就是 page key。</li><li><strong>ItemKeyedDataSource</strong> - 单页数据以 item key 为标识，比如下一页的请求要带当前页最后一个 item 的 id，这个 itemId 就是 item key。</li><li><strong>PositionalDataSource</strong> - 单页数据以位置为标识，这种模式比较常见，Room 只支持这一种，因为数据库查询以 OFFSET 和 LIMIT 做分页。</li></ul><p>PageKeyedDataSource 和 ItemKeyedDataSource 适用于内存型数据，比如直接从后端获取后需要展示的数据。PositionalDataSource 适用于本地 Room 数据或者使用 Room 做缓存的 Cache 数据。</p><p>数据流向的关系图如下所示：</p><p><img src="paging.jpg" alt=""></p><blockquote><p><code>LivePagedListBuilder</code> 利用 <code>DataSource.Factory</code> 和 <code>PageList.Config</code> 创建 <code>LiveData</code>，<code>UI Controller</code> 拿到数据之后交给 <code>PagedListAdapter</code> 展示到 <code>RecyclerView</code>。</p></blockquote><p>上图表达了数据的流向，如果从 UI 层往回看，页面展示的数据存储在 PagedList 中，PagedList 只是 DataSource 的数据块（chunk），当 PagedList 需要更多数据时，DataSource 就会给更多，当 DataSource 一无所有时便会触发 <code>BoundaryCallback</code> 获取更多数据，直到数据全部展示完毕。</p><p>LivePagedListBuilder 会将 <code>PagedList</code> 包装成 <code>LiveData&lt;PagedList&gt;</code> 给到下游，它在整个数据交互链路中的位置如下图所示：</p><p><img src="paging2.jpg" alt=""></p><blockquote><p>Repository 拿到 Dao 的 DataSource.Factory 之后，调用它的 toLiveData 方法并传入 PagedList.Config，然后生成一个分页的 LiveData<pagedlist> 交给 ViewModel 层。</pagedlist></p></blockquote><p>Paging 加上生命周期相关的架构组件解决了数据存储、数据流转和数据展示的问题。除此之外，AAC 还包括一个强大的异步任务执行器 WorkManager，它解决了任务执行的 <strong>可靠性</strong>，无论 App 退出还是设备重启，交给 WorkerManager 的任务都会被执行。</p><h1 id="WorkManager"><a href="#WorkManager" class="headerlink" title="WorkManager"></a>WorkManager</h1><p>WorkManager 虽然解决了任务执行可靠性的问题，但是它无法精确控制任务的执行时间，因为 WorkManager 要根据 OS 资源来选择执行任务。Android 自身提供了很多方案来解决后台任务执行的问题，可以根据下图的决策路径选择不同的组件：</p><p><img src="workmanager.jpg" alt=""></p><p>WorkManager 整体上可分为四部分：任务类型、任务构建、任务监控和任务控制。</p><h2 id="一、任务类型"><a href="#一、任务类型" class="headerlink" title="一、任务类型"></a>一、任务类型</h2><p>WorkManager 提供了一次性任务和周期性任务两种任务类型：</p><ul><li>OneTimeWorkRequest —— 一次性任务</li><li>PeriodicTimeWorkRequest —— 周期性任务</li></ul><h2 id="二、任务构建"><a href="#二、任务构建" class="headerlink" title="二、任务构建"></a>二、任务构建</h2><p>一是执行条件，二是执行顺序。</p><ul><li><code>Constraints</code> —— 通过 <code>Constraints.Builder</code>构建任务执行的条件（网络类型、电量、设备空间等）</li><li>WorkContinuation —— 可以指定任务的执行顺序，例如可以按照 PERT 图的顺序执行任务：<br><img src="workmanager2.jpg" alt=""></li></ul><h2 id="三、任务监控"><a href="#三、任务监控" class="headerlink" title="三、任务监控"></a>三、任务监控</h2><p>通过回调来获知任务的当前状态：</p><p><img src="workmanager3.jpg" alt=""></p><h2 id="四、任务控制"><a href="#四、任务控制" class="headerlink" title="四、任务控制"></a>四、任务控制</h2><p>包括加入队列，取消任务，其中 UniqueWork 提供了多种加入队列的策略（REPLACE、KEEP、APPEND）：</p><ul><li>cancelWorkById(UUID) —— 通过 ID 取消单个任务</li><li>cancelAllWorkByTag(String) —— 通过 Tag 取消所有任务</li><li>cancelUniqueWork(String) —— 通过名字取消唯一任务</li></ul><p>除此之外，WorkerManager 还提供了四种不同线程模型的 Worker：</p><ul><li>Worker —— 基于默认后台线程</li><li>CoroutineWorker —— 基于 Kotlin 的协程</li><li>RxWorker —— 基于 RxJava2</li><li>ListenableWorker —— 基于回调的异步</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Google 官方架构组件 AAC 为我们提供了太多通用问题的解决方案，使用场景包括数据持久化、异步任务调度、生命周期管理，UI 分页、UI 导航，当然还有强大的 MVVM 框架 Data Binding，这些架构组件不但使代码变得清晰易读，而且独立于 Android SDK 向下兼容，AAC 使我们更加聚焦产品，专注于解决问题，而不是花太多的时间重复造轮子。</p><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="https://developer.android.google.cn/jetpack/androidx/migrate" target="_blank" rel="noopener">https://developer.android.google.cn/jetpack/androidx/migrate</a></p><p><a href="https://developer.android.google.cn/jetpack/" target="_blank" rel="noopener">https://developer.android.google.cn/jetpack/</a></p><p><a href="https://developer.android.google.cn/jetpack/docs/guide" target="_blank" rel="noopener">https://developer.android.google.cn/jetpack/docs/guide</a></p><p><a href="https://proandroiddev.com/advanced-data-binding-binding-to-livedata-one-and-two-way-binding-dae1cd68530f" target="_blank" rel="noopener">https://proandroiddev.com/advanced-data-binding-binding-to-livedata-one-and-two-way-binding-dae1cd68530f</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Google 为了帮助 Android 开发者更快更好地开发 App，推出了一系列组件，这些组件被打包成了一个整体，称作&lt;code&gt;Android Jetpack&lt;/code&gt;，它包含的组件如下图所示：&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Mysql优化小技巧</title>
    <link href="http://hackycy.github.io/2019/03/24/Mysql%E4%BC%98%E5%8C%96%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://hackycy.github.io/2019/03/24/Mysql优化小技巧/</id>
    <published>2019-03-24T13:52:13.000Z</published>
    <updated>2019-03-24T14:33:07.078Z</updated>
    
    <content type="html"><![CDATA[<p>程序嵌入SQL语句优化小技巧</p><a id="more"></a><h1 id="1、比较运算符能用’-’就不用’-lt-gt-’"><a href="#1、比较运算符能用’-’就不用’-lt-gt-’" class="headerlink" title="1、比较运算符能用’=’就不用’&lt;&gt;’"></a>1、比较运算符能用’=’就不用’&lt;&gt;’</h1><p>‘=’增加了索引的使用几率</p><h1 id="2、明知只有一条查询结果，那请使用’LIMIT-1’"><a href="#2、明知只有一条查询结果，那请使用’LIMIT-1’" class="headerlink" title="2、明知只有一条查询结果，那请使用’LIMIT 1’"></a>2、明知只有一条查询结果，那请使用’LIMIT 1’</h1><p>‘LIMIT 1’可以避免全表扫描，找到对应结果就不会再继续扫描了</p><h1 id="3、为列选择合适的数据类型"><a href="#3、为列选择合适的数据类型" class="headerlink" title="3、为列选择合适的数据类型"></a>3、为列选择合适的数据类型</h1><p>能用<code>TINYINT</code>就不用<code>SMALLLINT</code>,能用<code>SMALLINT</code>就不用<code>INT</code>，内存消耗越小越好</p><h1 id="4、将大的DELETE，UPDATE或者INSERT查询变成多个小查询"><a href="#4、将大的DELETE，UPDATE或者INSERT查询变成多个小查询" class="headerlink" title="4、将大的DELETE，UPDATE或者INSERT查询变成多个小查询"></a>4、将大的DELETE，UPDATE或者INSERT查询变成多个小查询</h1><p>为了达到更好的性能以及更好的数据控制，可以将它们变成多个小查询</p><p><img src="moresql.png" alt=""></p><h1 id="5、如果结果集允许重复的话，使用UNION-ALL代替UNION"><a href="#5、如果结果集允许重复的话，使用UNION-ALL代替UNION" class="headerlink" title="5、如果结果集允许重复的话，使用UNION ALL代替UNION"></a>5、如果结果集允许重复的话，使用UNION ALL代替UNION</h1><p>因为UNION ALL不去重复，效率高于UNION</p><h1 id="6、为获得相同结果集的多次执行，请保持SQL语句前后一致"><a href="#6、为获得相同结果集的多次执行，请保持SQL语句前后一致" class="headerlink" title="6、为获得相同结果集的多次执行，请保持SQL语句前后一致"></a>6、为获得相同结果集的多次执行，请保持SQL语句前后一致</h1><p>目的是为了充分利用查询缓冲，比如根据地域或者产品id查询产品价格，第一次使用了<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> price <span class="keyword">FROM</span> <span class="keyword">order</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">123456</span> <span class="keyword">and</span> region = <span class="string">'BEIJING'</span>;</span><br></pre></td></tr></table></figure></p><p>那么第二次同样的查询，请保持以上语句的一致性，比如不要将where语句里面的id和region位置调换顺序。</p><h1 id="7、避免使用’SELECT-’"><a href="#7、避免使用’SELECT-’" class="headerlink" title="7、避免使用’SELECT *’"></a>7、避免使用’SELECT *’</h1><p>如果不查询表中所有的列，尽量避免使用<code>SELECT *</code>，因为这样会进行全表扫描，不能有效利用索引，增大了数据库服务器的负担，以及它与应用程序客户端之间的网络IO开销。</p><h1 id="8、WHERE子句里面的列尽量被索引"><a href="#8、WHERE子句里面的列尽量被索引" class="headerlink" title="8、WHERE子句里面的列尽量被索引"></a>8、WHERE子句里面的列尽量被索引</h1><p>只是’尽量’，并不是说所有的列。因地制宜，根据实际情况进行调整，索引太多也会降低性能。</p><h1 id="9、JOIN子句里面的列尽量被索引"><a href="#9、JOIN子句里面的列尽量被索引" class="headerlink" title="9、JOIN子句里面的列尽量被索引"></a>9、JOIN子句里面的列尽量被索引</h1><p>同样只是’尽量’</p><h1 id="10、ORDER-BY的列尽量被索引"><a href="#10、ORDER-BY的列尽量被索引" class="headerlink" title="10、ORDER BY的列尽量被索引"></a>10、ORDER BY的列尽量被索引</h1><p>性能会更好</p><h1 id="11、使用LIMIT实现分页逻辑"><a href="#11、使用LIMIT实现分页逻辑" class="headerlink" title="11、使用LIMIT实现分页逻辑"></a>11、使用LIMIT实现分页逻辑</h1><p>提高性能，减少不必要数据库和应用的网络传输</p><h1 id="12、使用EXPLAIN关键字去查看执行计划"><a href="#12、使用EXPLAIN关键字去查看执行计划" class="headerlink" title="12、使用EXPLAIN关键字去查看执行计划"></a>12、使用EXPLAIN关键字去查看执行计划</h1><p>EXPLAIN可以检查索引使用情况以及扫描的行。</p><h1 id="more"><a href="#more" class="headerlink" title="more"></a>more</h1><p>SQL调优方法还有很多种，同样的查询结果可以有很多种查询方式，最好的方法就是测试！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序嵌入SQL语句优化小技巧&lt;/p&gt;
    
    </summary>
    
      <category term="DBA" scheme="http://hackycy.github.io/categories/DBA/"/>
    
    
      <category term="Mysql" scheme="http://hackycy.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>CSS入门</title>
    <link href="http://hackycy.github.io/2019/03/19/CSS%E5%85%A5%E9%97%A8/"/>
    <id>http://hackycy.github.io/2019/03/19/CSS入门/</id>
    <published>2019-03-19T09:46:03.000Z</published>
    <updated>2019-04-10T03:20:55.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS入门学习"><a href="#CSS入门学习" class="headerlink" title="CSS入门学习"></a>CSS入门学习</h1><p>Tool: Visual Studio Code</p><a id="more"></a><blockquote><p>文中元素=标签</p></blockquote><h1 id="外链样式与内链样式"><a href="#外链样式与内链样式" class="headerlink" title="外链样式与内链样式"></a>外链样式与内链样式</h1><h2 id="外链"><a href="#外链" class="headerlink" title="外链"></a>外链</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"style/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内链"><a href="#内链" class="headerlink" title="内链"></a>内链</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="块元素与内联元素"><a href="#块元素与内联元素" class="headerlink" title="块元素与内联元素"></a>块元素与内联元素</h1><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><p>概念：独占一行的元素，标签代表有<code>div</code>,<code>p</code>，<code>h1~h6</code>等等</p><blockquote><p>div没有任何语义的标签，而在H5中新增了一些语义标签，具体请看另一片文章关于HTML5的新特性<br>块元素主要作为页面的布局，一般情况块元素用来包含内联元素。p标签不可以包含其他任何块元素</p></blockquote><p>实例证明:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        哈哈哈</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>浏览器上查看内容可以正常显示，但是检查浏览器元素的显示则解析成了<br><img src="perror.png" alt=""></p><h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><p>概念：只占自身内容大小的元素，标签代表有<code>span</code>,<code>a</code>等</p><blockquote><p>a标签可以包含任何内联和块元素，但是除了它本身</p></blockquote><p>实例证明:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>检查浏览器元素的显示则解析成了<br><img src="aerror.png" alt=""></p><h1 id="标签间的关系"><a href="#标签间的关系" class="headerlink" title="标签间的关系"></a>标签间的关系</h1><p>标签之间的关系：</p><ul><li>父标签：直接包含子标签的标签</li><li>子标签：直接被父标签包含的标签</li><li>祖先标签：直接或间接包含后代标签的标签，父标签也是祖先标签</li><li>后代标签：直接或间接被祖先标签包含的标签，子标签也是后代标签</li><li>兄弟标签：拥有相同父标签的标签</li></ul><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.c1</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="选择器分组（并集选择器）"><a href="#选择器分组（并集选择器）" class="headerlink" title="选择器分组（并集选择器）"></a>选择器分组（并集选择器）</h2><p>语法：选择器1，选择器2，选择器3{}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.c1</span>,<span class="selector-tag">p</span>,<span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是一个span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h2><p>语法：*{}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是一个span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个一般用于适配每个浏览器的默认值。</p><p><del>## 复合选择器（交集选择器)</del></p><p><del>语法：选择器1选择器2{}</del></p><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>选中指定标签的指定后代标签</p><p>语法：祖先标签 后代标签 {}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个在div里的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h2><p>选中父标签的指定子标签</p><p>语法：父标签 &gt; 子标签 {}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        div &gt; p &gt; span&#123;</span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个在div里的段落<span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我也是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>伪类：专门用来表示标签的一种特殊状态</p><blockquote><p>hover和active可以被其他标签所使用，不仅只是用于a标签<br>vistited伪类由于涉及到用户隐私问题，所以在该标签内仅仅只能设置color属性，其他设置也无效。<br>也可能还有存在版本问题，IE6可以设置，其余基本测试失败。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="undefined">            color: blue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="undefined">            color: yellow;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="undefined">            color: orange;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>我是超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪元素（伪标签）选择器"><a href="#伪元素（伪标签）选择器" class="headerlink" title="伪元素（伪标签）选择器"></a>伪元素（伪标签）选择器</h2><p>表示元素中的一些特许位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">       <span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span></span><br><span class="line"><span class="undefined">           color: red;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span></span><br><span class="line"><span class="undefined">           color: yellow;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我是一个很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文字</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>根据元素中的属性或者属性值来选指定元素。</p><p>语法：</p><ul><li>标签[属性名]{} 有这个属性的</li><li>标签[属性名=”属性值”]{} 以属性为属性值的</li><li>标签^[属性名=”属性值”]{} 以属性的属性值为开头的</li><li>标签$[属性名=”属性值”]{} 以属性的属性值为结尾的</li><li>标签<em>[属性名</em>=”属性值”]{} 以属性的属性值为包含的</li></ul><p></p><p title="hello">我是一个段落</p>，title就是其中一个属性。<p></p><p>title就是一个属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">       <span class="selector-tag">span</span><span class="selector-attr">[class]</span> &#123;</span></span><br><span class="line"><span class="undefined">           color: red;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">p</span><span class="selector-attr">[title="content"]</span> &#123;</span></span><br><span class="line"><span class="undefined">           color: orange;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">'hh'</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        我是一个很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文字</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><p>:first-child {}     选中父元素中第一个子元素<br>:last-child {}      选中父元素中最后一个子元素<br>:nth-child(n) {}    选中父元素中正数第n个子元素<br>:nth-last-child(n) {}    选中父元素中倒数第n个子元素<br>:first-of-type {}   选中第一个元素<br>:last-of-type {}    选中最后一个元素<br>:nth-child(n) {}    选中第n个元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">       <span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line"><span class="undefined">           color: red;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="紧邻同胞选择器"><a href="#紧邻同胞选择器" class="headerlink" title="紧邻同胞选择器"></a>紧邻同胞选择器</h2><p>选中一个元素后的指定兄弟元素。<br>语法：兄弟元素前 + 兄弟元素后 {}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">       p + span &#123;</span></span><br><span class="line"><span class="undefined">           color: red;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是兄弟<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是最后一个span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一般同胞选择器"><a href="#一般同胞选择器" class="headerlink" title="一般同胞选择器"></a>一般同胞选择器</h2><p>选中一个元素后的所有指定兄弟元素</p><p>语法：兄弟元素前 ~ 兄弟元素后 {}</p><h2 id="否定伪类选择器"><a href="#否定伪类选择器" class="headerlink" title="否定伪类选择器"></a>否定伪类选择器</h2><p>可以从已经选中的元素中剔除某些元素</p><p>语法：选择器:not(选择器){}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">       <span class="selector-tag">p</span><span class="selector-pseudo">:not(.c)</span> &#123;</span></span><br><span class="line"><span class="undefined">           color: red;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h2><p>祖先的元素会被他的后代所继承。可以利用继承的特性将一些基本的样式继承给祖先元素。<br>但并不是所有样式都会被后代元素所继承。<br>例如一些背景相关的样式，都不会被继承。</p><h2 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h2><p>使用不同选择器时，选中了同一个元素并设置了相同的样式，则优先级高的优先显示。</p><p>优先级规则(数值为参考值)：</p><ul><li>内联样式 优先级 1000</li><li>ID选择器 优先级 100</li><li>类和伪类 优先级 10</li><li>元素选择器 优先级 1</li><li>通配选择器 优先级 0</li><li>继承样式 无优先级</li></ul><blockquote><p>当选择器有多种选择器时，先将优先级相加再进行比对<br>选择器的优先级不会超过它的最大数量级(虽然很少这样写)<br>如果选择器的优先级相同，谁在代码的位置靠后就用谁。<br>并集选择器的优先级单独计算，并集每个选择器都是独立的。</p></blockquote><p>特殊情况：在样式后添加一个<code>!important</code>，则该样式会获得最高优先级，甚至超过内联样式。(尽量避免使用，多人开发时比较麻烦)</p><h2 id="伪类顺序"><a href="#伪类顺序" class="headerlink" title="伪类顺序"></a>伪类顺序</h2><p>关于a的伪类有四个,<code>:link</code>,<code>:visited</code>,<code>hover</code>,<code>:active</code>，这四个伪类优先级是一样的。</p><p>但是特殊情况<code>:hover</code>与<code>:active</code>这两种情况是相同的，都是会同时触发。由于优先级相等，所以看谁在代码后就使用谁。<br>所以写伪类的顺序一般都是有规则的，最好习惯写为<code>:link</code>-&gt;<code>:visited</code>-&gt;<code>:hover</code>-&gt;<code>:active</code></p><h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p><em>CSS 框模型 (Box Model) 规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。</em></p><p><img src="boxmodel.gif" alt=""></p><p>盒模型<a href="http://www.w3school.com.cn/cssref/index.asp#box" target="_blank" rel="noopener">属性</a></p><p>一个盒子分成这么几个部分</p><ul><li>内容部分</li><li>内边距</li><li>边框</li><li>外边距</li></ul><blockquote><p>他们都有各自的简写方式。<br>盒子大小由内容区、内边距、边框共同决定。</p></blockquote><h2 id="内容区"><a href="#内容区" class="headerlink" title="内容区"></a>内容区</h2><p>css中定义width与height定义的只是内容区的大小</p><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p><em>元素的边框 (border) 是围绕元素内容和内边距的一条或多条线。CSS border 属性允许你规定元素边框的样式、宽度和颜色。</em></p><p>为元素设定边框必须设置三个属性:<code>width</code>,<code>color</code>,<code>style</code>。但是大部分浏览器都会有边框的默认值。</p><p>边框样式：<code>border-style</code><br>边框的宽度：<code>border-width</code><br>边框的颜色：<code>border-color</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            border-width: 2px;</span></span><br><span class="line"><span class="undefined">            border-color: yellow;</span></span><br><span class="line"><span class="undefined">            border-style: solid;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="comment">/*简写*/</span></span></span><br><span class="line"><span class="undefined">            border: 2px green solid;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h2><p><em>元素的内边距在边框和内容区之间。控制该区域最简单的属性是 padding 属性。CSS padding 属性定义元素边框与元素内容之间的空白区域。</em></p><p>padding属性接受长度值或者百分比值，但不允许使用负值。</p><p>h1 元素的各边都有 10 像素的内边距<br><code>h1 {padding: 10px;}</code></p><p>也可以根据上、右、下、左顺序分别赋值<br><code>h1 {padding: 10px 0.25em 2ex 20%;}</code></p><p>单边属性</p><ul><li><code>padding-top</code></li><li><code>padding-right</code></li><li><code>padding-bottom</code></li><li><code>padding-left</code></li></ul><blockquote><p>当宽度为auto（默认值）此时指定的内边距不会影响盒子的可见宽度，而是自动修复宽度而适应内边距。</p></blockquote><h2 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h2><p><em>围绕在元素边框的空白区域是外边距。设置外边距会在元素外创建额外的“空白”。设置外边距的最简单的方法就是使用 margin 属性，这个属性接受任何长度单位、百分数值甚至负值。</em></p><p>margin 属性接受任何长度单位，可以是像素、英寸、毫米或 em。margin 可以设置为 auto。但是允许设置为负值。</p><blockquote><p>auto值一般设置水平方向，可以用来设置居中。</p></blockquote><p>用法基本和padding类似。</p><blockquote><p>由于页面元素都是靠左上来进行布局，则设置左，上外边距时会影响自身盒子的位置，相反，设置右，下外边距时会影响其他盒子的位置。</p></blockquote><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a><a href="http://www.w3school.com.cn/css/css_margin_collapsing.asp" target="_blank" rel="noopener">外边距合并</a></h2><p><em>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</em></p><p><strong>两种情况：</strong></p><ul><li><p>第一种：两边为兄弟相邻的元素时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            margin-bottom: 100px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: green;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            margin-top: 200px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 两盒盒子的margin仅仅只有200px，而不是300px，仅取决于最大的那个margin而不是相加的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第二种：两边为父子关系的元素并某个边与边重叠时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            margin-top: 100px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 300px;</span></span><br><span class="line"><span class="undefined">            background-color: green;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 结果会发现box2不是相对于box移动了100px，而是box往下移动了100px，原因是因为box和box2处于父子关系，它们的上边框进行了重叠导致的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>解决方式</strong></p><p>1、使用padding，但是会影响盒子原来内容大小<br>2、添加一个空的table标签<br>3、使用<code>:before</code>伪类，添加一个<code>display=table</code>属性和属性值，原理与第二点相似，但是不会添加无意义的文档标签。</p><h2 id="内联元素的盒模型"><a href="#内联元素的盒模型" class="headerlink" title="内联元素的盒模型"></a>内联元素的盒模型</h2><p>内联元素无法设置width和height，其余基本和块元素的盒模型相似。</p><p>三步走：内容区、padding、margin、border</p><h1 id="display中的block、inline、inline-block、none"><a href="#display中的block、inline、inline-block、none" class="headerlink" title="display中的block、inline、inline-block、none"></a>display中的block、inline、inline-block、none</h1><p><code>display</code>属性规定元素应该生成的框(盒模型)的类型。</p><p><strong>说明</strong></p><p>这个属性用于定义建立布局时元素生成的显示框类型。对于 HTML 等文档类型，如果使用 display 不谨慎会很危险，因为可能违反 HTML 中已经定义的显示层次结构。对于 XML，由于 XML 没有内置的这种层次结构，所有 display 是绝对必要的。</p><p>主要使用的值：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>此元素不会被显示</td></tr><tr><td>block</td><td>此元素将显示为块级元素，此元素前后会带有换行符</td></tr><tr><td>inline</td><td>默认。此元素会被显示为内联元素，元素前后没有换行符</td></tr><tr><td>inline-block</td><td>行内块元素（CSS2.1新增）</td></tr></tbody></table><p>更多的值请参考<a href="http://www.w3school.com.cn/cssref/pr_class_display.asp" target="_blank" rel="noopener">链接</a></p><p>将一个div设置为内联元素：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            display: inline;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 会发现div的设置的宽度和高度设置无效，div已经变为内联元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing" target="_blank" rel="noopener">box-sizing</a></h1><p>CSS 中的 box-sizing 属性定义了 user agent 应该如何计算一个元素的总宽度和总高度。可以更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。</p><p>在 CSS 盒子模型的默认定义里，你对一个元素所设置的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。</p><p><strong>box-sizing 属性可以被用来调整这些表现:</strong></p><ul><li><code>content-box</code>是默认值。如果你设置一个元素的宽为100px，那么这个元素的内容区会有100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</li><li><code>border-box</code>告诉浏览器去理解你设置的边框和内边距的值是包含在width内的。也就是说，如果你将一个元素的width设为100px,那么这100px会包含其它的border和padding，内容区的实际宽度会是width减去border + padding的计算值。大多数情况下这使得我们更容易的去设定一个元素的宽高。</li></ul><p><strong>属性值</strong></p><h2 id="content-box"><a href="#content-box" class="headerlink" title="content-box"></a>content-box</h2><p>默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。注意: 内边距, 边框 &amp; 外边距 都在这个盒子的外部。 比如. 如果 .box {width: 350px}; 而且 {border: 10px solid black;} 那么在浏览器中的渲染的实际宽度将是370px;</p><p><strong>尺寸计算公式：</strong><br>width = 内容的宽度<br>height = 内容的高度<br>宽度和高度的计算值都不包含内容的边框（border）和内边距（padding）。</p><h2 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h2><p><code>width</code> 和 <code>height</code> 属性包括内容，内边距和边框，但不包括外边距。这是当文档处于 Quirks模式 时Internet Explorer使用的<code>盒模型</code>。注意，填充和边框将在盒子内 , 例如, <code>.box {width: 350px; border: 10px solid black;}</code> 导致在浏览器中呈现的宽度为350px的盒子。内容框不能为负，并且被分配到0，使得不可能使用border-box使元素消失。</p><p><strong>尺寸计算公式：</strong><br>width = border + padding + 内容的宽度<br>height = border + padding + 内容的高度</p><h2 id="padding-box-bad"><a href="#padding-box-bad" class="headerlink" title="padding-box[bad]"></a><del>padding-box</del>[bad]</h2><p><code>width</code> 和 <code>height</code> 属性包括内容和内边距，但是不包括边框和外边距。只有Firefox实现了这个值，它在Firefox 50中被删除。</p><h1 id="visibility中的hidden、visible"><a href="#visibility中的hidden、visible" class="headerlink" title="visibility中的hidden、visible"></a>visibility中的hidden、visible</h1><p>visibility 属性规定元素是否可见，可以被继承。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>默认值，元素是可见的</td></tr><tr><td>hidden</td><td>元素是不可见的</td></tr><tr><td>collapse</td><td>当在表格元素中使用时，此值可删除一行或一列，但是它不会影响表格的布局。被行或列占据的空间会留给其他内容使用。如果此值被用在其他的元素上，会呈现为 “hidden”。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 visibility 属性的值。</td></tr></tbody></table><p><strong>使 h2 元素不可见：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h2</span><br><span class="line">  &#123;</span><br><span class="line">  visibility:hidden;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h1><p>解决溢出内容显示,overflow 属性规定当内容溢出元素框时发生的事情。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>默认值。内容不会被修剪，会呈现在元素框之外。</td></tr><tr><td>hidden</td><td>内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td>scroll</td><td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>auto</td><td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 overflow 属性的值。</td></tr></tbody></table><p><strong>在一个狭小的div以滚动条的方式显示一段文本</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            overflow: auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>上面这个操作有一些缺陷，不能序列化函数、undefined、循环引用等，详见传送门，但是也能应付一些日常情况了。</span><br><span class="line">事实上，在 Props 是引用类型时，单独修改对象、数组的某个属性或下标，Vue 并不会抛出错误。当然，前提是你要非常清楚自己在做什么，并写好注释，防止你的小伙伴们疑惑。</span><br><span class="line">有的同学可能知道，在组件上绑定的属性，如果没有在组件内部用 Props 声明，会默认绑定到组件的根元素上去。还是之前的栗子：。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h1><p>文档流出在网页最底层，它表示的是一个网页中的位置，我们所创建的元素默认都处于文档流中。<br>原文是<code>normal flow</code>，至于为何翻译成文档流见仁见智。指语言文本从左到右，从上到下显示。但是<code>浮动</code>、<code>绝对定位</code>、<code>固定定位</code>这些都会导致脱离文档流。</p><h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><p>float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。</p><p>如果浮动非替换元素，则要指定一个明确的宽度；否则，它们会尽可能地窄。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动。</td></tr><tr><td>none</td><td>默认值。元素不浮动，并会显示在其在文本中出现的位置。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 float 属性的值。</td></tr></tbody></table><p>设置浮动会脱离文档流，元素会尽量向父元素或者遇到其他元素的左上或者右上靠。如果浮动元素上边是一个块元素，则浮动元素不会浮动超过这个块元素。</p><blockquote><p>浮动的元素不会盖住文字，会自动环绕在浮动元素周围。<br>当块元素设置float脱离文档流后，宽和高则默认是变成被内容撑开。<br>内联元素使用float脱离文档流后，会变成块元素。</p></blockquote><h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p><strong><code>clear</code> 属性规定元素的哪一侧不允许其他浮动元素。</strong></p><p>clear 属性定义了元素的哪边上不允许出现浮动元素。在 CSS1 和 CSS2 中，这是通过自动为清除元素（即设置了 clear 属性的元素）增加上外边距实现的。在 CSS2.1 中，会在元素上外边距之上增加清除空间，而外边距本身并不改变。不论哪一种改变，最终结果都一样，如果声明为左边或右边清除，会使元素的上外边框边界刚好在该边上浮动元素的下外边距边界之下。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>在左侧不允许浮动元素。</td></tr><tr><td>right</td><td>在右侧不允许浮动元素。</td></tr><tr><td>both</td><td>在左右两侧均不允许浮动元素。</td></tr><tr><td>none</td><td>默认值。允许浮动元素出现在两侧。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 clear 属性的值。</td></tr></tbody></table><blockquote><p>both是清除影响对当前元素影响最大的元素<br>对兄弟元素有效，父子是无效的。<br>清除浮动<code>clean</code>属性，清除其他浮动元素对当前元素的影响</p></blockquote><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            float: right;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            background-color: blue;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            clear: right;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果box2不设置clear，则box2的位置将被顶到box1的高度上，2⃣而设置了clear后，box2还在原来的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="高度塌陷问题"><a href="#高度塌陷问题" class="headerlink" title="高度塌陷问题"></a>高度塌陷问题</h2><p>原因：在文档流中，父元素高度默认是由子元素的高度撑起来的，但是设置浮动后，子元素脱离了文档流，则导致了父元素的高度塌陷。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">            border: 2px red solid;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sun</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            float: right;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sun"</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="解决方式一"><a href="#解决方式一" class="headerlink" title="解决方式一"></a>解决方式一</h3><p>BFC:Block Formatting （IE6以下并不支持）Context，W3C标准中，页面中都有一个隐含的属性。默认是关闭的，当打开的时候，会出现以下特性：</p><ul><li>父元素的垂直外边距不会与子元素重叠</li><li>开启BFC的元素不会被浮动元素所覆盖</li><li>开启BFC的元素可以包含浮动的子元素</li></ul><p>如何开启BFC（无法直接开启）</p><ul><li>设置元素浮动</li><li>开启元素绝对定位</li><li>设置元素的display的值为inline-block</li><li>设置元素的overflow的值为非visible的值（推荐hidden）【该方式最简单的方式，副作用最小】</li></ul><blockquote><p>兼容IE6 则可以使用相似于BFC的，成为<code>hasLayout</code>，开启方式则设置<code>zoom:1</code>即可。但是该方式仅支持IE8以下。如需完全兼容和其他浏览器，则设置两者同时设置。或者指定元素宽度。</p></blockquote><h3 id="解决方式二"><a href="#解决方式二" class="headerlink" title="解决方式二"></a>解决方式二</h3><p>利用清除浮动，直接在高度塌陷的父元素的最后，添加一个空白的div，由于该元素没有浮动，所以它是可以撑开父元素的高度的，对其进行清除浮动，消除了上一个元素的浮动影响，即可撑起父元素的高度，且该方案兼容性比方案一更高，影响度最小。但是添加了一个毫无意义的div标签，可读性变差了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">            border: 2px red solid;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sun</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            float: right;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="undefined">            clear: both;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sun"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="解决方式三"><a href="#解决方式三" class="headerlink" title="解决方式三"></a>解决方式三</h3><p><strong>利用<code>::after</code>伪元素选择器。</strong></p><blockquote><p><code>::after</code> 选择器在被选元素的内容后面插入内容。<br>请使用 content 属性来指定要插入的内容。</p></blockquote><p>通过alter伪元素向元素添加一个空白的块元素，然后对其清除元素。和方式二的原理相同，但是该方式可读性更高。不会在html中添加毫无意义的空白标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">            border: 2px red solid;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.sun</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            float: right;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*.clearfix &#123;</span></span><br><span class="line"><span class="undefined">            clear: both;</span></span><br><span class="line"><span class="undefined">        &#125;*/</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">            content: "";</span></span><br><span class="line"><span class="undefined">            clear: both;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sun"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>display的值可以为block，也可以为table。</p></blockquote><p><strong>标准模版</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>定位指的是将指定的元素摆放在页面中指定的位置，通过定位可以任意的摆放元素。</p><p>这个属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。默认值<code>static</code>。<br>元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>absolute</td><td>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</td></tr><tr><td>fixed</td><td>生成绝对定位的元素，相对于浏览器窗口进行定位。</td></tr><tr><td>relative</td><td>生成相对定位的元素，相对于其正常位置进行定位。</td></tr><tr><td>static</td><td>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 position 属性的值。</td></tr></tbody></table><h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p>相对定位设置了，但不设置偏移量则也没有效果<br>相对定位是相对于元素在文档流原来的位置进行定位<br>相对定位不会脱离文档流<br>相对定位会使得元素提升一个层级<br>相对定位不会改变元素的性质，块元素依然是块元素。内联依然也依然是内联。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: green;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">            left: 100px;</span></span><br><span class="line"><span class="undefined">            top: 100px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: blue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 相对于原来box2的位置进行偏移向右100像素，向下100像素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p>开启绝对定位会使元素脱离文档流<br>绝对定位是相当于离它最近的开启了定位的祖先元素进行定位的<br>如果所有的祖先元素都没有开启定位，则相对于浏览器窗口进行定位<br>绝对定位会使得元素提升一个层级并改变元素的性质</p><p><strong>如果祖先元素没有任何一个开启了定位，则是相对于浏览器窗口进行定位</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: green;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: blue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: black;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            left: 0;</span></span><br><span class="line"><span class="undefined">            top: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 祖先元素都没有开启定位，则box4的原点位置则是浏览器左上角 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>开启box2元素的定位，则box4原点的位置发生改变</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: green;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 200px;</span></span><br><span class="line"><span class="undefined">            background-color: blue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: black;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            left: 0;</span></span><br><span class="line"><span class="undefined">            top: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最近的祖先元素box2开启了定位，则原点位置发生了改变，为box2块元素的左上角 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>一般情况自元素开启绝对定位，则父元素会开启相对定位</p></blockquote><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>固定定位也是绝对定位的一种，大部分特点和绝对定位一样。但是它永远都相对于浏览器窗口进行定位，不管父元素到底有没有开启定位。而且只会固定在浏览器窗口的位置，不会因为其他因素（滚动条等）而改变元素位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            height: 5000px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            height: 500px;</span></span><br><span class="line"><span class="undefined">            width: 80px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            position: fixed;</span></span><br><span class="line"><span class="undefined">            background-color: yellow;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 固定定位该元素不会因为浏览器页面滚动而发生位置的改变 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>看看我有没有滚动啊啊啊啊啊啊啊啊啊啊啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>应用可以用于底部的返回，导航漂浮菜单</p><h1 id="元素层级"><a href="#元素层级" class="headerlink" title="元素层级"></a>元素层级</h1><p>如果定位元素处于相同层级，则后面的元素会盖住前面的元素（结构上）</p><p>也可以通过<code>z-index</code>来修改元素层级，但是没有开启定位的元素不起作用。</p><p>父元素的层级就算比子元素高，但是也不会盖住子元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">img</span><span class="selector-class">.x</span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">left</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">top</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">z-index</span><span class="selector-pseudo">:-1</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"x"</span> <span class="attr">src</span>=<span class="string">"/i/eg_mouse.jpg"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>默认的 z-index 是 0。Z-index -1 拥有更低的优先级。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h1><p>opacity 属性设置元素的不透明级别。<br>值为<code>0-1</code>区间。0表示完全透明，1是完全不透明。</p><blockquote><p>在IE8以及以下不支持，需要支持则使用如下属性代替，<code>filter</code>滤镜，值为<code>alpha(opacity=50)</code>,区间0-100,相当于opacity=0.5</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="undefined">body &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">div</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">opacity</span><span class="selector-pseudo">:0.5</span>;</span></span><br><span class="line"><span class="undefined">filter:Alpha(opacity=50); /* IE8 以及更早的浏览器 */</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>本元素的不透明度是 0.5。请注意，文本和背景色都受到不透明级别的影响。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>background 简写属性在一个声明中设置所有的背景属性。</p><p>可以设置如下属性：</p><ul><li>background-color        规定要使用的背景颜色。</li><li>background-position     规定背景图像的位置。</li><li>background-size         规定背景图片的尺寸。</li><li>background-repeat       规定如何重复背景图像。</li><li>background-origin       规定背景图片的定位区域。    </li><li>background-clip         规定背景的绘制区域。</li><li>background-attachment   规定背景图像是否固定或者随着页面的其余部分滚动。</li><li>background-image        规定要使用的背景图像。</li></ul><p>简写属性：没有顺序，也没有规定有多少个值。<br><code>background: #00FF00 url(bgimage.gif) no-repeat fixed top;</code></p><blockquote><p>IE8 以及更早的浏览器不支持一个元素多个背景图像。<br>IE7 以及更早的浏览器不支持 “inherit”。IE8 需要 !DOCTYPE。IE9 支持 “inherit”。</p></blockquote><h2 id="IE6不支持PNG24"><a href="#IE6不支持PNG24" class="headerlink" title="IE6不支持PNG24"></a>IE6不支持PNG24</h2><p>在IE6中对图片格式为PNG24的支持度不高，解决方式</p><ul><li>将png转为png-8格式即可，但是清晰度会有一点损失。</li><li>使用JS第三方库ie6_png</li></ul><h2 id="按钮背景闪烁"><a href="#按钮背景闪烁" class="headerlink" title="按钮背景闪烁"></a>按钮背景闪烁</h2><p>有一个按钮，按钮的状态分别设置了三个背景，上代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            width: 93px;</span></span><br><span class="line"><span class="undefined">            height: 29px;</span></span><br><span class="line"><span class="undefined">            background: url('img/link.png');</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="undefined">            background: url('img/hover.png');</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="undefined">            background: url('img/active.png');</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>造成原因：浏览器外部资源不是同时加载，而是资源被使用才会去加载资源，而上述的例子中，<code>link.png</code>被加载了，但是<code>hover</code>和<code>active</code>下状态没有马上触发，所以没有加载该资源图片，当状态被触发的时候该状态的图片才会加载，但是加载图片并不是立刻能够完成的，所以在加载的过程中有一段时间，背景图片无法显示，造成了背景闪烁。为了解决将图片整合成一张图片，利用<code>background-position</code>来分别显示各自的位置，这种图片又称<code>精灵图/雪碧图</code>。</p><p>解决方法:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            width: 93px;</span></span><br><span class="line"><span class="undefined">            height: 29px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            background: url('img/btn.png');</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="undefined">            background: url('img/btn.png');</span></span><br><span class="line"><span class="undefined">            background-position: 93px 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="undefined">            background: url('img/btn.png');</span></span><br><span class="line"><span class="undefined">            background-position: 186px 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="CSS精灵图-雪碧图"><a href="#CSS精灵图-雪碧图" class="headerlink" title="CSS精灵图/雪碧图"></a>CSS精灵图/雪碧图</h2><p>CSS Sprite(CSS 精灵), 也称作 雪碧图。</p><p>将导航背景图片，按钮背景图片等有规则的合并成一张背景图，即将多张图片合为一张整图，然后用background-position”来实现背景图片的定位技术。</p><p><strong>优势</strong></p><ul><li>通过图片整合来减少对服务器的请求次数，从而提高 页面的加载速度</li><li>通过整合图片来减小图片的体积</li></ul><p>图片整合原则：</p><ul><li>边切图边整合</li><li>定位时避免使用bottom,right等，用具体的数值，为了避免当你的宽度或高度上扩展sprites图时出现位置的错误</li><li>将小图标预留足够的空间，因为使用这些图标元素通常会有大量的内容而且可能需要扩展的间距，以至于其它的图片可能会意外出现在本区域内。一般的情况下，会将这些小图标整合到文件的最右侧</li><li>单张整合好的sprite图片在100KB以内</li><li>按分类整合图片</li><li>为了方便计算尺寸，一般情况会将sprites图的坐标计算成整数倍</li></ul><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>简单用法不介绍了。table标签，tr行标签，td单元格标签，th表头标签。</p><h2 id="去除table与td的距离"><a href="#去除table与td的距离" class="headerlink" title="去除table与td的距离"></a>去除table与td的距离</h2><p>通过<code>border-spacing</code>属性设置这个距离。</p><h2 id="表格边框合并"><a href="#表格边框合并" class="headerlink" title="表格边框合并"></a>表格边框合并</h2><p>通过<code>border-collapse</code>设置为<code>collapse</code>即可，一旦设置<code>border-spacing</code>自动失效。</p><h2 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h2><p>有一些情况下，表格是非常长的，则这时候需要将表格分为三个部分表头，表主体，表底部。<br>则html提供了三个标签<code>thead</code>,<code>tbody</code>,<code>tfoot</code>来分别表示进行区分。作用就是区分表格的不同部分。如果表格没有写tbody标签，则浏览器会默认添加一个tbody。</p><h1 id="CSS-Hack"><a href="#CSS-Hack" class="headerlink" title="CSS Hack"></a>CSS Hack</h1><p>有一些特殊情况，，有一些代码只需要运行在特定的浏览器（IE6等），则可以使用CSS Hack来解决，这段代码只在某些浏览器中识别，而其他浏览器等不会识别。</p><p>以下列举的只是一小部分，像火狐等浏览器都有自己的HACK，但是相对于一般用于IE更广法。</p><blockquote><p>不到万不得已的情况尽量不要使用</p></blockquote><h2 id="条件Hack"><a href="#条件Hack" class="headerlink" title="条件Hack"></a>条件Hack</h2><p>用于选择IE浏览器及IE的不同版本<br>if条件Hack是HTML级别的（包含但不仅是CSS的Hack，可以选择任何HTML代码块）</p><blockquote><p>仅对IE10以下有效，其余浏览器解析为html注释。</p></blockquote><p><strong>判断IE</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE]&gt;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>判断IE6</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 6]&gt;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>判断IE9以下（但不包括IE9）</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>lt为小于，lte为小于等于，gt为大于，gte为大于等于，!为选择指定版本外的所有IE版本(非)</p></blockquote><h2 id="属性Hack"><a href="#属性Hack" class="headerlink" title="属性Hack"></a>属性Hack</h2><p>选择不同的浏览器及版本<br>尽可能减少对CSS Hack的使用。Hack有风险，使用需谨慎<br>通常如未作特别说明，本文档所有的代码和示例的默认运行环境都为标准模式。<br>一些CSS Hack由于浏览器存在交叉认识，所以需要通过层层覆盖的方式来实现对不同浏览器进行Hack的。如下面这个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_：选择IE6及以下。连接线（中划线）（-）亦可使用，为了避免与某些带中划线的属性混淆，所以使用下划线（_）更为合适。</span><br><span class="line"></span><br><span class="line">*：选择IE7及以下。诸如：（+）与（#）之类的均可使用，不过业界对（*）的认知度更高</span><br><span class="line"></span><br><span class="line">\9：选择IE6+</span><br><span class="line"></span><br><span class="line">\0：选择IE8+和Opera</span><br><span class="line"></span><br><span class="line">[;property:value;];：</span><br><span class="line">选择webkit核心浏览器（Chrome,Safari）。IE7及以下也能识别。中括号内外的3个分号必须保留，第一个分号前可以是任意规则或任意多个规则</span><br><span class="line"></span><br><span class="line">[;color:#f00;]; 与 [color:#f00;color:#f00;]; 与 [margin:0;padding:0;color:#f00;]; 是等价的。生效的始终是中括号内的最后一条规则，所以通常选用第一种写法最为简洁</span><br></pre></td></tr></table></figure><p>案例代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>属性级Hack_CSS参考手册_web前端开发参考手册系列<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span>&#123;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>:<span class="selector-id">#c30</span>;          <span class="comment">/* For Firefox */</span></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[;color:#ddd;]</span>;      <span class="comment">/* For webkit(Chrome and Safari) */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>:<span class="selector-id">#090</span>\0;        <span class="comment">/* For Opera */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>:<span class="selector-id">#00f</span>\9;        <span class="comment">/* For IE8+ */</span></span></span><br><span class="line"><span class="css">    *<span class="selector-tag">color</span>:<span class="selector-id">#f00</span>;         <span class="comment">/* For IE7 */</span></span></span><br><span class="line"><span class="css">    _<span class="selector-tag">color</span>:<span class="selector-id">#ff0</span>;         <span class="comment">/* For IE6 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>在不同浏览器下看看我的颜色吧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="选择符Hack"><a href="#选择符Hack" class="headerlink" title="选择符Hack"></a>选择符Hack</h2><p>选择不同的浏览器及版本<br>尽可能减少对CSS Hack的使用。Hack有风险，使用需谨慎<br>通常如未作特别说明，本文档所有的代码和示例的默认运行环境都为标准模式。<br>一些CSS Hack由于浏览器存在交叉认识，所以需要通过层层覆盖的方式来实现对不同浏览器进行Hack的。</p><blockquote><p>用得比较少</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="selector-tag">html</span> <span class="selector-class">.test</span>&#123;<span class="attribute">color</span>:<span class="number">#090</span>;&#125;       <span class="comment">/* For IE6 and earlier */</span></span><br><span class="line">* + <span class="selector-tag">html</span> <span class="selector-class">.test</span>&#123;<span class="attribute">color</span>:<span class="number">#ff0</span>;&#125;     <span class="comment">/* For IE7 */</span></span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:lang(zh-cn)</span>&#123;<span class="attribute">color</span>:<span class="number">#f00</span>;&#125;  <span class="comment">/* For IE8+ and not IE */</span></span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:nth-child(1)</span>&#123;<span class="attribute">color</span>:<span class="number">#0ff</span>;&#125; <span class="comment">/* For IE9+ and not IE */</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.w3school.com.cn/css" target="_blank" rel="noopener">http://www.w3school.com.cn/css</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS入门学习&quot;&gt;&lt;a href=&quot;#CSS入门学习&quot; class=&quot;headerlink&quot; title=&quot;CSS入门学习&quot;&gt;&lt;/a&gt;CSS入门学习&lt;/h1&gt;&lt;p&gt;Tool: Visual Studio Code&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://hackycy.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://hackycy.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Mac关闭/开启独立显卡</title>
    <link href="http://hackycy.github.io/2019/03/19/Mac%E5%85%B3%E9%97%AD-%E5%BC%80%E5%90%AF%E7%8B%AC%E7%AB%8B%E6%98%BE%E5%8D%A1/"/>
    <id>http://hackycy.github.io/2019/03/19/Mac关闭-开启独立显卡/</id>
    <published>2019-03-19T09:19:24.000Z</published>
    <updated>2019-03-19T09:27:16.188Z</updated>
    
    <content type="html"><![CDATA[<p>本人使用的是2018款15寸的Mbp，每次用迅雷播放器观看总是自动帮我切换到独立显卡，功耗和发热实在是太严重了，所以想单独仅使用集成显卡。</p><a id="more"></a><p>普通的界面中只找到了自动切换模式在<code>设置</code>-<code>节能</code>选项卡中可以找到。</p><p><img src="autoswitch.png" alt=""></p><p>而想单独使用，则终端使用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#强制使用核显(集成显卡)</span></span><br><span class="line">$ sudo pmset -a GPUSwitch 0</span><br><span class="line"><span class="comment">#强制使用独立显卡</span></span><br><span class="line">$ sudo pmset -a GPUSwitch 1</span><br><span class="line"><span class="comment">#自动切换</span></span><br><span class="line">$ sudo pmset -a GPUSwitch 2</span><br></pre></td></tr></table></figure></p><p>自由选择切换即可。</p><p>或者使用一个<code>gfxCardStatus</code>软件也可实现，但未经尝试。命令更方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人使用的是2018款15寸的Mbp，每次用迅雷播放器观看总是自动帮我切换到独立显卡，功耗和发热实在是太严重了，所以想单独仅使用集成显卡。&lt;/p&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://hackycy.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="Mac" scheme="http://hackycy.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>PHP预定义变量</title>
    <link href="http://hackycy.github.io/2019/03/19/PHP%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/"/>
    <id>http://hackycy.github.io/2019/03/19/PHP预定义变量/</id>
    <published>2019-03-19T09:03:31.000Z</published>
    <updated>2019-03-19T09:06:47.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP预定义变量"><a href="#PHP预定义变量" class="headerlink" title="PHP预定义变量"></a>PHP预定义变量</h1><p>对于全部脚本而言，PHP 提供了大量的预定义变量。这些变量将所有的外部变量表示成内建环境变量，并且将错误信息表示成返回头。</p><a id="more"></a><p>超全局变量 — 超全局变量是在全部作用域中始终可用的内置变量</p><ul><li><code>$GLOBALS</code> — 引用全局作用域中可用的全部变量</li><li><code>$_SERVER</code> — 服务器和执行环境信息</li><li><code>$_GET</code> — HTTP GET 变量</li><li><code>$_POST</code> — HTTP POST 变量</li><li><code>$_FILES</code> — HTTP 文件上传变量</li><li><code>$_REQUEST</code> — HTTP Request 变量</li><li><code>$_SESSION</code> — Session 变量</li><li><code>$_ENV</code> — 环境变量</li><li><code>$_COOKIE</code> — HTTP Cookies</li><li><code>$php_errormsg</code> — 前一个错误信息</li><li><code>$HTTP_RAW_POST_DATA</code> — 原生POST数据</li><li><code>$http_response_header</code> — HTTP 响应头</li><li><code>$argc</code> — 传递给脚本的参数数目</li><li><code>$argv</code> — 传递给脚本的参数数组</li></ul><p>参考资料</p><p><a href="https://secure.php.net/manual/zh/reserved.variables.php" target="_blank" rel="noopener">https://secure.php.net/manual/zh/reserved.variables.php</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP预定义变量&quot;&gt;&lt;a href=&quot;#PHP预定义变量&quot; class=&quot;headerlink&quot; title=&quot;PHP预定义变量&quot;&gt;&lt;/a&gt;PHP预定义变量&lt;/h1&gt;&lt;p&gt;对于全部脚本而言，PHP 提供了大量的预定义变量。这些变量将所有的外部变量表示成内建环境变量，并且将错误信息表示成返回头。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://hackycy.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://hackycy.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Mac缺少freetype解决方案</title>
    <link href="http://hackycy.github.io/2019/03/19/Mac%E7%BC%BA%E5%B0%91freetype%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://hackycy.github.io/2019/03/19/Mac缺少freetype解决方案/</id>
    <published>2019-03-19T03:36:46.000Z</published>
    <updated>2019-03-25T03:39:22.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Mac OS X 10.14.3</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近在使用thinkphp的验证码模块时，出现了一个异常<br><code>Call to undefined function think\captcha\imagettftext()</code><br>没有<code>imagettftext()</code>这个函数，原因是因为php缺少gd库中的freetype模块导致的。</p><p>知道了原因后，查询了网上大致的方法，大概这么几种</p><ul><li>重新编译PHP</li><li>用brew重新安装新的PHP</li><li><a href="https://php-osx.liip.ch" target="_blank" rel="noopener">https://php-osx.liip.ch</a> 一句话脚本</li></ul><p>在尝试了很多遍后，都没有成功。有一篇文章讲到了这些方案比较过时，在Macos10.14版本下更改了安全策略，新增了<code>Rootless</code>机制，具体请看我博客中另一篇文章关于<code>Rootless</code>的介绍。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="方案一（便携）"><a href="#方案一（便携）" class="headerlink" title="方案一（便携）"></a>方案一（便携）</h2><p>使用第三方集成环境例如<code>MAMP</code>,<code>MAMP PRO</code>,<code>XAMPP</code>等</p><h2 id="方案二（推荐）"><a href="#方案二（推荐）" class="headerlink" title="方案二（推荐）"></a>方案二（推荐）</h2><h3 id="首先关闭Rootless"><a href="#首先关闭Rootless" class="headerlink" title="首先关闭Rootless"></a>首先关闭Rootless</h3><p>关闭步骤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、重启 Mac 并按住 Command+R，进入恢复模式</span><br><span class="line">2、打开终端 Terminal</span><br><span class="line">3、输入csrutil disable</span><br></pre></td></tr></table></figure></p><p>开启步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、重启 Mac 并按住 Command+R，进入恢复模式</span><br><span class="line">2、打开终端 Terminal</span><br><span class="line">3、输入csrutil enable</span><br></pre></td></tr></table></figure><h3 id="重新brew安装php"><a href="#重新brew安装php" class="headerlink" title="重新brew安装php"></a>重新brew安装php</h3><p><del>这里我试过关闭rootless后使用一句话脚本也没有办法安装成功。也试过一些网上的方案例如</del><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install php56 --with-apche --with-freetype</span><br></pre></td></tr></table></figure></p><p><del>但是运行出现<code>Error: invalid option: --with-apche</code>此错误，寻思没有解决办法。</del></p><p><strong>成功的方案</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install php@7.1 --build-from-source</span><br></pre></td></tr></table></figure><blockquote><p>记住添加<code>--build-from-source</code>参数</p></blockquote><p>php 版本可自行通过<code>brew search php</code>来查看需要安装所需，运行后出现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Installing dependencies <span class="keyword">for</span> php@7.1: pkg-config</span><br><span class="line">==&gt; Installing php@7.1 dependency: pkg-config</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/pkg-config-0.29.2.mojave.bo</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; Pouring pkg-config-0.29.2.mojave.bottle.tar.gz</span><br><span class="line">🍺  /usr/<span class="built_in">local</span>/Cellar/pkg-config/0.29.2: 11 files, 627.2KB</span><br><span class="line">==&gt; Installing php@7.1</span><br><span class="line">==&gt; Downloading https://php.net/get/php-7.1.26.tar.xz/from/this/mirror</span><br><span class="line">==&gt; Downloading from https://secure.php.net/distributions/php-7.1.26.tar.xz</span><br><span class="line">          <span class="comment">#    #    #    #                                         -=O=-      </span></span><br><span class="line">==&gt; Patching</span><br><span class="line">patching file acinclude.m4</span><br><span class="line">Hunk <span class="comment">#1 succeeded at 444 (offset 3 lines).</span></span><br><span class="line">Hunk <span class="comment">#2 succeeded at 459 (offset 3 lines).</span></span><br><span class="line">Hunk <span class="comment">#3 succeeded at 494 (offset 3 lines).</span></span><br><span class="line">Hunk <span class="comment">#4 succeeded at 506 (offset 3 lines).</span></span><br><span class="line">Hunk <span class="comment">#5 succeeded at 2507 (offset 88 lines).</span></span><br><span class="line">==&gt; ./buildconf --force</span><br><span class="line">==&gt; ./configure --prefix=/usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26 --localstatedir=/usr/l</span><br><span class="line">==&gt; make</span><br><span class="line"></span><br><span class="line">==&gt; make install</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set php_ini /usr/<span class="built_in">local</span>/etc/</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set php_dir /usr/<span class="built_in">local</span>/shar</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set doc_dir /usr/<span class="built_in">local</span>/shar</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set ext_dir /usr/<span class="built_in">local</span>/lib/</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set bin_dir /usr/<span class="built_in">local</span>/opt/</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set data_dir /usr/<span class="built_in">local</span>/sha</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set cfg_dir /usr/<span class="built_in">local</span>/shar</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set www_dir /usr/<span class="built_in">local</span>/shar</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set man_dir /usr/<span class="built_in">local</span>/shar</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set test_dir /usr/<span class="built_in">local</span>/sha</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set php_bin /usr/<span class="built_in">local</span>/opt/</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear update-channels</span><br><span class="line">==&gt; Caveats</span><br><span class="line">To <span class="built_in">enable</span> PHP <span class="keyword">in</span> Apache add the following to httpd.conf and restart Apache:</span><br><span class="line">    LoadModule php7_module /usr/<span class="built_in">local</span>/opt/php@7.1/lib/httpd/modules/libphp7.so</span><br><span class="line"></span><br><span class="line">    &lt;FilesMatch \.php$&gt;</span><br><span class="line">        SetHandler application/x-httpd-php</span><br><span class="line">    &lt;/FilesMatch&gt;</span><br><span class="line"></span><br><span class="line">Finally, check DirectoryIndex includes index.php</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line"></span><br><span class="line">The php.ini and php-fpm.ini file can be found <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/etc/php/7.1/</span><br><span class="line"></span><br><span class="line">php@7.1 is keg-only, <span class="built_in">which</span> means it was not symlinked into /usr/<span class="built_in">local</span>,</span><br><span class="line">because this is an alternate version of another formula.</span><br><span class="line"></span><br><span class="line">If you need to have php@7.1 first <span class="keyword">in</span> your PATH run:</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/php@7.1/bin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/php@7.1/sbin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line">For compilers to find php@7.1 you may need to <span class="built_in">set</span>:</span><br><span class="line">  <span class="built_in">export</span> LDFLAGS=<span class="string">"-L/usr/local/opt/php@7.1/lib"</span></span><br><span class="line">  <span class="built_in">export</span> CPPFLAGS=<span class="string">"-I/usr/local/opt/php@7.1/include"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To have launchd start php@7.1 now and restart at login:</span><br><span class="line">  brew services start php@7.1</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string">  php-fpm</span></span><br><span class="line"><span class="string">==&gt; Summary</span></span><br><span class="line"><span class="string">🍺  /usr/local/Cellar/php@7.1/7.1.26: 508 files, 63MB, built in 5 minutes 46 seconds</span></span><br><span class="line"><span class="string">==&gt; Caveats</span></span><br><span class="line"><span class="string">==&gt; php@7.1</span></span><br><span class="line"><span class="string">To enable PHP in Apache add the following to httpd.conf and restart Apache:</span></span><br><span class="line"><span class="string">    LoadModule php7_module /usr/local/opt/php@7.1/lib/httpd/modules/libphp7.so</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;FilesMatch \.php$&gt;</span></span><br><span class="line"><span class="string">        SetHandler application/x-httpd-php</span></span><br><span class="line"><span class="string">    &lt;/FilesMatch&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finally, check DirectoryIndex includes index.php</span></span><br><span class="line"><span class="string">    DirectoryIndex index.php index.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The php.ini and php-fpm.ini file can be found in:</span></span><br><span class="line"><span class="string">    /usr/local/etc/php/7.1/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">php@7.1 is keg-only, which means it was not symlinked into /usr/local,</span></span><br><span class="line"><span class="string">because this is an alternate version of another formula.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If you need to have php@7.1 first in your PATH run:</span></span><br><span class="line"><span class="string">  echo '</span><span class="built_in">export</span> PATH=<span class="string">"/usr/local/opt/php@7.1/bin:<span class="variable">$PATH</span>"</span><span class="string">' &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="string">  echo '</span><span class="built_in">export</span> PATH=<span class="string">"/usr/local/opt/php@7.1/sbin:<span class="variable">$PATH</span>"</span><span class="string">' &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For compilers to find php@7.1 you may need to set:</span></span><br><span class="line"><span class="string">  export LDFLAGS="-L/usr/local/opt/php@7.1/lib"</span></span><br><span class="line"><span class="string">  export CPPFLAGS="-I/usr/local/opt/php@7.1/include"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To have launchd start php@7.1 now and restart at login:</span></span><br><span class="line"><span class="string">  brew services start php@7.1</span></span><br><span class="line"><span class="string">Or, if you don'</span>t want/need a background service you can just run:</span><br><span class="line">  php-fpm</span><br></pre></td></tr></table></figure></p><p>主要查看后面的提示信息并配置环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/php@7.1/bin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/php@7.1/sbin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure></p><p>然后<code>source ~/.bash_profire</code></p><p>再次重新运行thinkphp中的验证码模块，实验成功</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/leiflyy/article/details/53016769" target="_blank" rel="noopener">https://blog.csdn.net/leiflyy/article/details/53016769</a></p><p><a href="https://blog.csdn.net/liaobangxiang/article/details/79460290" target="_blank" rel="noopener">https://blog.csdn.net/liaobangxiang/article/details/79460290</a></p><p><a href="https://github.com/EricLi404/notes/issues/1" target="_blank" rel="noopener">https://github.com/EricLi404/notes/issues/1</a></p><p><a href="https://stackoverflow.com/questions/50259893/home-brew-php-7-2-5-install-with-curl" target="_blank" rel="noopener">https://stackoverflow.com/questions/50259893/home-brew-php-7-2-5-install-with-curl</a></p><p><a href="https://hackycy.github.io/2019/03/19/Mac-OS-X-10-11-Rootless-介绍">https://hackycy.github.io/2019/03/19/Mac-OS-X-10-11-Rootless-介绍</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;Mac OS X 10.14.3&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://hackycy.github.io/categories/PHP/"/>
    
    
      <category term="环境搭建" scheme="http://hackycy.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Mac" scheme="http://hackycy.github.io/tags/Mac/"/>
    
      <category term="Homebrew" scheme="http://hackycy.github.io/tags/Homebrew/"/>
    
      <category term="PHP" scheme="http://hackycy.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS X 10.11+ Rootless 介绍</title>
    <link href="http://hackycy.github.io/2019/03/19/Mac-OS-X-10-11-Rootless-%E4%BB%8B%E7%BB%8D/"/>
    <id>http://hackycy.github.io/2019/03/19/Mac-OS-X-10-11-Rootless-介绍/</id>
    <published>2019-03-19T02:31:05.000Z</published>
    <updated>2019-03-19T02:38:49.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rootless"><a href="#Rootless" class="headerlink" title="Rootless"></a>Rootless</h1><p>Mac OS X 10.11+ (El Capitan) 以后，引入了 Rootless 安全机制，该机制限制了 root 用户的权限，有部分操作即使是 root 也无法执行。<br>在搭建php环境时遇到了这个，所以记录了下来。</p><a id="more"></a><blockquote><p>该机制的详细介绍，请参考：<br>Wikipedia: System Integrity Protection<br>Apple: System Integrity Protection Guide</p></blockquote><h1 id="主要限制有："><a href="#主要限制有：" class="headerlink" title="主要限制有："></a>主要限制有：</h1><p>以下目录无法修改：<br>/System, /bin, /sbin, 或者 /usr (/usr/local 除外)，以及内置 App 和系统工具 Utilities。<br>具体的限制名单在 /System/Library/Sandbox/rootless.conf 文件中有定义，该文件行首的 * 表示该行记录不在限制之列<br>无法追踪调试系统进程<br>无法加载未经验证的内核扩展</p><h1 id="可能引起的问题和解决方案"><a href="#可能引起的问题和解决方案" class="headerlink" title="可能引起的问题和解决方案"></a>可能引起的问题和解决方案</h1><ul><li><p>修改受限制的文件或文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -f FILE /usr/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错： cp: /usr/bin/FILE: Operation not permitted</span></span><br></pre></td></tr></table></figure></li><li><p>执行部分命令受挫</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install posix-spawn -v <span class="string">'0.3.11'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错：</span></span><br><span class="line">Building native extensions.  This could take a <span class="keyword">while</span>...</span><br><span class="line">ERROR:  While executing gem ... (Errno::EPERM)</span><br><span class="line">    Operation not permitted - /usr/bin/posix-spawn-benchmark</span><br></pre></td></tr></table></figure></li></ul><h1 id="关闭-开启Rootless"><a href="#关闭-开启Rootless" class="headerlink" title="关闭/开启Rootless"></a>关闭/开启Rootless</h1><p>如果遇到的问题难以解决，也可以关闭 rootless 功能，彻底解决引起的权限问题，但是关闭 rootless 将会严重降低系统安全性，必须尽快重新开启。</p><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>1、重启 Mac 并按住 Command+R，进入恢复模式<br>2、打开终端 Terminal<br>3、输入<code>csrutil disable</code></p><h2 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h2><p>1、重启 Mac 并按住 Command+R，进入恢复模式<br>2、打开终端 Terminal<br>3、输入<code>csrutil enable</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rootless&quot;&gt;&lt;a href=&quot;#Rootless&quot; class=&quot;headerlink&quot; title=&quot;Rootless&quot;&gt;&lt;/a&gt;Rootless&lt;/h1&gt;&lt;p&gt;Mac OS X 10.11+ (El Capitan) 以后，引入了 Rootless 安全机制，该机制限制了 root 用户的权限，有部分操作即使是 root 也无法执行。&lt;br&gt;在搭建php环境时遇到了这个，所以记录了下来。&lt;/p&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://hackycy.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="Mac" scheme="http://hackycy.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客Next主题不蒜子失效解决</title>
    <link href="http://hackycy.github.io/2019/03/17/hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E4%B8%8D%E8%92%9C%E5%AD%90%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3/"/>
    <id>http://hackycy.github.io/2019/03/17/hexo博客Next主题不蒜子失效解决/</id>
    <published>2019-03-17T14:54:32.000Z</published>
    <updated>2019-03-17T15:00:45.391Z</updated>
    
    <content type="html"><![CDATA[<p><em>2018年底发现不蒜子开始失效，但是没有管，现在看了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">官网</a></em></p><a id="more"></a><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>官网解释：因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>直接根据提示替换即可</p><p>替换路径<code>themes/next/layout/_third-party/analytics/busuanzi-counter.swig</code>，打开文件</p><p>找到<br><code>&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code><br>替换<br><code>&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;2018年底发现不蒜子开始失效，但是没有管，现在看了&lt;a href=&quot;http://busuanzi.ibruce.info/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://hackycy.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://hackycy.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>PHP之魔术常量</title>
    <link href="http://hackycy.github.io/2019/03/14/PHP%E4%B9%8B%E9%AD%94%E6%9C%AF%E5%B8%B8%E9%87%8F/"/>
    <id>http://hackycy.github.io/2019/03/14/PHP之魔术常量/</id>
    <published>2019-03-14T03:18:38.000Z</published>
    <updated>2019-03-14T03:33:13.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h1><p>PHP 向它运行的任何脚本提供了大量的<a href="https://secure.php.net/manual/zh/reserved.constants.php" target="_blank" rel="noopener">预定义常量</a>。不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。</p><p>有八个魔术常量它们的值随着它们在代码中的位置改变而改变。例如 <code>__LINE__</code>的值就依赖于它在脚本中所处的行来决定。这些特殊的常量不区分大小写，如下：</p><a id="more"></a><h1 id="几个php的魔术常量"><a href="#几个php的魔术常量" class="headerlink" title="几个php的魔术常量"></a>几个php的魔术常量</h1><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>LINE</strong></td><td>文件中的当前行号</td></tr><tr><td><strong>FILE</strong></td><td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自PHP4.0.2起，<strong>FILE</strong>总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。</td></tr><tr><td><strong>DIR</strong></td><td>文件所在的目录。如果用在被包含的文件中，则返回被包含的文件所在的目录，它等价于dirname(<strong>_FILE</strong>)。除非是根目录，否则目录名不包括末尾的斜杠。（PHP5.3.0中新增）。</td></tr><tr><td><strong>FUNCTION</strong></td><td>函数名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该函数被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。</td></tr><tr><td><strong>CLASS</strong></td><td>类的名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。类名包括其被声明的作用区域（例如 Foo\Bar）。注意自 PHP 5.4 起 <strong>CLASS</strong> 对 trait 也起作用。当用在 trait 方法中时，<strong>CLASS</strong> 是调用 trait 方法的类的名字。</td></tr><tr><td><strong>TRAIT</strong></td><td>Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4 起此常量返回 trait 被定义时的名字（区分大小写）。Trait 名包括其被声明的作用区域（例如 Foo\Bar）。</td></tr><tr><td><strong>METHOD</strong></td><td>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。</td></tr><tr><td><strong>NAMESPACE</strong></td><td>当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://secure.php.net/manual/zh/language.constants.predefined.php" target="_blank" rel="noopener">https://secure.php.net/manual/zh/language.constants.predefined.php</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;魔术常量&quot;&gt;&lt;a href=&quot;#魔术常量&quot; class=&quot;headerlink&quot; title=&quot;魔术常量&quot;&gt;&lt;/a&gt;魔术常量&lt;/h1&gt;&lt;p&gt;PHP 向它运行的任何脚本提供了大量的&lt;a href=&quot;https://secure.php.net/manual/zh/reserved.constants.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;预定义常量&lt;/a&gt;。不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。&lt;/p&gt;
&lt;p&gt;有八个魔术常量它们的值随着它们在代码中的位置改变而改变。例如 &lt;code&gt;__LINE__&lt;/code&gt;的值就依赖于它在脚本中所处的行来决定。这些特殊的常量不区分大小写，如下：&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://hackycy.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://hackycy.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Js高级-面向对象</title>
    <link href="http://hackycy.github.io/2019/03/11/Js%E9%AB%98%E7%BA%A7-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://hackycy.github.io/2019/03/11/Js高级-面向对象/</id>
    <published>2019-03-11T09:47:31.000Z</published>
    <updated>2019-04-09T02:56:56.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS基本介绍"><a href="#JS基本介绍" class="headerlink" title="JS基本介绍"></a>JS基本介绍</h1><ul><li>JS的用途：Javascript可以实现浏览器端、服务器端(nodejs)。。。</li><li>浏览器端JS由以下三个部分组成：<ul><li>ECMAScript：基础语法(数据类型、运算符、函数。。。)</li><li>BOM(浏览器对象模型)：window、location、history、navigator。。。</li><li>DOM(文档对象模型)：div、p、span。。。<a id="more"></a></li></ul></li><li>ECMAScript又名es，有以下重大版本：<ul><li>旧时代：<ul><li>es1.0。。。es3.1</li></ul></li><li>新时代：<ul><li>es5</li><li>es6(es2015)</li><li>es7(es2016)、es8(es2017)</li></ul></li></ul></li></ul><h1 id="Js基本数据类型和复杂数据类型"><a href="#Js基本数据类型和复杂数据类型" class="headerlink" title="Js基本数据类型和复杂数据类型"></a>Js基本数据类型和复杂数据类型</h1><p>一句总结，使用排除法，除掉基本数据类型都是复杂数据类型即<code>字符串</code>、<code>数字</code>、<code>布尔值</code>、<code>null</code>、<code>undefined</code>其余都是对象类型。复杂数据类型例如<code>Date</code>、<code>Array</code>等。</p><h1 id="对象的基本使用"><a href="#对象的基本使用" class="headerlink" title="对象的基本使用"></a>对象的基本使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> person = &#123;</span></span><br><span class="line"><span class="javascript">                    name : <span class="string">"张三"</span>,</span></span><br><span class="line"><span class="undefined">                    age : 18,</span></span><br><span class="line"><span class="javascript">                    say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">'i am from china'</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取属性</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.name);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.age);</span></span><br><span class="line"><span class="undefined">            person.say();</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//设置属性</span></span></span><br><span class="line"><span class="javascript">            person.address = <span class="string">"中国广东广州"</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.address);</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//清除属性</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">delete</span> person.address;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">delete</span> person.adc  <span class="comment">//无意义,但是也不会报错</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.address);</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//delete只能删除对象的属性,而不能删除变量</span></span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//清空对象</span></span></span><br><span class="line"><span class="undefined">            person=&#123;&#125;;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//将person变为null</span></span></span><br><span class="line"><span class="javascript">            person = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//两者意义不一样</span></span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line">18</span><br><span class="line">i am from china</span><br></pre></td></tr></table></figure></p><p>对象是键值对的集合：对象是由属性和方法构成的 (ps：也有说法为：对象里面皆属性，认为方法也是一个属性)</p><ul><li>name是属性    age是属性</li><li>say是方法</li></ul><h2 id="获取属性的方式"><a href="#获取属性的方式" class="headerlink" title="获取属性的方式"></a>获取属性的方式</h2><h3 id="语法"><a href="#语法" class="headerlink" title=".语法"></a>.语法</h3><ul><li><code>person.age</code>获取age属性</li><li><code>person.say</code>获取到一个方法</li></ul><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="[]语法"></a>[]语法</h3><ul><li><code>person[&quot;name&quot;]</code>等价于person.age</li><li><code>person[&quot;say&quot;]</code>等价于person.say</li></ul><h3 id="2种方式的差异："><a href="#2种方式的差异：" class="headerlink" title="2种方式的差异："></a>2种方式的差异：</h3><ul><li><p>.语法更方便，但是坑比较多(有局限性)，比如：</p><ul><li>.后面不能使用js中的关键字、保留字(class、this、function。。。)</li><li>.后面不能使用数字<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">obj.this=<span class="number">5</span>; <span class="comment">//语法错误</span></span><br><span class="line">obj<span class="number">.0</span>=<span class="number">10</span>;   <span class="comment">//语法错误</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>[]使用更广泛</p><ul><li>o1[变量name]</li><li>[“class”]、[“this”]都可以随意使用 <code>obj[&quot;this&quot;]=10</code></li><li>[0]、[1]、[2]也可以使用       <ul><li><code>obj[3]=50 = obj[&quot;3&quot;]=50</code>     </li><li>思考：为什么obj[3]=obj[“3”]</li></ul></li><li>甚至还可以这样用：[“[object Array]”]<ul><li>jquery里面就有这样的实现</li></ul></li><li>也可以这样用：[“{abc}”]<ul><li>给对象添加了{abc}属性</li></ul></li></ul></li></ul><h2 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h2><ul><li><code>student[&quot;gender&quot;]=&quot;男&quot;</code>    等价于：    <code>student.gender=&quot;男&quot;</code><ul><li>含义：如果student对象中没有gender属性，就添加一个gender属性，值为”男”</li><li>如果student对象中有gender属性，就修改gender属性的值为”男”</li></ul></li><li>案例1：<code>student.isFemale=true</code></li><li>案例2：<code>student[&quot;children&quot;]=[1,2,5]</code></li><li>案例3：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student.toShanghai=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"正在去往上海的路上"</span>)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h2><ul><li>delete student[“gender”]      </li><li>delete student.gender</li></ul><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.name = name;</span><br><span class="line">                <span class="keyword">this</span>.age = age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">40</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(person);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>person就是根据【Person构造函数】创建出来的对象</p><blockquote><p>任何函数都可以当成构造函数</p></blockquote><p>例如<code>function CreateFunc(){ }</code></p><p>只要把一个函数通过new的方式来进行调用，我们就把这一次函数的调用方式称之为：构造函数的调用</p><ul><li>new CreateFunc(); 此时CreateFunc就是一个构造函数</li><li>CreateFunc();     此时的CreateFunc并不是构造函数</li></ul><p>关于new Object()，new Object()等同于对象字面量{}</p><h2 id="构造函数的执行过程"><a href="#构造函数的执行过程" class="headerlink" title="构造函数的执行过程"></a>构造函数的执行过程</h2><p><code>var person = new Person()</code></p><ul><li>创建一个对象，称之为这个Person构造函数的实例，<code>p1</code></li><li>创建一个内部对象，<code>this</code>，将<code>this</code>指向该实例</li><li>执行函数内部的代码，其中，操作<code>this</code>的部分就是操作了该实例</li><li>返回值<ul><li>如果函数没有返回值，没有<code>return</code>语句，那么就会返回构造函数的实例<code>p1</code></li><li>如果函数返回了一个基本数据类型的值，那么就会返回本次构造函数的实例<code>p1</code></li><li>如果函数返回了一个复杂数据类型的值，那么本次函数的返回值就是该值。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1=<span class="keyword">new</span> fn();    <span class="comment">//f1就是fn的实例</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f2=<span class="keyword">new</span> fn2();   <span class="comment">//f2是fn2构造函数的实例</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]; </span><br><span class="line">    <span class="comment">//数组是一个对象类型的值，</span></span><br><span class="line">    <span class="comment">//所以数组是一个复杂数据类型的值</span></span><br><span class="line">    <span class="comment">//--&gt;本次构造函数的真正返回值就是该数组</span></span><br><span class="line">    <span class="comment">//--&gt;不再是fn3构造函数的实例</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f3=<span class="keyword">new</span> fn3();   <span class="comment">//f3还是fn3的实例吗？错</span></span><br><span class="line"><span class="comment">//f3值为[1,3,5]</span></span><br></pre></td></tr></table></figure><h1 id="JS中的继承"><a href="#JS中的继承" class="headerlink" title="JS中的继承"></a>JS中的继承</h1><p>JS中的继承和其他语言不太一样。JS中的继承是你可以通过某种方式让某个对象访问到其他对象中的属性、方法，那么这种方式就可以称之为继承。而并不是简单的所谓的<code>Xxx extends Parent</code></p><h2 id="为什么要使用继承"><a href="#为什么要使用继承" class="headerlink" title="为什么要使用继承"></a>为什么要使用继承</h2><ul><li>有些对象会有方法(动作、行为)，而这些方法都是函数，如果把这些方法和函数都放在构造函数中声明就会导致内存的浪费<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你好"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> p2=<span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p1.say === p2.say);   <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="继承的方式"><a href="#继承的方式" class="headerlink" title="继承的方式"></a>继承的方式</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><h4 id="原型链继承第一种方式"><a href="#原型链继承第一种方式" class="headerlink" title="原型链继承第一种方式"></a>原型链继承第一种方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>当然这样写没有问题，但是方法一旦过多，代码的冗余将会非常的多。</p><h4 id="原型链继承第二种方式"><a href="#原型链继承第二种方式" class="headerlink" title="原型链继承第二种方式"></a>原型链继承第二种方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype = &#123;</span><br><span class="line">            <span class="keyword">constructor</span>:Person,</span><br><span class="line">            say:function()&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            run:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'running'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>1、一般情况下，应该先改变原型对象，再创建对象。<br>2、对于新原型，一般会添加一个constructor属性，从而不破坏原来的原型对象结构。</p></blockquote><h3 id="拷贝继承（也称混入继承：mixin）"><a href="#拷贝继承（也称混入继承：mixin）" class="headerlink" title="拷贝继承（也称混入继承：mixin）"></a>拷贝继承（也称混入继承：mixin）</h3><p>场景：有时候想使用某个对象中的属性，但是又不想直接破坏它，于是就可以创建这个对象的拷贝<br>类似于jQuery中的<code>$.extend</code>，编写Jquery插件的必经之路</p><p>来看一个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">            age : <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> o2 = o1;</span><br><span class="line"></span><br><span class="line">        o2.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(o1.age); <span class="comment">//结果输出18</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、修改了o2对象的age属性</span></span><br><span class="line">        <span class="comment">//2、由于o2对象跟o1对象是同一个对象</span></span><br><span class="line">        <span class="comment">//3、所以此时o1对象的age属性也被修改了</span></span><br></pre></td></tr></table></figure></p><p>这里涉及到一个知识点<code>深拷贝和浅拷贝</code>，</p><ul><li>深拷贝只是拷贝一层属性，没有内部对象</li><li>深拷贝其实是利用了递归的原理，将对象的若干层属性拷贝出来。</li><li>上述例子中只是一个浅拷贝。</li></ul><p><em>那么什么场景下适合使用拷贝继承</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'张三'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o4 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'李四'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>实现1<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">            gender : <span class="string">'男'</span>,</span><br><span class="line">            grade : <span class="string">'初三'</span>,</span><br><span class="line">            name : <span class="string">'张三'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> cp = &#123;&#125;;</span><br><span class="line">        cp.gender = o3.gender;</span><br><span class="line">        cp.grade = o3.gender;</span><br><span class="line">        cp.name = o3.name;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(cp); <span class="comment">//&#123;gender: "男", grade: "男", name: "张三"&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>这样的方式可以说在开发中就是写死的，毫无重用性。</p><ul><li>实现2<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">            gender : <span class="string">'男'</span>,</span><br><span class="line">            grade : <span class="string">'初三'</span>,</span><br><span class="line">            name : <span class="string">'张三'</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">target,source</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(key <span class="keyword">in</span> source) &#123;</span><br><span class="line">                target[key] = source[key];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line">        extend(target, o3);</span><br><span class="line">        <span class="built_in">console</span>.log(target); <span class="comment">//&#123;gender: "男", grade: "初三", name: "张三"&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>如果很多时候需要用到拷贝继承，无疑封装成一个函数来进行复用是很好的。</p><p>在es6中也有了<code>对象扩展运算符</code>，仿佛就是为了拷贝继承而生的:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">            gender : <span class="string">'男'</span>,</span><br><span class="line">            grade : <span class="string">'初三'</span>,</span><br><span class="line">            name : <span class="string">'张三'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> target = &#123; ...o3 &#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(target);<span class="comment">//&#123;gender: "男", grade: "初三", name: "张三"&#125;</span></span><br><span class="line">        <span class="keyword">var</span> target2 = &#123; ...o3, <span class="attr">age</span>:<span class="number">20</span> &#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(target2);<span class="comment">//&#123;gender: "男", grade: "初三", name: "张三", age: 20&#125;</span></span><br></pre></td></tr></table></figure></p><p>可以说简单到令人发指的操作，当然也会存在兼容问题啦，这里不涉及es6，单纯扯一下。</p><h3 id="原型式继承（道格拉斯在蝴蝶书中提出的）"><a href="#原型式继承（道格拉斯在蝴蝶书中提出的）" class="headerlink" title="原型式继承（道格拉斯在蝴蝶书中提出的）"></a>原型式继承（道格拉斯在蝴蝶书中提出的）</h3><ul><li>使用场景<ul><li>可以创建一个纯洁的对象，对象中什么属性都没有</li><li>创建一个继承自某个父对象的字对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建空对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(o1); <span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(o1.__proto__) <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//继承父对象</span></span><br><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">       age : <span class="number">50</span>,</span><br><span class="line">       name : <span class="string">"爸爸"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Object</span>.create(parent);</span><br><span class="line"><span class="built_in">console</span>.log(s1); <span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.__proto__); <span class="comment">//&#123;age: 50, name: "爸爸"&#125;</span></span><br></pre></td></tr></table></figure><p>可以看得出一些区别，所谓的纯洁对象，真的很纯。这个使用也很方便。</p><h3 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h3><p>场景：适用于2种构造函数之间有相似的逻辑的情况。<br>原理：函数的call、apply调用方式（函数的调用方式在另一篇文章）</p><p>场景举例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.gender=gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender,say</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.gender=gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>局限性：<code>Animal</code>（父类的构造函数）的构造函数必须完全适用于<code>Person</code>（子类的构造函数）</p></blockquote><p>借用构造函数实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name=name;</span><br><span class="line">            <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,say</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// this.name=name;</span></span><br><span class="line">            <span class="comment">// this.age=age;</span></span><br><span class="line">            <span class="comment">// this.gender=gender;</span></span><br><span class="line">    Animal.apply(<span class="keyword">this</span>, [name, age]); </span><br><span class="line">            <span class="comment">//等同与下面语句</span></span><br><span class="line">            <span class="comment">//Animal.call(this, name, age);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">18</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'say'</span>);</span><br><span class="line">&#125;)) <span class="comment">//&#123;name: "张三", age: 18, say: ƒ&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="and-so-on"><a href="#and-so-on" class="headerlink" title="and so on"></a>and so on</h3><p>还有寄生继承，寄生组合继承，这里举例出以上几条常用的，其余这里就不再一一细数了。</p><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>概念：JS中的对象可能会有父对象，父对象中可能还会有父对象，就是祖宗十九代了。<br>根本：继承</p><pre><code>- 属性：对象中几乎都会有一个`__proto__`的一个属性，指向他的父对象- 意义，可以访问到父对象中的相关属性和方法</code></pre><p>根对象：<code>Object.prototype</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="built_in">console</span>.log(cat.__proto__); </span><br><span class="line"><span class="comment">//等同于 Animal.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.__proto__.__proto__);</span><br><span class="line"><span class="comment">//等同于 Object.prototype</span></span><br></pre></td></tr></table></figure><h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><p>概念：就是一个变量可以使用的范围。</p><ul><li>最外层作用域：全局作用域</li><li>通过函数创建出一个独立的作用域，其中函数还可以嵌套，所以作用域也可以嵌套。</li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><ul><li>由于作用域是相对于变量而言的，而如果存在多级作用域，这个变量又来自于哪里？这个问题就需要好好地探究一下了，我们把这个变量的查找过程称之为变量的作用域链</li><li>作用域链的意义：查找变量（确定变量来自于哪里，变量是否可以访问）</li><li>简单来说，作用域链可以用以下几句话来概括：(或者说：确定一个变量来自于哪个作用域)<ul><li>查看当前作用域，如果当前作用域声明了这个变量，就确定结果</li><li>查找当前作用域的上级作用域，也就是当前函数的上级函数，看看上级函数中有没有声明</li><li>再查找上级函数的上级函数，直到全局作用域为止</li><li>如果全局作用域中也没有，我们就认为这个变量未声明(xxx is not defined)</li></ul></li></ul><p>例子1：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>; <span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line">        (<span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(age); <span class="comment">//可访问</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> name = <span class="string">"zhangsan"</span>; </span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(name); <span class="comment">//可访问</span></span><br><span class="line"></span><br><span class="line">        &#125;)();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(name); <span class="comment">//不能访问</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(age); <span class="comment">//可访问</span></span><br></pre></td></tr></table></figure></p><p>例子2：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gender  = <span class="string">"男"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(gender); <span class="comment">//可以访问</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(gender); <span class="comment">//可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">&#125;)();</span><br><span class="line">f();</span><br></pre></td></tr></table></figure></p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>一个经典的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                a++;</span><br><span class="line">                <span class="built_in">console</span>.log(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> f = fn();</span><br><span class="line">        f(); <span class="comment">//2</span></span><br><span class="line">        f(); <span class="comment">//3</span></span><br><span class="line">        f(); <span class="comment">//4</span></span><br></pre></td></tr></table></figure></p><p>可以看出a的输出并没有一直输出3，而是2、3、4，而产生的原因是因为<code>fn</code>函数执行完毕后，匿名函数的引用导致没有释放a变量，而作用域中保留了最新的a变量的值，闭包问题就产生了。</p><blockquote><p>闭包不仅仅只是说要返回一个函数，还可以是一个对象</p></blockquote><h2 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h2><ul><li>模块化</li><li>防止变量被破坏</li></ul><p>举例：模块化的应用参考Vue.js中的源码</p><p>防止变量被破坏，运用场景</p><p>举例：KTV中的最低消费，最低消费的数值不能够暴露出去让别人随便修改，这样会脏了数据，返回一个对象暴露方法来进行业务操作，而不是进行直接操作。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//场景举例</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">KTV</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//最低消费1000</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> leastPrice = <span class="number">1000</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sale = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//消费</span></span></span><br><span class="line"><span class="javascript">                pay:<span class="function"><span class="keyword">function</span>(<span class="params">pr</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                    sale += pr;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//结账</span></span></span><br><span class="line"><span class="javascript">                settlement:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(sale&lt;leastPrice)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"您未达到最低消费，请继续消费"</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"欢迎下次光临"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p1 = KTV();</span></span><br><span class="line"><span class="undefined">        p1.pay(100);</span></span><br><span class="line"><span class="javascript">        p1.settlement(); <span class="comment">//您未达到最低消费，请继续消费</span></span></span><br><span class="line"><span class="undefined">        p1.pay(1000);</span></span><br><span class="line"><span class="javascript">        p1.settlement(); <span class="comment">//欢迎下次光临</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但是如果需要进行修改最低消费，场景：老板的朋友进行消费，需要修改<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//场景举例</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">KTV</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//最低消费1000</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> leastPrice = <span class="number">1000</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sale = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//消费</span></span></span><br><span class="line"><span class="javascript">                pay:<span class="function"><span class="keyword">function</span>(<span class="params">pr</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                    sale += pr;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//结账</span></span></span><br><span class="line"><span class="javascript">                settlement:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(sale&lt;leastPrice)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"您未达到最低消费，请继续消费"</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"欢迎下次光临"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//传入工号，和修改最低消费值</span></span></span><br><span class="line"><span class="javascript">                edit:<span class="function"><span class="keyword">function</span>(<span class="params">id,lp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(id == <span class="number">888</span>)&#123;</span></span><br><span class="line"><span class="undefined">                        leastPrice = lp;</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"你不是管理员，无法修改"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p1 = KTV();</span></span><br><span class="line"><span class="undefined">        p1.pay(100);</span></span><br><span class="line"><span class="javascript">        p1.settlement(); <span class="comment">//您未达到最低消费，请继续消费</span></span></span><br><span class="line"><span class="javascript">        p1.edit(<span class="number">100</span>, <span class="number">200</span>); <span class="comment">//你不是管理员，无法修改</span></span></span><br><span class="line"><span class="javascript">        p1.edit(<span class="number">888</span>, <span class="number">100</span>); <span class="comment">//欢迎下次光临</span></span></span><br><span class="line"><span class="undefined">        p1.settlement();</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>闭包的运用防止变量被破坏，暴露出方法来间接修改数值，防止出现脏数据。<br>闭包中也有作用域链的相关运用。<br>相辅相成吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS基本介绍&quot;&gt;&lt;a href=&quot;#JS基本介绍&quot; class=&quot;headerlink&quot; title=&quot;JS基本介绍&quot;&gt;&lt;/a&gt;JS基本介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;JS的用途：Javascript可以实现浏览器端、服务器端(nodejs)。。。&lt;/li&gt;
&lt;li&gt;浏览器端JS由以下三个部分组成：&lt;ul&gt;
&lt;li&gt;ECMAScript：基础语法(数据类型、运算符、函数。。。)&lt;/li&gt;
&lt;li&gt;BOM(浏览器对象模型)：window、location、history、navigator。。。&lt;/li&gt;
&lt;li&gt;DOM(文档对象模型)：div、p、span。。。
    
    </summary>
    
      <category term="JavaScript" scheme="http://hackycy.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://hackycy.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
