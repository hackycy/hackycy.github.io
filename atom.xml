<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>思忆技术</title>
  
  <subtitle>思忆，分享技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hackycy.github.io/"/>
  <updated>2020-07-23T08:37:09.002Z</updated>
  <id>http://hackycy.github.io/</id>
  
  <author>
    <name>hackycy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解Java泛型</title>
    <link href="http://hackycy.github.io/2020/07/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E6%B3%9B%E5%9E%8B/"/>
    <id>http://hackycy.github.io/2020/07/23/深入理解Java泛型/</id>
    <published>2020-07-23T13:21:29.000Z</published>
    <updated>2020-07-23T08:37:09.002Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="泛型的定义"><a href="#泛型的定义" class="headerlink" title="泛型的定义"></a>泛型的定义</h1><p><strong>泛型</strong>，即<code>参数化类型</code>。就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。<br>例如：<code>GenericClass**&lt;T&gt;**{}</code></p><a id="more"></a><blockquote><p>一些常用的泛型类型变量：<br>E：元素（Element），多用于java集合框架<br>K：关键字（Key）<br>N：数字（Number）<br>T：类型（Type）<br>V：值（Value）</p></blockquote><p>先来看个简单的例子，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">"1"</span>);</span><br><span class="line">list.add(<span class="string">"2"</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>运行后会发现报了一个错误</p><p><img src="https://github.static.si-yee.com/posts/generic/1.png" alt></p><p>这里可以看出来在代码编写阶段就已经报错了，不能往string类型的集合中添加int类型的数据。</p><p>那可不可以往List集合中添加多个类型的数据呢，答案是可以的，其实我们可以把list集合当成普通的类也是没问题的，那么就有下面的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">"1"</span>);</span><br><span class="line">list.add(<span class="string">"2"</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这里可以看出来，不定义泛型也是可以往集合中添加数据的，<strong>所以说泛型只是一种类型的规范，在代码编写阶段起一种限制。</strong></p><p>下面我们通过例子来介绍泛型背后数据是什么类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BaseBean&lt;String&gt; bean = <span class="keyword">new</span> BaseBean&lt;&gt;();</span><br><span class="line">        bean.setValue(<span class="string">"China"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field value = bean.getClass().getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">            Class&lt;?&gt; type = value.getType();</span><br><span class="line">            String name = type.getName();</span><br><span class="line">            System.out.println(<span class="string">"type: "</span> + name);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取方法上的泛型类型</span></span><br><span class="line">            Method getValue = bean.getClass().getDeclaredMethod(<span class="string">"getValue"</span>);</span><br><span class="line">            Object invoke = getValue.invoke(bean);</span><br><span class="line">            String methodName = invoke.getClass().getName();</span><br><span class="line">            System.out.println(<span class="string">"methodName: "</span> + methodName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :Demo01.main()</span><br><span class="line"><span class="built_in">type</span>: java.lang.Object</span><br><span class="line">methodName: java.lang.String</span><br></pre></td></tr></table></figure><p>从日志上看到通过反射获取到的属性是<code>Object</code>类型的，在方法中返回的是<code>String</code>类型，因此可以思考在<code>getValue</code>方法里面实际是做了个强转的动作，将<code>Object</code>类型的value强转成<code>String</code>类型。</p><p>因为泛型只是为了约束我们规范代码，而对于编译完之后的class交给虚拟机后，对于虚拟机它是没有泛型的说法的，所有的泛型在它看来都是<code>Object</code>类型，因此<strong>泛型擦除</strong>是对于虚拟机而言的。</p><p>下面我们再来看一种泛型结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean2</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将泛型加了个关键字<code>extends</code>，对于泛型写得多的伙伴们来说，<code>extends</code>是约束了泛型是向下继承的，最后我们通过反射获取value的类型是String类型的，因此这里也不难看出，加<code>extends</code>关键字其实最终目的是约束泛型是属于哪一类的。所以我们在编写代码的时候如果没有向下兼容类型，会警告错误的：</p><p><img src="https://github.static.si-yee.com/posts/generic/2.png" alt></p><p>既然说了泛型其实对于jvm来说都是Object类型的，那咱们直接将类型定义成<code>Object</code>不就是的了，这种做法是可以，但是在拿到<code>Object</code>类型值之后，自己还得强转，因此泛型减少了代码的强转工作，而将这些工作交给了虚拟机。</p><p>比如下面我们没有定义泛型的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean3</span> </span>&#123;</span><br><span class="line">    Object value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>势必在getValue的时候代码有个强转的过程，因此在能用泛型的时候，尽量用泛型来写，而且我认为一个好的架构师，业务的抽取是离不开泛型的定义。</p><blockquote><p>常见的泛型主要有作用在普通类上面，作用在抽象类、接口、静态或非静态方法上。</p></blockquote><h1 id="类上面的泛型"><a href="#类上面的泛型" class="headerlink" title="类上面的泛型"></a><strong>类上面的泛型</strong></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String errMsg;</span><br><span class="line">    <span class="keyword">public</span> T data;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象类或接口上的泛型"><a href="#抽象类或接口上的泛型" class="headerlink" title="抽象类或接口上的泛型"></a><strong>抽象类或接口上的泛型</strong></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAdapter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    List&lt;T&gt; DATAS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多元泛型"><a href="#多元泛型" class="headerlink" title="多元泛型"></a><strong>多元泛型</strong></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Base</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setKey</span><span class="params">(K k)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">V <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型二级抽象类或接口"><a href="#泛型二级抽象类或接口" class="headerlink" title="泛型二级抽象类或接口"></a><strong>泛型二级抽象类或接口</strong></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseCommon</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Common1</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Base</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseCommon</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Common1</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Base</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象里面包含抽象"><a href="#抽象里面包含抽象" class="headerlink" title="抽象里面包含抽象"></a><strong>抽象里面包含抽象</strong></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Base</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Map&lt;K, V&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">Map&lt;K, V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseCommon</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Base</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">   </span><br><span class="line">   LinkedList&lt;Map&lt;K, V&gt;&gt; DATAS = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Map&lt;K, V&gt; map)</span> </span>&#123;</span><br><span class="line">       DATAS.addLast(map);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map&lt;K, V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> DATAS.get(index);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="lt-gt-通配符"><a href="#lt-gt-通配符" class="headerlink" title="&lt;?&gt;通配符"></a><strong>&lt;?&gt;通配符</strong></h1><p><code>&lt;?&gt;通配符</code>和 <code>&lt;T&gt;</code> 区别是<code>&lt;?&gt;</code>在你不知道泛型类型的时候，可以用<code>&lt;?&gt;</code>通配符来定义，下面通过一个例子来看看<code>&lt;?&gt;</code>的用处：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common1</span> <span class="keyword">extends</span> <span class="title">Common</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.static.si-yee.com/posts/generic/3.png" alt></p><p>在定义的时候将<code>Common</code>的泛型指向<code>Common1</code>的泛型，可以看到直接提示有问题，这里可以想，虽然<code>Common1</code>是继承自<code>Common</code>的，但是并不代表<code>BaseBean</code>之间是等量的，在开篇也讲过，如果泛型传入的是什么类型，那么在<code>BaseBean</code>中的<code>getValue</code>返回的类型就是什么，因此可以想两个不同的泛型类肯定是不等价的，但是如果我这里写呢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BaseBean&lt;Common&gt; commonBaseBean = <span class="keyword">new</span> BaseBean&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    BaseBean&lt;?&gt; common1BaseBean = commonBaseBean;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">        Method setValue = common1BaseBean.getClass().getDeclaredMethod(<span class="string">"setValue"</span>, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        setValue.invoke(common1BaseBean, <span class="string">"123"</span>);</span><br><span class="line">        Object value = common1BaseBean.getValue();</span><br><span class="line">        System.out.println(<span class="string">"result:"</span> + value);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面如果定义的泛型是通配符是可以等价的，因为此时的setValue的参数是Object类型，所以能直接将上面定义的泛型赋给通配符的BaseBean。</p><p><strong>通配符不能定义在类上面、接口或方法上，只能作用在方法的参数上</strong></p><p><img src="https://github.static.si-yee.com/posts/generic/4.png" alt></p><p>其他的几种情况自己去尝试，正确的使用通配符:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClass</span><span class="params">(Class&lt;?&gt; class)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="上限以及下限泛型"><a href="#上限以及下限泛型" class="headerlink" title="上限以及下限泛型"></a>上限以及下限泛型</h1><p><strong><code>&lt;T extends &gt;</code>、<code>&lt;T super &gt;</code>、<code>&lt;? extends &gt;</code>、<code>&lt;? super &gt;</code></strong></p><p><code>&lt;T extends **&gt;</code>表示上限泛型、<code>&lt;T super **&gt;</code>表示下限泛型<br>为了演示这两个通配符的作用，增加了一个类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BaseBean&lt;Common&gt; beanCommon = <span class="keyword">new</span> BaseBean();</span><br><span class="line">        BaseBean&lt;BaseCommon&gt; baseCommonBaseBean = beanCommon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Common</span>&gt; </span>&#123;</span><br><span class="line">    T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseCommon</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common</span> <span class="keyword">extends</span> <span class="title">BaseCommon</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>会看到出现以下错误</p><p><code>Type parameter &#39;BaseCommon&#39; is not within its bound; should extend &#39;Common&#39;</code></p><p>第二个定义的泛型是不合法的，因为<code>BaseCommon</code>是<code>Common</code>的父类，超出了<code>Common</code>的类型范围。</p><p><strong><code>&lt;T super &gt;</code>不能作用在类、接口、方法上，只能通过方法传参来定义泛型</strong><br>在BaseBean里面定义了个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BaseBean&lt;Common&gt; beanCommon = <span class="keyword">new</span> BaseBean();</span><br><span class="line">        beanCommon.add(Common<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanCommon.add(Common1<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">//出现报错</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Common</span>&gt; </span>&#123;</span><br><span class="line">    T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Class&lt;? <span class="keyword">super</span> Common&gt; clazz)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 增加的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseCommon</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common</span> <span class="keyword">extends</span> <span class="title">BaseCommon</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common1</span> <span class="keyword">extends</span>  <span class="title">Common</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>可以看到当传进去的是<code>Common1.class</code>的时候是不合法的，因为在<code>add</code>方法中需要传入<code>Common</code>父类的字节码对象，而<code>Common1</code>是继承自<code>Common</code>，所以直接不合法。</p><blockquote><p>在实际开发中其实知道什么时候定义什么类型的泛型就ok，在mvp实际案例中泛型用得比较广泛，大家可以根据实际项目来找找泛型的感觉，只是面试的时候需要理解类型擦除是针对谁而言的。</p></blockquote><h1 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h1><p>其实在开篇的时候已经通过例子说明了，通过反射绕开泛型的定义，也说明了类中定义的泛型最终是以Object被jvm执行。</p><p>所有的泛型在jvm中执行的时候，都是以<code>Object</code>对象存在的，加泛型只是为了一种代码的规范，避免了开发过程中再次强转。<br><strong>泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。</strong></p><p><strong>摘录自</strong>：</p><p><a href="http://www.jianshu.com/p/dd34211f2565" target="_blank" rel="noopener">www.jianshu.com/p/dd34211f2565</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;泛型的定义&quot;&gt;&lt;a href=&quot;#泛型的定义&quot; class=&quot;headerlink&quot; title=&quot;泛型的定义&quot;&gt;&lt;/a&gt;泛型的定义&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;泛型&lt;/strong&gt;，即&lt;code&gt;参数化类型&lt;/code&gt;。就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。&lt;br&gt;例如：&lt;code&gt;GenericClass**&amp;lt;T&amp;gt;**{}&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://hackycy.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://hackycy.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Flutter引入第三方Icon图标</title>
    <link href="http://hackycy.github.io/2020/07/02/Flutter%E5%BC%95%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9Icon%E5%9B%BE%E6%A0%87/"/>
    <id>http://hackycy.github.io/2020/07/02/Flutter引入第三方Icon图标/</id>
    <published>2020-07-02T14:26:06.000Z</published>
    <updated>2020-07-23T08:37:08.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Flutter虽然内置了很多Icon图标，但是还是需要引入自己或第三方图标库提供的Icon。下面是解决办法。本文以<a href="http://iconfont.cn/" target="_blank" rel="noopener">阿里巴巴图标库</a>为例。</strong></p><a id="more"></a><p>1、在阿里图标库选好需要用的图标，添加进购物车将选好的图标打包下载到本地（下载代码），复制<code>iconfont.ttf</code>文件到项目中。</p><p>2、将该文件放置于你的flutter项目下的<code>assets/fonts/</code>下。</p><p>3、打开项目根目录中的pubspec.yaml文件，在flutter中增加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The following section is specific to Flutter.</span></span><br><span class="line"><span class="attr">flutter:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The following line ensures that the Material Icons font is</span></span><br><span class="line">  <span class="comment"># included with your application, so that you can use the icons in</span></span><br><span class="line">  <span class="comment"># the material Icons class.</span></span><br><span class="line">  <span class="attr">uses-material-design:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># An image asset can refer to one or more resolution-specific "variants", see</span></span><br><span class="line">  <span class="comment"># https://flutter.dev/assets-and-images/#resolution-aware.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># For details regarding adding assets from package dependencies, see</span></span><br><span class="line">  <span class="comment"># https://flutter.dev/assets-and-images/#from-packages</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># To add custom fonts to your application, add a fonts section here,</span></span><br><span class="line">  <span class="comment"># in this "flutter" section. Each entry in this list should have a</span></span><br><span class="line">  <span class="comment"># "family" key with the font family name, and a "fonts" key with a</span></span><br><span class="line">  <span class="comment"># list giving the asset and other descriptors for the font. For</span></span><br><span class="line">  <span class="comment"># example:</span></span><br><span class="line">  <span class="attr">fonts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">family:</span> <span class="string">Iconfont</span></span><br><span class="line">      <span class="attr">fonts:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="attr">asset:</span> <span class="string">assets/fonts/iconfont.ttf</span></span><br></pre></td></tr></table></figure><p><code>Iconfont</code>为自定义名称，可自己定义。</p><p>4、在项目中使用：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Icon(IconData(<span class="number">0xe621</span>, fontFamily: <span class="string">'iconfont'</span>));</span><br></pre></td></tr></table></figure><p>其中：<code>IconData()</code>里面，第一个参数为codePoint，代表图标字体存储的<code>Unicode</code>，这个可以在打开阿里巴巴库标题的下载文件中的HTML文件查看，<strong>将 &amp;# 字符替换为 0 即可，fontFamily：后面跟自定义的字体图标名称，我这里是Iconfont</strong></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/shuaizi96/article/details/88550217" target="_blank" rel="noopener">https://blog.csdn.net/shuaizi96/article/details/88550217</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Flutter虽然内置了很多Icon图标，但是还是需要引入自己或第三方图标库提供的Icon。下面是解决办法。本文以&lt;a href=&quot;http://iconfont.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里巴巴图标库&lt;/a&gt;为例。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Flutter" scheme="http://hackycy.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://hackycy.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>解决Mac flutter run报错：FileSystemException</title>
    <link href="http://hackycy.github.io/2020/06/05/%E8%A7%A3%E5%86%B3Mac-flutter-run%E6%8A%A5%E9%94%99%EF%BC%9AFileSystemException/"/>
    <id>http://hackycy.github.io/2020/06/05/解决Mac-flutter-run报错：FileSystemException/</id>
    <published>2020-06-05T10:44:53.000Z</published>
    <updated>2020-07-23T08:37:09.046Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在正式学习完Dart的路程下，兴奋的配置完成Flutter的环境后，想要跑一个demo的时候坑又来了一个。</p><a id="more"></a><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p><strong>flutter doctor</strong>无问题</p><p><img src="https://github.static.si-yee.com/posts/flutterrunFileSystemExceptionError/20200605104644.png" alt></p><p>但是在<strong>flutter run</strong>后出现了该错误：</p><p><img src="https://github.static.si-yee.com/posts/flutterrunFileSystemExceptionError/20200605104915.png" alt></p><p>出现这些问题，查看了Flutter的很多issues，有的说权限，有的说配置国内源。的确如此，但是先确认好步骤。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>如果安装好了SDK先删除重新配置吧。环境配置的变量可以不用删除。重复安装sdk的步骤就可以了。<strong>记得先配好环境变量再运行Flutter的相关命令</strong>。特别是配置国内源。<a href="https://flutter.dev/docs/get-started/install/macos" target="_blank" rel="noopener">官方教程</a></p><p>配置<code>.bash_profile</code>，如果是使用<code>zsh</code>下，每次都需要打开终端后输入<code>source ~/.bash_profile</code>，解决方法就是在<code>.zshrc</code>文件配置<code>source ~/.bash_profile</code>命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://mirrors.tuna.tsinghua.edu.cn/dart-pub</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://mirrors.tuna.tsinghua.edu.cn/flutter</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/Users/zjyzy/Library/Flutter/bin"</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你有科学上网，可以配置代理：</p><p><code>export http_proxy=http://127.0.0.1:1087</code>和<code>export https_proxy=http://127.0.0.1:1087</code></p></blockquote><p>重新配置好SDK后，配置好<code>flutter precache</code>和<code>flutter doctor</code>无误后，配置Flutter SDK的目录权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod -R 777 /Users/zjyzy/Library/Flutter/bin</span><br></pre></td></tr></table></figure><p>使用<code>flutter create</code>命令创建项目，<strong>这里要记住，一定不要使用sudo创建项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">$ flutter create flutterdemo</span><br><span class="line">Creating project flutterdemo...</span><br><span class="line">  flutterdemo/ios/Runner.xcworkspace/contents.xcworkspacedata (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings (created)</span><br><span class="line">  flutterdemo/ios/Runner/Info.plist (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage@3x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@1x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@1x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@1x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-1024x1024@1x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-83.5x83.5@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@3x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@3x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@3x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@1x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@3x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Base.lproj/LaunchScreen.storyboard (created)</span><br><span class="line">  flutterdemo/ios/Runner/Base.lproj/Main.storyboard (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme (created)</span><br><span class="line">  flutterdemo/ios/Flutter/Debug.xcconfig (created)</span><br><span class="line">  flutterdemo/ios/Flutter/Release.xcconfig (created)</span><br><span class="line">  flutterdemo/ios/Flutter/AppFrameworkInfo.plist (created)</span><br><span class="line">  flutterdemo/ios/.gitignore (created)</span><br><span class="line">  flutterdemo/<span class="built_in">test</span>/widget_test.dart (created)</span><br><span class="line">  flutterdemo/flutterdemo.iml (created)</span><br><span class="line">  flutterdemo/.gitignore (created)</span><br><span class="line">  flutterdemo/.metadata (created)</span><br><span class="line">  flutterdemo/android/app/src/profile/AndroidManifest.xml (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/mipmap-mdpi/ic_launcher.png (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/mipmap-hdpi/ic_launcher.png (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/drawable/launch_background.xml (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/values/styles.xml (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/mipmap-xhdpi/ic_launcher.png (created)</span><br><span class="line">  flutterdemo/android/app/src/main/AndroidManifest.xml (created)</span><br><span class="line">  flutterdemo/android/app/src/debug/AndroidManifest.xml (created)</span><br><span class="line">  flutterdemo/android/gradle/wrapper/gradle-wrapper.properties (created)</span><br><span class="line">  flutterdemo/android/gradle.properties (created)</span><br><span class="line">  flutterdemo/android/.gitignore (created)</span><br><span class="line">  flutterdemo/android/settings.gradle (created)</span><br><span class="line">  flutterdemo/android/app/build.gradle (created)</span><br><span class="line">  flutterdemo/android/app/src/main/kotlin/com/example/flutterdemo/MainActivity.kt (created)</span><br><span class="line">  flutterdemo/android/build.gradle (created)</span><br><span class="line">  flutterdemo/android/flutterdemo_android.iml (created)</span><br><span class="line">  flutterdemo/pubspec.yaml (created)</span><br><span class="line">  flutterdemo/README.md (created)</span><br><span class="line">  flutterdemo/ios/Runner/Runner-Bridging-Header.h (created)</span><br><span class="line">  flutterdemo/ios/Runner/AppDelegate.swift (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcodeproj/project.pbxproj (created)</span><br><span class="line">  flutterdemo/lib/main.dart (created)</span><br><span class="line">  flutterdemo/.idea/runConfigurations/main_dart.xml (created)</span><br><span class="line">  flutterdemo/.idea/libraries/Flutter_for_Android.xml (created)</span><br><span class="line">  flutterdemo/.idea/libraries/Dart_SDK.xml (created)</span><br><span class="line">  flutterdemo/.idea/libraries/KotlinJavaRuntime.xml (created)</span><br><span class="line">  flutterdemo/.idea/modules.xml (created)</span><br><span class="line">  flutterdemo/.idea/workspace.xml (created)</span><br><span class="line">Running <span class="string">"flutter pub get"</span> <span class="keyword">in</span> flutterdemo...                         3.0s</span><br><span class="line">Wrote 72 files.</span><br><span class="line"></span><br><span class="line">All <span class="keyword">done</span>!</span><br><span class="line"></span><br><span class="line">[✓] Flutter: is fully installed. (Channel stable, v1.17.3, on Mac OS X 10.15.4 19E287, locale zh-Hans-CN)</span><br><span class="line">[✓] Android toolchain - develop <span class="keyword">for</span> Android devices: is fully installed. (Android SDK version 29.0.3)</span><br><span class="line">[✓] Xcode - develop <span class="keyword">for</span> iOS and macOS: is fully installed. (Xcode 11.4.1)</span><br><span class="line">[✓] Android Studio: is fully installed. (version 3.2)</span><br><span class="line">[!] Android Studio: is partially installed; more components are available. (version 3.0)</span><br><span class="line">[!] Android Studio: is partially installed; more components are available. (version 3.6)</span><br><span class="line">[!] IntelliJ IDEA Community Edition: is partially installed; more components are available. (version 2019.3.1)</span><br><span class="line">[✓] VS Code: is fully installed. (version 1.45.1)</span><br><span class="line">[✓] Connected device: is fully installed. (1 available)</span><br><span class="line"></span><br><span class="line">Run <span class="string">"flutter doctor"</span> <span class="keyword">for</span> information about installing additional components.</span><br><span class="line"></span><br><span class="line">In order to run your application, <span class="built_in">type</span>:</span><br><span class="line"></span><br><span class="line">  $ <span class="built_in">cd</span> flutterdemo</span><br><span class="line">  $ flutter run</span><br><span class="line"></span><br><span class="line">Your application code is <span class="keyword">in</span> flutterdemo/lib/main.dart.</span><br></pre></td></tr></table></figure><p>随后连接上模拟器，使用<code>flutter run</code>运行项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ flutter run</span><br><span class="line">Launching lib/main.dart on iPhone SE (2nd generation) <span class="keyword">in</span> debug mode...</span><br><span class="line">Running Xcode build...                                                  </span><br><span class="line">                                                   </span><br><span class="line"> └─Compiling, linking and signing...                         5.8s</span><br><span class="line">Xcode build <span class="keyword">done</span>.                                           17.3s</span><br><span class="line">Syncing files to device iPhone SE (2nd generation)...              135ms</span><br><span class="line"></span><br><span class="line">Flutter run key commands.</span><br><span class="line">r Hot reload. 🔥🔥🔥</span><br><span class="line">R Hot restart.</span><br><span class="line">h Repeat this <span class="built_in">help</span> message.</span><br><span class="line">d Detach (terminate <span class="string">"flutter run"</span> but leave application running).</span><br><span class="line">c Clear the screen</span><br><span class="line">q Quit (terminate the application on the device).</span><br><span class="line">An Observatory debugger and profiler on iPhone SE (2nd generation) is available at:</span><br><span class="line">http://127.0.0.1:50997/0_E-14-WAWg=/</span><br></pre></td></tr></table></figure><p>运行就完成啦！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.flutterchina.club/chapter1/install_flutter.html" target="_blank" rel="noopener">https://book.flutterchina.club/chapter1/install_flutter.html</a></p><p><a href="https://blog.csdn.net/MugWorld/article/details/100033262" target="_blank" rel="noopener">https://blog.csdn.net/MugWorld/article/details/100033262</a></p><p><a href="https://github.com/flutter/flutter/issues/57744" target="_blank" rel="noopener">https://github.com/flutter/flutter/issues/57744</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在正式学习完Dart的路程下，兴奋的配置完成Flutter的环境后，想要跑一个demo的时候坑又来了一个。&lt;/p&gt;
    
    </summary>
    
      <category term="Flutter" scheme="http://hackycy.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://hackycy.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>解决Mac通过Brew安装Dart报错：Failed to download resource dart</title>
    <link href="http://hackycy.github.io/2020/06/03/%E8%A7%A3%E5%86%B3Mac%E9%80%9A%E8%BF%87Brew%E5%AE%89%E8%A3%85Dart%E6%8A%A5%E9%94%99%EF%BC%9AFailed-to-download-resource-dart/"/>
    <id>http://hackycy.github.io/2020/06/03/解决Mac通过Brew安装Dart报错：Failed-to-download-resource-dart/</id>
    <published>2020-06-03T12:12:35.000Z</published>
    <updated>2020-07-23T08:37:09.046Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在学习Flutter的第一步从安装就开始踩坑了。安装Dart硬是安装不上。科学上网也有就是安不上。找了些资料，记录了一下解决方案。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先是dart官网推荐使用brew命令安装dart，如下图：</p><p><img src="https://github.static.si-yee.com/posts/fixmacinstalldart/20200604141048.png" alt></p><p>但是出现了以下的错误：</p><p><img src="https://github.static.si-yee.com/posts/fixmacinstalldart/20200604141008.png" alt></p><p>详细报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ brew install dart</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Installing dart from dart-lang/dart</span><br><span class="line">==&gt; Downloading https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-=O=-               <span class="comment">#    #     #     #                                        </span></span><br><span class="line">curl: (7) Failed to connect to storage.googleapis.com port 443: Operation timed out</span><br><span class="line">Error: An exception occurred within a child process:</span><br><span class="line">  DownloadError: Failed to download resource <span class="string">"dart"</span></span><br><span class="line">Download failed: https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br></pre></td></tr></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>报错中有回显资源的地址链接，这时候我们可以通过自己浏览器或者迅雷去下载到本地。</p><p>然后使用终端查看Homebrew的缓存地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew --cache</span><br><span class="line">/Users/zjyzy/Library/Caches/Homebrew</span><br></pre></td></tr></table></figure><p>最后将下载下来的文件 拷贝到 上面缓存地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp ~/Downloads/dartsdk-macos-x64-release.zip /Users/zjyzy/Library/Caches/Homebrew</span><br></pre></td></tr></table></figure><p>接着再执行命令就可以正常安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install dart</span><br></pre></td></tr></table></figure><p>如果没有意外，那么就可以直接解决问题了。但是不幸，我还是不能解决问题。继续查找了一些资料：</p><p>安装时给命令加个 <code>-v</code> 打印命令的详细日志看看:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ brew install dart -v</span><br><span class="line">==&gt; Installing dart from dart-lang/dart</span><br><span class="line">/usr/bin/sandbox-exec -f /private/tmp/homebrew20200603-12459-1ulm7yo.sb nice ruby -W0 -I <span class="variable">$LOAD_PATH</span> -- /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/build.rb /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/dart-lang/homebrew-dart/dart.rb --verbose</span><br><span class="line">==&gt; Downloading https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br><span class="line">/usr/bin/curl -q --globoff --show-error --user-agent Homebrew/2.2.2\ \(Macintosh\;\ Intel\ Mac\ OS\ X\ 10.15.4\)\ curl/7.64.1 --fail --location --remote-time --<span class="built_in">continue</span>-at 0 --output /Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip.incomplete https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:--  0:01:15 --:--:--     0</span><br><span class="line">curl: (7) Failed to connect to storage.googleapis.com port 443: Operation timed out</span><br><span class="line">Error: An exception occurred within a child process:</span><br><span class="line">  DownloadError: Failed to download resource <span class="string">"dart"</span></span><br><span class="line">Download failed: https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br></pre></td></tr></table></figure><p><strong>注意看这条信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/curl -q --globoff --show-error --user-agent Homebrew/2.2.2\ \(Macintosh\;\ Intel\ Mac\ OS\ X\ 10.15.4\)\ curl/7.64.1 --fail --location --remote-time --<span class="built_in">continue</span>-at 0 --output /Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip.incomplete https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br></pre></td></tr></table></figure><p>我们看到 Homebrew 下载 dart 的缓存地址为:<code>/Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip.incomplete</code></p><p><code>XXX.incomplete</code> 表示下载未完成，但这是 Homebrew 期望的下载文件路径。那么我们将从浏览器下载好的包放到该目录下，并去除<code>.incomplete</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp ~/Downloads/dartsdk-macos-x64-release.zip /Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip</span><br></pre></td></tr></table></figure><p><strong>先去下载文件路径删除掉未下载好的包</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/zjyzy/Library/Caches/Homebrew/downloads</span><br><span class="line">$ rm -rf a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip.incomplete</span><br></pre></td></tr></table></figure><p>此时在安装查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ brew install dart -v</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Installing dart from dart-lang/dart</span><br><span class="line">/usr/bin/sandbox-exec -f /private/tmp/homebrew20200603-14161-iaxt0b.sb nice ruby -W0 -I <span class="variable">$LOAD_PATH</span> -- /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/build.rb /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/dart-lang/homebrew-dart/dart.rb --verbose</span><br><span class="line">==&gt; Downloading https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br><span class="line">Already downloaded: /Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip</span><br><span class="line">==&gt; Verifying a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip checksum</span><br><span class="line">unzip -o /Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip -d /private/tmp/d20200603-14162-sr2oas</span><br><span class="line">cp -pR /private/tmp/d20200603-14162-sr2oas/dart-sdk/. /private/tmp/dart-20200603-14162-bg4o22/dart-sdk</span><br><span class="line">chmod -Rf +w /private/tmp/d20200603-14162-sr2oas</span><br><span class="line">==&gt; Cleaning</span><br><span class="line">==&gt; Finishing up</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dart dart</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dart2js dart2js</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dart2native dart2native</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dartanalyzer dartanalyzer</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dartaotruntime dartaotruntime</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dartdevc dartdevc</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dartdoc dartdoc</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dartfmt dartfmt</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/pub pub</span><br><span class="line">/usr/bin/sandbox-exec -f /private/tmp/homebrew20200603-14268-12qkciz.sb nice ruby -W0 -I <span class="variable">$LOAD_PATH</span> -- /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/postinstall.rb /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/dart-lang/homebrew-dart/dart.rb -v</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Please note the path to the Dart SDK:</span><br><span class="line">  /usr/<span class="built_in">local</span>/opt/dart/libexec</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/<span class="built_in">local</span>/Cellar/dart/2.8.3: 502 files, 486MB, built <span class="keyword">in</span> 7 seconds</span><br><span class="line">==&gt; `brew cleanup` has not been run <span class="keyword">in</span> 30 days, running now...</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/openssl@1.1--1.1.1d.mojave.bottle.tar.gz... (5.2MB)</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/python--3.7.4_1.mojave.bottle.tar.gz... (14.6MB)</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/readline--8.0.1.mojave.bottle.tar.gz... (517.9KB)</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/sqlite--3.29.0.mojave.bottle.tar.gz... (1.9MB)</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/watchman--4.9.0_3.mojave.bottle.tar.gz... (536.8KB)</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/Cask/motrix--1.4.1.dmg... (63MB)</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/npm-folders.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/npm-global.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/npm-json.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/npm-package-locks.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/npm-shrinkwrap.json.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/package-lock.json.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/package.json.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-coding-style.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-config.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-developers.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-disputes.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-index.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-orgs.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-registry.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-scope.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-scripts.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/removing-npm.7</span><br><span class="line">rmdir /usr/<span class="built_in">local</span>/lib/node_modules/@vue/cli/node_modules/@apollo/protobufjs/cli/node_modules</span><br><span class="line">Pruned 17 symbolic links and 1 directories from /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>命令验证dart安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ brew info dart</span><br><span class="line">dart-lang/dart/dart: stable 2.8.3, devel 2.9.0-13.0.dev</span><br><span class="line">The Dart SDK</span><br><span class="line">https://dart.dev</span><br><span class="line">Conflicts with:</span><br><span class="line">  dart-beta (because dart-beta ships the same binaries)</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/dart/2.8.3 (502 files, 486MB) *</span><br><span class="line">  Built from <span class="built_in">source</span> on 2020-06-03 at 13:04:47</span><br><span class="line">From: https://github.com/dart-lang/homebrew-dart/blob/master/dart.rb</span><br><span class="line">==&gt; Options</span><br><span class="line">--devel</span><br><span class="line">Install development version 2.9.0-13.0.dev</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Please note the path to the Dart SDK:</span><br><span class="line">  /usr/<span class="built_in">local</span>/opt/dart/libexec</span><br></pre></td></tr></table></figure><p>至此，dartSDK已经安装成功。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://shockerli.net/post/homebrew-install-download-error/" target="_blank" rel="noopener">https://shockerli.net/post/homebrew-install-download-error/</a></p><p><a href="https://www.cnblogs.com/lmyupupblogs/p/12785753.html" target="_blank" rel="noopener">https://www.cnblogs.com/lmyupupblogs/p/12785753.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学习Flutter的第一步从安装就开始踩坑了。安装Dart硬是安装不上。科学上网也有就是安不上。找了些资料，记录了一下解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="Flutter" scheme="http://hackycy.github.io/categories/Flutter/"/>
    
    
      <category term="Dart" scheme="http://hackycy.github.io/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript工具函数大全</title>
    <link href="http://hackycy.github.io/2020/06/01/JavaScript%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0%E5%A4%A7%E5%85%A8/"/>
    <id>http://hackycy.github.io/2020/06/01/JavaScript工具函数大全/</id>
    <published>2020-06-01T11:28:14.000Z</published>
    <updated>2020-07-23T08:37:08.942Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>抄录一些JavaScript工具函数大全<br><a id="more"></a></p><h1 id="检测数据是不是除了symbol外的原始数据"><a href="#检测数据是不是除了symbol外的原始数据" class="headerlink" title="检测数据是不是除了symbol外的原始数据"></a>检测数据是不是除了symbol外的原始数据</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isStatic</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'string'</span> ||</span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'number'</span> ||</span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'boolean'</span> ||</span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'undefined'</span> ||</span><br><span class="line">        value === <span class="literal">null</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检测数据是不是原始数据"><a href="#检测数据是不是原始数据" class="headerlink" title="检测数据是不是原始数据"></a>检测数据是不是原始数据</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrimitive</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isStatic(value) || <span class="keyword">typeof</span> value === <span class="string">'symbol'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断数据是不是引用类型的数据-例如：-arrays-functions-objects-regexes-new-Number-0-以及-new-String-‘’"><a href="#判断数据是不是引用类型的数据-例如：-arrays-functions-objects-regexes-new-Number-0-以及-new-String-‘’" class="headerlink" title="判断数据是不是引用类型的数据 (例如： arrays, functions, objects, regexes, new Number(0),以及 new String(‘’))"></a>判断数据是不是引用类型的数据 (例如： arrays, functions, objects, regexes, new Number(0),以及 new String(‘’))</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> type = <span class="keyword">typeof</span> value;</span><br><span class="line">      <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; (type == <span class="string">'object'</span> || type == <span class="string">'function'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检查-value-是否是-类对象。-如果一个值是类对象，那么它不应该是-null，而且-typeof-后的结果是-“object”"><a href="#检查-value-是否是-类对象。-如果一个值是类对象，那么它不应该是-null，而且-typeof-后的结果是-“object”" class="headerlink" title="检查 value 是否是 类对象。 如果一个值是类对象，那么它不应该是 null，而且 typeof 后的结果是 “object”"></a>检查 value 是否是 类对象。 如果一个值是类对象，那么它不应该是 null，而且 typeof 后的结果是 “object”</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObjectLike</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> value == <span class="string">'object'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取数据类型，返回结果为-Number、String、Object、Array等"><a href="#获取数据类型，返回结果为-Number、String、Object、Array等" class="headerlink" title="获取数据类型，返回结果为 Number、String、Object、Array等"></a>获取数据类型，返回结果为 Number、String、Object、Array等</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRawType</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value).slice(<span class="number">8</span>, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getoRawType([]) ==&gt; Array</span></span><br></pre></td></tr></table></figure><h1 id="判断数据是不是Object类型的数据"><a href="#判断数据是不是Object类型的数据" class="headerlink" title="判断数据是不是Object类型的数据"></a>判断数据是不是Object类型的数据</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Object]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断-value-是不是浏览器内置函数"><a href="#判断-value-是不是浏览器内置函数" class="headerlink" title="判断 value 是不是浏览器内置函数"></a>判断 value 是不是浏览器内置函数</h1><p>内置函数toString后的主体代码块为 [native code] ，而非内置函数则为相关代码，所以非内置函数可以进行拷贝(toString后掐头去尾再由Function转)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNative</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">'function'</span> &amp;&amp; <span class="regexp">/native code/</span>.test(value.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检查-value-是否为有效的类数组长度"><a href="#检查-value-是否为有效的类数组长度" class="headerlink" title="检查 value 是否为有效的类数组长度"></a>检查 value 是否为有效的类数组长度</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLength</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> value == <span class="string">'number'</span> &amp;&amp; value &gt; <span class="number">-1</span> &amp;&amp; value % <span class="number">1</span> == <span class="number">0</span> &amp;&amp; value &lt;= <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检查-value-是否是类数组"><a href="#检查-value-是否是类数组" class="headerlink" title="检查 value 是否是类数组"></a>检查 value 是否是类数组</h1><p>如果一个值被认为是类数组，那么它不是一个函数，并且value.length是个整数，大于等于 0，小于或等于 Number.MAX_SAFE_INTEGER。这里字符串也将被当作类数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; isLength(value.length) &amp;&amp; !isFunction(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检查-value-是否为空"><a href="#检查-value-是否为空" class="headerlink" title="检查 value 是否为空"></a>检查 value 是否为空</h1><p>如果是null，直接返回true；如果是类数组，判断数据长度；如果是Object对象，判断是否具有属性；如果是其他数据，直接返回false(也可改为返回true)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isArrayLike(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> !value.length;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isPlainObject(value))&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasOwnProperty.call(value, key)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="记忆函数：缓存函数的运算结果"><a href="#记忆函数：缓存函数的运算结果" class="headerlink" title="记忆函数：缓存函数的运算结果"></a>记忆函数：缓存函数的运算结果</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cached</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cachedFn</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> hit = cache[str];</span><br><span class="line">        <span class="keyword">return</span> hit || (cache[str] = fn(str))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="横线转驼峰命名"><a href="#横线转驼峰命名" class="headerlink" title="横线转驼峰命名"></a>横线转驼峰命名</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> camelizeRE = <span class="regexp">/-(\w)/g</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(camelizeRE, <span class="function"><span class="keyword">function</span>(<span class="params">_, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c ? c.toUpperCase() : <span class="string">''</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ab-cd-ef ==&gt; abCdEf</span></span><br><span class="line"><span class="comment">//使用记忆函数</span></span><br><span class="line"><span class="keyword">let</span> _camelize = cached(camelize)</span><br></pre></td></tr></table></figure><h1 id="驼峰命名转横线命名：拆分字符串，使用-相连，并且转换为小写"><a href="#驼峰命名转横线命名：拆分字符串，使用-相连，并且转换为小写" class="headerlink" title="驼峰命名转横线命名：拆分字符串，使用 - 相连，并且转换为小写"></a>驼峰命名转横线命名：拆分字符串，使用 - 相连，并且转换为小写</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hyphenateRE = <span class="regexp">/\B([A-Z])/g</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hyphenate</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(hyphenateRE, <span class="string">'-$1'</span>).toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//abCd ==&gt; ab-cd</span></span><br><span class="line"><span class="comment">//使用记忆函数</span></span><br><span class="line"><span class="keyword">let</span> _hyphenate = cached(hyphenate);</span><br></pre></td></tr></table></figure><h1 id="字符串首位大写"><a href="#字符串首位大写" class="headerlink" title="字符串首位大写"></a>字符串首位大写</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc ==&gt; Abc</span></span><br><span class="line"><span class="comment">//使用记忆函数</span></span><br><span class="line"><span class="keyword">let</span> _capitalize = cached(capitalize)</span><br></pre></td></tr></table></figure><h1 id="将属性混合到目标对象中"><a href="#将属性混合到目标对象中" class="headerlink" title="将属性混合到目标对象中"></a>将属性混合到目标对象中</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">to, _from</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> _from) &#123;</span><br><span class="line">        to[key] = _from[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象属性复制，浅拷贝"><a href="#对象属性复制，浅拷贝" class="headerlink" title="对象属性复制，浅拷贝"></a>对象属性复制，浅拷贝</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign = <span class="built_in">Object</span>.assign || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Cannot convert undefined or null to object'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>],</span><br><span class="line">        args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>),</span><br><span class="line">        key</span><br><span class="line">    args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(key <span class="keyword">in</span> item)&#123;</span><br><span class="line">            item.hasOwnProperty(key) &amp;&amp; ( target[key] = item[key] )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>Object.assign</code>可以浅克隆一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clone = <span class="built_in">Object</span>.assign(&#123;&#125;, target)</span><br></pre></td></tr></table></figure><p>简单的深克隆可以使用<code>JSON.parse()</code>和<code>JSON.stringify()</code>，这两个api是解析json数据的，所以只能解析除symbol外的原始类型及数组和对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clone = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify(target) )</span><br></pre></td></tr></table></figure><h1 id="克隆数据，可深度克隆"><a href="#克隆数据，可深度克隆" class="headerlink" title="克隆数据，可深度克隆"></a>克隆数据，可深度克隆</h1><p>这里列出了原始类型，时间、正则、错误、数组、对象的克隆规则，其他的可自行补充</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">value, deep</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isPrimitive(value))&#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isArrayLike(value)) &#123; <span class="comment">//是类数组</span></span><br><span class="line">        value = <span class="built_in">Array</span>.prototype.slice.call(value)</span><br><span class="line">        <span class="keyword">return</span> value.map(<span class="function"><span class="params">item</span> =&gt;</span> deep ? clone(item, deep) : item)</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isPlainObject(value))&#123; <span class="comment">//是对象</span></span><br><span class="line">           <span class="keyword">let</span> target = &#123;&#125;, key;</span><br><span class="line">          <span class="keyword">for</span> (key <span class="keyword">in</span> value) &#123;</span><br><span class="line">            value.hasOwnProperty(key) &amp;&amp; ( target[key] = deep ? clone(value[key], deep) : value[key] )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> type = getRawType(value)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Date'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'RegExp'</span>: </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Error'</span>: value = <span class="keyword">new</span> <span class="built_in">window</span>[type](value); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="识别各种浏览器及平台"><a href="#识别各种浏览器及平台" class="headerlink" title="识别各种浏览器及平台"></a>识别各种浏览器及平台</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行环境是浏览器</span></span><br><span class="line"><span class="keyword">let</span> inBrowser = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>;</span><br><span class="line"><span class="comment">//运行环境是微信</span></span><br><span class="line"><span class="keyword">let</span> inWeex = <span class="keyword">typeof</span> WXEnvironment !== <span class="string">'undefined'</span> &amp;&amp; !!WXEnvironment.platform;</span><br><span class="line"><span class="keyword">let</span> weexPlatform = inWeex &amp;&amp; WXEnvironment.platform.toLowerCase();</span><br><span class="line"><span class="comment">//浏览器 UA 判断</span></span><br><span class="line"><span class="keyword">let</span> UA = inBrowser &amp;&amp; <span class="built_in">window</span>.navigator.userAgent.toLowerCase();</span><br><span class="line"><span class="keyword">let</span> isIE = UA &amp;&amp; <span class="regexp">/msie|trident/</span>.test(UA);</span><br><span class="line"><span class="keyword">let</span> isIE9 = UA &amp;&amp; UA.indexOf(<span class="string">'msie 9.0'</span>) &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> isEdge = UA &amp;&amp; UA.indexOf(<span class="string">'edge/'</span>) &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> isAndroid = (UA &amp;&amp; UA.indexOf(<span class="string">'android'</span>) &gt; <span class="number">0</span>) || (weexPlatform === <span class="string">'android'</span>);</span><br><span class="line"><span class="keyword">let</span> isIOS = (UA &amp;&amp; <span class="regexp">/iphone|ipad|ipod|ios/</span>.test(UA)) || (weexPlatform === <span class="string">'ios'</span>);</span><br><span class="line"><span class="keyword">let</span> isChrome = UA &amp;&amp; <span class="regexp">/chrome\/\d+/</span>.test(UA) &amp;&amp; !isEdge;</span><br></pre></td></tr></table></figure><h1 id="获取浏览器信息"><a href="#获取浏览器信息" class="headerlink" title="获取浏览器信息"></a>获取浏览器信息</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExplorerInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> &lt;= t.indexOf(<span class="string">"msie"</span>) ? &#123; <span class="comment">//ie &lt; 11</span></span><br><span class="line">        type: <span class="string">"IE"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/msie ([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : !!t.match(<span class="regexp">/trident\/.+?rv:(([\d.]+))/</span>) ? &#123; <span class="comment">// ie 11</span></span><br><span class="line">        type: <span class="string">"IE"</span>,</span><br><span class="line">        version: <span class="number">11</span></span><br><span class="line">    &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"edge"</span>) ? &#123;</span><br><span class="line">        type: <span class="string">"Edge"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/edge\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"firefox"</span>) ? &#123;</span><br><span class="line">        type: <span class="string">"Firefox"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/firefox\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"chrome"</span>) ? &#123;</span><br><span class="line">        type: <span class="string">"Chrome"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/chrome\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"opera"</span>) ? &#123;</span><br><span class="line">        type: <span class="string">"Opera"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/opera.([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"Safari"</span>) ? &#123;</span><br><span class="line">        type: <span class="string">"Safari"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/version\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : &#123;</span><br><span class="line">        type: t,</span><br><span class="line">        version: <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检测是否为PC端浏览器模式"><a href="#检测是否为PC端浏览器模式" class="headerlink" title="检测是否为PC端浏览器模式"></a>检测是否为PC端浏览器模式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPCBroswer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> e = navigator.userAgent.toLowerCase()</span><br><span class="line">        , t = <span class="string">"ipad"</span> == e.match(<span class="regexp">/ipad/i</span>)</span><br><span class="line">        , i = <span class="string">"iphone"</span> == e.match(<span class="regexp">/iphone/i</span>)</span><br><span class="line">        , r = <span class="string">"midp"</span> == e.match(<span class="regexp">/midp/i</span>)</span><br><span class="line">        , n = <span class="string">"rv:1.2.3.4"</span> == e.match(<span class="regexp">/rv:1.2.3.4/i</span>)</span><br><span class="line">        , a = <span class="string">"ucweb"</span> == e.match(<span class="regexp">/ucweb/i</span>)</span><br><span class="line">        , o = <span class="string">"android"</span> == e.match(<span class="regexp">/android/i</span>)</span><br><span class="line">        , s = <span class="string">"windows ce"</span> == e.match(<span class="regexp">/windows ce/i</span>)</span><br><span class="line">        , l = <span class="string">"windows mobile"</span> == e.match(<span class="regexp">/windows mobile/i</span>);</span><br><span class="line">    <span class="keyword">return</span> !(t || i || r || n || a || o || s || l)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组去重，返回一个新数组"><a href="#数组去重，返回一个新数组" class="headerlink" title="数组去重，返回一个新数组"></a>数组去重，返回一个新数组</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isArrayLink(arr))&#123; <span class="comment">//不是类数组对象</span></span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">let</span> objarr = []</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    </span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isStatic(item))&#123;<span class="comment">//是除了symbol外的原始数据</span></span><br><span class="line">            <span class="keyword">let</span> key = item + <span class="string">'_'</span> + getRawType(item);</span><br><span class="line">            <span class="keyword">if</span>(!obj[key])&#123;</span><br><span class="line">                obj[key] = <span class="literal">true</span></span><br><span class="line">                result.push(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//引用类型及symbol</span></span><br><span class="line">            <span class="keyword">if</span>(!objarr.includes(item))&#123;</span><br><span class="line">                objarr.push(item)</span><br><span class="line">                result.push(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> resulte</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="生成一个重复的字符串，有n个str组成，可修改为填充为数组等"><a href="#生成一个重复的字符串，有n个str组成，可修改为填充为数组等" class="headerlink" title="生成一个重复的字符串，有n个str组成，可修改为填充为数组等"></a>生成一个重复的字符串，有n个str组成，可修改为填充为数组等</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            res += str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            str += str;</span><br><span class="line">        &#125;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//repeat('123',3) ==&gt; 123123123</span></span><br></pre></td></tr></table></figure><h1 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFormater</span>(<span class="params">formater, t</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = t ? <span class="keyword">new</span> <span class="built_in">Date</span>(t) : <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">        Y = date.getFullYear() + <span class="string">''</span>,</span><br><span class="line">        M = date.getMonth() + <span class="number">1</span>,</span><br><span class="line">        D = date.getDate(),</span><br><span class="line">        H = date.getHours(),</span><br><span class="line">        m = date.getMinutes(),</span><br><span class="line">        s = date.getSeconds();</span><br><span class="line">    <span class="keyword">return</span> formater.replace(<span class="regexp">/YYYY|yyyy/g</span>,Y)</span><br><span class="line">        .replace(<span class="regexp">/YY|yy/g</span>,Y.substr(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">        .replace(<span class="regexp">/MM/g</span>,(M&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + M)</span><br><span class="line">        .replace(<span class="regexp">/DD/g</span>,(D&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + D)</span><br><span class="line">        .replace(<span class="regexp">/HH|hh/g</span>,(H&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + H)</span><br><span class="line">        .replace(<span class="regexp">/mm/g</span>,(m&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + m)</span><br><span class="line">        .replace(<span class="regexp">/ss/g</span>,(s&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dateFormater('YYYY-MM-DD HH:mm', t) ==&gt; 2019-06-26 18:30</span></span><br><span class="line"><span class="comment">// dateFormater('YYYYMMDDHHmm', t) ==&gt; 201906261830</span></span><br></pre></td></tr></table></figure><h1 id="dateStrForma：将指定字符串由一种时间格式转化为另一种"><a href="#dateStrForma：将指定字符串由一种时间格式转化为另一种" class="headerlink" title="dateStrForma：将指定字符串由一种时间格式转化为另一种"></a>dateStrForma：将指定字符串由一种时间格式转化为另一种</h1><p>from的格式应对应str的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateStrForma</span>(<span class="params">str, from, to</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//'20190626' 'YYYYMMDD' 'YYYY年MM月DD日'</span></span><br><span class="line">    str += <span class="string">''</span></span><br><span class="line">    <span class="keyword">let</span> Y = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span>(~(Y = <span class="keyword">from</span>.indexOf(<span class="string">'YYYY'</span>)))&#123;</span><br><span class="line">        Y = str.substr(Y, <span class="number">4</span>)</span><br><span class="line">        to = to.replace(<span class="regexp">/YYYY|yyyy/g</span>,Y)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(~(Y = <span class="keyword">from</span>.indexOf(<span class="string">'YY'</span>)))&#123;</span><br><span class="line">        Y = str.substr(Y, <span class="number">2</span>)</span><br><span class="line">        to = to.replace(<span class="regexp">/YY|yy/g</span>,Y)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> k,i</span><br><span class="line">    [<span class="string">'M'</span>,<span class="string">'D'</span>,<span class="string">'H'</span>,<span class="string">'h'</span>,<span class="string">'m'</span>,<span class="string">'s'</span>].forEach(<span class="function"><span class="params">s</span> =&gt;</span>&#123;</span><br><span class="line">        i = <span class="keyword">from</span>.indexOf(s+s)</span><br><span class="line">        k = ~i ? str.substr(i, <span class="number">2</span>) : <span class="string">''</span></span><br><span class="line">        to = to.replace(s+s, k)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dateStrForma('20190626', 'YYYYMMDD', 'YYYY年MM月DD日') ==&gt; 2019年06月26日</span></span><br><span class="line"><span class="comment">// dateStrForma('121220190626', '----YYYYMMDD', 'YYYY年MM月DD日') ==&gt; 2019年06月26日</span></span><br><span class="line"><span class="comment">// dateStrForma('2019年06月26日', 'YYYY年MM月DD日', 'YYYYMMDD') ==&gt; 20190626</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般的也可以使用正则来实现</span></span><br><span class="line"><span class="comment">//'2019年06月26日'.replace(/(\d&#123;4&#125;)年(\d&#123;2&#125;)月(\d&#123;2&#125;)日/, '$1-$2-$3') ==&gt; 2019-06-26</span></span><br></pre></td></tr></table></figure><h1 id="根据字符串路径获取对象属性-‘obj-0-count’"><a href="#根据字符串路径获取对象属性-‘obj-0-count’" class="headerlink" title="根据字符串路径获取对象属性 : ‘obj[0].count’"></a>根据字符串路径获取对象属性 : ‘obj[0].count’</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPropByPath</span>(<span class="params">obj, path, strict</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> tempObj = obj;</span><br><span class="line">      path = path.replace(<span class="regexp">/\[(\w+)\]/g</span>, <span class="string">'.$1'</span>); <span class="comment">//将[0]转化为.0</span></span><br><span class="line">      path = path.replace(<span class="regexp">/^\./</span>, <span class="string">''</span>); <span class="comment">//去除开头的.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> keyArr = path.split(<span class="string">'.'</span>); <span class="comment">//根据.切割</span></span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> len = keyArr.length; i &lt; len - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!tempObj &amp;&amp; !strict) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">let</span> key = keyArr[i];</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> tempObj) &#123;</span><br><span class="line">            tempObj = tempObj[key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (strict) &#123;<span class="comment">//开启严格模式，没找到对应key值，抛出错误</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'please transfer a valid prop path to form item!'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        o: tempObj, <span class="comment">//原始数据</span></span><br><span class="line">        k: keyArr[i], <span class="comment">//key值</span></span><br><span class="line">        v: tempObj ? tempObj[keyArr[i]] : <span class="literal">null</span> <span class="comment">// key值对应的值</span></span><br><span class="line">      &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="获取Url参数，返回一个对象"><a href="#获取Url参数，返回一个对象" class="headerlink" title="获取Url参数，返回一个对象"></a>获取Url参数，返回一个对象</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetUrlParam</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="built_in">document</span>.location.toString();</span><br><span class="line">    <span class="keyword">let</span> arrObj = url.split(<span class="string">"?"</span>);</span><br><span class="line">    <span class="keyword">let</span> params = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">if</span> (arrObj.length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        arrObj = arrObj[<span class="number">1</span>].split(<span class="string">"&amp;"</span>);</span><br><span class="line">        arrObj.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            item = item.split(<span class="string">"="</span>);</span><br><span class="line">            params[item[<span class="number">0</span>]] = item[<span class="number">1</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ?a=1&amp;b=2&amp;c=3 ==&gt; &#123;a: "1", b: "2", c: "3"&#125;</span></span><br></pre></td></tr></table></figure><h1 id="base64数据导出文件，文件下载"><a href="#base64数据导出文件，文件下载" class="headerlink" title="base64数据导出文件，文件下载"></a>base64数据导出文件，文件下载</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">filename, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> DownloadLink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( DownloadLink )&#123;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(DownloadLink);</span><br><span class="line">        DownloadLink.style = <span class="string">'display: none'</span>;</span><br><span class="line">        DownloadLink.download = filename;</span><br><span class="line">        DownloadLink.href = data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">document</span>.createEvent )&#123;</span><br><span class="line">            <span class="keyword">let</span> DownloadEvt = <span class="built_in">document</span>.createEvent(<span class="string">'MouseEvents'</span>);</span><br><span class="line"></span><br><span class="line">            DownloadEvt.initEvent(<span class="string">'click'</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">            DownloadLink.dispatchEvent(DownloadEvt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">document</span>.createEventObject )</span><br><span class="line">            DownloadLink.fireEvent(<span class="string">'onclick'</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> DownloadLink.onclick == <span class="string">'function'</span> )</span><br><span class="line">            DownloadLink.onclick();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(DownloadLink);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toFullScreen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> elem = <span class="built_in">document</span>.body;</span><br><span class="line">    elem.webkitRequestFullScreen</span><br><span class="line">    ? elem.webkitRequestFullScreen()</span><br><span class="line">    : elem.mozRequestFullScreen</span><br><span class="line">    ? elem.mozRequestFullScreen()</span><br><span class="line">    : elem.msRequestFullscreen</span><br><span class="line">    ? elem.msRequestFullscreen()</span><br><span class="line">    : elem.requestFullScreen</span><br><span class="line">    ? elem.requestFullScreen()</span><br><span class="line">    : alert(<span class="string">"浏览器不支持全屏"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="退出全屏"><a href="#退出全屏" class="headerlink" title="退出全屏"></a>退出全屏</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> elem = parent.document;</span><br><span class="line">    elem.webkitCancelFullScreen</span><br><span class="line">    ? elem.webkitCancelFullScreen()</span><br><span class="line">    : elem.mozCancelFullScreen</span><br><span class="line">    ? elem.mozCancelFullScreen()</span><br><span class="line">    : elem.cancelFullScreen</span><br><span class="line">    ? elem.cancelFullScreen()</span><br><span class="line">    : elem.msExitFullscreen</span><br><span class="line">    ? elem.msExitFullscreen()</span><br><span class="line">    : elem.exitFullscreen</span><br><span class="line">    ? elem.exitFullscreen()</span><br><span class="line">    : alert(<span class="string">"切换失败,可尝试Esc退出"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="window动画"><a href="#window动画" class="headerlink" title="window动画"></a>window动画</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//为了使setTimteout的尽可能的接近每秒60帧的效果</span></span><br><span class="line">        <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    Window.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oCancelAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//为了使setTimteout的尽可能的接近每秒60帧的效果</span></span><br><span class="line">        <span class="built_in">window</span>.clearTimeout(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检查数据是否是非数字值"><a href="#检查数据是否是非数字值" class="headerlink" title="检查数据是否是非数字值"></a>检查数据是否是非数字值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_isNaN</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(<span class="keyword">typeof</span> v === <span class="string">'string'</span> || <span class="keyword">typeof</span> v === <span class="string">'number'</span>) || <span class="built_in">isNaN</span>(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="返回一个lower-upper之间的随机数"><a href="#返回一个lower-upper之间的随机数" class="headerlink" title="返回一个lower - upper之间的随机数"></a>返回一个lower - upper之间的随机数</h1><p>lower、upper无论正负与大小，但必须是非NaN的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">lower, upper</span>)</span>&#123;</span><br><span class="line">    lower = +lower || <span class="number">0</span></span><br><span class="line">    upper = +upper || <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (upper - lower) + lower;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//random(0, 0.5) ==&gt; 0.3567039135734613</span></span><br><span class="line"><span class="comment">//random(2, 1) ===&gt; 1.6718418553475423</span></span><br><span class="line"><span class="comment">//random(-2, -1) ==&gt; -1.4474325452361945</span></span><br></pre></td></tr></table></figure><h1 id="利用performance-timing进行性能分析"><a href="#利用performance-timing进行性能分析" class="headerlink" title="利用performance.timing进行性能分析"></a>利用performance.timing进行性能分析</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> t = performance.timing</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'DNS查询耗时 ：'</span> + (t.domainLookupEnd - t.domainLookupStart).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'TCP链接耗时 ：'</span> + (t.connectEnd - t.connectStart).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'request请求耗时 ：'</span> + (t.responseEnd - t.responseStart).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'解析dom树耗时 ：'</span> + (t.domComplete - t.domInteractive).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'白屏时间 ：'</span> + (t.responseStart - t.navigationStart).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'domready时间 ：'</span> + (t.domContentLoadedEventEnd - t.navigationStart).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onload时间 ：'</span> + (t.loadEventEnd - t.navigationStart).toFixed(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t = performance.memory)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'js内存使用占比 ：'</span> + (t.usedJSHeapSize / t.totalJSHeapSize * <span class="number">100</span>).toFixed(<span class="number">2</span>) + <span class="string">'%'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="禁止某些键盘事件"><a href="#禁止某些键盘事件" class="headerlink" title="禁止某些键盘事件"></a>禁止某些键盘事件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(</span><br><span class="line">        <span class="number">112</span> == event.keyCode || <span class="comment">//F1</span></span><br><span class="line">        <span class="number">123</span> == event.keyCode || <span class="comment">//F12</span></span><br><span class="line">        event.ctrlKey &amp;&amp; <span class="number">82</span> == event.keyCode || <span class="comment">//ctrl + R</span></span><br><span class="line">        event.ctrlKey &amp;&amp; <span class="number">78</span> == event.keyCode || <span class="comment">//ctrl + N</span></span><br><span class="line">        event.shiftKey &amp;&amp; <span class="number">121</span> == event.keyCode || <span class="comment">//shift + F10</span></span><br><span class="line">        event.altKey &amp;&amp; <span class="number">115</span> == event.keyCode || <span class="comment">//alt + F4</span></span><br><span class="line">        <span class="string">"A"</span> == event.srcElement.tagName &amp;&amp; event.shiftKey <span class="comment">//shift + 点击a标签</span></span><br><span class="line">    ) || (event.returnValue = <span class="literal">false</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="禁止右键、选择、复制"><a href="#禁止右键、选择、复制" class="headerlink" title="禁止右键、选择、复制"></a>禁止右键、选择、复制</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'contextmenu'</span>, <span class="string">'selectstart'</span>, <span class="string">'copy'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(ev, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event.returnValue = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flattenDepth</span>(<span class="params">array, depth = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> result = []</span><br><span class="line">   array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">let</span> d = depth</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item) &amp;&amp; d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       result.push(...(flattenDepth(item, --d)))</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       result.push(item)</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flattenDepth([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]])) <span class="comment">// [ 1, 2, [ 3, [ 4 ] ], 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(flattenDepth([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]], <span class="number">2</span>)) <span class="comment">// [ 1, 2, 3, [ 4 ], 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(flattenDepth([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]], <span class="number">3</span>)) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h1 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h1><p>一句话解释就是<strong>参数够了就执行，参数不够就返回一个函数，之前的参数存起来，直到够了为止</strong> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> l = func.length</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">     <span class="keyword">if</span>(args.length &lt; l) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> argsInner = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">         <span class="keyword">return</span> curried.apply(<span class="keyword">this</span>, args.concat(argsInner))</span><br><span class="line">       &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log([a, b, c])</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> curried = curry(f)</span><br><span class="line">curried(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>) <span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line">curried(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>) <span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line">curried(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// =&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h1 id="为元素添加on方法"><a href="#为元素添加on方法" class="headerlink" title="为元素添加on方法"></a>为元素添加on方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Element.prototype.on = Element.prototype.addEventListener;</span><br><span class="line"></span><br><span class="line">NodeList.prototype.on = <span class="function"><span class="keyword">function</span> (<span class="params">event, fn</span>) </span>&#123;、</span><br><span class="line">    [][<span class="string">'forEach'</span>].call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">        el.on(event, fn);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="为元素添加trigger方法"><a href="#为元素添加trigger方法" class="headerlink" title="为元素添加trigger方法"></a>为元素添加trigger方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Element.prototype.trigger = <span class="function"><span class="keyword">function</span>(<span class="params">type, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"HTMLEvents"</span>);</span><br><span class="line">  event.initEvent(type, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">  event.data = data || &#123;&#125;;</span><br><span class="line">  event.eventName = type;</span><br><span class="line">  event.target = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.dispatchEvent(event);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">NodeList.prototype.trigger = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  [][<span class="string">"forEach"</span>].call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    el[<span class="string">"trigger"</span>](event);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="转义html标签"><a href="#转义html标签" class="headerlink" title="转义html标签"></a>转义html标签</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HtmlEncode</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> text</span><br><span class="line">    .replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;"</span>)</span><br><span class="line">    .replace(<span class="regexp">/\"/g</span>, <span class="string">'"'</span>)</span><br><span class="line">    .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&lt;"</span>)</span><br><span class="line">    .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HTML标签转义"><a href="#HTML标签转义" class="headerlink" title="HTML标签转义"></a>HTML标签转义</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTML 标签转义</span></span><br><span class="line"><span class="comment">// @param &#123;Array.&lt;DOMString&gt;&#125; templateData 字符串类型的tokens</span></span><br><span class="line"><span class="comment">// @param &#123;...&#125; ..vals 表达式占位符的运算结果tokens</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SaferHTML</span>(<span class="params">templateData</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = templateData[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> arg = <span class="built_in">String</span>(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    <span class="comment">// Escape special characters in the substitution.</span></span><br><span class="line">    s += arg</span><br><span class="line">      .replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>)</span><br><span class="line">      .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</span><br><span class="line">      .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line">    <span class="comment">// Don't escape special characters in the template.</span></span><br><span class="line">    s += templateData[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">var</span> html = SaferHTML<span class="string">`&lt;p&gt;这是关于字符串模板的介绍&lt;/p&gt;`</span>;</span><br></pre></td></tr></table></figure><h1 id="跨浏览器绑定事件"><a href="#跨浏览器绑定事件" class="headerlink" title="跨浏览器绑定事件"></a>跨浏览器绑定事件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventSamp</span>(<span class="params">obj, evt, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!oTarget) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj.addEventListener) &#123;</span><br><span class="line">    obj.addEventListener(evt, fn, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj.attachEvent) &#123;</span><br><span class="line">    obj.attachEvent(<span class="string">"on"</span> + evt, fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    oTarget[<span class="string">"on"</span> + sEvtType] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="加入收藏夹"><a href="#加入收藏夹" class="headerlink" title="加入收藏夹"></a>加入收藏夹</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFavorite</span>(<span class="params">sURL, sTitle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.external.addFavorite(sURL, sTitle);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.sidebar.addPanel(sTitle, sURL, <span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      alert(<span class="string">"加入收藏失败，请使用Ctrl+D进行添加"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="提取页面代码中所有网址"><a href="#提取页面代码中所有网址" class="headerlink" title="提取页面代码中所有网址"></a>提取页面代码中所有网址</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aa = <span class="built_in">document</span>.documentElement.outerHTML</span><br><span class="line">  .match(</span><br><span class="line">    /(url\(|src=|href=)[\<span class="string">"\']*([^\"\'\(\)\&lt;\&gt;\[\] ]+)[\"\'\)]*|(http:\/\/[\w\-\.]+[^\"\'\(\)\&lt;\&gt;\[\] ]+)/gi</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">  .join("</span>\r\n<span class="string">")</span></span><br><span class="line"><span class="string">  .replace(/^(src=|href=|url\()[\"\']*|[\"\'\&gt;\) ]*$/gim, "</span><span class="string">");</span></span><br><span class="line"><span class="string">alert(aa);</span></span><br></pre></td></tr></table></figure><h1 id="动态加载脚本文件"><a href="#动态加载脚本文件" class="headerlink" title="动态加载脚本文件"></a>动态加载脚本文件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendscript</span>(<span class="params">src, text, reload, charset</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = hash(src + text);</span><br><span class="line">  <span class="keyword">if</span> (!reload &amp;&amp; in_array(id, evalscripts)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (reload &amp;&amp; $(id)) &#123;</span><br><span class="line">    $(id).parentNode.removeChild($(id));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  evalscripts.push(id);</span><br><span class="line">  <span class="keyword">var</span> scriptNode = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  scriptNode.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">  scriptNode.id = id;</span><br><span class="line">  scriptNode.charset = charset</span><br><span class="line">    ? charset</span><br><span class="line">    : BROWSER.firefox</span><br><span class="line">    ? <span class="built_in">document</span>.characterSet</span><br><span class="line">    : <span class="built_in">document</span>.charset;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (src) &#123;</span><br><span class="line">      scriptNode.src = src;</span><br><span class="line">      scriptNode.onloadDone = <span class="literal">false</span>;</span><br><span class="line">      scriptNode.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        scriptNode.onloadDone = <span class="literal">true</span>;</span><br><span class="line">        JSLOADED[src] = <span class="number">1</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      scriptNode.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          (scriptNode.readyState == <span class="string">"loaded"</span> ||</span><br><span class="line">            scriptNode.readyState == <span class="string">"complete"</span>) &amp;&amp;</span><br><span class="line">          !scriptNode.onloadDone</span><br><span class="line">        ) &#123;</span><br><span class="line">          scriptNode.onloadDone = <span class="literal">true</span>;</span><br><span class="line">          JSLOADED[src] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (text) &#123;</span><br><span class="line">      scriptNode.text = text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(scriptNode);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="返回顶部的通用方法"><a href="#返回顶部的通用方法" class="headerlink" title="返回顶部的通用方法"></a>返回顶部的通用方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backTop</span>(<span class="params">btnId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(btnId);</span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">document</span>.documentElement;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">document</span>.body;</span><br><span class="line">  <span class="built_in">window</span>.onscroll = <span class="keyword">set</span>;</span><br><span class="line">  btn.style.display = "none";</span><br><span class="line">  btn.onclick = function() &#123;</span><br><span class="line">    btn.style.display = <span class="string">"none"</span>;</span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      d.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class="number">0.1</span>);</span><br><span class="line">      b.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class="number">0.1</span>);</span><br><span class="line">      <span class="keyword">if</span> (d.scrollTop + b.scrollTop == <span class="number">0</span>)</span><br><span class="line">        clearInterval(btn.timer, (<span class="built_in">window</span>.onscroll = <span class="keyword">set</span>));</span><br><span class="line">    &#125;, 10);</span><br><span class="line">  &#125;;</span><br><span class="line">  function <span class="keyword">set</span>() &#123;</span><br><span class="line">    btn.style.display = d.scrollTop + b.scrollTop &gt; <span class="number">100</span> ? <span class="string">"block"</span> : <span class="string">"none"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">backTop(<span class="string">"goTop"</span>);</span><br></pre></td></tr></table></figure><h1 id="实现base64解码"><a href="#实现base64解码" class="headerlink" title="实现base64解码"></a>实现base64解码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64_decode</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b64 = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span>;</span><br><span class="line">  <span class="keyword">var</span> o1,</span><br><span class="line">    o2,</span><br><span class="line">    o3,</span><br><span class="line">    h1,</span><br><span class="line">    h2,</span><br><span class="line">    h3,</span><br><span class="line">    h4,</span><br><span class="line">    bits,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    ac = <span class="number">0</span>,</span><br><span class="line">    dec = <span class="string">""</span>,</span><br><span class="line">    tmp_arr = [];</span><br><span class="line">  <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">  data += <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    h1 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h2 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h3 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h4 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    bits = (h1 &lt;&lt; <span class="number">18</span>) | (h2 &lt;&lt; <span class="number">12</span>) | (h3 &lt;&lt; <span class="number">6</span>) | h4;</span><br><span class="line">    o1 = (bits &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    o2 = (bits &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    o3 = bits &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">if</span> (h3 == <span class="number">64</span>) &#123;</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (h4 == <span class="number">64</span>) &#123;</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2, o3);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (i &lt; data.length);</span><br><span class="line">  dec = tmp_arr.join(<span class="string">""</span>);</span><br><span class="line">  dec = utf8_decode(dec);</span><br><span class="line">  <span class="keyword">return</span> dec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="确认是否是键盘有效输入值"><a href="#确认是否是键盘有效输入值" class="headerlink" title="确认是否是键盘有效输入值"></a>确认是否是键盘有效输入值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkKey</span>(<span class="params">iKey</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (iKey == <span class="number">32</span> || iKey == <span class="number">229</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*空格和异常*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">47</span> &amp;&amp; iKey &lt; <span class="number">58</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*数字*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">64</span> &amp;&amp; iKey &lt; <span class="number">91</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*字母*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">95</span> &amp;&amp; iKey &lt; <span class="number">108</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*数字键盘1*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">108</span> &amp;&amp; iKey &lt; <span class="number">112</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*数字键盘2*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">185</span> &amp;&amp; iKey &lt; <span class="number">193</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*符号1*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">218</span> &amp;&amp; iKey &lt; <span class="number">223</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*符号2*/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="全角半角转换"><a href="#全角半角转换" class="headerlink" title="全角半角转换"></a>全角半角转换</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//iCase: 0全到半，1半到全，其他不转化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chgCase</span>(<span class="params">sStr, iCase</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> sStr != <span class="string">"string"</span> ||</span><br><span class="line">    sStr.length &lt;= <span class="number">0</span> ||</span><br><span class="line">    !(iCase === <span class="number">0</span> || iCase == <span class="number">1</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> sStr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> i,</span><br><span class="line">    oRs = [],</span><br><span class="line">    iCode;</span><br><span class="line">  <span class="keyword">if</span> (iCase) &#123;</span><br><span class="line">    <span class="comment">/*半-&gt;全*/</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sStr.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">      iCode = sStr.charCodeAt(i);</span><br><span class="line">      <span class="keyword">if</span> (iCode == <span class="number">32</span>) &#123;</span><br><span class="line">        iCode = <span class="number">12288</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iCode &lt; <span class="number">127</span>) &#123;</span><br><span class="line">        iCode += <span class="number">65248</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      oRs.push(<span class="built_in">String</span>.fromCharCode(iCode));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/*全-&gt;半*/</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sStr.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">      iCode = sStr.charCodeAt(i);</span><br><span class="line">      <span class="keyword">if</span> (iCode == <span class="number">12288</span>) &#123;</span><br><span class="line">        iCode = <span class="number">32</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iCode &gt; <span class="number">65280</span> &amp;&amp; iCode &lt; <span class="number">65375</span>) &#123;</span><br><span class="line">        iCode -= <span class="number">65248</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      oRs.push(<span class="built_in">String</span>.fromCharCode(iCode));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> oRs.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="版本对比"><a href="#版本对比" class="headerlink" title="版本对比"></a>版本对比</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareVersion</span>(<span class="params">v1, v2</span>) </span>&#123;</span><br><span class="line">  v1 = v1.split(<span class="string">"."</span>);</span><br><span class="line">  v2 = v2.split(<span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = <span class="built_in">Math</span>.max(v1.length, v2.length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (v1.length &lt; len) &#123;</span><br><span class="line">    v1.push(<span class="string">"0"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (v2.length &lt; len) &#123;</span><br><span class="line">    v2.push(<span class="string">"0"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(v1[i]);</span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(v2[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="压缩CSS样式代码"><a href="#压缩CSS样式代码" class="headerlink" title="压缩CSS样式代码"></a>压缩CSS样式代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compressCss</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//压缩代码</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\/\*(.|\n)*?\*\//g</span>, <span class="string">""</span>); <span class="comment">//删除注释</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\s*([\&#123;\&#125;\:\;\,])\s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/\,[\s\.\#\d]*\&#123;/g</span>, <span class="string">"&#123;"</span>); <span class="comment">//容错处理</span></span><br><span class="line">  s = s.replace(<span class="regexp">/;\s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line">  s = s.match(<span class="regexp">/^\s*(\S+(\s+\S+)*)\s*$/</span>); <span class="comment">//去掉首尾空白</span></span><br><span class="line">  <span class="keyword">return</span> s == <span class="literal">null</span> ? <span class="string">""</span> : s[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取当前路径"><a href="#获取当前路径" class="headerlink" title="获取当前路径"></a>获取当前路径</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentPageUrl = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.href === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">  currentPageUrl = <span class="built_in">document</span>.location.toString().toLowerCase();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  currentPageUrl = <span class="keyword">this</span>.href.toString().toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串长度截取"><a href="#字符串长度截取" class="headerlink" title="字符串长度截取"></a>字符串长度截取</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cutstr</span>(<span class="params">str, len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp,</span><br><span class="line">        icount = <span class="number">0</span>,</span><br><span class="line">        patrn = <span class="regexp">/[^\x00-\xff]/</span>，</span><br><span class="line">        strre = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (icount &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">            temp = str.substr(i, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (patrn.exec(temp) == <span class="literal">null</span>) &#123;</span><br><span class="line">                   icount = icount + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                icount = icount + <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">            strre += temp</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strre + <span class="string">"..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间日期格式转换"><a href="#时间日期格式转换" class="headerlink" title="时间日期格式转换"></a>时间日期格式转换</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">formatStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = formatStr;</span><br><span class="line">  <span class="keyword">var</span> Week = [<span class="string">"日"</span>, <span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="string">"五"</span>, <span class="string">"六"</span>];</span><br><span class="line">  str = str.replace(<span class="regexp">/yyyy|YYYY/</span>, <span class="keyword">this</span>.getFullYear());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /yy|YY/,</span><br><span class="line">    <span class="keyword">this</span>.getYear() % <span class="number">100</span> &gt; <span class="number">9</span></span><br><span class="line">      ? (<span class="keyword">this</span>.getYear() % <span class="number">100</span>).toString()</span><br><span class="line">      : <span class="string">"0"</span> + (<span class="keyword">this</span>.getYear() % <span class="number">100</span>)</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /MM/,</span><br><span class="line">    <span class="keyword">this</span>.getMonth() + <span class="number">1</span> &gt; <span class="number">9</span></span><br><span class="line">      ? (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>).toString()</span><br><span class="line">      : <span class="string">"0"</span> + (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>)</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(<span class="regexp">/M/g</span>, <span class="keyword">this</span>.getMonth() + <span class="number">1</span>);</span><br><span class="line">  str = str.replace(<span class="regexp">/w|W/g</span>, Week[<span class="keyword">this</span>.getDay()]);</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /dd|DD/,</span><br><span class="line">    <span class="keyword">this</span>.getDate() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getDate().toString() : <span class="string">"0"</span> + <span class="keyword">this</span>.getDate()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(<span class="regexp">/d|D/g</span>, <span class="keyword">this</span>.getDate());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /hh|HH/,</span><br><span class="line">    <span class="keyword">this</span>.getHours() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getHours().toString() : <span class="string">"0"</span> + <span class="keyword">this</span>.getHours()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(<span class="regexp">/h|H/g</span>, <span class="keyword">this</span>.getHours());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /mm/,</span><br><span class="line">    <span class="keyword">this</span>.getMinutes() &gt; <span class="number">9</span></span><br><span class="line">      ? <span class="keyword">this</span>.getMinutes().toString()</span><br><span class="line">      : <span class="string">"0"</span> + <span class="keyword">this</span>.getMinutes()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(<span class="regexp">/m/g</span>, <span class="keyword">this</span>.getMinutes());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /ss|SS/,</span><br><span class="line">    <span class="keyword">this</span>.getSeconds() &gt; <span class="number">9</span></span><br><span class="line">      ? <span class="keyword">this</span>.getSeconds().toString()</span><br><span class="line">      : <span class="string">"0"</span> + <span class="keyword">this</span>.getSeconds()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(<span class="regexp">/s|S/g</span>, <span class="keyword">this</span>.getSeconds());</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">//month</span></span><br><span class="line">    <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(), <span class="comment">//day</span></span><br><span class="line">    <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(), <span class="comment">//hour</span></span><br><span class="line">    <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">//minute</span></span><br><span class="line">    <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">//second</span></span><br><span class="line">    <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//quarter</span></span><br><span class="line">    S: <span class="keyword">this</span>.getMilliseconds() <span class="comment">//millisecond</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(format))</span><br><span class="line">    format = format.replace(</span><br><span class="line">      <span class="built_in">RegExp</span>.$<span class="number">1</span>,</span><br><span class="line">      (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length)</span><br><span class="line">    );</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(format))</span><br><span class="line">      format = format.replace(</span><br><span class="line">        <span class="built_in">RegExp</span>.$<span class="number">1</span>,</span><br><span class="line">        <span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span> ? o[k] : (<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> format;</span><br><span class="line">&#125;;</span><br><span class="line">alert(<span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>));</span><br></pre></td></tr></table></figure><h1 id="跨浏览器删除事件"><a href="#跨浏览器删除事件" class="headerlink" title="跨浏览器删除事件"></a>跨浏览器删除事件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delEvt</span>(<span class="params">obj, evt, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj.addEventListener) &#123;</span><br><span class="line">    obj.addEventListener(evt, fn, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oTarget.attachEvent) &#123;</span><br><span class="line">    obj.attachEvent(<span class="string">"on"</span> + evt, fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj[<span class="string">"on"</span> + evt] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断是否以某个字符串结束"><a href="#判断是否以某个字符串结束" class="headerlink" title="判断是否以某个字符串结束"></a>判断是否以某个字符串结束</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.endWith = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">this</span>.length - s.length;</span><br><span class="line">  <span class="keyword">return</span> d &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.lastIndexOf(s) == d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="返回脚本内容"><a href="#返回脚本内容" class="headerlink" title="返回脚本内容"></a>返回脚本内容</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evalscript</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (s.indexOf(<span class="string">"&lt;script"</span>) == <span class="number">-1</span>) <span class="keyword">return</span> s;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="regexp">/&lt;script[^\&gt;]*?&gt;([^\x00]*?)&lt;\/script&gt;/gi</span>;</span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line">  <span class="keyword">while</span> ((arr = p.exec(s))) &#123;</span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="regexp">/&lt;script[^\&gt;]*?src=\"([^\&gt;]*?)\"[^\&gt;]*?(reload=\"1\")?(?:charset=\"([\w\-]+?)\")?&gt;&lt;\/script&gt;/i</span>;</span><br><span class="line">    <span class="keyword">var</span> arr1 = [];</span><br><span class="line">    arr1 = p1.exec(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (arr1) &#123;</span><br><span class="line">      appendscript(arr1[<span class="number">1</span>], <span class="string">""</span>, arr1[<span class="number">2</span>], arr1[<span class="number">3</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      p1 = <span class="regexp">/&lt;script(.*?)&gt;([^\x00]+?)&lt;\/script&gt;/i</span>;</span><br><span class="line">      arr1 = p1.exec(arr[<span class="number">0</span>]);</span><br><span class="line">      appendscript(<span class="string">""</span>, arr1[<span class="number">2</span>], arr1[<span class="number">1</span>].indexOf(<span class="string">"reload="</span>) != <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="格式化CSS样式代码"><a href="#格式化CSS样式代码" class="headerlink" title="格式化CSS样式代码"></a>格式化CSS样式代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCss</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//格式化代码</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\s*([\&#123;\&#125;\:\;\,])\s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/;\s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\,[\s\.\#\d]*&#123;/g</span>, <span class="string">"&#123;"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/([^\s])\&#123;([^\s])/g</span>, <span class="string">"$1 &#123;\n\t$2"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/([^\s])\&#125;([^\n]*)/g</span>, <span class="string">"$1\n&#125;\n$2"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/([^\s]);([^\s\&#125;])/g</span>, <span class="string">"$1;\n\t$2"</span>);</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取cookie值"><a href="#获取cookie值" class="headerlink" title="获取cookie值"></a>获取cookie值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">document</span>.cookie.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| )"</span> + name + <span class="string">"=([^;]*)(;|$)"</span>));</span><br><span class="line">  <span class="keyword">if</span> (arr != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(arr[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获得URL中GET参数值"><a href="#获得URL中GET参数值" class="headerlink" title="获得URL中GET参数值"></a>获得URL中GET参数值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法：如果地址是 test.htm?t1=1&amp;t2=2&amp;t3=3, 那么能取得：GET["t1"], GET["t2"], GET["t3"]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  querystr = <span class="built_in">window</span>.location.href.split(<span class="string">"?"</span>);</span><br><span class="line">  <span class="keyword">if</span> (querystr[<span class="number">1</span>]) &#123;</span><br><span class="line">    GETs = querystr[<span class="number">1</span>].split(<span class="string">"&amp;"</span>);</span><br><span class="line">    GET = [];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; GETs.length; i++) &#123;</span><br><span class="line">      tmp_arr = GETs.split(<span class="string">"="</span>);</span><br><span class="line">      key = tmp_arr[<span class="number">0</span>];</span><br><span class="line">      GET[key] = tmp_arr[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> querystr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取移动设备初始化大小"><a href="#获取移动设备初始化大小" class="headerlink" title="获取移动设备初始化大小"></a>获取移动设备初始化大小</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInitZoom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>._initZoom) &#123;</span><br><span class="line">    <span class="keyword">var</span> screenWidth = <span class="built_in">Math</span>.min(screen.height, screen.width);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid()) &#123;</span><br><span class="line">      screenWidth = screenWidth / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._initZoom = screenWidth / <span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._initZoom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取页面高度"><a href="#获取页面高度" class="headerlink" title="获取页面高度"></a>获取页面高度</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="built_in">document</span>,</span><br><span class="line">    a = g.body,</span><br><span class="line">    f = g.documentElement,</span><br><span class="line">    d = g.compatMode == <span class="string">"BackCompat"</span> ? a : g.documentElement;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(f.scrollHeight, a.scrollHeight, d.clientHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取页面scrollLeft"><a href="#获取页面scrollLeft" class="headerlink" title="获取页面scrollLeft"></a>获取页面scrollLeft</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageScrollLeft</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>;</span><br><span class="line">  <span class="keyword">return</span> a.documentElement.scrollLeft || a.body.scrollLeft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取页面scrollTop"><a href="#获取页面scrollTop" class="headerlink" title="获取页面scrollTop"></a>获取页面scrollTop</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageScrollTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>;</span><br><span class="line">  <span class="keyword">return</span> a.documentElement.scrollTop || a.body.scrollTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取页面可视高度"><a href="#获取页面可视高度" class="headerlink" title="获取页面可视高度"></a>获取页面可视高度</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageViewHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">document</span>,</span><br><span class="line">    a = d.compatMode == <span class="string">"BackCompat"</span> ? d.body : d.documentElement;</span><br><span class="line">  <span class="keyword">return</span> a.clientHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取页面可视宽度"><a href="#获取页面可视宽度" class="headerlink" title="获取页面可视宽度"></a>获取页面可视宽度</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageViewWidth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">document</span>,</span><br><span class="line">    a = d.compatMode == <span class="string">"BackCompat"</span> ? d.body : d.documentElement;</span><br><span class="line">  <span class="keyword">return</span> a.clientWidth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取页面宽度"><a href="#获取页面宽度" class="headerlink" title="获取页面宽度"></a>获取页面宽度</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageWidth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="built_in">document</span>,</span><br><span class="line">    a = g.body,</span><br><span class="line">    f = g.documentElement,</span><br><span class="line">    d = g.compatMode == <span class="string">"BackCompat"</span> ? a : g.documentElement;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(f.scrollWidth, a.scrollWidth, d.clientWidth);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取移动设备屏幕宽度"><a href="#获取移动设备屏幕宽度" class="headerlink" title="获取移动设备屏幕宽度"></a>获取移动设备屏幕宽度</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScreenWidth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> smallerSide = <span class="built_in">Math</span>.min(screen.width, screen.height);</span><br><span class="line">  <span class="keyword">var</span> fixViewPortsExperiment =</span><br><span class="line">    rendererModel.runningExperiments.FixViewport ||</span><br><span class="line">    rendererModel.runningExperiments.fixviewport;</span><br><span class="line">  <span class="keyword">var</span> fixViewPortsExperimentRunning =</span><br><span class="line">    fixViewPortsExperiment &amp;&amp; fixViewPortsExperiment.toLowerCase() === <span class="string">"new"</span>;</span><br><span class="line">  <span class="keyword">if</span> (fixViewPortsExperiment) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid()) &#123;</span><br><span class="line">      smallerSide = smallerSide / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> smallerSide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取网页被卷去的位置"><a href="#获取网页被卷去的位置" class="headerlink" title="获取网页被卷去的位置"></a>获取网页被卷去的位置</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollXY</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">    ? &#123;</span><br><span class="line">        x: <span class="built_in">document</span>.body.scrollLeft,</span><br><span class="line">        y: <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">      &#125;</span><br><span class="line">    : &#123;</span><br><span class="line">        x: <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">        y: <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取URL上的参数"><a href="#获取URL上的参数" class="headerlink" title="获取URL上的参数"></a>获取URL上的参数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取URL中的某参数值,不区分大小写</span></span><br><span class="line"><span class="comment">// 获取URL中的某参数值,不区分大小写,</span></span><br><span class="line"><span class="comment">// 默认是取'hash'里的参数，</span></span><br><span class="line"><span class="comment">// 如果传其他参数支持取‘search’中的参数</span></span><br><span class="line"><span class="comment">// @param &#123;String&#125; name 参数名称</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlParam</span>(<span class="params">name, type = <span class="string">"hash"</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newName = name,</span><br><span class="line">    reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + newName + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>),</span><br><span class="line">    paramHash = <span class="built_in">window</span>.location.hash.split(<span class="string">"?"</span>)[<span class="number">1</span>] || <span class="string">""</span>,</span><br><span class="line">    paramSearch = <span class="built_in">window</span>.location.search.split(<span class="string">"?"</span>)[<span class="number">1</span>] || <span class="string">""</span>,</span><br><span class="line">    param;</span><br><span class="line"></span><br><span class="line">  type === <span class="string">"hash"</span> ? (param = paramHash) : (param = paramSearch);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = param.match(reg);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">2</span>].split(<span class="string">"/"</span>)[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检验URL链接是否有效"><a href="#检验URL链接是否有效" class="headerlink" title="检验URL链接是否有效"></a>检验URL链接是否有效</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlState</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"microsoft.xmlhttp"</span>);</span><br><span class="line">  xmlhttp.Open(<span class="string">"GET"</span>, URL, <span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    xmlhttp.Send();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result = xmlhttp.responseText;</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xmlhttp.Status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取窗体可见范围的宽与高"><a href="#获取窗体可见范围的宽与高" class="headerlink" title="获取窗体可见范围的宽与高"></a>获取窗体可见范围的宽与高</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> de = <span class="built_in">document</span>.documentElement;</span><br><span class="line">  <span class="keyword">var</span> db = <span class="built_in">document</span>.body;</span><br><span class="line">  <span class="keyword">var</span> viewW = de.clientWidth == <span class="number">0</span> ? db.clientWidth : de.clientWidth;</span><br><span class="line">  <span class="keyword">var</span> viewH = de.clientHeight == <span class="number">0</span> ? db.clientHeight : de.clientHeight;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>(viewW, viewH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取移动设备最大化大小"><a href="#获取移动设备最大化大小" class="headerlink" title="获取移动设备最大化大小"></a>获取移动设备最大化大小</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getZoom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> screenWidth =</span><br><span class="line">    <span class="built_in">Math</span>.abs(<span class="built_in">window</span>.orientation) === <span class="number">90</span></span><br><span class="line">      ? <span class="built_in">Math</span>.max(screen.height, screen.width)</span><br><span class="line">      : <span class="built_in">Math</span>.min(screen.height, screen.width);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid()) &#123;</span><br><span class="line">    screenWidth = screenWidth / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> FixViewPortsExperiment =</span><br><span class="line">    rendererModel.runningExperiments.FixViewport ||</span><br><span class="line">    rendererModel.runningExperiments.fixviewport;</span><br><span class="line">  <span class="keyword">var</span> FixViewPortsExperimentRunning =</span><br><span class="line">    FixViewPortsExperiment &amp;&amp;</span><br><span class="line">    (FixViewPortsExperiment === <span class="string">"New"</span> || FixViewPortsExperiment === <span class="string">"new"</span>);</span><br><span class="line">  <span class="keyword">if</span> (FixViewPortsExperimentRunning) &#123;</span><br><span class="line">    <span class="keyword">return</span> screenWidth / <span class="built_in">window</span>.innerWidth;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> screenWidth / <span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断是否安卓移动设备访问"><a href="#判断是否安卓移动设备访问" class="headerlink" title="判断是否安卓移动设备访问"></a>判断是否安卓移动设备访问</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAndroidMobileDevice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/android/i</span>.test(navigator.userAgent.toLowerCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断是否苹果移动设备访问"><a href="#判断是否苹果移动设备访问" class="headerlink" title="判断是否苹果移动设备访问"></a>判断是否苹果移动设备访问</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAppleMobileDevice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/iphone|ipod|ipad|Macintosh/i</span>.test(navigator.userAgent.toLowerCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断是否为数字类型"><a href="#判断是否为数字类型" class="headerlink" title="判断是否为数字类型"></a>判断是否为数字类型</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDigit</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> patrn = <span class="regexp">/^[0-9]*$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (patrn.exec(value) == <span class="literal">null</span> || value == <span class="string">""</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="是否是某类手机型号"><a href="#是否是某类手机型号" class="headerlink" title="是否是某类手机型号"></a>是否是某类手机型号</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用devicePixelRatio和分辨率判断</span></span><br><span class="line"><span class="keyword">const</span> isIphonex = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// X XS, XS Max, XR</span></span><br><span class="line">  <span class="keyword">const</span> xSeriesConfig = [</span><br><span class="line">    &#123;</span><br><span class="line">      devicePixelRatio: <span class="number">3</span>,</span><br><span class="line">      width: <span class="number">375</span>,</span><br><span class="line">      height: <span class="number">812</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      devicePixelRatio: <span class="number">3</span>,</span><br><span class="line">      width: <span class="number">414</span>,</span><br><span class="line">      height: <span class="number">896</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      devicePixelRatio: <span class="number">2</span>,</span><br><span class="line">      width: <span class="number">414</span>,</span><br><span class="line">      height: <span class="number">896</span></span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="comment">// h5</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isIOS = <span class="regexp">/iphone/gi</span>.test(<span class="built_in">window</span>.navigator.userAgent);</span><br><span class="line">    <span class="keyword">if</span> (!isIOS) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; devicePixelRatio, screen &#125; = <span class="built_in">window</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; width, height &#125; = screen;</span><br><span class="line">    <span class="keyword">return</span> xSeriesConfig.some(</span><br><span class="line">      item =&gt;</span><br><span class="line">        item.devicePixelRatio === devicePixelRatio &amp;&amp;</span><br><span class="line">        item.width === width &amp;&amp;</span><br><span class="line">        item.height === height</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="判断是否移动设备"><a href="#判断是否移动设备" class="headerlink" title="判断是否移动设备"></a>判断是否移动设备</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>._isMobile === <span class="string">"boolean"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> screenWidth = <span class="keyword">this</span>.getScreenWidth();</span><br><span class="line">  <span class="keyword">var</span> fixViewPortsExperiment =</span><br><span class="line">    rendererModel.runningExperiments.FixViewport ||</span><br><span class="line">    rendererModel.runningExperiments.fixviewport;</span><br><span class="line">  <span class="keyword">var</span> fixViewPortsExperimentRunning =</span><br><span class="line">    fixViewPortsExperiment &amp;&amp; fixViewPortsExperiment.toLowerCase() === <span class="string">"new"</span>;</span><br><span class="line">  <span class="keyword">if</span> (!fixViewPortsExperiment) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isAppleMobileDevice()) &#123;</span><br><span class="line">      screenWidth = screenWidth / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> isMobileScreenSize = screenWidth &lt; <span class="number">600</span>;</span><br><span class="line">  <span class="keyword">var</span> isMobileUserAgent = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>._isMobile = isMobileScreenSize &amp;&amp; <span class="keyword">this</span>.isTouchScreen();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断吗是否手机号码"><a href="#判断吗是否手机号码" class="headerlink" title="判断吗是否手机号码"></a>判断吗是否手机号码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobileNumber</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i =</span><br><span class="line">      <span class="string">"134,135,136,137,138,139,150,151,152,157,158,159,187,188,147,182,183,184,178"</span>,</span><br><span class="line">    n = <span class="string">"130,131,132,155,156,185,186,145,176"</span>,</span><br><span class="line">    a = <span class="string">"133,153,180,181,189,177,173,170"</span>,</span><br><span class="line">    o = e || <span class="string">""</span>,</span><br><span class="line">    r = o.substring(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">    d = o.substring(<span class="number">0</span>, <span class="number">4</span>),</span><br><span class="line">    s =</span><br><span class="line">      !!<span class="regexp">/^1\d&#123;10&#125;$/</span>.test(o) &amp;&amp;</span><br><span class="line">      (n.indexOf(r) &gt;= <span class="number">0</span></span><br><span class="line">        ? <span class="string">"联通"</span></span><br><span class="line">        : a.indexOf(r) &gt;= <span class="number">0</span></span><br><span class="line">        ? <span class="string">"电信"</span></span><br><span class="line">        : <span class="string">"1349"</span> == d</span><br><span class="line">        ? <span class="string">"电信"</span></span><br><span class="line">        : i.indexOf(r) &gt;= <span class="number">0</span></span><br><span class="line">        ? <span class="string">"移动"</span></span><br><span class="line">        : <span class="string">"未知"</span>);</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断是否是移动设备访问"><a href="#判断是否是移动设备访问" class="headerlink" title="判断是否是移动设备访问"></a>判断是否是移动设备访问</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobileUserAgent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/iphone|ipod|android.*mobile|windows.*phone|blackberry.*mobile/i</span>.test(</span><br><span class="line">    <span class="built_in">window</span>.navigator.userAgent.toLowerCase()</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断鼠标是否移出事件"><a href="#判断鼠标是否移出事件" class="headerlink" title="判断鼠标是否移出事件"></a>判断鼠标是否移出事件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMouseOut</span>(<span class="params">e, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.type !== <span class="string">"mouseout"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> reltg = e.relatedTarget</span><br><span class="line">    ? e.relatedTarget</span><br><span class="line">    : e.type === <span class="string">"mouseout"</span></span><br><span class="line">    ? e.toElement</span><br><span class="line">    : e.fromElement;</span><br><span class="line">  <span class="keyword">while</span> (reltg &amp;&amp; reltg !== handler) &#123;</span><br><span class="line">    reltg = reltg.parentNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> reltg !== handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断是否Touch屏幕"><a href="#判断是否Touch屏幕" class="headerlink" title="判断是否Touch屏幕"></a>判断是否Touch屏幕</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTouchScreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">"ontouchstart"</span> <span class="keyword">in</span> <span class="built_in">window</span> ||</span><br><span class="line">    (<span class="built_in">window</span>.DocumentTouch &amp;&amp; <span class="built_in">document</span> <span class="keyword">instanceof</span> DocumentTouch)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断是否为网址"><a href="#判断是否为网址" class="headerlink" title="判断是否为网址"></a>判断是否为网址</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isURL</span>(<span class="params">strUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> regular = <span class="regexp">/^\b(((https?|ftp):\/\/)?[-a-z0-9]+(\.[-a-z0-9]+)*\.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d))\b(\/[-a-z0-9_:\@&amp;?=+,.!\/~%\$]*)?)$/i</span>;</span><br><span class="line">  <span class="keyword">if</span> (regular.test(strUrl)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="判断是否打开视窗"><a href="#判断是否打开视窗" class="headerlink" title="判断是否打开视窗"></a>判断是否打开视窗</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isViewportOpen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !!<span class="built_in">document</span>.getElementById(<span class="string">"wixMobileViewport"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="加载样式文件"><a href="#加载样式文件" class="headerlink" title="加载样式文件"></a>加载样式文件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyle</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.createStyleSheet(url);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">var</span> cssLink = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">    cssLink.rel = <span class="string">"stylesheet"</span>;</span><br><span class="line">    cssLink.type = <span class="string">"text/css"</span>;</span><br><span class="line">    cssLink.href = url;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</span><br><span class="line">    head.appendChild(cssLink);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="替换地址栏"><a href="#替换地址栏" class="headerlink" title="替换地址栏"></a>替换地址栏</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">locationReplace</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (history.replaceState) &#123;</span><br><span class="line">    history.replaceState(<span class="literal">null</span>, <span class="built_in">document</span>.title, url);</span><br><span class="line">    history.go(<span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    location.replace(url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解决offsetX兼容性问题"><a href="#解决offsetX兼容性问题" class="headerlink" title="解决offsetX兼容性问题"></a>解决offsetX兼容性问题</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 针对火狐不支持offsetX/Y</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOffset</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target = e.target, <span class="comment">// 当前触发的目标对象</span></span><br><span class="line">    eventCoord,</span><br><span class="line">    pageCoord,</span><br><span class="line">    offsetCoord;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算当前触发元素到文档的距离</span></span><br><span class="line">  pageCoord = getPageCoord(target);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算光标到文档的距离</span></span><br><span class="line">  eventCoord = &#123;</span><br><span class="line">    X: <span class="built_in">window</span>.pageXOffset + e.clientX,</span><br><span class="line">    Y: <span class="built_in">window</span>.pageYOffset + e.clientY</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相减获取光标到第一个定位的父元素的坐标</span></span><br><span class="line">  offsetCoord = &#123;</span><br><span class="line">    X: eventCoord.X - pageCoord.X,</span><br><span class="line">    Y: eventCoord.Y - pageCoord.Y</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> offsetCoord;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageCoord</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> coord = &#123; <span class="attr">X</span>: <span class="number">0</span>, <span class="attr">Y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="comment">// 计算从当前触发元素到根节点为止，</span></span><br><span class="line">  <span class="comment">// 各级 offsetParent 元素的 offsetLeft 或 offsetTop 值之和</span></span><br><span class="line">  <span class="keyword">while</span> (element) &#123;</span><br><span class="line">    coord.X += element.offsetLeft;</span><br><span class="line">    coord.Y += element.offsetTop;</span><br><span class="line">    element = element.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> coord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="打开一个窗体通用方法"><a href="#打开一个窗体通用方法" class="headerlink" title="打开一个窗体通用方法"></a>打开一个窗体通用方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openWindow</span>(<span class="params">url, windowName, width, height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">parseInt</span>(screen.width / <span class="number">2.0</span>) - width / <span class="number">2.0</span>;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">parseInt</span>(screen.height / <span class="number">2.0</span>) - height / <span class="number">2.0</span>;</span><br><span class="line">  <span class="keyword">var</span> isMSIE = navigator.appName == <span class="string">"Microsoft Internet Explorer"</span>;</span><br><span class="line">  <span class="keyword">if</span> (isMSIE) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="string">"resizable=1,location=no,scrollbars=no,width="</span>;</span><br><span class="line">    p = p + width;</span><br><span class="line">    p = p + <span class="string">",height="</span>;</span><br><span class="line">    p = p + height;</span><br><span class="line">    p = p + <span class="string">",left="</span>;</span><br><span class="line">    p = p + x;</span><br><span class="line">    p = p + <span class="string">",top="</span>;</span><br><span class="line">    p = p + y;</span><br><span class="line">    retval = <span class="built_in">window</span>.open(url, windowName, p);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> win = <span class="built_in">window</span>.open(</span><br><span class="line">      url,</span><br><span class="line">      <span class="string">"ZyiisPopup"</span>,</span><br><span class="line">      <span class="string">"top="</span> +</span><br><span class="line">        y +</span><br><span class="line">        <span class="string">",left="</span> +</span><br><span class="line">        x +</span><br><span class="line">        <span class="string">",scrollbars="</span> +</span><br><span class="line">        scrollbars +</span><br><span class="line">        <span class="string">",dialog=yes,modal=yes,width="</span> +</span><br><span class="line">        width +</span><br><span class="line">        <span class="string">",height="</span> +</span><br><span class="line">        height +</span><br><span class="line">        <span class="string">",resizable=no"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"try &#123; win.resizeTo(width, height); &#125; catch(e) &#123; &#125;"</span>);</span><br><span class="line">    win.focus();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="将键值对拼接成URL带参数"><a href="#将键值对拼接成URL带参数" class="headerlink" title="将键值对拼接成URL带参数"></a>将键值对拼接成URL带参数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">const</span> fnParams2Url = <span class="function"><span class="params">obj</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> aUrl = []</span><br><span class="line">      <span class="keyword">let</span> fnAdd = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key + <span class="string">'='</span> + value</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        aUrl.push(fnAdd(k, obj[k]))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(aUrl.join(<span class="string">'&amp;'</span>))</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="去掉url前缀"><a href="#去掉url前缀" class="headerlink" title="去掉url前缀"></a>去掉url前缀</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeUrlPrefix</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  a = a</span><br><span class="line">    .replace(<span class="regexp">/：/g</span>, <span class="string">":"</span>)</span><br><span class="line">    .replace(<span class="regexp">/．/g</span>, <span class="string">"."</span>)</span><br><span class="line">    .replace(<span class="regexp">/／/g</span>, <span class="string">"/"</span>);</span><br><span class="line">  <span class="keyword">while</span> (</span><br><span class="line">    trim(a)</span><br><span class="line">      .toLowerCase()</span><br><span class="line">      .indexOf(<span class="string">"http://"</span>) == <span class="number">0</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    a = trim(a.replace(<span class="regexp">/http:\/\//i</span>, <span class="string">""</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="替换全部"><a href="#替换全部" class="headerlink" title="替换全部"></a>替换全部</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.replaceAll = <span class="function"><span class="keyword">function</span>(<span class="params">s1, s2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(s1, <span class="string">"gm"</span>), s2);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="resize的操作"><a href="#resize的操作" class="headerlink" title="resize的操作"></a>resize的操作</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">document</span>.documentElement</span><br><span class="line">        ? <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">        : <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">      r = <span class="number">1255</span>,</span><br><span class="line">      b = Element.extend(<span class="built_in">document</span>.body),</span><br><span class="line">      classname = b.className;</span><br><span class="line">    <span class="keyword">if</span> (w &lt; r) &#123;</span><br><span class="line">      <span class="comment">//当窗体的宽度小于1255的时候执行相应的操作</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//当窗体的宽度大于1255的时候执行相应的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span><br><span class="line">    <span class="built_in">window</span>.attachEvent(<span class="string">"onresize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  fn();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="滚动到顶部"><a href="#滚动到顶部" class="headerlink" title="滚动到顶部"></a>滚动到顶部</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用document.documentElement.scrollTop 或 document.body.scrollTop 获取到顶部的距离，从顶部</span></span><br><span class="line"><span class="comment">// 滚动一小部分距离。使用window.requestAnimationFrame()来滚动。</span></span><br><span class="line"><span class="comment">// @example</span></span><br><span class="line"><span class="comment">// scrollToTop();</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollToTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(scrollToTop);</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, c - c / <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设置cookie值"><a href="#设置cookie值" class="headerlink" title="设置cookie值"></a>设置cookie值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, Hours</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> offset = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">var</span> utc = d.getTime() + d.getTimezoneOffset() * <span class="number">60000</span>;</span><br><span class="line">  <span class="keyword">var</span> nd = utc + <span class="number">3600000</span> * offset;</span><br><span class="line">  <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>(nd);</span><br><span class="line">  exp.setTime(exp.getTime() + Hours * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">document</span>.cookie =</span><br><span class="line">    name +</span><br><span class="line">    <span class="string">"="</span> +</span><br><span class="line">    <span class="built_in">escape</span>(value) +</span><br><span class="line">    <span class="string">";path=/;expires="</span> +</span><br><span class="line">    exp.toGMTString() +</span><br><span class="line">    <span class="string">";domain=360doc.com;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设为首页"><a href="#设为首页" class="headerlink" title="设为首页"></a>设为首页</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setHomepage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.behavior = <span class="string">"url(#default#homepage)"</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.setHomePage(<span class="string">"http://w3cboy.com"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.sidebar) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.netscape) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        netscape.security.PrivilegeManager.enablePrivilege(</span><br><span class="line">          <span class="string">"UniversalXPConnect"</span></span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        alert(</span><br><span class="line">          <span class="string">"该操作被浏览器拒绝，如果想启用该功能，请在地址栏内输入 about:config,然后将项 signed.applets.codebase_principal_support 值该为true"</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> prefs = Components.classes[</span><br><span class="line">      <span class="string">"@mozilla.org/preferences-service;1"</span></span><br><span class="line">    ].getService(Components.interfaces.nsIPrefBranch);</span><br><span class="line">    prefs.setCharPref(<span class="string">"browser.startup.homepage"</span>, <span class="string">"http://w3cboy.com"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="按字母排序，对每行进行数组排序"><a href="#按字母排序，对每行进行数组排序" class="headerlink" title="按字母排序，对每行进行数组排序"></a>按字母排序，对每行进行数组排序</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> text = K1.value</span><br><span class="line">    .split(<span class="regexp">/[\r\n]/</span>)</span><br><span class="line">    .sort()</span><br><span class="line">    .join(<span class="string">"\r\n"</span>); <span class="comment">//顺序</span></span><br><span class="line">  <span class="keyword">var</span> test = K1.value</span><br><span class="line">    .split(<span class="regexp">/[\r\n]/</span>)</span><br><span class="line">    .sort()</span><br><span class="line">    .reverse()</span><br><span class="line">    .join(<span class="string">"\r\n"</span>); <span class="comment">//反序</span></span><br><span class="line">  K1.value = K1.value != text ? text : test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="延时执行"><a href="#延时执行" class="headerlink" title="延时执行"></a>延时执行</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如 sleep(1000) 意味着等待1000毫秒，还可从 Promise、Generator、Async/Await 等角度实现。</span></span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="keyword">const</span> sleep = <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, time));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1000</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Generator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">sleepGenerator</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(resolve, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleepGenerator(<span class="number">1000</span>)</span><br><span class="line">  .next()</span><br><span class="line">  .value.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//async</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, time));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> out = <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">callback, time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">"function"</span>) &#123;</span><br><span class="line">    setTimeout(callback, time);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep(output, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h1 id="判断是否以某个字符串开头"><a href="#判断是否以某个字符串开头" class="headerlink" title="判断是否以某个字符串开头"></a>判断是否以某个字符串开头</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.startWith = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.indexOf(s) == <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="清除脚本内容"><a href="#清除脚本内容" class="headerlink" title="清除脚本内容"></a>清除脚本内容</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripscript</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.replace(<span class="regexp">/&lt;script.*?&gt;.*?&lt;\/script&gt;/gi</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间个性化输出功能"><a href="#时间个性化输出功能" class="headerlink" title="时间个性化输出功能"></a>时间个性化输出功能</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、&lt; 60s, 显示为“刚刚”</span></span><br><span class="line"><span class="comment">2、&gt;= 1min &amp;&amp; &lt; 60 min, 显示与当前时间差“XX分钟前”</span></span><br><span class="line"><span class="comment">3、&gt;= 60min &amp;&amp; &lt; 1day, 显示与当前时间差“今天 XX:XX”</span></span><br><span class="line"><span class="comment">4、&gt;= 1day &amp;&amp; &lt; 1year, 显示日期“XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment">5、&gt;= 1year, 显示具体日期“XXXX年XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeFormat</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time),</span><br><span class="line">    curDate = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    year = date.getFullYear(),</span><br><span class="line">    month = date.getMonth() + <span class="number">10</span>,</span><br><span class="line">    day = date.getDate(),</span><br><span class="line">    hour = date.getHours(),</span><br><span class="line">    minute = date.getMinutes(),</span><br><span class="line">    curYear = curDate.getFullYear(),</span><br><span class="line">    curHour = curDate.getHours(),</span><br><span class="line">    timeStr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (year &lt; curYear) &#123;</span><br><span class="line">    timeStr = year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日 "</span> + hour + <span class="string">":"</span> + minute;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> pastTime = curDate - date,</span><br><span class="line">      pastH = pastTime / <span class="number">3600000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pastH &gt; curHour) &#123;</span><br><span class="line">      timeStr = month + <span class="string">"月"</span> + day + <span class="string">"日 "</span> + hour + <span class="string">":"</span> + minute;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pastH &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      timeStr = <span class="string">"今天 "</span> + hour + <span class="string">":"</span> + minute + <span class="string">"分"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> pastM = curDate.getMinutes() - minute;</span><br><span class="line">      <span class="keyword">if</span> (pastM &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        timeStr = pastM + <span class="string">"分钟前"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        timeStr = <span class="string">"刚刚"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> timeStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="全角转换为半角函数"><a href="#全角转换为半角函数" class="headerlink" title="全角转换为半角函数"></a>全角转换为半角函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toCDB</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    code = str.charCodeAt(i);</span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">65281</span> &amp;&amp; code &lt;= <span class="number">65374</span>) &#123;</span><br><span class="line">      result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">65248</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">12288</span>) &#123;</span><br><span class="line">      result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">12288</span> + <span class="number">32</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result += str.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="半角转换为全角函数"><a href="#半角转换为全角函数" class="headerlink" title="半角转换为全角函数"></a>半角转换为全角函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toDBC</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    code = str.charCodeAt(i);</span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">33</span> &amp;&amp; code &lt;= <span class="number">126</span>) &#123;</span><br><span class="line">      result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">65248</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">32</span>) &#123;</span><br><span class="line">      result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">12288</span> - <span class="number">32</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result += str.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="金额大写转换函数"><a href="#金额大写转换函数" class="headerlink" title="金额大写转换函数"></a>金额大写转换函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params">tranvalue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> dw2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">""</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>); <span class="comment">//大单位</span></span><br><span class="line">    <span class="keyword">var</span> dw1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>); <span class="comment">//小单位</span></span><br><span class="line">    <span class="keyword">var</span> dw = <span class="keyword">new</span> <span class="built_in">Array</span>(</span><br><span class="line">      <span class="string">"零"</span>,</span><br><span class="line">      <span class="string">"壹"</span>,</span><br><span class="line">      <span class="string">"贰"</span>,</span><br><span class="line">      <span class="string">"叁"</span>,</span><br><span class="line">      <span class="string">"肆"</span>,</span><br><span class="line">      <span class="string">"伍"</span>,</span><br><span class="line">      <span class="string">"陆"</span>,</span><br><span class="line">      <span class="string">"柒"</span>,</span><br><span class="line">      <span class="string">"捌"</span>,</span><br><span class="line">      <span class="string">"玖"</span></span><br><span class="line">    ); </span><br><span class="line">    <span class="comment">//整数部分用</span></span><br><span class="line">    <span class="comment">//以下是小写转换成大写显示在合计大写的文本框中</span></span><br><span class="line">    <span class="comment">//分离整数与小数</span></span><br><span class="line">    <span class="keyword">var</span> source = splits(tranvalue);</span><br><span class="line">    <span class="keyword">var</span> num = source[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> dig = source[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//转换整数部分</span></span><br><span class="line">    <span class="keyword">var</span> k1 = <span class="number">0</span>; <span class="comment">//计小单位</span></span><br><span class="line">    <span class="keyword">var</span> k2 = <span class="number">0</span>; <span class="comment">//计大单位</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> len = source[<span class="number">0</span>].length; <span class="comment">//整数的长度</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> n = source[<span class="number">0</span>].charAt(len - i); <span class="comment">//取得某个位数上的数字</span></span><br><span class="line">      <span class="keyword">var</span> bn = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        bn = source[<span class="number">0</span>].charAt(len - i - <span class="number">1</span>); <span class="comment">//取得某个位数前一位上的数字</span></span><br><span class="line">      &#125;</span><br><span class="line">      sum = sum + <span class="built_in">Number</span>(n);</span><br><span class="line">      <span class="keyword">if</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">        str = dw[<span class="built_in">Number</span>(n)].concat(str); <span class="comment">//取得该数字对应的大写数字，并插入到str字符串的前面</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="string">"0"</span>) sum = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//在数字范围内</span></span><br><span class="line">        <span class="keyword">if</span> (k1 != <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="comment">//加小单位</span></span><br><span class="line">          <span class="keyword">if</span> (bn != <span class="number">0</span>) &#123;</span><br><span class="line">            str = dw1[k1].concat(str);</span><br><span class="line">          &#125;</span><br><span class="line">          k1++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//不加小单位，加大单位</span></span><br><span class="line">          k1 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">var</span> temp = str.charAt(<span class="number">0</span>);</span><br><span class="line">          <span class="keyword">if</span> (temp == <span class="string">"万"</span> || temp == <span class="string">"亿"</span>)</span><br><span class="line">            <span class="comment">//若大单位前没有数字则舍去大单位</span></span><br><span class="line">            str = str.substr(<span class="number">1</span>, str.length - <span class="number">1</span>);</span><br><span class="line">          str = dw2[k2].concat(str);</span><br><span class="line">          sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (k1 == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">//小单位到千则大单位进一</span></span><br><span class="line">        k2++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转换小数部分</span></span><br><span class="line">    <span class="keyword">var</span> strdig = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (dig != <span class="string">""</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> n = dig.charAt(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"角"</span>; <span class="comment">//加数字</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> n = dig.charAt(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"分"</span>; <span class="comment">//加数字</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">"元"</span> + strdig;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"0元"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拆分整数与小数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splits</span>(<span class="params">tranvalue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">  temp = tranvalue.split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">    value = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="清除空格"><a href="#清除空格" class="headerlink" title="清除空格"></a>清除空格</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reExtraSpace = <span class="regexp">/^\s*(.*?)\s+$/</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.replace(reExtraSpace, <span class="string">"$1"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除左空格</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ltrim</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.replace(<span class="regexp">/^(\s*|　*)/</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除右空格</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rtrim</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.replace(<span class="regexp">/(\s*|　*)$/</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="随机数时间戳"><a href="#随机数时间戳" class="headerlink" title="随机数时间戳"></a>随机数时间戳</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">Math</span>.random,</span><br><span class="line">    b = <span class="built_in">parseInt</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()).toString() + b(<span class="number">10</span> * a()) + b(<span class="number">10</span> * a()) + b(<span class="number">10</span> * a())</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现utf8解码"><a href="#实现utf8解码" class="headerlink" title="实现utf8解码"></a>实现utf8解码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_decode</span>(<span class="params">str_data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp_arr = [],</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    ac = <span class="number">0</span>,</span><br><span class="line">    c1 = <span class="number">0</span>,</span><br><span class="line">    c2 = <span class="number">0</span>,</span><br><span class="line">    c3 = <span class="number">0</span>;</span><br><span class="line">  str_data += <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; str_data.length) &#123;</span><br><span class="line">    c1 = str_data.charCodeAt(i);</span><br><span class="line">    <span class="keyword">if</span> (c1 &lt; <span class="number">128</span>) &#123;</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(c1);</span><br><span class="line">      i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c1 &gt; <span class="number">191</span> &amp;&amp; c1 &lt; <span class="number">224</span>) &#123;</span><br><span class="line">      c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(((c1 &amp; <span class="number">31</span>) &lt;&lt; <span class="number">6</span>) | (c2 &amp; <span class="number">63</span>));</span><br><span class="line">      i += <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line">      c3 = str_data.charCodeAt(i + <span class="number">2</span>);</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(</span><br><span class="line">        ((c1 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">12</span>) | ((c2 &amp; <span class="number">63</span>) &lt;&lt; <span class="number">6</span>) | (c3 &amp; <span class="number">63</span>)</span><br><span class="line">      );</span><br><span class="line">      i += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmp_arr.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzOTM0MTE4OQ==&amp;mid=2247485899&amp;idx=1&amp;sn=de526f7f1d2ff1b42b90acc196937845&amp;chksm=fac8b121cdbf3837823eb0be690995448c15712144784a13c08c2eca04a35bc74145d4e51563&amp;mpshare=1&amp;scene=1&amp;srcid=0702WArToY4Zf2DneCeKOUoB&amp;sharer_sharetime=1590937398297&amp;sharer_shareid=3513f92f23030a0a67fb38005d1b6a29&amp;key=5a8ad89db03556ba46925cff95d066a2df5a1d5e094bc547591a271e87a02b52912188eb823da168e5f8a53a67a9ebec0966381c3f733daff7ddbe868b913ff526fb7116394abe7ebaebfe29d620fc81&amp;ascene=1&amp;uin=MjU3MDI1Njk0MA%3D%3D&amp;devicetype=Windows+10+x64&amp;version=62090070&amp;lang=zh_CN&amp;exportkey=AYuk7Hyn2g9m%2F3%2FguTy9qU4%3D&amp;pass_ticket=tlYkCwsVMifHd%2B0aIDak4asRIQAnO44krb6gL09ZBy8PXxCTYCFw6N1GoCZ9j5uG" target="_blank" rel="noopener">JS常用开发工具函数</a></p><p><a href="https://github.com/Wscats/CV/issues/27" target="_blank" rel="noopener">https://github.com/Wscats/CV/issues/27</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI0MjU2NDAzNg==&amp;mid=2247484824&amp;idx=1&amp;sn=1c9fc5b3310966fdcbadd436420a9005&amp;chksm=e97b2b33de0ca2255fab8c88eeb41fc582a27792fa5d83ee9613d6538700138b401bffa6f553&amp;mpshare=1&amp;scene=1&amp;srcid=0607D41r6HIeKvnND5wOXbN7&amp;sharer_sharetime=1591532631985&amp;sharer_shareid=3513f92f23030a0a67fb38005d1b6a29&amp;key=aa494bdf4b4d432b93b7314bb1484e169b6fcf79fb08fb265c503ba4735e1c12be235689a04bac70f76f1608ca506093645d25faed1268fe800e71f9c37c49a9119773966e748e0eb19f4fb595d126dc&amp;ascene=1&amp;uin=MjU3MDI1Njk0MA%3D%3D&amp;devicetype=Windows+10+x64&amp;version=62090070&amp;lang=zh_CN&amp;exportkey=AYnr%2BjV5F8NJ%2Bw3wVg6O5oY%3D&amp;pass_ticket=4ivJL1%2BM8e0a98rw%2FTvUhJUE7jMnZAFS%2FmdjHYPo6UGmzIk2G49W6HxA5pv94EBm" target="_blank" rel="noopener">常见函数</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MzUxNTgyMg==&amp;mid=2455602711&amp;idx=1&amp;sn=71532346e04a9894a566188d3e85daea&amp;chksm=b13cf656864b7f40174e4a827b1c5dfb5ebb542837e5cde067350bc61c6b1428c1298c6c8195&amp;mpshare=1&amp;scene=1&amp;srcid=0607LJZiEWYJWZdqO8E1JC7I&amp;sharer_sharetime=1591532869066&amp;sharer_shareid=3513f92f23030a0a67fb38005d1b6a29&amp;key=e6152aaf211ea82497530d90078e6191de13d495e1d3394958d2eb78cc41dbcb89cb81c696531e31add258def72727a991d5a9ab331e0110f787f90a65a6420e55fdfade59b7542eabed3f7792dc5417&amp;ascene=1&amp;uin=MjU3MDI1Njk0MA%3D%3D&amp;devicetype=Windows+10+x64&amp;version=62090070&amp;lang=zh_CN&amp;exportkey=AfUjrsawVfc6J%2FnX1gThuLM%3D&amp;pass_ticket=4ivJL1%2BM8e0a98rw%2FTvUhJUE7jMnZAFS%2FmdjHYPo6UGmzIk2G49W6HxA5pv94EBm" target="_blank" rel="noopener">防抖</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;抄录一些JavaScript工具函数大全&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hackycy.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://hackycy.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>解决Github网页上图片显示失败问题</title>
    <link href="http://hackycy.github.io/2020/05/29/%E8%A7%A3%E5%86%B3Github%E7%BD%91%E9%A1%B5%E4%B8%8A%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://hackycy.github.io/2020/05/29/解决Github网页上图片显示失败问题/</id>
    <published>2020-05-29T16:04:10.000Z</published>
    <updated>2020-07-23T08:37:09.046Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近科学上网失效的有些频繁，上Github的时候图片总是加载不出来，之前没有在意，但是自己博客中的图片也是依赖Github的时候就留意到了这个问题。<strong>（如果有科学上网请随意）</strong></p><a id="more"></a><p><img src="https://github.static.si-yee.com/posts/SolvetheproblemofimagedisplayfailureonGitHubwebpage/20200604140631.png" alt></p><p>主要报错是<code>Failed to load resource: net::ERR_CERT_COMMON_NAME_INVALID</code>以及<code>Failed to load resource: net::ERR_CONNECTION_RESET</code></p><p><strong>来自网友的解释：</strong></p><p>实际上，可以认为，<code>ERR_CERT_COMMON_NAME_INVALID</code>就是用一个错误的域名访问了某个节点的<code>https</code>资源。导致这个错误的原因，基本是：</p><ol><li>dns污染</li><li>host设置错误</li><li>官方更新了dns，但是dns缓存没有被更新，导致错误解析。</li></ol><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>打开<code>github</code>任意未显示图片的网页，使用元素选择器（<code>Ctrl+Shift+C</code>）放在显示不了的图片上，或者在无法显示的图片上右键-检查元素，定位到该图片的标签，那么你得到了它的URL，叫做<code>src</code>属性。</p><p><img src="https://github.static.si-yee.com/posts/SolvetheproblemofimagedisplayfailureonGitHubwebpage/20200604140727.png" alt></p><p>将URL复制出来后，打开<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">IPAddress.com</a>这个网站，搜索它的域名:<code>avatars2.githubusercontent.com</code></p><p><img src="https://github.static.si-yee.com/posts/SolvetheproblemofimagedisplayfailureonGitHubwebpage/20200604140757.png" alt></p><p>搜索后会看到该域名的信息和<code>IP</code>地址：</p><p><img src="https://github.static.si-yee.com/posts/SolvetheproblemofimagedisplayfailureonGitHubwebpage/20200604140836.png" alt></p><p>当前该域名的IP是：199.232.68.133，那么我们就可以使这个<strong>IP</strong>和<strong>域名</strong>映射起来。</p><p><strong>修改hosts</strong></p><p>Window下路径<code>C:\Windows\System32\drivers\etc\hosts</code></p><p>Mac、Linux下路径<code>/etc/hosts</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># GitHub Start </span><br><span class="line">140.82.113.3      github.com</span><br><span class="line">140.82.114.20     gist.github.com</span><br><span class="line"></span><br><span class="line">151.101.184.133    assets-cdn.github.com</span><br><span class="line">151.101.184.133    raw.githubusercontent.com</span><br><span class="line">151.101.184.133    gist.githubusercontent.com</span><br><span class="line">151.101.184.133    cloud.githubusercontent.com</span><br><span class="line">151.101.184.133    camo.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars0.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars0.githubusercontent.com</span><br><span class="line">199.232.28.133     avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars2.githubusercontent.com</span><br><span class="line">199.232.28.133     avatars2.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars3.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars3.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars4.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars4.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars5.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars5.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars6.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars6.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars7.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars7.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars8.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars8.githubusercontent.com</span><br><span class="line"></span><br><span class="line"># GitHub End</span><br></pre></td></tr></table></figure><p>保存即可，<strong>该文件随时可能变更，请随时自行更新</strong></p><blockquote><p>window下无法保存，没有修改权限，鼠标右键-属性-安全-修改权限；或将<code>hosts</code>文件复制一份，修改之后，复制到原文件夹替换！</p></blockquote><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p><strong>Window系统下</strong></p><p>还可以使用<code>ipconfig/flush</code>对本地DNS缓存进行一次刷新，如果遇到网络异常，可能是DNS缓存的问题，刷新一下，步骤。</p><p>windows开始→运行→输入：CMD 按回车键，打开命令提示符窗口。<br>再输入： <code>ipconfig /flushdns</code> 回车，执行命令，可以重建本地DNS缓存。</p><p><strong>Mac系统下</strong></p><p>OS X Mountain Lion or Lion</p><p>Use the following Terminal command to reset the DNS cache:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure><p>Mac OS X v10.6</p><p>Use the following Terminal command to reset the DNS cache:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dscacheutil -flushcache</span><br></pre></td></tr></table></figure><p>mac Mojave</p><p>搬运from：<a href="https://link.zhihu.com/?target=https%3A//www.hongkiat.com/blog/how-to-clear-dns-cache-in-macos-mojave/" target="_blank" rel="noopener">https://www.hongkiat.com/blog/how-to-clear-dns-cache-in-macos-mojave/</a></p><ol><li>打开终端：launchpad里面的“终端”</li><li>输入：sudo killall -HUP mDNSResponder; sleep 2; 然后敲回车；</li><li>输入密码；然后敲回车</li><li>command+Q退出，就好啦</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.zhihu.com/question/19679715" target="_blank" rel="noopener">https://www.zhihu.com/question/19679715</a></p><p><a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a></p><p><a href="https://www.jianshu.com/p/30e2703a5647" target="_blank" rel="noopener">https://www.jianshu.com/p/30e2703a5647</a></p><p><a href="https://blog.csdn.net/qq_38232598/article/details/91346392" target="_blank" rel="noopener">https://blog.csdn.net/qq_38232598/article/details/91346392</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;最近科学上网失效的有些频繁，上Github的时候图片总是加载不出来，之前没有在意，但是自己博客中的图片也是依赖Github的时候就留意到了这个问题。&lt;strong&gt;（如果有科学上网请随意）&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://hackycy.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="github" scheme="http://hackycy.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Eggjs实现文件下载</title>
    <link href="http://hackycy.github.io/2020/05/28/Eggjs%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
    <id>http://hackycy.github.io/2020/05/28/Eggjs实现文件下载/</id>
    <published>2020-05-28T11:47:55.000Z</published>
    <updated>2020-07-23T08:37:08.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在最近的编写的一个个人的工具站点中想实现一个网站提交数据后把特定文件压缩打包后浏览器出现下载的功能。找的资料实现也残缺不全。所以记录一下目前能实现的方案。</p><a id="more"></a><p>使用到的框架：<a href="https://stuk.github.io/jszip/" target="_blank" rel="noopener">EggJS</a>、<a href="https://eggjs.org/zh-cn/" target="_blank" rel="noopener">JSZip</a>。</p><h1 id="编写路由"><a href="#编写路由" class="headerlink" title="编写路由"></a>编写路由</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;Egg.Application&#125; app - egg application</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</span><br><span class="line">  router.get(<span class="string">'/'</span>, controller.home.index);</span><br><span class="line">  router.get(<span class="string">'/download'</span>, controller.home.deal);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> jszip = <span class="built_in">require</span>(<span class="string">'jszip'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">'egg'</span>).Controller;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 首页</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> index() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    ctx.response.type = <span class="string">'html'</span>;</span><br><span class="line">    ctx.body = fs.readFileSync(path.resolve(__dirname, <span class="string">'../view/home.html'</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> deal() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 处理public Path</span></span><br><span class="line">    <span class="keyword">const</span> dirPath = path.resolve(__dirname, <span class="string">`../public`</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(dirPath)) &#123;</span><br><span class="line">      fs.mkdirSync(dirPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打包到egg-static的目录下，也可以是其他目录，有写入权限文件目录即可，后续读取</span></span><br><span class="line">    <span class="keyword">const</span> zip = <span class="keyword">new</span> jszip();</span><br><span class="line">    zip.file(<span class="string">'test.txt'</span>, <span class="string">'detail'</span>);</span><br><span class="line">    zip.folder(<span class="string">'img'</span>);</span><br><span class="line">    <span class="keyword">const</span> content = <span class="keyword">await</span> zip.generateAsync(&#123; <span class="attr">type</span>: <span class="string">'nodebuffer'</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> zipPath = <span class="string">`<span class="subst">$&#123;dirPath&#125;</span>/download.zip`</span>;</span><br><span class="line">    fs.writeFileSync(zipPath, content);</span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">const</span> stats = fs.statSync(zipPath, &#123;</span><br><span class="line">      encoding: <span class="string">'utf8'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    ctx.response.set(&#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/octet-stream'</span>,</span><br><span class="line">      <span class="string">'Content-Disposition'</span>: <span class="string">`attachment; filename=download.zip`</span>,</span><br><span class="line">      <span class="string">'Content-Length'</span>: stats.size,</span><br><span class="line">    &#125;);</span><br><span class="line">    ctx.body = fs.createReadStream(zipPath);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HomeController;</span><br></pre></td></tr></table></figure><blockquote><p>首页直接使用文件流来渲染一个网页。不使用nunjucks等模板渲染方式。</p><p>deal方法中才是处理下载文件的重点。</p><p>跳转到/download路径时会自动下载download.zip的压缩包。解压后会有一个test.txt文件和一个img的目录。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/eggjs/egg/issues/948" target="_blank" rel="noopener">https://github.com/eggjs/egg/issues/948</a></p><p><a href="https://www.jianshu.com/p/2689a38cf643" target="_blank" rel="noopener">https://www.jianshu.com/p/2689a38cf643</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在最近的编写的一个个人的工具站点中想实现一个网站提交数据后把特定文件压缩打包后浏览器出现下载的功能。找的资料实现也残缺不全。所以记录一下目前能实现的方案。&lt;/p&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="http://hackycy.github.io/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="http://hackycy.github.io/tags/Nodejs/"/>
    
      <category term="Egg" scheme="http://hackycy.github.io/tags/Egg/"/>
    
  </entry>
  
  <entry>
    <title>Github Action 自动化部署Hexo</title>
    <link href="http://hackycy.github.io/2020/05/26/Github-Action-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Hexo/"/>
    <id>http://hackycy.github.io/2020/05/26/Github-Action-自动化部署Hexo/</id>
    <published>2020-05-26T13:51:33.000Z</published>
    <updated>2020-07-23T08:37:08.570Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是Github-Action"><a href="#什么是Github-Action" class="headerlink" title="什么是Github Action"></a>什么是Github Action</h1><p><code>Github Actions</code>是<code>Github</code>推出的一个新的功能，可以为我们的项目自动化地构建工作流，例如代码检查，自动化打包，测试，发布版本等等。入口在项目<code>pull request</code>的旁边。</p><p>一次无意中查看到阮一峰大神博客中提到的Github Action，平常一般玩过的是Jenkins。看到可以将React项目自动部署到Github Page时，灵感就想到了自己的基于Hexo搭建的博客来实现一下自动部署。查了一下资料，的确可以实现的。</p><a id="more"></a><blockquote><p>该文章不涉及Github Action以及Hexo的教学。请自行查阅</p></blockquote><h1 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h1><p>先准备两个仓库，一个是部署博客所产出静态页面（github page）的仓库，一个是博客所有源文件的仓库</p><p>在本地生成一个 key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your email"</span> -f ~/.ssh/github-actions-deploy</span><br></pre></td></tr></table></figure><blockquote><p>（也可以生成其他种类的 key，如果用上面的命令，需要修改一下用户名） 回车完成即可</p></blockquote><p>查看私钥和公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ cat github-actions-deploy</span><br><span class="line">$ cat github-actions-deploy.pub</span><br></pre></td></tr></table></figure><p>在博客所有源文件的仓库<strong>Settings -&gt; Secrets</strong> 里添加刚刚生成的私钥，名称为 <code>ACTION_DEPLOY_KEY</code>。</p><p>然后在 Github Pages 的仓库，<strong>Settings -&gt; Deploy keys</strong> 添加刚刚生成的公钥，名称随意，但要勾选 <strong>Allow write access</strong>。</p><p><img src="https://github.static.si-yee.com/posts/Github Action 自动化部署Hexo-20200604134453.png" alt></p><h1 id="添加Github-Action"><a href="#添加Github-Action" class="headerlink" title="添加Github Action"></a>添加Github Action</h1><p>可以在网页上 <strong>Actions</strong> 里编辑配置文件，也可以直接在源文件的仓库的本地目录添加直接 commit。</p><p>本文直接在源文件的仓库的本地目录提交配置文件，将配置文件存至原文件仓库目录下的 <code>.github/workflows/*随便起名*.yml</code>。</p><p>脚本配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span>    </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node</span> </span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">'10.x'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">prepare</span> <span class="string">build</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTION_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="comment"># set up private key for deploy</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"$ACTION_DEPLOY_KEY"</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">'\r'</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="comment"># set git infomation</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">'hackycy'</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">'qa894178522@qq.com'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">clone</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/hackycy/hackycy.github.io.git</span> <span class="string">.deploy_git</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NPM</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clean</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./node_modules/.bin/hexo</span> <span class="string">clean</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./node_modules/.bin/hexo</span> <span class="string">generate</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./node_modules/.bin/hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><div class="note info"><p><strong>对这个配置文件做几点说明：</strong></p><ol><li>Actions 在早期测试时用的是 HCL 格式，而现在使用 YAML 配置，HCL 格式配置文件已被废弃。YAML 格式需要严格按照缩进。</li><li><code>on</code> 标注什么事件会触发这个 workflow，可以指定 branches，详情参考<a href="https://help.github.com/en/articles/events-that-trigger-workflows" target="_blank" rel="noopener">文档</a>。</li><li><code>runs-on</code> 设置运行平台，目前有 Windows、Ubuntu、macOS，见<a href="https://help.github.com/en/articles/virtual-environments-for-github-actions" target="_blank" rel="noopener">文档</a>。</li><li><code>uses</code> 是使用打包好的 action，可以通过 <code>with</code> 传参数。官方提供了一些 Git 基本操作和环境安装的包，也可以使用 Docker。</li><li><code>env</code> 可以设置这一步的环境变量，这一步设置的变量不会继承到下一步。刚才设置的私钥可以通过 <code>$</code> 获取到，具体见<a href="https://help.github.com/en/articles/virtual-environments-for-github-actions" target="_blank" rel="noopener">文档</a>。另外直接将密钥 echo 出来会被打码 :)</li><li>在网页上保存私钥很可能会把 key 存成 CR-LF 换行模式的，而私钥文件要求 LF 模式，要用 <code>tr -d &#39;\r&#39;</code> 去掉回车符。</li><li>Git 配置请更改为自己的。</li><li>由于我的博客源仓库配置了Submodule，如果没有配置的请直接删除step name为clone的步骤</li></ol></div><h1 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h1><p>每当你写完博客是直接提交到源仓库即可自动触发构建。会配合Action自动发布到Github Page仓库。</p><p><img src="https://github.static.si-yee.com/posts/Github Action 自动化部署Hexo-20200604134653.png" alt></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>如果博客中配置了主题，请注释掉主题下的.gitignore的一些配置，例如本人使用的Next主题</p><p><img src="https://github.static.si-yee.com/posts/Github Action 自动化部署Hexo-20200604134730.png" alt></p><p>以及配合主题安装的第三方插件，有一些插件通过Git clone安装时不会上传到源文件仓库，需要手动删除掉插件目录下的.git文件夹。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a></p><p><a href="https://xiaopc.org/2019/08/29/github-actions-测试-自动部署-hexo/" target="_blank" rel="noopener">https://xiaopc.org/2019/08/29/github-actions-%E6%B5%8B%E8%AF%95-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-hexo/</a></p><p><a href="https://hateonion.me/posts/20feb22/" target="_blank" rel="noopener">https://hateonion.me/posts/20feb22/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是Github-Action&quot;&gt;&lt;a href=&quot;#什么是Github-Action&quot; class=&quot;headerlink&quot; title=&quot;什么是Github Action&quot;&gt;&lt;/a&gt;什么是Github Action&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Github Actions&lt;/code&gt;是&lt;code&gt;Github&lt;/code&gt;推出的一个新的功能，可以为我们的项目自动化地构建工作流，例如代码检查，自动化打包，测试，发布版本等等。入口在项目&lt;code&gt;pull request&lt;/code&gt;的旁边。&lt;/p&gt;
&lt;p&gt;一次无意中查看到阮一峰大神博客中提到的Github Action，平常一般玩过的是Jenkins。看到可以将React项目自动部署到Github Page时，灵感就想到了自己的基于Hexo搭建的博客来实现一下自动部署。查了一下资料，的确可以实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="Github Action" scheme="http://hackycy.github.io/categories/Github-Action/"/>
    
    
      <category term="Github Action" scheme="http://hackycy.github.io/tags/Github-Action/"/>
    
      <category term="hexo" scheme="http://hackycy.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox中解决安装CentOS7后无法上网问题</title>
    <link href="http://hackycy.github.io/2020/05/22/VirtualBox%E4%B8%AD%E8%A7%A3%E5%86%B3%E5%AE%89%E8%A3%85CentOS7%E5%90%8E%E6%97%A0%E6%B3%95%E4%B8%8A%E7%BD%91%E9%97%AE%E9%A2%98/"/>
    <id>http://hackycy.github.io/2020/05/22/VirtualBox中解决安装CentOS7后无法上网问题/</id>
    <published>2020-05-22T13:41:06.000Z</published>
    <updated>2020-07-23T08:37:08.966Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶尔需要搭建一些测试用的环境时使用虚拟机无疑是一个很好的方法。但是在安装玩Centos 7系统后网络的问题是一直困扰的。以防忘记先记录下来。</p><a id="more"></a><p>环境：Mac + VirtualBox</p><h1 id="配置虚拟机的网卡"><a href="#配置虚拟机的网卡" class="headerlink" title="配置虚拟机的网卡"></a>配置虚拟机的网卡</h1><p>按照下图配置虚拟机的网络</p><p><img src="https://github.static.si-yee.com/posts/VirtualBox中解决安装CentOS7后无法上网问题-20200604134142.png" alt></p><p>其中，连接方式选择桥接网卡、界面名称选择你主机上网用的无线网卡、控制芯片选择桌面、混杂模式选择拒绝、勾选接入网络。</p><blockquote><p>配置前请先停止虚拟机</p></blockquote><h1 id="配置CentOS7的网络"><a href="#配置CentOS7的网络" class="headerlink" title="配置CentOS7的网络"></a>配置CentOS7的网络</h1><p>修改网卡对应的配置文件，设置<code>BOOTPROTO</code>为<code>dhcp</code>，<code>ONBOOT</code>为<code>yes</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br></pre></td></tr></table></figure><p><img src="https://github.static.si-yee.com/posts/VirtualBox中解决安装CentOS7后无法上网问题-20200604134232.png" alt></p><h1 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service network restart</span><br></pre></td></tr></table></figure><p>配置完成后重启网络，测试ping通即可。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/scaleqiao/article/details/44206825" target="_blank" rel="noopener">https://blog.csdn.net/scaleqiao/article/details/44206825</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;偶尔需要搭建一些测试用的环境时使用虚拟机无疑是一个很好的方法。但是在安装玩Centos 7系统后网络的问题是一直困扰的。以防忘记先记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="DBA" scheme="http://hackycy.github.io/categories/DBA/"/>
    
    
      <category term="Centos7" scheme="http://hackycy.github.io/tags/Centos7/"/>
    
      <category term="环境搭建" scheme="http://hackycy.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>iOS之日志打印优化</title>
    <link href="http://hackycy.github.io/2020/05/21/iOS%E4%B9%8B%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E4%BC%98%E5%8C%96/"/>
    <id>http://hackycy.github.io/2020/05/21/iOS之日志打印优化/</id>
    <published>2020-05-21T15:02:35.000Z</published>
    <updated>2020-07-23T08:37:08.998Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在日常工作当中，Debug模式的打印调试是基操了。而唯一的一招不是<code>NSLog</code>就是<code>print</code>。但项目开发中使用Swift后<code>NSLog</code>已经不常用了。</p><a id="more"></a><p>而在日常工作当中使用Swift的<code>debugPrint</code>来进行对一些网络请求的输出等的调试已经习以为常。但是Swift编译器并不会将<code>print</code>和<code>debugPrint</code>删除。在最终发布的App会把内容输出到终端。造成了性能的损失。</p><p>但是你也不可能随时都能在上线前把这些打印语句都删去。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>但是更好的方法是通过添加条件编译来将这些语句排除在 Release 版本外。在 Xcode 的 Build Setting 中，在 <strong>Other Swift flags</strong> 的 Debug 栏中加入 <code>-D DEBUG</code> 即可加入一个编译标识。</p><p><img src="https://github.static.si-yee.com/posts/iOS之日志打印优化-20200604133855.png" alt></p><p>之后我们就可以通过将 <code>print</code> 或者 <code>debugPrint</code> 包装一下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dPrint</span><span class="params">(item: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">    #endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，在 Release 版本中，<code>dPrint</code> 将会是一个空方法，所有对这个方法的调用都会被编译器剔除掉。需要注意的是，在这种封装下，如果你传入的 <code>items</code> 是一个表达式而不是直接的变量的话，这个表达式还是会被先执行求值的。如果这对性能也产生了可测的影响的话，我们最好用 <code>@autoclosure</code> 修饰参数来重新包装 <code>print</code>。这可以将求值运行推迟到方法内部，这样在 Release 时这个求值也会被一并去掉：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dPrint</span><span class="params">(item: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">Any</span>) &#123;</span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line">    <span class="built_in">print</span>(item())</span><br><span class="line">    #endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dPrint(resultFromHeavyWork())</span><br><span class="line"><span class="comment">// Release 版本中 resultFromHeavyWork() 不会被执行</span></span><br></pre></td></tr></table></figure><blockquote><p>使用Time Profiler + 真机测试可以验证</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://onevcat.com/2016/02/swift-performance/" target="_blank" rel="noopener">https://onevcat.com/2016/02/swift-performance/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在日常工作当中，Debug模式的打印调试是基操了。而唯一的一招不是&lt;code&gt;NSLog&lt;/code&gt;就是&lt;code&gt;print&lt;/code&gt;。但项目开发中使用Swift后&lt;code&gt;NSLog&lt;/code&gt;已经不常用了。&lt;/p&gt;
    
    </summary>
    
      <category term="Ios" scheme="http://hackycy.github.io/categories/Ios/"/>
    
    
      <category term="Ios" scheme="http://hackycy.github.io/tags/Ios/"/>
    
  </entry>
  
  <entry>
    <title>IOS客户端与服务端时间同步方案</title>
    <link href="http://hackycy.github.io/2020/05/12/IOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/"/>
    <id>http://hackycy.github.io/2020/05/12/IOS客户端与服务端时间同步方案/</id>
    <published>2020-05-12T10:35:16.000Z</published>
    <updated>2020-07-23T08:37:08.938Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近项目的编写中，接口需要提交精确到秒级的时间戳用作校验。但是仅靠<code>new Date().timeIntervalSince1970</code>会面临着本地的时间与服务器时间不一致的问题。那么本文方案能让本地应用时间与服务器时间存在误差范围内保持同步，减少应用出错率。</p><a id="more"></a><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><ul><li>获取设备当前时间 <code>Now</code>，该值受系统时间影响，用户如果修改时间，值也会随着变化；</li><li>获取设备上次重启的时间 <code>BootTime</code>，该值受系统时间影响，用户如果修改时间，值也会随着变化；</li><li>由上面 <code>iOS</code> 提供的两个接口，我们可以获取到<strong>设备自上次重启后运行的时间</strong>（<code>BootTime - Now</code>），该值与系统时间无关；<span class="label danger">`-`这个不是减，指的是区间，下面同理</span> </li><li>在必要的时刻获取一下服务器时间，然后记录这个时刻的<strong>设备自上次重启后运行的时间</strong>（<code>BootTime - Now</code>）</li><li>后续时间获取：<strong>现在服务器时间 = 以前服务器时间 + 现在设备自上次重启后运行的时间 - 以前服务器时间的获取时刻的设备自上次重启后运行的时间</strong></li><li>利用AFNetworking自动同步时间</li></ul><h1 id="时间的获取"><a href="#时间的获取" class="headerlink" title="时间的获取"></a>时间的获取</h1><p><strong>获取now的Unix Time</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">now</span>() -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> now = timeval()</span><br><span class="line"><span class="keyword">var</span> tz = timezone()</span><br><span class="line">gettimeofday(&amp;now, &amp;tz)</span><br><span class="line"><span class="keyword">return</span> now.tv_sec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取设备上次重启的 Unix Time</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">boottime</span>() -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> mid = [<span class="type">CTL_KERN</span>, <span class="type">KERN_BOOTTIME</span>]</span><br><span class="line"><span class="keyword">var</span> boottime = timeval()</span><br><span class="line"><span class="keyword">var</span> size = <span class="type">MemoryLayout</span>.size(ofValue: boottime)</span><br><span class="line">  <span class="keyword">if</span> sysctl(&amp;mid, <span class="number">2</span>, &amp;boottime, &amp;size, <span class="literal">nil</span>, <span class="number">0</span>) != -<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> boottime.tv_sec</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>获取设备自上次重启后运行的时间</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now() - boottime()</span><br></pre></td></tr></table></figure><blockquote><p>oc获取方式</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">//get system uptime since last boot</span></span><br><span class="line">&gt; - (<span class="built_in">NSTimeInterval</span>)uptime</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; <span class="keyword">struct</span> timeval boottime;</span><br><span class="line">&gt; <span class="keyword">int</span> mib[<span class="number">2</span>] = &#123;<span class="built_in">CTL_KERN</span>, KERN_BOOTTIME&#125;;</span><br><span class="line">&gt; size_t size = <span class="keyword">sizeof</span>(boottime);</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">struct</span> timeval now;</span><br><span class="line">&gt; <span class="keyword">struct</span> timezone tz;</span><br><span class="line">&gt; gettimeofday(&amp;now, &amp;tz);</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">double</span> uptime = <span class="number">-1</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">if</span> (sysctl(mib, <span class="number">2</span>, &amp;boottime, &amp;size, <span class="literal">NULL</span>, <span class="number">0</span>) != <span class="number">-1</span> &amp;&amp; boottime.tv_sec != <span class="number">0</span>)</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; uptime = now.tv_sec - boottime.tv_sec;</span><br><span class="line">&gt; uptime += (<span class="keyword">double</span>)(now.tv_usec - boottime.tv_usec) / <span class="number">1000000.0</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="keyword">return</span> uptime;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="TimeUtils编写"><a href="#TimeUtils编写" class="headerlink" title="TimeUtils编写"></a>TimeUtils编写</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeUtils</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> isServerTime: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> diffTime: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// 项目中所有获取时间的方法</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">getServerTime</span>() -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line">        objc_sync_enter(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">defer</span> &#123;</span><br><span class="line">            objc_sync_exit(<span class="keyword">self</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !isServerTime &#123;</span><br><span class="line">            <span class="keyword">let</span> t = <span class="type">Date</span>().timestamp</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> t = diffTime + (now() - boottime())</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 用于计算时间</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">calibrationTime</span>(<span class="title">lastServerTime</span>: <span class="title">Int</span>) -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line">        objc_sync_enter(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">defer</span> &#123;</span><br><span class="line">            objc_sync_exit(<span class="keyword">self</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        diffTime = lastServerTime - (now() - boottime())</span><br><span class="line">        isServerTime = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> lastServerTime</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 获取当前 Unix Time</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">now</span>() -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = timeval()</span><br><span class="line">        <span class="keyword">var</span> tz = timezone()</span><br><span class="line">        gettimeofday(&amp;now, &amp;tz)</span><br><span class="line">        <span class="keyword">return</span> now.tv_sec</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/// 获取设备上次重启的 Unix Time</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">boottime</span>() -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> mid = [<span class="type">CTL_KERN</span>, <span class="type">KERN_BOOTTIME</span>]</span><br><span class="line">        <span class="keyword">var</span> boottime = timeval()</span><br><span class="line">        <span class="keyword">var</span> size = <span class="type">MemoryLayout</span>.size(ofValue: boottime)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sysctl(&amp;mid, <span class="number">2</span>, &amp;boottime, &amp;size, <span class="literal">nil</span>, <span class="number">0</span>) != -<span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> boottime.tv_sec</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Date</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> timestamp: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> timeInterval: <span class="type">TimeInterval</span> = <span class="keyword">self</span>.timeIntervalSince1970</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Int</span>(timeInterval)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="利用AFNetworking同步时间"><a href="#利用AFNetworking同步时间" class="headerlink" title="利用AFNetworking同步时间"></a>利用AFNetworking同步时间</h1><p>利用AFN发起请求返回时通过HTTP Header来获取服务器时间，时间格式以<a href="https://link.jianshu.com/?t=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc7231%23section-7.1.1.1" target="_blank" rel="noopener">RFC-7231</a>中定义的”HTTP日期”格式来发送，解析该时间需要用到以下的OC代码，Swift项目请自行用<code>Bridging-Header</code></p><p><strong>NSDate+InternetDateTime.h</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  NSDate+InternetDateTime.h</span></span><br><span class="line"><span class="comment">//  MWFeedParser</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Michael Waterfall on 07/10/2010.</span></span><br><span class="line"><span class="comment">//  Copyright 2010 Michael Waterfall. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Formatting hints</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line">    DateFormatHintNone, </span><br><span class="line">    DateFormatHintRFC822, </span><br><span class="line">    DateFormatHintRFC3339</span><br><span class="line">&#125; DateFormatHint;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A category to parse internet date &amp; time strings</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSDate</span> (<span class="title">InternetDateTime</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get date from RFC3339 or RFC822 string</span></span><br><span class="line"><span class="comment">// - A format/specification hint can be used to speed up, </span></span><br><span class="line"><span class="comment">//   otherwise both will be attempted in order to get a date</span></span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromInternetDateTimeString:(<span class="built_in">NSString</span> *)dateString </span><br><span class="line">                                formatHint:(DateFormatHint)hint;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get date from a string using a specific date specification</span></span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromRFC3339String:(<span class="built_in">NSString</span> *)dateString;</span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromRFC822String:(<span class="built_in">NSString</span> *)dateString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>NSDate+InternetDateTime.m</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  NSDate+InternetDateTime.m</span></span><br><span class="line"><span class="comment">//  MWFeedParser</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Michael Waterfall on 07/10/2010.</span></span><br><span class="line"><span class="comment">//  Copyright 2010 Michael Waterfall. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"NSDate+InternetDateTime.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Always keep the formatter around as they're expensive to instantiate</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSDateFormatter</span> *_internetDateTimeFormatter = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good info on internet dates here:</span></span><br><span class="line"><span class="comment">// http://developer.apple.com/iphone/library/qa/qa2010/qa1480.html</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSDate</span> (<span class="title">InternetDateTime</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate single date formatter</span></span><br><span class="line">+ (<span class="built_in">NSDateFormatter</span> *)internetDateTimeFormatter &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_internetDateTimeFormatter) &#123;</span><br><span class="line">            <span class="built_in">NSLocale</span> *en_US_POSIX = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            _internetDateTimeFormatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            [_internetDateTimeFormatter setLocale:en_US_POSIX];</span><br><span class="line">            [_internetDateTimeFormatter setTimeZone:[<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _internetDateTimeFormatter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get a date from a string - hint can be used to speed up</span></span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromInternetDateTimeString:(<span class="built_in">NSString</span> *)dateString formatHint:(DateFormatHint)hint &#123;</span><br><span class="line">     <span class="comment">// Keep dateString around a while (for thread-safety)</span></span><br><span class="line"><span class="built_in">NSDate</span> *date = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (dateString) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hint != DateFormatHintRFC3339) &#123;</span><br><span class="line">            <span class="comment">// Try RFC822 first</span></span><br><span class="line">            date = [<span class="built_in">NSDate</span> dateFromRFC822String:dateString];</span><br><span class="line">            <span class="keyword">if</span> (!date) date = [<span class="built_in">NSDate</span> dateFromRFC3339String:dateString];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Try RFC3339 first</span></span><br><span class="line">            date = [<span class="built_in">NSDate</span> dateFromRFC3339String:dateString];</span><br><span class="line">            <span class="keyword">if</span> (!date) date = [<span class="built_in">NSDate</span> dateFromRFC822String:dateString];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// Finished with date string</span></span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// See http://www.faqs.org/rfcs/rfc822.html</span></span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromRFC822String:(<span class="built_in">NSString</span> *)dateString &#123;</span><br><span class="line">     <span class="comment">// Keep dateString around a while (for thread-safety)</span></span><br><span class="line">    <span class="built_in">NSDate</span> *date = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (dateString) &#123;</span><br><span class="line">        <span class="built_in">NSDateFormatter</span> *dateFormatter = [<span class="built_in">NSDate</span> internetDateTimeFormatter];</span><br><span class="line">        <span class="keyword">@synchronized</span>(dateFormatter) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process</span></span><br><span class="line">            <span class="built_in">NSString</span> *RFC822String = [[<span class="built_in">NSString</span> stringWithString:dateString] uppercaseString];</span><br><span class="line">            <span class="keyword">if</span> ([RFC822String rangeOfString:<span class="string">@","</span>].location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// Sun, 19 May 2002 15:21:36 GMT</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"EEE, d MMM yyyy HH:mm:ss zzz"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// Sun, 19 May 2002 15:21 GMT</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"EEE, d MMM yyyy HH:mm zzz"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// Sun, 19 May 2002 15:21:36</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"EEE, d MMM yyyy HH:mm:ss"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// Sun, 19 May 2002 15:21</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"EEE, d MMM yyyy HH:mm"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// 19 May 2002 15:21:36 GMT</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"d MMM yyyy HH:mm:ss zzz"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// 19 May 2002 15:21 GMT</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"d MMM yyyy HH:mm zzz"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// 19 May 2002 15:21:36</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"d MMM yyyy HH:mm:ss"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// 19 May 2002 15:21</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"d MMM yyyy HH:mm"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!date) <span class="built_in">NSLog</span>(<span class="string">@"Could not parse RFC822 date: \"%@\" Possible invalid format."</span>, dateString);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// Finished with date string</span></span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// See http://www.faqs.org/rfcs/rfc3339.html</span></span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromRFC3339String:(<span class="built_in">NSString</span> *)dateString &#123;</span><br><span class="line">     <span class="comment">// Keep dateString around a while (for thread-safety)</span></span><br><span class="line">    <span class="built_in">NSDate</span> *date = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (dateString) &#123;</span><br><span class="line">        <span class="built_in">NSDateFormatter</span> *dateFormatter = [<span class="built_in">NSDate</span> internetDateTimeFormatter];</span><br><span class="line">        <span class="keyword">@synchronized</span>(dateFormatter) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Process date</span></span><br><span class="line">            <span class="built_in">NSString</span> *RFC3339String = [[<span class="built_in">NSString</span> stringWithString:dateString] uppercaseString];</span><br><span class="line">            RFC3339String = [RFC3339String stringByReplacingOccurrencesOfString:<span class="string">@"Z"</span> withString:<span class="string">@"-0000"</span>];</span><br><span class="line">            <span class="comment">// Remove colon in timezone as it breaks NSDateFormatter in iOS 4+.</span></span><br><span class="line">            <span class="comment">// - see https://devforums.apple.com/thread/45837</span></span><br><span class="line">            <span class="keyword">if</span> (RFC3339String.length &gt; <span class="number">20</span>) &#123;</span><br><span class="line">                RFC3339String = [RFC3339String stringByReplacingOccurrencesOfString:<span class="string">@":"</span> </span><br><span class="line">                                                                         withString:<span class="string">@""</span> </span><br><span class="line">                                                                            options:<span class="number">0</span></span><br><span class="line">                                                                              range:<span class="built_in">NSMakeRange</span>(<span class="number">20</span>, RFC3339String.length<span class="number">-20</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!date) &#123; <span class="comment">// 1996-12-19T16:39:57-0800</span></span><br><span class="line">                [dateFormatter setDateFormat:<span class="string">@"yyyy'-'MM'-'dd'T'HH':'mm':'ssZZZ"</span>]; </span><br><span class="line">                date = [dateFormatter dateFromString:RFC3339String];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!date) &#123; <span class="comment">// 1937-01-01T12:00:27.87+0020</span></span><br><span class="line">                [dateFormatter setDateFormat:<span class="string">@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.SSSZZZ"</span>]; </span><br><span class="line">                date = [dateFormatter dateFromString:RFC3339String];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!date) &#123; <span class="comment">// 1937-01-01T12:00:27</span></span><br><span class="line">                [dateFormatter setDateFormat:<span class="string">@"yyyy'-'MM'-'dd'T'HH':'mm':'ss"</span>]; </span><br><span class="line">                date = [dateFormatter dateFromString:RFC3339String];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!date) <span class="built_in">NSLog</span>(<span class="string">@"Could not parse RFC3339 date: \"%@\" Possible invalid format."</span>, dateString);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// Finished with date string</span></span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>来源：<a href="https://github.com/mwaterfall/MWFeedParser/blob/master/Classes/NSDate+InternetDateTime.m（ARC）" target="_blank" rel="noopener">https://github.com/mwaterfall/MWFeedParser/blob/master/Classes/NSDate+InternetDateTime.m（ARC）</a></p></blockquote><p>在项目中封装一个AFN的请求基类</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> AFNetworking</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">HttpMethod</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">GET</span> = <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">POST</span> = <span class="string">"POST"</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> baseURLString = <span class="string">"http://base.url/"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> minResponseTime = <span class="type">Int</span>.<span class="built_in">max</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> sharedClient: <span class="type">AFHTTPSessionManager</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> baseUrl = <span class="type">URL</span>(string: baseURLString)</span><br><span class="line">        <span class="keyword">let</span> client = <span class="type">AFHTTPSessionManager</span>(baseURL: baseUrl!)</span><br><span class="line">        <span class="comment">// 设置请求格式</span></span><br><span class="line">        client.requestSerializer = <span class="type">AFJSONRequestSerializer</span>()</span><br><span class="line">        <span class="comment">// 设置返回格式</span></span><br><span class="line">        client.responseSerializer = <span class="type">AFJSONResponseSerializer</span>()</span><br><span class="line">        <span class="comment">// 设置禁止缓存</span></span><br><span class="line">        client.requestSerializer.cachePolicy = .reloadIgnoringLocalCacheData</span><br><span class="line">        <span class="comment">// 设置超时</span></span><br><span class="line">        client.requestSerializer.timeoutInterval = <span class="number">10</span></span><br><span class="line">        <span class="comment">// 以防解析格式不支持</span></span><br><span class="line">        client.responseSerializer.acceptableContentTypes?.insert(<span class="string">"text/html"</span>)</span><br><span class="line">        client.responseSerializer.acceptableContentTypes?.insert(<span class="string">"text/plain"</span>)</span><br><span class="line">        <span class="keyword">return</span> client</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: 请求方式</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 项目公共请求类</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - httpMethod: httpMethod</span></span><br><span class="line">    <span class="comment">///   - URLString: URLString</span></span><br><span class="line">    <span class="comment">///   - parameters: 参数</span></span><br><span class="line">    <span class="comment">///   - headers: 请求头</span></span><br><span class="line">    <span class="comment">///   - progress: 进度</span></span><br><span class="line">    <span class="comment">///   - success: 成功回调</span></span><br><span class="line">    <span class="comment">///   - failure: 失败回调</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">request</span>(<span class="title">httpMethod</span>: <span class="title">HttpMethod</span>, <span class="title">URLString</span>: <span class="title">String</span>, <span class="title">parameters</span>: [<span class="title">String</span> : <span class="title">Any</span>]?,</span></span><br><span class="line"><span class="class">                       <span class="title">headers</span>: [<span class="title">String</span> : <span class="title">String</span>]?, <span class="title">progress</span>: ((<span class="title">Progress</span>) -&gt; <span class="title">Void</span>)?,</span></span><br><span class="line"><span class="class">                       <span class="title">success</span>: ((<span class="title">URLSessionDataTask</span>, <span class="title">Any</span>?) -&gt; <span class="title">Void</span>)?, <span class="title">failure</span>: ((<span class="title">URLSessionDataTask</span>?, <span class="title">Error</span>) -&gt; <span class="title">Void</span>)?) </span>&#123;</span><br><span class="line">        <span class="comment">// 记录当前请求开始时间</span></span><br><span class="line">        <span class="keyword">let</span> startTime = <span class="type">Date</span>().timestamp</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义通用成功回调</span></span><br><span class="line">        <span class="keyword">let</span> successCallback = &#123; (task: <span class="type">URLSessionDataTask</span>, result: <span class="type">Any?</span>) -&gt; () <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// 当前请求响应的时间间隔</span></span><br><span class="line">            <span class="keyword">let</span> responseTime = <span class="type">Date</span>().timestamp - startTime</span><br><span class="line">            <span class="comment">//如果这一次的请求响应时间小于上一次，则更新本地维护的时间</span></span><br><span class="line">            <span class="keyword">if</span> responseTime &lt;= minResponseTime &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> response = task.response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span> &#123;</span><br><span class="line">                    <span class="comment">// 网络响应头包含Date字段（世界时间）</span></span><br><span class="line">                    <span class="keyword">if</span> response.allHeaderFields[<span class="string">"Date"</span>] <span class="keyword">is</span> <span class="type">String</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> dateString = response.allHeaderFields[<span class="string">"Date"</span>]! <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> date = <span class="type">NSDate</span>(fromInternetDateTime: dateString, formatHint: <span class="type">DateFormatHintRFC822</span>) &#123;</span><br><span class="line">                            <span class="keyword">let</span> <span class="number">_</span> = <span class="type">TimeUtils</span>.calibrationTime(lastServerTime: <span class="type">Int</span>(date.timeIntervalSince1970))</span><br><span class="line">                            minResponseTime = responseTime</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            success?(task, result)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> httpMethod == .<span class="type">GET</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.sharedClient.<span class="keyword">get</span>(<span class="type">URLString</span>, parameters: parameters, headers: safeHeaders, progress: progress, success: successCallback, failure: failure)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> httpMethod == .<span class="type">POST</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.sharedClient.post(<span class="type">URLString</span>, parameters: parameters, headers: safeHeaders, progress: progress, success: successCallback, failure: failure)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning"><p>该方案下前提必须禁止AFN自带的缓存策略<code>client.requestSerializer.cachePolicy = .reloadIgnoringLocalCacheData</code>。不禁止会出现时间异常的现象，如项目中是使用AFN自带的缓存策略则需要更换项目中的缓存方案。</p></div><blockquote><p>该方案都仅到秒级，如需到毫秒级请做*1000处理</p><p>不足：连接服务器的过程是需要时间的，服务器收到请求时刻的时间与应用收到响应存在一定的时间差，导致误差的存在（误差=服务器发出响应-&gt;到本机收到响应这个时间）。</p><p>但是通过上面的AFN每次判断，可以使得误差逐渐降低</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/48ac0bb1392e" target="_blank" rel="noopener">https://www.jianshu.com/p/48ac0bb1392e</a></p><p><a href="https://www.jianshu.com/p/bb2cbfad3e77" target="_blank" rel="noopener">https://www.jianshu.com/p/bb2cbfad3e77</a></p><p><a href="https://www.jianshu.com/p/df41659b06a9" target="_blank" rel="noopener">https://www.jianshu.com/p/df41659b06a9</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近项目的编写中，接口需要提交精确到秒级的时间戳用作校验。但是仅靠&lt;code&gt;new Date().timeIntervalSince1970&lt;/code&gt;会面临着本地的时间与服务器时间不一致的问题。那么本文方案能让本地应用时间与服务器时间存在误差范围内保持同步，减少应用出错率。&lt;/p&gt;
    
    </summary>
    
      <category term="Ios" scheme="http://hackycy.github.io/categories/Ios/"/>
    
    
      <category term="Ios" scheme="http://hackycy.github.io/tags/Ios/"/>
    
  </entry>
  
  <entry>
    <title>IOS填坑之URL编码问题</title>
    <link href="http://hackycy.github.io/2020/05/08/IOS%E5%A1%AB%E5%9D%91%E4%B9%8BURL%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://hackycy.github.io/2020/05/08/IOS填坑之URL编码问题/</id>
    <published>2020-05-08T11:24:06.000Z</published>
    <updated>2020-07-23T08:37:08.938Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用WKWebview的时候，通常都离不开URL，一般的符合网络标准的URL没有什么问题，但是在公司开发的时候遇到了一些特殊URL的时候就踩到了URL编码的坑。</p><p>在1994年订制的RFC1738文档中，对字符串中的除了<code>- _ .</code>之外的所有非字母数字字符都替换成百分号(%)后跟两位十六进制数，十六进制数中字母必须为大写。</p><p>在2005年定义的RFC3986中，将针对<code>- _.~</code>四个字符之外的所有非字母数字字符进行百分号编码。当然 根据URL的类型不同，有也一部分预留字符不需要进行编码，例如查询的<code>URL</code>中可以包含<code>? /</code>字符，不需要转义。更详细文档的可以查看<a href="http://www.ietf.org/rfc/rfc3986.txt" target="_blank" rel="noopener">RFC 3986</a>。</p><a id="more"></a><h1 id="Swift-URL-Encode"><a href="#Swift-URL-Encode" class="headerlink" title="Swift URL Encode"></a>Swift URL Encode</h1><p><code>addingPercentEncoding(withAllowedCharacters:</code>是iOS7之后出现的新API用于<code>url encode</code>。</p><p>官方对该方法的解释：</p><blockquote><p>// Returns a new string made from the receiver by replacing all characters not in the allowedCharacters set with percent encoded characters. UTF-8 encoding is used to determine the correct percent encoded characters. Entire URL strings cannot be percent-encoded. This method is intended to percent-encode an URL component or subcomponent string, NOT the entire URL string. Any characters in allowedCharacters outside of the 7-bit ASCII range are ignored.  </p></blockquote><p>最后一句Any characters in allowedCharacters outside of the 7-bit ASCII range are ignored.，意思就是说，任何非7-bit ASCII字符搁到allowedCharacters里面也将被忽略，也就是<code>allowedCharacters</code>里面的字符跟7-bit ASCII字符不会被编码。</p><p>换句话说，上面方法在处理的时候会编码url的中的非7-bit ASCII字符，如这些【`#%^{}”[]|\&lt;&gt;】，如果需要忽略之，需要通过.allowedCharacters这个参数指定。</p><p>然而并不是，我们来看一下案例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url1 = <span class="string">"http://github.com#aaa?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]"</span></span><br><span class="line"><span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: <span class="type">CharacterSet</span>(charactersIn: <span class="string">"#%^&#123;&#125;\"[]|\\&lt;&gt;"</span>))!)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%68%74%74%70%3A%2F%2F%67%69%74%68%75%62%2E%63%6F%6D<span class="comment">#%61%61%61%3F%6E%61%6D%65%3D%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%26%6B%65%79%3D%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%#[]</span></span><br><span class="line">Program ended with <span class="built_in">exit</span> code: 0</span><br></pre></td></tr></table></figure><p>可以看到只有后面的%#[]没有被编码，其余都被编码了，<strong>不是我们之前所理解的“allowedCharacters里面的字符跟7-bit ASCII字符不会被编码”，而是只有allowedCharacters里的字符才不会被编码</strong></p><p>正确的方法：使用<code>inverted</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url1 = <span class="string">"http://github.com#aaa?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]"</span></span><br><span class="line"><span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: <span class="type">CharacterSet</span>(charactersIn: <span class="string">"#%^&#123;&#125;\"[]|\\&lt;&gt;"</span>).inverted)!)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> url1 = <span class="string">"http://github.com#aaa?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]"</span></span><br><span class="line"><span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: CharacterSet(charactersIn: <span class="string">"#%^&#123;&#125;\"[]|\\&lt;&gt;"</span>).inverted)!)</span><br></pre></td></tr></table></figure><p>可以看到，通过集合反转之后得到的结果才是我们想要的，但是此处的意思是反的，就是<strong>对集合进行inverted，表示集合内的字符和非7-bit ASCII字符是需要转码</strong>的，所以我们以后使用这个方法进行转码的时候要从反面进行转码，把想要进行转码的特殊字符写在集合里就好了，注意这里说的是想要转码的特殊字符（<strong>!*‘();:@&amp;=+$,/?%#[]</strong>），中文会被认为是非7-bit ASCII字符会自动转码的。</p><h2 id="CharacterSet"><a href="#CharacterSet" class="headerlink" title="CharacterSet"></a>CharacterSet</h2><p><code>CharacterSet</code>是一个结构体，<code>CharacterSet.urlHostAllowed</code>等预制类型包含了所有不需要被转码的字符，<strong>反过来说就是指明了需要被转码的字符</strong>。<code>CharacterSet</code>类中提供了一些常用的URL转码的类型:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CharacterSet</span>.urlHostAllowed: 被转义的字符有  <span class="string">"#%/&lt;&gt;?@\^`&#123;|&#125;</span></span><br><span class="line"><span class="string">CharacterSet.urlPathAllowed: 被转义的字符有  "</span>#%;&lt;&gt;?[\]^`&#123;|&#125;</span><br><span class="line"><span class="type">CharacterSet</span>.urlUserAllowed: 被转义的字符有   <span class="string">"#%/:&lt;&gt;?@[\]^`</span></span><br><span class="line"><span class="string">CharacterSet.urlQueryAllowed: 被转义的字符有  "</span>#%&lt;&gt;[\]^`&#123;|&#125;</span><br><span class="line"><span class="type">CharacterSet</span>.urlPasswordAllowed 被转义的字符有 <span class="string">"#%/:&lt;&gt;?@[\]^`&#123;|&#125;</span></span><br><span class="line"><span class="string">CharacterSet.urlFragmentAllowed 被转义的字符有 "</span>#%&lt;&gt;[\]^`&#123;|&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url1 = <span class="string">"http://github.com?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]"</span></span><br><span class="line"><span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://github.com?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*<span class="string">'();:@&amp;=+$,/?%25%23%5B%5D</span></span><br><span class="line"><span class="string">Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure><h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> encodeUrl1 = <span class="string">"http://github.com%23aaa?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*'();:@&amp;=+$,/?%25%23%5B%5D"</span></span><br><span class="line"><span class="built_in">print</span>(encodeUrl1.removingPercentEncoding!)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://github.com<span class="comment">#aaa?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]</span></span><br><span class="line">Program ended with <span class="built_in">exit</span> code: 0</span><br></pre></td></tr></table></figure><h1 id="URL带有-符号的问题"><a href="#URL带有-符号的问题" class="headerlink" title="URL带有#符号的问题"></a>URL带有#符号的问题</h1><p>#是url中的一个重要组成部分，是跟在url参数之后的的最后一部分，作为一个url的锚点，用于浏览器的定位。</p><p>但是在项目中使用的时候发现#号被转义掉了，前端那边就没有办法正常显示。所以需要其他特殊字符正常转义，除去#号。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>沿用预制类型，采用insert方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urlStr = <span class="string">"http://test.com/中文/main.html#/help"</span></span><br><span class="line"><span class="keyword">var</span> charSet = <span class="type">CharacterSet</span>.urlQueryAllowed</span><br><span class="line">charSet.insert(charactersIn: <span class="string">"#"</span>)</span><br><span class="line"><span class="keyword">let</span> encodingURL = urlStr.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!</span><br><span class="line"><span class="built_in">print</span>(encodingURL)</span><br></pre></td></tr></table></figure><p>这里采用了预制的，insert会反过来被删除掉</p><blockquote><p>至于insert的原因，可以查看一下以下代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">let</span> url1 = <span class="string">"http://github.com#aaa?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]"</span></span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">"-----------------未反转情况-------------------------"</span>)</span><br><span class="line">&gt; <span class="keyword">var</span> s1 = <span class="type">CharacterSet</span>(charactersIn: #<span class="string">"[]"</span>#)</span><br><span class="line">&gt; <span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: s1.inverted)!)</span><br><span class="line">&gt; s1.insert(charactersIn: <span class="string">"["</span>)</span><br><span class="line">&gt; <span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: s1.inverted)!)</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">"-----------------反转情况-------------------------"</span>)</span><br><span class="line">&gt; <span class="keyword">var</span> s2 = <span class="type">CharacterSet</span>(charactersIn: #<span class="string">"[]"</span>#).inverted</span><br><span class="line">&gt; <span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: s2)!)</span><br><span class="line">&gt; s2.insert(charactersIn: <span class="string">"["</span>)</span><br><span class="line">&gt; <span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: s2)!)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>输出结果，留意最后的[]符号是否被转义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; -----------------未反转情况-------------------------</span><br><span class="line">&gt; http://github.com<span class="comment">#aaa?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*'();:@&amp;=+$,/?%#%5B%5D</span></span><br><span class="line">&gt; http://github.com<span class="comment">#aaa?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*'();:@&amp;=+$,/?%#%5B%5D</span></span><br><span class="line">&gt; -----------------反转情况-------------------------</span><br><span class="line">&gt; http://github.com<span class="comment">#aaa?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*'();:@&amp;=+$,/?%#%5B%5D</span></span><br><span class="line">&gt; http://github.com<span class="comment">#aaa?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*'();:@&amp;=+$,/?%#[%5D</span></span><br><span class="line">&gt; Program ended with <span class="built_in">exit</span> code: 0</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>还未找到解释理由</p></blockquote><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>自定义</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urlStr = <span class="string">"http://test.com/中文/main.html#/help"</span></span><br><span class="line"><span class="keyword">let</span> encodingURL = urlStr.addingPercentEncoding(withAllowedCharacters: <span class="type">CharacterSet</span>(charactersIn: #<span class="string">""</span>%&lt;&gt;[\]^`&#123;|&#125;<span class="string">"#).inverted)!</span></span><br><span class="line"><span class="string">print(encodingURL)</span></span><br></pre></td></tr></table></figure><h1 id="Json的URL编码"><a href="#Json的URL编码" class="headerlink" title="Json的URL编码"></a>Json的URL编码</h1><p>我公司有的链接需要拼接上一大段的json，里面json还有复杂的&amp;等符号，预制的肯定不够用，只能采用自定义方法：</p><p>所以封装了方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlEncoding</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> toSearchword = (<span class="keyword">self</span> <span class="keyword">as</span> <span class="type">NSString</span>).addingPercentEncoding(withAllowedCharacters: <span class="type">CharacterSet</span>(charactersIn: #<span class="string">"?!@#$^&amp;%*+,:;='"</span>`&lt;&gt;()[]&#123;&#125;/\|<span class="string">"#).inverted)</span></span><br><span class="line"><span class="string">        return toSearchword as String? ?? "</span><span class="string">"</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>直接使用即可</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urlStr = <span class="string">"http://test.com/中文/main.html#/help"</span></span><br><span class="line"><span class="built_in">print</span>(urlStr.urlEncoding())</span><br></pre></td></tr></table></figure><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><h2 id="Swift-5-字符串转义字符处理"><a href="#Swift-5-字符串转义字符处理" class="headerlink" title="Swift 5 字符串转义字符处理"></a>Swift 5 字符串转义字符处理</h2><p>增加了 # 符号，使得写字符串更加简单。</p><p><strong>在字符串中包含 “ 时不必再加 \ </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//before</span><br><span class="line">let rain = &quot;The is\&quot;new\&quot;string&quot; </span><br><span class="line">//after</span><br><span class="line">let rain = #&quot;The is&quot;new&quot;string&quot;#</span><br></pre></td></tr></table></figure><p><strong>包含 \ 反斜杠也不需要再加转义符</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//before</span></span><br><span class="line"><span class="keyword">let</span> rain = <span class="string">"The is\\new string"</span> </span><br><span class="line"><span class="comment">//after</span></span><br><span class="line"><span class="keyword">let</span> rain = <span class="meta">#"The is \new string"#</span></span><br></pre></td></tr></table></figure><p><strong>由于反斜杠作为字符串中的字符，所以在插入值的时候需要在后面再加个 #</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//before</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span></span><br><span class="line"><span class="keyword">let</span> dontpanic = <span class="string">"myAge is \(age)"</span></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="keyword">let</span> answer = <span class="number">26</span></span><br><span class="line"><span class="keyword">let</span> dontpanic = <span class="meta">#"myAge is \#(age)"#</span></span><br></pre></td></tr></table></figure><p><strong>当字符串包含 # 时， 前后应用 ## 包裹字符串</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">str</span> = ##<span class="string">"this is "</span>a<span class="string">"#good ideal"</span>##</span><br></pre></td></tr></table></figure><p><strong>用 #””” 开头 “””#结尾 来表示多行字符串</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> multiline = <span class="comment">#"""</span></span><br><span class="line">The answer to life,</span><br><span class="line">the universe,</span><br><span class="line">and everything is \<span class="comment">#(answer).</span></span><br><span class="line"><span class="string">""</span><span class="string">"#</span></span><br></pre></td></tr></table></figure><p><strong>由于不用反斜杠转义 使得正则表达式更加简洁明了</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//before</span></span><br><span class="line"><span class="keyword">let</span> regex1 = <span class="string">"\\\\[A-Z]+[A-Za-z]+\\.[a-z]+"</span></span><br><span class="line"><span class="comment">//after</span></span><br><span class="line"><span class="keyword">let</span> regex2 = <span class="meta">#"\\[A-Z]+[A-Za-z]+\.[a-z]+"#</span></span><br></pre></td></tr></table></figure><h2 id="Objective-C-url-encode"><a href="#Objective-C-url-encode" class="headerlink" title="Objective-C url encode"></a>Objective-C url encode</h2><p>API调用都是一样的,不过网上流传的比较多的是用的<code>C API</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSString *ciphertext = @&quot;saf#*&amp;&quot;;        </span><br><span class="line">NSCharacterSet *set = [[NSCharacterSet characterSetWithCharactersInString:@&quot;!*&apos;();:@&amp;=+$,/?%#[]&quot;] invertedSet];</span><br><span class="line">NSString *resultString = [ciphertext stringByAddingPercentEncodingWithAllowedCharacters: set];</span><br></pre></td></tr></table></figure><p>C API</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NSString *ciphertext = @<span class="string">"saf#*&amp;"</span>;</span><br><span class="line">NSString *encodedStr = (NSString *)CFBridgingRelease(CFURLCreateStringByAddingPercentEscapes</span><br><span class="line">                                                     (kCFAllocatorDefault,</span><br><span class="line">                                                      (CFStringRef)ciphertext,</span><br><span class="line">                                                      <span class="literal">NULL</span>,</span><br><span class="line">                                                      CFSTR(<span class="string">"!*'();:@&amp;=+$,/?%#[]"</span>),</span><br><span class="line">                                                      kCFStringEncodingUTF8));</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/c135127a3df2" target="_blank" rel="noopener">https://www.jianshu.com/p/c135127a3df2</a></p><p><a href="https://www.jianshu.com/p/74f7c5bbca50" target="_blank" rel="noopener">https://www.jianshu.com/p/74f7c5bbca50</a></p><p><a href="https://www.hangge.com/blog/cache/detail_1583.html" target="_blank" rel="noopener">https://www.hangge.com/blog/cache/detail_1583.html</a></p><p><a href="https://www.cnblogs.com/luoxiaofu/p/7110011.html" target="_blank" rel="noopener">https://www.cnblogs.com/luoxiaofu/p/7110011.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用WKWebview的时候，通常都离不开URL，一般的符合网络标准的URL没有什么问题，但是在公司开发的时候遇到了一些特殊URL的时候就踩到了URL编码的坑。&lt;/p&gt;
&lt;p&gt;在1994年订制的RFC1738文档中，对字符串中的除了&lt;code&gt;- _ .&lt;/code&gt;之外的所有非字母数字字符都替换成百分号(%)后跟两位十六进制数，十六进制数中字母必须为大写。&lt;/p&gt;
&lt;p&gt;在2005年定义的RFC3986中，将针对&lt;code&gt;- _.~&lt;/code&gt;四个字符之外的所有非字母数字字符进行百分号编码。当然 根据URL的类型不同，有也一部分预留字符不需要进行编码，例如查询的&lt;code&gt;URL&lt;/code&gt;中可以包含&lt;code&gt;? /&lt;/code&gt;字符，不需要转义。更详细文档的可以查看&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RFC 3986&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Ios" scheme="http://hackycy.github.io/categories/Ios/"/>
    
    
      <category term="Ios" scheme="http://hackycy.github.io/tags/Ios/"/>
    
  </entry>
  
  <entry>
    <title>记一次 Vivo Y91 调试APK的坑</title>
    <link href="http://hackycy.github.io/2020/04/14/%E8%AE%B0%E4%B8%80%E6%AC%A1-Vivo-Y91-%E8%B0%83%E8%AF%95APK%E7%9A%84%E5%9D%91/"/>
    <id>http://hackycy.github.io/2020/04/14/记一次-Vivo-Y91-调试APK的坑/</id>
    <published>2020-04-14T14:47:46.000Z</published>
    <updated>2020-07-23T08:37:09.046Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>在项目工作测试途中，发现Vivo Y91的机型却一直出现debug安装运行问题</p><a id="more"></a><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>1.设置Android Studio，关闭<code>Instant Run</code>。<code>File</code>-&gt;<code>Settings</code>-&gt;<code>BUild,Execution…</code>-&gt;<code>Instant Run</code> , 关闭勾选<code>Enable Instant Run</code><br>2.在你的gradle.properties文件添加一句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.injected.testOnly = false</span><br></pre></td></tr></table></figure><h2 id="其他解决方法（未测试）"><a href="#其他解决方法（未测试）" class="headerlink" title="其他解决方法（未测试）"></a>其他解决方法（未测试）</h2><p>根据每个手机不同，未知也不太一样，比如 vivo x21 是在：设置 -&gt; 更多设置 -&gt; 未知xx管理（记不太清楚了）。</p><p>一加3T前段时间更新了 Android 8.0 ，它的位置在： 设置 -&gt; 应用程序 -&gt; 特殊访问权限 -&gt; 安装未知应用。如下图，打开对应的软件即可。</p><h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><p>关于开发过程中是否开启 Instant Run，我个人建议还是关闭它，我在开发过程中一直都是关闭着的，因为之前开启它，出现了一些莫名其妙的问题，目前我们的神器 Android Studio 已经优化的很好了，即使重新打包，也浪费不了多少时间。</p><p>关于<code>android.injected.testOnly = false</code>的设置，那是因为我们跑的 run apk都是 debug 版本，也就是测试版本，而 vivo 的一些就不支持这个测试apk（网上有人这样说，经过验证，不假，在找答案的过程中，看到过很多吐槽：vivo x21、Y91不适合做测试机，因为它只认正式包）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h1&gt;&lt;p&gt;在项目工作测试途中，发现Vivo Y91的机型却一直出现debug安装运行问题&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android客户端与服务端时间同步方案</title>
    <link href="http://hackycy.github.io/2020/03/20/Android%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/"/>
    <id>http://hackycy.github.io/2020/03/20/Android客户端与服务端时间同步方案/</id>
    <published>2020-03-20T11:50:41.000Z</published>
    <updated>2020-07-23T08:37:08.518Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近项目的编写中，接口需要提交精确到秒级的时间戳用作校验。但是仅仅使用<code>System.currentTimeMillis()</code>会面临着本地的时间与服务器时间不一致的问题。那么本文方案能让本地应用时间与服务器时间存在误差范围内保持同步，减少应用出错率。</p><a id="more"></a><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><ul><li><code>SystemClock.elapsedRealtime()</code> ：手机系统开机时间（包含睡眠时间），用户无法在设置里面修改。</li><li>在必要的时刻获取一下服务器时间，然后记录这个时刻的手机开机时间（elapsedRealtime）</li><li>后续时间获取：<strong>现在服务器时间 = 以前服务器时间 + 现在手机开机时间 - 以前服务器时间的获取时刻的手机开机时间</strong></li><li>利用OkHttp的Interceptor自动同步时间</li></ul><h1 id="TimeUtils编写"><a href="#TimeUtils编写" class="headerlink" title="TimeUtils编写"></a>TimeUtils编写</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.SystemClock;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.blankj.utilcode.util.LogUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.Headers;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Interceptor;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Response;</span><br><span class="line"><span class="keyword">import</span> okhttp3.internal.http.HttpDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以前服务器时间 - 以前服务器时间的获取时刻的系统启动时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> diffTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否是服务器时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isServerTime = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getServerTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isServerTime) &#123;</span><br><span class="line">            <span class="keyword">return</span> System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (diffTime + SystemClock.elapsedRealtime()) / <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">calibrationTime</span><span class="params">(<span class="keyword">long</span> lastServerTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录时间差</span></span><br><span class="line">        diffTime = lastServerTime - SystemClock.elapsedRealtime();</span><br><span class="line">        isServerTime = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> lastServerTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 利用OkHttp的Interceptor自动同步时间</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeSyncInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> minResponseTime = Long.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            Request request = chain.request();</span><br><span class="line">            <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">            Response proceed = chain.proceed(request);</span><br><span class="line">            <span class="keyword">long</span> lastTime = System.nanoTime() - startTime;</span><br><span class="line"></span><br><span class="line">            Headers headers = proceed.headers();</span><br><span class="line">            calibration(lastTime, headers);</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calibration</span><span class="params">(<span class="keyword">long</span> responseTime, Headers headers)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (headers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果这一次的请求响应时间小于上一次，则更新本地维护的时间</span></span><br><span class="line">            <span class="keyword">if</span> (responseTime &gt;= minResponseTime) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 网络响应头包含Date字段（世界时间）</span></span><br><span class="line">          <span class="comment">// 利用Interceptor记录每次请求响应时间，如果本次网络操作的时间小于上一次网络操作的时间，则获取Date字段，转换时区后更新本地TimeUtils。</span></span><br><span class="line">            String standardTime = headers.get(<span class="string">"Date"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(standardTime)) &#123;</span><br><span class="line"></span><br><span class="line">                Date parse = HttpDate.parse(standardTime);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (parse != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 客户端请求过程一般大于比收到响应时间耗时，所以没有简单的除2 加上去，而是直接用该时间</span></span><br><span class="line">                    TimeUtils.calibrationTime(parse.getTime());</span><br><span class="line">                    minResponseTime = responseTime;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原理就是通过HTTP Header来获取服务器时间（注：时间格式以<a href="https://link.jianshu.com/?t=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc7231%23section-7.1.1.1" target="_blank" rel="noopener">RFC-7231</a>中定义的”HTTP日期”格式来发送）</p><p>在OkHttpClient增加该Utils下的拦截器即可。</p><p>由于项目中只需要精确到秒，而获取的都是精确到毫秒级别，所以TimeUtils下获取的时候做了除以1000处理。可能会存在点误差吧。但是在项目中误差范围不大，还在可接受范围内。</p><p>不足：连接服务器的过程是需要时间的，服务器收到请求时刻的时间与应用收到响应存在一定的时间差，导致误差的存在（误差=服务器发出响应-&gt;到本机收到响应这个时间）。</p><p>但是通过上面的TimeSyncInterceptor每次判断，可以使得误差逐渐降低</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/qinci/article/details/70666631" target="_blank" rel="noopener">https://blog.csdn.net/qinci/article/details/70666631</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近项目的编写中，接口需要提交精确到秒级的时间戳用作校验。但是仅仅使用&lt;code&gt;System.currentTimeMillis()&lt;/code&gt;会面临着本地的时间与服务器时间不一致的问题。那么本文方案能让本地应用时间与服务器时间存在误差范围内保持同步，减少应用出错率。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android TextView富文本之Html标签</title>
    <link href="http://hackycy.github.io/2020/03/19/Android-TextView%E5%AF%8C%E6%96%87%E6%9C%AC%E4%B9%8BHtml%E6%A0%87%E7%AD%BE/"/>
    <id>http://hackycy.github.io/2020/03/19/Android-TextView富文本之Html标签/</id>
    <published>2020-03-19T11:59:58.000Z</published>
    <updated>2020-07-23T08:37:08.446Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>TextView作为一个我们经常使用到的控件，但是在写一些UI的时候会遇到一些特别的情况，来看一下示例图：</p><a id="more"></a><p><img src="anli.png" alt></p><p>券的价格是需要突出显示的，还有原价也需要显示一个删除线。</p><h1 id="TextView的多样化显示"><a href="#TextView的多样化显示" class="headerlink" title="TextView的多样化显示"></a>TextView的多样化显示</h1><p>如果是显示不同样的大小文本字体颜色可以直接使用SpannableString实现。但是这里使用HTML标签来实现效果。</p><p>例如图上的券后文本，可以使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mTextView.setText(Html.fromHtml(<span class="string">"&lt;small&gt;券后仅&lt;/small&gt;&lt;big&gt; 20 &lt;/big&gt;&lt;small&gt;元&lt;/small&gt;"</span>));</span><br></pre></td></tr></table></figure><p>如果在strings.xml中定义时候需要注意，需要转义HTML标签，不然的话 经过Android处理后 所有的HTML标签都给过滤掉了。需要把所有的“&lt;”用“&lt;”替换，例如： </p><p><code>&lt;string name=&quot;htmlText&quot;&gt;&amp;lt;strong&gt;粗体&amp;lt;/strong&gt;&lt;/string&gt;</code></p><p>如果文本内容比较长， 则转义起来比较麻烦，并且阅读也不太方便，这种情况下可以使用XML的CDATA标记， 如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"discount_price2"</span>&gt;</span>&lt;![CDATA[&lt;small&gt;券后仅&lt;/small&gt;&lt;big&gt; %1$s &lt;/big&gt;&lt;small&gt;元&lt;/small&gt;]]&gt;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>strings.xml中节点是支持占位符的，如下所示：</p><p><code>&lt;string name=&quot;data&quot;&gt;整数型:%1$d，浮点型：%2$.2f，字符串:%3$s&lt;/string&gt;</code></p><p>其中%后面是占位符的位置，从1开始，</p><p><strong>$ 后面是填充数据的类型</strong></p><ul><li>$d：表示整数型；</li><li>$f ：表示浮点型，其中f前面的.2表示小数的位数</li><li>$s：表示字符串</li></ul><p>然后使用<code>Context.getResources().getString(data, ...format)</code>即可</p></blockquote><p>下面是一些常用的HTML标签。</p><table><thead><tr><th style="text-align:left">Tags</th><th style="text-align:left">Format</th></tr></thead><tbody><tr><td style="text-align:left">b, strong</td><td style="text-align:left">Bold</td></tr><tr><td style="text-align:left">i, em, cite, dfn</td><td style="text-align:left">Italics</td></tr><tr><td style="text-align:left">u</td><td style="text-align:left">Underline</td></tr><tr><td style="text-align:left">sub</td><td style="text-align:left">Subtext</td></tr><tr><td style="text-align:left">sup</td><td style="text-align:left">Supertext</td></tr><tr><td style="text-align:left">big</td><td style="text-align:left">Big</td></tr><tr><td style="text-align:left">small</td><td style="text-align:left">Small</td></tr><tr><td style="text-align:left">tt</td><td style="text-align:left">Monospace</td></tr><tr><td style="text-align:left">h1 … h6</td><td style="text-align:left">Headlines</td></tr><tr><td style="text-align:left">img</td><td style="text-align:left">Image</td></tr><tr><td style="text-align:left">font</td><td style="text-align:left">Font face and color</td></tr><tr><td style="text-align:left">blockquote</td><td style="text-align:left">For longer quotes</td></tr><tr><td style="text-align:left">a</td><td style="text-align:left">Link</td></tr><tr><td style="text-align:left">div, p</td><td style="text-align:left">Paragraph</td></tr><tr><td style="text-align:left">br</td><td style="text-align:left">Linefeed</td></tr></tbody></table><p>中文版：</p><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;br&gt;</code></td><td>插入一个换行符，标签是空标签</td></tr><tr><td><code>&lt;p&gt;</code></td><td>定义段落，标签会自动在其前后各添加一个空行</td></tr><tr><td><code>&lt;h1&gt;</code></td><td>h1标题</td></tr><tr><td><code>&lt;h2&gt;</code></td><td>h2标题</td></tr><tr><td><code>&lt;h3&gt;</code></td><td>h3标题</td></tr><tr><td><code>&lt;h4&gt;</code></td><td>h4标题</td></tr><tr><td><code>&lt;h5&gt;</code></td><td>h5标题</td></tr><tr><td><code>&lt;h6&gt;</code></td><td>h6标题</td></tr><tr><td><code>&lt;div&gt;</code></td><td>文档分节</td></tr><tr><td><code>&lt;strong&gt;</code></td><td>把文本定义为语气更强的强调的内容。TextView中表现为文本加粗</td></tr><tr><td><code>&lt;b&gt;</code></td><td>文本加粗</td></tr><tr><td><code>&lt;em&gt;</code></td><td>把文本定义为强调的内容。TextView中表现为斜体文本效果。</td></tr><tr><td><code>&lt;cite&gt;</code></td><td>定义引用，TextView中表现为斜体文本效果</td></tr><tr><td><code>&lt;dfn&gt;</code></td><td>标记那些对特殊术语或短语的定义。TextView中表现为斜体文本效果。</td></tr><tr><td><code>&lt;i&gt;</code></td><td>显示斜体文本效果</td></tr><tr><td><code>&lt;big&gt;</code></td><td>呈现大号字体效果</td></tr><tr><td><code>&lt;small&gt;</code></td><td>呈现小号字体效果</td></tr><tr><td><code>&lt;strike&gt;</code></td><td>定义删除线样式的文字</td></tr><tr><td><code>&lt;font size=&quot;...&quot; color=&quot;...&quot; face=&quot;...&quot;&gt;</code></td><td>规定文本的字体、字体尺寸、字体颜色   color：文本颜色；size：文本大小；face：文本字体</td></tr><tr><td><code>&lt;blockquote&gt;</code></td><td>将<code>&lt;blockquote&gt;</code> 与 <code>&lt;/blockquote&gt;</code>之间的文本从常规文本中分离出来,通常在左、右两边进行缩进，有时使用斜体</td></tr><tr><td><code>&lt;tt&gt;</code></td><td>呈现类似打字机或者等宽的文本效果</td></tr><tr><td><code>&lt;a&gt;</code></td><td>定义超链接。最重要的属性是 href 属性，它指示链接的目标。 href：指示链接的目标</td></tr><tr><td><code>&lt;u&gt;</code></td><td>为文本添加下划线</td></tr><tr><td><code>&lt;sup&gt;</code></td><td>定义上标文本</td></tr><tr><td><code>&lt;sub&gt;</code></td><td>定义下标文本</td></tr><tr><td><code>&lt;img src=&quot;...&quot;&gt;</code></td><td>向网页中嵌入一幅图像。<code>&lt;img&gt;</code>标签并不会在网页中插入图像，而是从网页上链接图像。<code>&lt;img&gt;</code> 标签创建的是被引用图像的占位空间。   src：图像的url；alt：图像的替代文本</td></tr></tbody></table><h1 id="strike标签使用注意"><a href="#strike标签使用注意" class="headerlink" title="strike标签使用注意"></a>strike标签使用注意</h1><p>在使用<code>&lt;strike&gt;</code>时，6.0系统可能会不显示。则需要在代码中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加删除线      </span></span><br><span class="line">tv.getPaint().setFlags(Paint.STRIKE_THRU_TEXT_FLAG);  </span><br><span class="line"><span class="comment">//在代码中设置加粗            </span></span><br><span class="line">tv.getPaint().setFlags(Paint.FAKE_BOLD_TEXT_FLAG);  </span><br><span class="line"><span class="comment">//添加下划线        </span></span><br><span class="line">tv.getPaint().setFlags(Paint.UNDERLINE_TEXT_FLAG);</span><br></pre></td></tr></table></figure><p>要什么效果可以自己在代码中设置，选择不同的 Flags 就行了。</p><h1 id="a标签使用注意"><a href="#a标签使用注意" class="headerlink" title="a标签使用注意"></a>a标签使用注意</h1><p>使用a标签后设置了href属性后，不做任何设置是无法进行点击跳转的，需要TextView解析设置一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tv.setText(Html.fromHtml(url));<span class="comment">//解析html</span></span><br><span class="line">tv.setMovementMethod(LinkMovementMethod.getInstance());<span class="comment">//设置可点击</span></span><br></pre></td></tr></table></figure><p>或着xml中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:autoLink="web"</span><br></pre></td></tr></table></figure><p>这样默认是用浏览器打开a标签里面的链接。</p><p><strong>但是如果要获取到a标签的点击事件和链接的话，那么就要换一个方法：</strong></p><blockquote><p>其他方法基本都要涉及到SpannableString的设置；或是自定义UrlSpan，重写它的onClick方法；有些还要遍历文本寻找以http开头的字符串。但是想要找一个比较简单些的方法，所以用了一下方法实现</p></blockquote><p>而该方法使用参考了LinkMovementMethod来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.text.Layout;</span><br><span class="line"><span class="keyword">import</span> android.text.Selection;</span><br><span class="line"><span class="keyword">import</span> android.text.Spannable;</span><br><span class="line"><span class="keyword">import</span> android.text.method.LinkMovementMethod;</span><br><span class="line"><span class="keyword">import</span> android.text.method.MovementMethod;</span><br><span class="line"><span class="keyword">import</span> android.text.style.URLSpan;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tv.xianqi.test190629.view.activity.WebViewActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLinkMethod</span> <span class="keyword">extends</span> <span class="title">LinkMovementMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WebLinkMethod instance;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WebLinkMethod</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MovementMethod <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> WebLinkMethod(context);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(TextView widget, Spannable buffer, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> action = event.getAction();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP ||</span><br><span class="line">                action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">            <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">            x -= widget.getTotalPaddingLeft();</span><br><span class="line">            y -= widget.getTotalPaddingTop();</span><br><span class="line"></span><br><span class="line">            x += widget.getScrollX();</span><br><span class="line">            y += widget.getScrollY();</span><br><span class="line"></span><br><span class="line">            Layout layout = widget.getLayout();</span><br><span class="line">            <span class="keyword">int</span> line = layout.getLineForVertical(y);</span><br><span class="line">            <span class="keyword">int</span> off = layout.getOffsetForHorizontal(line, x);</span><br><span class="line"><span class="comment">//          ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);</span></span><br><span class="line">            URLSpan[] link = buffer.getSpans(off, off, URLSpan<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (link.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</span><br><span class="line"><span class="comment">//                  link[0].onClick(widget);</span></span><br><span class="line"><span class="comment">//                  这里改为我们需要做的动作</span></span><br><span class="line">                    WebViewActivity.startWebViewActivity(context, link[<span class="number">0</span>].getURL());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">                    Selection.setSelection(buffer,</span><br><span class="line">                            buffer.getSpanStart(link[<span class="number">0</span>]),</span><br><span class="line">                            buffer.getSpanEnd(link[<span class="number">0</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Selection.removeSelection(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(widget, buffer, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时则改用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textView.setMovementMethodCompat(WebLinkMethod.getInstance(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure><p>由于页面跳转我们需要用到原页面的上下文，于是修改了构造函数，加入了Context；</p><p>URLSpan是ClickableSpan的子类，实现了getURL()的方法，所以这里要换成它我们才能取到链接地址，link[0]就是我们点击到的超链接字符串，通过link[0].getURL()我们可以获得它的链接地址。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/github_37847975/article/details/75425633" target="_blank" rel="noopener">https://blog.csdn.net/github_37847975/article/details/75425633</a></p><p><a href="https://blog.csdn.net/bhadx520/article/details/47433203?depth_1-utm_source=distribute.pc_relevant_right.none-task&amp;utm_source=distribute.pc_relevant_right.none-task" target="_blank" rel="noopener">https://blog.csdn.net/bhadx520/article/details/47433203?depth_1-utm_source=distribute.pc_relevant_right.none-task&amp;utm_source=distribute.pc_relevant_right.none-task</a></p><p><a href="https://blog.csdn.net/ganggang1st/article/details/6804086" target="_blank" rel="noopener">https://blog.csdn.net/ganggang1st/article/details/6804086</a></p><p><a href="https://blog.csdn.net/yulyu/article/details/52244925" target="_blank" rel="noopener">https://blog.csdn.net/yulyu/article/details/52244925</a></p><p><a href="https://www.jianshu.com/p/c4e1aacb9685" target="_blank" rel="noopener">https://www.jianshu.com/p/c4e1aacb9685</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;TextView作为一个我们经常使用到的控件，但是在写一些UI的时候会遇到一些特别的情况，来看一下示例图：&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>解决Android Studio——Received close_notify during handshake</title>
    <link href="http://hackycy.github.io/2020/02/18/%E8%A7%A3%E5%86%B3Android-Studio%E2%80%94%E2%80%94Received-close-notify-during-handshake/"/>
    <id>http://hackycy.github.io/2020/02/18/解决Android-Studio——Received-close-notify-during-handshake/</id>
    <published>2020-02-18T12:24:13.000Z</published>
    <updated>2020-07-23T08:37:09.046Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>问题ERROR ： Received close_notify during handshake</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring root project &apos;NotificationDemo&apos;.</span><br><span class="line">&gt; Could not resolve all artifacts for configuration &apos;:classpath&apos;.</span><br><span class="line">   &gt; Could not download guava.jar (com.google.guava:guava:23.0)</span><br><span class="line">      &gt; Could not get resource &apos;https://jcenter.bintray.com/com/google/guava/guava/23.0/guava-23.0.jar&apos;.</span><br><span class="line">         &gt; Could not GET &apos;https://jcenter.bintray.com/com/google/guava/guava/23.0/guava-23.0.jar&apos;.</span><br><span class="line">            &gt; Received close_notify during handshake</span><br><span class="line">   &gt; Could not download kotlin-reflect.jar (org.jetbrains.kotlin:kotlin-reflect:1.2.0)</span><br><span class="line">      &gt; Could not get resource &apos;https://jcenter.bintray.com/org/jetbrains/kotlin/kotlin-reflect/1.2.0/kotlin-reflect-1.2.0.jar&apos;.</span><br><span class="line">         &gt; Could not GET &apos;https://jcenter.bintray.com/org/jetbrains/kotlin/kotlin-reflect/1.2.0/kotlin-reflect-1.2.0.jar&apos;.</span><br><span class="line">            &gt; Received close_notify during handshake</span><br></pre></td></tr></table></figure><a id="more"></a><p>可能是Jcenter一直连接超时了吧，请求不了，所以查了一下资料，暂时使用国内源即可。</p><blockquote><p>有翻墙应该不会出现该问题，但是最近蓝灯好像又连不上了，真是麻鬼烦的玩意。</p></blockquote><p><strong>解决方法</strong></p><p>在项目的 Gradle 文件里，配置国内源（将 <code>Jcenter()</code>注掉或者删掉，替换成下图两行<code>maven</code>配置）</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maven&#123;url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span>&#125;</span><br><span class="line">maven&#123;url <span class="string">"https://jitpack.io"</span>&#125;</span><br></pre></td></tr></table></figure><p>重新 <code>Sync</code> 或者 <code>Rebuild</code>即可</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/w13576267399/article/details/82019359" target="_blank" rel="noopener">https://blog.csdn.net/w13576267399/article/details/82019359</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;问题ERROR ： Received close_notify during handshake&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* What went wrong:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A problem occurred configuring root project &amp;apos;NotificationDemo&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; Could not resolve all artifacts for configuration &amp;apos;:classpath&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;gt; Could not download guava.jar (com.google.guava:guava:23.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;gt; Could not get resource &amp;apos;https://jcenter.bintray.com/com/google/guava/guava/23.0/guava-23.0.jar&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;gt; Could not GET &amp;apos;https://jcenter.bintray.com/com/google/guava/guava/23.0/guava-23.0.jar&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;gt; Received close_notify during handshake&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;gt; Could not download kotlin-reflect.jar (org.jetbrains.kotlin:kotlin-reflect:1.2.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;gt; Could not get resource &amp;apos;https://jcenter.bintray.com/org/jetbrains/kotlin/kotlin-reflect/1.2.0/kotlin-reflect-1.2.0.jar&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;gt; Could not GET &amp;apos;https://jcenter.bintray.com/org/jetbrains/kotlin/kotlin-reflect/1.2.0/kotlin-reflect-1.2.0.jar&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;gt; Received close_notify during handshake&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://hackycy.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>重学Android之Notification</title>
    <link href="http://hackycy.github.io/2020/02/11/%E9%87%8D%E5%AD%A6Android%E4%B9%8BNotification/"/>
    <id>http://hackycy.github.io/2020/02/11/重学Android之Notification/</id>
    <published>2020-02-11T15:48:37.000Z</published>
    <updated>2020-07-23T08:37:09.046Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是通知"><a href="#什么是通知" class="headerlink" title="什么是通知"></a>什么是通知</h1><p>通知是一个可以在应用程序正常的用户界面之外显示给用户的消息。<br>通知发出时，它首先出现在状态栏的通知区域中，用户打开通知抽屉可查看通知详情。通知区域和通知抽屉都是用户可以随时查看的系统控制区域。</p><a id="more"></a><p>各种通知的展现形式如图：</p><p><img src="notificationshow.png" alt></p><h1 id="通知的基础用法"><a href="#通知的基础用法" class="headerlink" title="通知的基础用法"></a>通知的基础用法</h1><h2 id="通知创建方式区别"><a href="#通知创建方式区别" class="headerlink" title="通知创建方式区别"></a>通知创建方式区别</h2><p>随着Android系统不断升级，Notification的创建方式也随之变化，主要变化如下:</p><p><strong>Android 3.0之前</strong></p><p>Android 3.0 (API level 11)之前，使用<code>new Notification()</code>方式创建通知:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager mNotifyMgr = </span><br><span class="line">      (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">PendingIntent contentIntent = PendingIntent.getActivity(</span><br><span class="line">      <span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ResultActivity<span class="class">.<span class="keyword">class</span>), 0)</span>;</span><br><span class="line"></span><br><span class="line">Notification notification = <span class="keyword">new</span> Notification(icon, tickerText, when);</span><br><span class="line">notification.setLatestEventInfo(<span class="keyword">this</span>, title, content, contentIntent);</span><br><span class="line"></span><br><span class="line">mNotifyMgr.notify(NOTIFICATIONS_ID, notification);</span><br></pre></td></tr></table></figure><p><strong>Android 3.0 (API level 11)及更高版本</strong></p><p>Android 3.0开始弃用<code>new Notification()</code>方式，改用<code>Notification.Builder()</code>来创建通知:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager mNotifyMgr = </span><br><span class="line">      (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">PendingIntent contentIntent = PendingIntent.getActivity(</span><br><span class="line">      <span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ResultActivity<span class="class">.<span class="keyword">class</span>), 0)</span>;</span><br><span class="line"></span><br><span class="line">Notification notification = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>)</span><br><span class="line">            .setSmallIcon(R.drawable.notification_icon)</span><br><span class="line">            .setContentTitle(<span class="string">"My notification"</span>)</span><br><span class="line">            .setContentText(<span class="string">"Hello World!"</span>)</span><br><span class="line">            .setContentIntent(contentIntent)</span><br><span class="line">            .build();<span class="comment">// getNotification()</span></span><br><span class="line"></span><br><span class="line">mNotifyMgr.notify(NOTIFICATIONS_ID, notification);</span><br></pre></td></tr></table></figure><blockquote><p>这里需要注意: <code>build()</code> 是Androdi 4.1(API level 16)加入的，用以替代<code>getNotification()</code>。API level 16开始弃用<code>getNotification()</code></p></blockquote><p><strong>兼容Android 3.0之前的版本</strong></p><p>为了兼容<code>API level 11</code>之前的版本，<code>v4 Support Library</code>中提供了<br> <code>NotificationCompat.Builder()</code>这个替代方法。它与<code>Notification.Builder()</code>类似，二者没有太大区别。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager mNotifyMgr = </span><br><span class="line">      (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">PendingIntent contentIntent = PendingIntent.getActivity(</span><br><span class="line">      <span class="keyword">this</span>, <span class="number">0</span>, new Intent(<span class="keyword">this</span>, ResultActivity<span class="class">.<span class="keyword">class</span>), <span class="type">0);</span></span></span><br><span class="line"></span><br><span class="line">NotificationCompat.Builder mBuilder = </span><br><span class="line">      new NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">            .setSmallIcon(R.drawable.notification_icon)</span><br><span class="line">            .setContentTitle(<span class="string">"My notification"</span>)</span><br><span class="line">            .setContentText(<span class="string">"Hello World!"</span>)</span><br><span class="line">            .setContentIntent(contentIntent);</span><br><span class="line"></span><br><span class="line">mNotifyMgr.notify(NOTIFICATIONS_ID, mBuilder.build());</span><br></pre></td></tr></table></figure><blockquote><p><strong>注：除特别说明外，本文将根据 <code>NotificationCompat.Builder()</code> 展开解析，<br><code>Notification.Builder()</code>类似。</strong></p></blockquote><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="通知的必要属性"><a href="#通知的必要属性" class="headerlink" title="通知的必要属性"></a>通知的必要属性</h3><p>一个通知必须包含以下三项属性:</p><ul><li>小图标，对应 setSmallIcon()</li><li>通知标题，对应 setContentTitle()</li><li>详细信息，对应 setContentText()</li></ul><p>其他属性均为可选项，更多属性方法请参考<a href="https://link.jianshu.com?t=http://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html" target="_blank" rel="noopener">NotificationCompat.Builder</a>。</p><p>尽管其他都是可选的，但一般都会为通知添加至少一个动作(Action)，这个动作可以是跳转到Activity、启动一个Service或发送一个Broadcas等。 通过以下方式为通知添加动作:</p><ul><li>使用PendingIntent</li><li>通过大视图通知的 <code>Action Button</code>，仅支持Android 4.1 (API level 16)及更高版本</li></ul><h3 id="创建一个通知"><a href="#创建一个通知" class="headerlink" title="创建一个通知"></a>创建一个通知</h3><p>1、实例化一个NotificationCompat.Builder对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NotificationCompat.Builder builderNormal = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">                        .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                        .setContentTitle(<span class="string">"普通的通知标题"</span>)</span><br><span class="line">                        .setContentText(<span class="string">"普通的通知内容"</span>);</span><br></pre></td></tr></table></figure><p>NotificationCompat.Builder自动设置的默认值:</p><ul><li><strong>priority:</strong> PRIORITY_DEFAULT</li><li><strong>when: </strong>System.currentTimeMillis()</li><li><strong>audio stream: </strong>STREAM_DEFAULT</li></ul><p>2、定义并设置一个通知动作(Action)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent secIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">PendingIntent secPendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>,</span><br><span class="line">        secIntent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">builder.setContentIntent(secPendingIntent);</span><br></pre></td></tr></table></figure><p>PendingIntent 是一种特殊的 Intent ，字面意思可以解释为延迟的 Intent ，用于在某个事件结束后执行特定的 Action 。从上面带 Action 的通知也能验证这一点，当用户点击通知时，才会执行。<br>PendingIntent 是 Android 系统管理并持有的用于描述和获取原始数据的对象的标志(引用)。也就是说，<strong>即便创建该PendingIntent对象的进程被杀死了，这个PendingItent对象在其他进程中还是可用的</strong>。<br>日常使用中的短信、闹钟等都用到了 PendingIntent。</p><p>PendingIntent 主要可以通过以下三种方式获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取一个用于启动 Activity 的 PendingIntent 对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PendingIntent <span class="title">getActivity</span><span class="params">(Context context, <span class="keyword">int</span> requestCode, Intent intent, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个用于启动 Service 的 PendingIntent 对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PendingIntent <span class="title">getService</span><span class="params">(Context context, <span class="keyword">int</span> requestCode, Intent intent, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个用于向 BroadcastReceiver 广播的 PendingIntent 对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PendingIntent <span class="title">getBroadcast</span><span class="params">(Context context, <span class="keyword">int</span> requestCode, Intent intent, <span class="keyword">int</span> flags)</span></span></span><br></pre></td></tr></table></figure><p>PendingIntent 具有以下几种 flag：</p><ul><li><strong>FLAG_CANCEL_CURRENT:</strong>如果当前系统中已经存在一个相同的 PendingIntent 对象，那么就将先将已有的 PendingIntent 取消，然后重新生成一个 PendingIntent 对象。</li><li><strong>FLAG_NO_CREATE:</strong>如果当前系统中不存在相同的 PendingIntent 对象，系统将不会创建该 PendingIntent 对象而是直接返回 null 。</li><li><strong>FLAG_ONE_SHOT:</strong>该 PendingIntent 只作用一次。</li><li><strong>FLAG_UPDATE_CURRENT:</strong>如果系统中已存在该 PendingIntent 对象，那么系统将保留该 PendingIntent 对象，但是会使用新的 Intent 来更新之前 PendingIntent 中的 Intent 对象数据，例如更新 Intent 中的 Extras。</li></ul><p>3、生成<code>Notification</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Notification notificationNormal = builderNormal.build();</span><br></pre></td></tr></table></figure><p>4、使用<code>NotificationManager</code>发送通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager mNotificationManager;</span><br><span class="line">mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line"><span class="comment">// 第一个参数为ID，后续更新通知会使用到</span></span><br><span class="line">mNotificationManager.notify(<span class="number">0</span>, notificationNormal);</span><br></pre></td></tr></table></figure><h3 id="更新通知"><a href="#更新通知" class="headerlink" title="更新通知"></a>更新通知</h3><p>更新通知很简单，只需再次发送相同ID的通知即可，如果之前的通知依然存在则会更新通知属性，如果之前通知不存在则重新创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">        .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">        .setContentTitle(<span class="string">"更新的通知标题"</span>)</span><br><span class="line">        .setContentText(<span class="string">"更新的通知内容"</span>);</span><br><span class="line"></span><br><span class="line">builder.setContentIntent(secPendingIntent);</span><br><span class="line"></span><br><span class="line">Notification notificationUpdate = builder.build();</span><br><span class="line"><span class="comment">// 保证与上述创建的相同ID即可。</span></span><br><span class="line">mNotificationManager.notify(<span class="number">0</span>, notificationUpdate);</span><br></pre></td></tr></table></figure><h3 id="取消通知"><a href="#取消通知" class="headerlink" title="取消通知"></a>取消通知</h3><p>取消通知有如下几种方式:</p><ul><li>点击通知栏的清除按钮，会清除所有可清除的通知</li><li>设置了 setAutoCancel() 或 FLAG_AUTO_CANCEL 的通知，点击该通知时会清除它</li><li>通过 NotificationManager 调用 cancel(int id) 方法清除指定 ID 的通知</li><li>通过 NotificationManager 调用 cancel(String tag, int id) 方法清除指定 TAG 和 ID 的通知</li><li>通过 NotificationManager 调用 cancelAll() 方法清除所有该应用之前发送的通知</li></ul><p>添加<code>setAutoCancel</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NotificationCompat.Builder builderNormal = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">        .setAutoCancel(<span class="keyword">true</span>)</span><br><span class="line">        .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">        .setContentTitle(<span class="string">"普通的通知标题"</span>)</span><br><span class="line">        .setContentText(<span class="string">"普通的通知内容"</span>);</span><br></pre></td></tr></table></figure><h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><h3 id="大视图通知"><a href="#大视图通知" class="headerlink" title="大视图通知"></a>大视图通知</h3><p>通知有两种视图：普通视图和大视图。</p><p>普通视图：</p><p><img src="normalview.png" alt></p><p>大视图（BigText为例）：</p><p><img src="bigtextview.png" alt></p><p>默认情况下为普通视图，可通过<code>NotificationCompat.Builder.setStyle()</code>设置大视图。</p><blockquote><p>注: 大视图(Big Views)由Android 4.1(API level 16)开始引入，且仅支持Android 4.1及更高版本。</p></blockquote><p>以上图为例:<br>1、构建Action Button的PendingIntent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Intent dismissIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, PingService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                dismissIntent.setAction(<span class="string">"dismiss"</span>);</span><br><span class="line">                PendingIntent p1 = PendingIntent.getService(<span class="keyword">this</span>, <span class="number">0</span>, dismissIntent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line"></span><br><span class="line">                Intent snoozeIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, PingService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                snoozeIntent.setAction(<span class="string">"snooze"</span>);</span><br><span class="line">                PendingIntent p2 = PendingIntent.getService(<span class="keyword">this</span>, <span class="number">0</span>, snoozeIntent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br></pre></td></tr></table></figure><p>2、构建NotificatonCompat.Builder对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NotificationCompat.Builder builderBig = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">                        .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                        .setContentTitle(getString(R.string.title))</span><br><span class="line">                        .setContentText(<span class="string">"简要"</span>)</span><br><span class="line">                        .setDefaults(Notification.DEFAULT_ALL)</span><br><span class="line">  <span class="comment">// 注意该步骤</span></span><br><span class="line">                        .setStyle(<span class="keyword">new</span> NotificationCompat.BigTextStyle().bigText(getString(R.string.content)))</span><br><span class="line">                        .addAction(android.R.drawable.ic_input_delete, <span class="string">"dimiss"</span>, p1)</span><br><span class="line">                        .addAction(android.R.drawable.ic_input_add, <span class="string">"snooze"</span>, p2);</span><br></pre></td></tr></table></figure><p>3、其他步骤与普通视图相同</p><h3 id="进度条通知"><a href="#进度条通知" class="headerlink" title="进度条通知"></a>进度条通知</h3><p><strong>明确进度的进度条</strong></p><p>使用<code>setProgress(max, progress, false)</code>来更新进度。</p><ul><li>max: 最大进度值</li><li>progress: 当前进度</li><li>false: 是否是不明确的进度条</li></ul><h2 id="通知常见属性"><a href="#通知常见属性" class="headerlink" title="通知常见属性"></a>通知常见属性</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.android.com/guide/topics/ui/notifiers/notifications.html" target="_blank" rel="noopener">https://developer.android.com/guide/topics/ui/notifiers/notifications.html</a></p><p><a href="https://developer.android.com/reference/android/app/Notification.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/app/Notification.html</a></p><p><a href="https://www.cnblogs.com/travellife/p/Android-Notification-xiang-jie-yiji-ben-cao-zuo.html" target="_blank" rel="noopener">https://www.cnblogs.com/travellife/p/Android-Notification-xiang-jie-yiji-ben-cao-zuo.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是通知&quot;&gt;&lt;a href=&quot;#什么是通知&quot; class=&quot;headerlink&quot; title=&quot;什么是通知&quot;&gt;&lt;/a&gt;什么是通知&lt;/h1&gt;&lt;p&gt;通知是一个可以在应用程序正常的用户界面之外显示给用户的消息。&lt;br&gt;通知发出时，它首先出现在状态栏的通知区域中，用户打开通知抽屉可查看通知详情。通知区域和通知抽屉都是用户可以随时查看的系统控制区域。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Notification" scheme="http://hackycy.github.io/tags/Notification/"/>
    
  </entry>
  
  <entry>
    <title>Android进程保活探讨</title>
    <link href="http://hackycy.github.io/2020/02/04/Android%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB%E6%8E%A2%E8%AE%A8/"/>
    <id>http://hackycy.github.io/2020/02/04/Android进程保活探讨/</id>
    <published>2020-02-04T14:04:19.000Z</published>
    <updated>2020-07-23T08:37:08.530Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Android 系统为了保持系统运行流畅，在内存吃紧的情况下，会将一些进程 kill ，以释放一部分内存。然而，对于一些（如：IM-QQ 、微信，支付-支付宝等）比较重要、我们希望能及时收到消息的 APP，需要保持进程持续活跃，那么就需要实施一些保活措施来保证进程能够持续存活，即 <strong>Android 进程保活</strong>。</p><a id="more"></a><p><strong>Android 进程拉活包括两个层面：</strong></p><ul><li><p>提供进程优先级，降低进程被杀死的概率</p></li><li><p>在进程被杀死后，进行拉活</p></li></ul><p>在此之前，先来了解下 Android 进程的一些相关概念。</p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>默认情况下，同一 APP 的所有组件均运行在相同的进程中，但是也可以根据需要，通过在清单文件中配置来控制某些组件的所属进程。</p><p>内存不足的情况下，Android 系统会选择 kill 某一进程来释放该进程占用的内存，供其它为用户提供更为紧急服务的进程使用。在被关闭的进程中运行的组件也会随着进程的关闭而销毁。</p><p>决定 kill 哪个进程时，Android 系统将权衡所有进程对用户的相对重要程度。例如：相对于托管可见 Activity 的进程而言，更有可能 kill 托管不可见 Activity 的进程。因此，是否终止 kill 某个进程取决于该进程中所运行组件的状态。</p><h1 id="进程的优先级"><a href="#进程的优先级" class="headerlink" title="进程的优先级"></a>进程的优先级</h1><p>Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要清除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是清除重要性稍低一级的进程，依此类推，以回收系统资源。</p><p>进程的重要性，划分5级：</p><ol><li>前台进程 (Foreground process)</li><li>可见进程 (Visible process)</li><li>服务进程 (Service process)</li><li>后台进程 (Background process)</li><li>空进程 (Empty process)</li></ol><p><img src="jinchengyouxianji.jpeg" alt></p><p>前台进程的重要性最高，依次递减，空进程的重要性最低，下面分别来阐述每种级别的进程</p><h2 id="前台进程"><a href="#前台进程" class="headerlink" title="前台进程"></a>前台进程</h2><p>用户当前操作的进程。一个进程满足以下任一条件 ，即视为前台进程：</p><ul><li>托管用户正在交互的 Activity（已调用 onResume() 方法）。</li><li>托管某个 Service ，且 Service 绑定到用户正在交互的 Activity。</li><li>托管正在“前台”运行的 Service（服务已调用startForeground()）。</li><li>托管正在执行生命周期回调的 Service（ onCreate() 、 onStart() 或 onDestory() ）。</li><li>托管正在执行 onReceive() 方法的 BroadcastReceiver。</li></ul><blockquote><p>通常，任意时间的前台进程数据都不多。只有在内存不足以支持它们同时继续运行这一万不得已的情况下，系统才会 kill 它们。</p></blockquote><h2 id="可见进程"><a href="#可见进程" class="headerlink" title="可见进程"></a>可见进程</h2><p>没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。 如果一个进程满足以下任一条件，即视为可见进程：</p><ul><li>托管不在前台、但仍对用户可见的 Activity（已调用 onPause() 方法）。如：前台 Activity 启动了一个对话框，允许在其后面显示上一个 Activity。</li><li>托管绑定到可见（或前台）的 Activity 的 Service。</li></ul><blockquote><p>可见进程被视为及其重要的进程，除非为了维持所有前台进程同时运行而必须终止，否则系统不会kill这些进程。</p></blockquote><h2 id="服务进程"><a href="#服务进程" class="headerlink" title="服务进程"></a>服务进程</h2><p>正在运行已使用 startService() 方法启动的 Service 且不属于上述两个更高类别进程的进程。</p><blockquote><p>尽管服务进程与用户可见内容没有直接关联，但是它们通常在执行一些用户比较关心的操作（如：在后台播放音乐或从网络下载数据等），因此，除非内部不足以维持所有前台进程和可见进程同时运行，否则系统不会 kill 这些进程。</p></blockquote><h2 id="后台进程"><a href="#后台进程" class="headerlink" title="后台进程"></a>后台进程</h2><p>托管目前对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）。</p><blockquote><p>后台进程对用户体验没有直接影响，系统可能随时会 kill 它们，以回收内存提供给前台进程、可见进程、服务进程使用。通常会有很多后台进程同时运行，系统将它们保存在 LRU（最近最少使用）列表中，以确保包含用户最近查看的 Activity 的进程最后一个被终止。</p></blockquote><h2 id="空进程"><a href="#空进程" class="headerlink" title="空进程"></a>空进程</h2><p>不包含任何活动组件的进程。</p><blockquote><p>保留这种进程的唯一目的是缓存，以缩短下次在其中运行的组件的启动时间。为使系统总体资源在进程缓存和底层内核缓存之间保持平衡，系统往往会kill这些进程。</p></blockquote><p>根据进程中当前活动的组件的重要程度，Android 系统会将进程评定为可能达到的最高级别。比如，托管服务和可见 Activity 的进程，系统会将其评定为可见进程，而不是服务进程。</p><p>此外，一个进程的级别可能会因为其他进程对其依赖而有所提高，即服务于另一进程的进程其级别不会低于其服务的进程。例如，进程 A 中的 Service 绑定到进程 B 中的组件，则进程 A 始终被视为至少和进程 B 同等级别。</p><p>由于运行 Service 的进程其级别高于托管后台 Activity 的进程，因此在要做长时间后台操作的 Activity 中最好为该操作启动 Service，而不是简单的创建子线程，当操作有可能比 Activity 更持久时更需如此。例如，需要上传较大图片或较大文件的 Activity，应该启动 Service 来执行上传操作，这样，即使 Activity 被销毁，Service 仍能在后台继续执行上传操作。使用 Service 执行较长耗时操作，可以保证不管 Activity 发生什么情况，该操作至少有服务进程的优先级。同理，使用广播接收器时，也当如此。</p><blockquote><p><a href="https://developer.android.com/guide/components/processes-and-threads.html" target="_blank" rel="noopener">https://developer.android.com/guide/components/processes-and-threads.html</a></p></blockquote><h1 id="进程回收策略"><a href="#进程回收策略" class="headerlink" title="进程回收策略"></a>进程回收策略</h1><p>Android 系统回收进程内存的机制叫<code>Low Memory Killer</code>机制，是一种根据 <code>oom_adj</code>阈值级别触发相应力度的内存回收的机制。<code>oom_adj</code> 代表进程的优先级，数值越高，优先级越低，越容易被杀死。</p><p><strong>Andorid的 Low Memory Killer 是在标准的linux lernel的 OOM 基础上修改而来的一种内存管理机制。当系统内存不足时，杀死不必要的进程释放其内存。不必要的进程的选择根据有2个：oom_adj和占用的内存的大小。oom_adj 代表进程的优先级，数值越高，优先级越低，越容易被杀死；对应每个oom_adj都可以有一个空闲进程的阀值。</strong></p><p><strong>Android Kernel每隔一段时间会检测当前空闲内存是否低于某个阀值。假如是，则杀死oom_adj最大的不必要的进程，如果有多个，就根据 oom_score_adj 去杀死进程，直到内存恢复低于阀值的状态。</strong></p><p>关于 oom_adj 的说明如下：</p><p><img src="oomadj.jpeg" alt></p><blockquote><p>其中红色部分代表比较容易被杀死的 Android 进程（OOM_ADJ&gt;=4）,绿色部分表示不容易被杀死的 Android 进程，其他表示非 Android 进程（纯 Linux 进程）。</p><p>在 Lowmemorykiller 回收内存时会根据进程的级别优先杀死 OOM_ADJ 比较大的进程，对于优先级相同的进程则进一步受到进程所占内存和进程存活时间的影响。</p><p><strong>普通app进程的oom_adj&gt;=0,系统进程的oom_adj才可能&lt;0</strong></p><p>查看当前应用进程adj值命令为：<code>cat /proc/进程id/oom_adj</code></p><p>查看当前进程id：<code>ps | grep PackageName</code></p></blockquote><p><strong>LowMemoryKiller 的阈值的设定，主要保存在2个文件之中，分别是:</strong></p><ul><li><code>/sys/module/lowmemorykiller/parameters/adj</code></li><li><code>/sys/module/lowmemorykiller/parameters/minfree</code></li></ul><p>adj保存着当前系统杀进程的等级，minfree则是保存着对应的内存阀值。</p><p>在API为26的Nexus模拟器下打印输出的值为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">generic_x86:/ <span class="comment"># cat /sys/module/lowmemorykiller/parameters/minfree                                                                                                                                        </span></span><br><span class="line">18432,23040,27648,32256,36864,46080</span><br><span class="line">generic_x86:/ <span class="comment"># cat /sys/module/lowmemorykiller/parameters/adj                                                                                                                                            </span></span><br><span class="line">0,100,200,300,900,906</span><br></pre></td></tr></table></figure><p>内存阀值在不同手机上不一样，一旦低于该值，Android便会杀死对应优先级的进程。<strong>例如上述手机中，当可用内存小于72MB（18432）时，就杀死前台进程；当可用内存小于180MB（46080）时，则杀死空进程。即跟照上述打印顺序依次杀死为<code>前台进程 -&gt; 可见进程 -&gt; 服务进程 -&gt; 后台进程 -&gt; Content Provider -&gt; 空进程</code>。</strong></p><blockquote><p>阀值单位为page，即4kb。</p></blockquote><p><strong>Android 手机中进程被杀死可能有如下情况：</strong></p><p><img src="killevent.jpg" alt></p><p>综上，可以得出减少进程被杀死概率无非就是想办法提高进程优先级，减少进程在内存不足等情况下被杀死的概率。</p><h1 id="提升进程优先级的方案"><a href="#提升进程优先级的方案" class="headerlink" title="提升进程优先级的方案"></a>提升进程优先级的方案</h1><h2 id="利用-Activity-提升权限"><a href="#利用-Activity-提升权限" class="headerlink" title="利用 Activity 提升权限"></a>利用 Activity 提升权限</h2><p>通过监控手机锁屏，在屏幕锁屏时启动1个像素的Activity，在用户解锁时将Activity销毁掉。</p><p>进程的优先级在屏幕锁屏时间由4提升为最高优先级0。</p><p>主要解决第三方应用及系统管理工具在检测到锁屏事件后一段时间（一般为5分钟以内）内会杀死后台进程，已达到省电的目的问题。<strong>但是在Android P之后后台都作了限制后该方案无效。测试7.0前的版本稳定。但是不建议使用。没有销毁掉1像素Activity时候会产生严重的体验问题。</strong></p><h3 id="具体方案实现"><a href="#具体方案实现" class="headerlink" title="具体方案实现"></a>具体方案实现</h3><p>自定义Activity，并且设置Activity大小为1像素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglePixelActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = SinglePixelActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        Window window = getWindow();</span><br><span class="line">        window.setGravity(Gravity.LEFT | Gravity.TOP);</span><br><span class="line">        WindowManager.LayoutParams layoutParams = window.getAttributes();</span><br><span class="line">        layoutParams.x = <span class="number">0</span>;</span><br><span class="line">        layoutParams.y = <span class="number">0</span>;</span><br><span class="line">        layoutParams.width = <span class="number">1</span>;</span><br><span class="line">        layoutParams.height = <span class="number">1</span>;</span><br><span class="line">        window.setAttributes(layoutParams);</span><br><span class="line">        <span class="comment">//setting</span></span><br><span class="line">        KeepManager.getInstance().setSinglePixelActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 作一些唤醒服务动作</span></span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，从 AndroidManifest 中通过如下属性，排除 Activity 在 RecentTask 中的显示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">".onepixel.SinglePixelActivity"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">android:configChanges</span>=<span class="string">"keyboardHidden|orientation|screenSize|navigation|keyboard"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:excludeFromRecents</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:exported</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:finishOnTaskLaunch</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:theme</span>=<span class="string">"@style/SinglePixelActivityStyle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>讲解一下：</strong></p><ul><li><strong>android:launchMode属性：</strong>用于指定activity的启动模式，总共分为四种，即：<ul><li><strong>standar模式</strong>，每次启动activity都会创建其实例，并加入到任务栈的栈顶；</li><li><strong>singleTop模式</strong>，每次启动activity如果栈顶时该activity则无需创建，其余情况都要创建该activity的实例；</li><li><strong>singleTask模式</strong>，如果被启动的activity的实例存在栈中，则不需要创建，只需要把此activity加入到栈顶，并把该activity以上的activity实例全部pop；</li><li><strong>singleInstance模式</strong>：将创建的activity实例放入单独的栈中，该栈只能存储这个实例，且是作为共享实例存在。</li></ul></li><li><strong>android:configChanges属性：</strong>用于捕获手机状态的改变，即当手机状态(如切换横竖屏、屏幕大小)改变时会保存当前活动状态重启Activity，由于SinglePixelActivity肩负着保活的特殊使命，这里使用<strong>android:configChanges</strong>属性：防止Activity重启，它只是调用了<strong>onConfigurationChanged(Configuration newConfig)</strong>来通知手机状态的改变；</li><li><strong>android:excludeFromRecents属性：</strong>用于控制SinglePixelActivity不在最近任务列表中显示；</li><li><strong>android:finishOnTaskLaunch属性：</strong>用于标记当用户再起启动应用(TASK)时是否关闭已经存在的Activity的实例，false表示不关闭；</li><li><strong>android:theme属性：</strong>用于指定Activity显示主题，这里我们自定义主题SingleActivityStyle。</li></ul></blockquote><p>设置Activity样式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对1像素Activity进行特殊处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SinglePixelActivityStyle"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFrame"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsFloating"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowContentOverlay"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:backgroundDimEnabled"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowAnimationStyle"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowDisablePreview"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoDisplay"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义广播接收者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        String action = intent.getAction();</span><br><span class="line">      <span class="comment">// Activity 启动与销毁时机的控制：</span></span><br><span class="line">        <span class="keyword">if</span> (Intent.ACTION_SCREEN_OFF.equals(action)) &#123;</span><br><span class="line">            KeepManager.getInstance().startSinglePixelActivity(context);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Intent.ACTION_SCREEN_ON.equals(action) || Intent.ACTION_USER_PRESENT.equals(action)) &#123;</span><br><span class="line">            KeepManager.getInstance().finishSinglePixelActivity();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = ScreenManager<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ScreenManager mInstance = <span class="keyword">new</span> ScreenManager();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScreenBroadcastReceiver mKeepBroadcastReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Activity&gt; mActivity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScreenManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerKeepReceiver</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mKeepBroadcastReceiver = <span class="keyword">new</span> ScreenBroadcastReceiver();</span><br><span class="line">        IntentFilter filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        filter.addAction(Intent.ACTION_SCREEN_OFF);</span><br><span class="line">        filter.addAction(Intent.ACTION_SCREEN_ON);</span><br><span class="line">        context.registerReceiver(mKeepBroadcastReceiver, filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterKeepReceiver</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mKeepBroadcastReceiver != <span class="keyword">null</span>) &#123;</span><br><span class="line">            context.unregisterReceiver(mKeepBroadcastReceiver);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持有SinglePixelActivity的弱引用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSinglePixelActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        mActivity = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动SinglePixelActivity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startSinglePixelActivity</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(context, SinglePixelActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束SinglePixelActivity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishSinglePixelActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Activity activity = mActivity.get();</span><br><span class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                activity.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要使用的地方使用，如MainActivity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 1像素保活</span></span><br><span class="line">        activeSinglePixelActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        ScreenManager.getInstance().unregisterKeepReceiver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activeSinglePixelActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ScreenManager.getInstance().registerKeepReceiver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用前台-Service-提升权限"><a href="#利用前台-Service-提升权限" class="headerlink" title="利用前台 Service 提升权限"></a>利用前台 Service 提升权限</h2><p>Android 中 Service 的优先级为4，通过 setForeground 接口可以将后台 Service 设置为前台 Service，使进程的优先级由4提升为2，从而使进程的优先级仅仅低于用户当前正在交互的进程，与可见进程优先级一致，使进程被杀死的概率大大降低。</p><p>从 Android2.3 开始调用 setForeground 将后台 Service 设置为前台 Service 时，必须在系统的通知栏发送一条通知，也就是前台 Service 与一条可见的通知时绑定在一起的。</p><p>对于不需要常驻通知栏的应用来说，该方案虽好，但却是用户感知的，无法直接使用。</p><p>对于 API level &lt; 18 ：调用startForeground(ID， new Notification())，发送空的Notification ，图标则不会显示。对于 API level &gt;= 18：在需要提优先级的service A启动一个InnerService，两个服务同时startForeground，且绑定同样的 ID。Stop 掉InnerService ，这样通知栏图标即被移除。这方案实际利用了Android前台service的漏洞。</p><p><strong>该方案适用范围：7.1.1系统以下</strong>，8.0后的系统通知栏API的变更以及前台服务的变更导致通知栏常驻，造成用户感知。</p><h3 id="具体方案实现-1"><a href="#具体方案实现-1" class="headerlink" title="具体方案实现"></a>具体方案实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = ProcessService<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PROCESS_SERVICE_ID = -<span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="comment">// API &lt; 18 ，此方法能有效隐藏Notification上的图标</span></span><br><span class="line">            startForeground(PROCESS_SERVICE_ID, <span class="keyword">new</span> Notification());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Intent innerIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ProcessInnerService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            startService(innerIntent);</span><br><span class="line">            startForeground(PROCESS_SERVICE_ID, <span class="keyword">new</span> Notification());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给 API &gt;= 18 的平台上用的保活手段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessInnerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">            startForeground(PROCESS_SERVICE_ID, <span class="keyword">new</span> Notification());</span><br><span class="line">            stopSelf();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进程死后拉活的方案"><a href="#进程死后拉活的方案" class="headerlink" title="进程死后拉活的方案"></a>进程死后拉活的方案</h1><h2 id="利用系统广播拉活"><a href="#利用系统广播拉活" class="headerlink" title="利用系统广播拉活"></a>利用系统广播拉活</h2><p>在发生特定系统事件时，系统会发出响应的广播，通过在 AndroidManifest 中“静态”注册对应的广播监听器，即可在发生响应事件时拉活。</p><p>常用的用于拉活的广播事件包括：</p><p><img src="staticbroadcast.webp" alt></p><p>适用于全部Android平台。但存在如下几个缺点：</p><p>1） 广播接收器被管理软件、系统软件通过“自启管理”等功能禁用的场景无法接收到广播，从而无法自启。</p><p>2） 系统广播事件不可控，只能保证发生事件时拉活进程，但无法保证进程挂掉后立即拉活。</p><blockquote><p>Google已经开始意识到这些问题，所以在最新的Android N取消了 ACTION_NEW_PICTURE（拍照），ACTION_NEW_VIDEO（拍视频），CONNECTIVITY_ACTION（网络切换）等三种广播，无疑给了很多app沉重的打击。</p></blockquote><p>因此，该方案主要作为备用手段。</p><h2 id="利用第三方应用广播拉活"><a href="#利用第三方应用广播拉活" class="headerlink" title="利用第三方应用广播拉活"></a>利用第三方应用广播拉活</h2><p><strong>利用不同的app进程使用广播来进行相互唤醒。举个3个比较常见的场景：</strong></p><ul><li>场景1：接入第三方SDK也会唤醒相应的app进程，如微信sdk会唤醒微信，支付宝sdk会唤醒支付宝。由此发散开去，就会直接触发了下面的 场景3；</li><li>场景2：假如你手机里装了支付宝、淘宝、天猫、UC等阿里系的app，那么你打开任意一个阿里系的app后，有可能就顺便把其他阿里系的app给唤醒了。（只是拿阿里打个比方，其实BAT系都差不多）。</li></ul><p>也可以通过反编译第三方 Top 应用，如：手机QQ、微信、支付宝、UC浏览器等，以及友盟、信鸽、个推等 SDK，找出它们外发的广播，在应用中进行监听，这样当这些应用发出广播时，就会将我们的应用拉活。</p><p>该方案的有效程度除与系统广播一样的因素外，主要受如下因素限制：</p><p>1） 反编译分析过的第三方应用的多少</p><p>2） 第三方应用的广播属于应用私有，当前版本中有效的广播，在后续版本随时就可能被移除或被改为不外发。</p><p>这些因素都影响了拉活的效果。</p><h2 id="利用系统Service机制拉活"><a href="#利用系统Service机制拉活" class="headerlink" title="利用系统Service机制拉活"></a>利用系统Service机制拉活</h2><p>将 Service 设置为 START_STICKY，利用系统机制在 Service 挂掉后自动拉活：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> START_STICKY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在以下两种情况无法拉活：</p><ol><li>Service 第一次被异常杀死后会在5秒内重启，第二次被杀死会在10秒内重启，第三次会在20秒内重启，一旦在短时间内 Service 被杀死达到5次，则系统不再拉起。</li><li>进程被取得 Root 权限的管理工具或系统工具通过 forestop 停止掉，无法重启。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/s/OXiFQNTyCHpqSP6B9HOiHw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/OXiFQNTyCHpqSP6B9HOiHw</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Android 系统为了保持系统运行流畅，在内存吃紧的情况下，会将一些进程 kill ，以释放一部分内存。然而，对于一些（如：IM-QQ 、微信，支付-支付宝等）比较重要、我们希望能及时收到消息的 APP，需要保持进程持续活跃，那么就需要实施一些保活措施来保证进程能够持续存活，即 &lt;strong&gt;Android 进程保活&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="进程保活" scheme="http://hackycy.github.io/tags/%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>重学Android之Handler</title>
    <link href="http://hackycy.github.io/2020/02/02/%E9%87%8D%E5%AD%A6Android%E4%B9%8BHandler/"/>
    <id>http://hackycy.github.io/2020/02/02/重学Android之Handler/</id>
    <published>2020-02-02T14:09:03.000Z</published>
    <updated>2020-07-23T08:37:09.046Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>Handler</code> 是 <code>Android</code> 开发过程中非常非常常见的东西。它通常被我们用来做主线程与子线程之间的通信工具，而 Handler 作为 Android 中消息机制的重要一员也确实给我们的开发带来了极大的便利。</p><a id="more"></a><h1 id="重识Handler"><a href="#重识Handler" class="headerlink" title="重识Handler"></a>重识Handler</h1><p>我们可以使用 Handler <strong>发送并处理</strong>与一个线程关联的 Message 和 Runnable 。（注意：<strong>Runnable 会被封装进一个 Message，所以它本质上还是一个 Message</strong> ）</p><p>每个 Handler 都会跟一个线程绑定，并与该线程的 MessageQueue 关联在一起，从而实现消息的管理以及线程间通信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">android.os.Handler handler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="keyword">final</span> Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里接受并处理消息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line">handler.sendMessage(message);</span><br><span class="line">handler.post(runnable);</span><br></pre></td></tr></table></figure><p>实例化一个 Handler 重写 <code>handleMessage</code> 方法 ，然后在需要的时候调用它的 <code>send</code> 以及 <code>post</code> <strong>系列方法</strong>就可以了，非常简单易用，并且支持延时消息。</p><p><strong>一些常用的方法如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sendMessage(Message msg)</span><br><span class="line">sendMessageDelayed(Message msg, <span class="keyword">long</span> uptimeMillis)</span><br><span class="line">post(Runnable r)</span><br><span class="line">postDelayed(Runnable r, <span class="keyword">long</span> uptimeMillis)</span><br><span class="line">sendMessageAtTime(Message msg,<span class="keyword">long</span> when)</span><br><span class="line">  </span><br><span class="line">sendEmptyMessage(<span class="keyword">int</span> what)</span><br><span class="line">sendEmptyMessageDelayed(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span><br><span class="line">sendEmptyMessageAtTime(<span class="keyword">int</span> what, <span class="keyword">long</span> when)</span><br></pre></td></tr></table></figure><h1 id="Looper、Handler、MessageQueue与Message的关系与相关概念"><a href="#Looper、Handler、MessageQueue与Message的关系与相关概念" class="headerlink" title="Looper、Handler、MessageQueue与Message的关系与相关概念"></a>Looper、Handler、MessageQueue与Message的关系与相关概念</h1><h2 id="Android消息处理机制"><a href="#Android消息处理机制" class="headerlink" title="Android消息处理机制"></a>Android消息处理机制</h2><p>什么是Android消息处理机制？</p><p><strong>“消息”</strong>是windows运行机制中一个基本而又重要的概念。<strong>消息</strong>是一个<strong>报告事件发生的通知</strong>，<strong>消息驱动</strong>是围绕消息的产生与处理展开的，并依靠<strong>消息循环机制</strong>来实现（百度百科）。与Windows系统一样，Android也是<strong>消息驱动型</strong>的系统。引用一下消息驱动机制的四要素：</p><ul><li><p>接收消息的“消息队列”</p></li><li><p>阻塞式地从消息队列中接收消息并进行处理的“线程”</p></li><li><p>可发送的“消息的格式”</p></li><li><p>“消息发送函数”</p></li></ul><p>与之对应，Android系统中对应实现了：</p><ul><li>接收消息的“消息队列” ——　<strong>MessageQueue</strong></li><li>阻塞式地从消息队列中接收消息并进行处理的“线程” ——　<strong>Thread+Looper</strong></li><li>可发送的“消息的格式” ——　<strong>Message</strong></li><li>“消息发送函数”——　<strong>Handler的post()和sendMessage()</strong></li></ul><p>Android有大量的消息驱动方式来进行交互，比如Android的四大组件——<strong>Activity, Service, Broadcast, ContentProvider</strong>的启动过程的交互，都离不开消息机制。</p><h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>Handler是Android消息机制的上层接口。<strong>Handler并不是专门用来更新UI的，只是开发者常常用它来更新UI</strong>。Handler的主要用于<strong>同一个进程间的线程通信</strong>，Handler用于更新UI的时候是<strong>“子线程与主线程通信”；当然，Handler也可以用于子线程之间通信。</strong></p><p>Handler的消息机制主要是就指“Handler的运行机制”，Handler的运行机制时需要底层的<strong>MessageQueue和Looper</strong>支持的。</p><h2 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h2><p>MessageQueue翻译过来是”消息队列”的意思，实际上它内部的数据结构不是队列，而是<strong>单向链表</strong>；MessageQueue中储存了大量的<strong>消息</strong>，由于<strong>一个线程同一时间只能处理一条消息，所以我们建了一个链表，将我们需要处理的消息按顺序储存起来，然后一项一项的交给需要的线程处理</strong>，这就是MessageQueue存在的价值。</p><h2 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h2><p>Looper和MessageQueue的消息就像水泵和井(里边装的是水)的关系一样，我们有了消息(水)，但是为了把水从井中抽取出来(循环起来)，我们得有一个水泵作为<strong>动力</strong>，这个动力就是Looper。</p><p>如果我们在一个线程中调用<code>Looper.prepare()...Looper.loop()</code>，那么你的线程就成功升级为了一个<strong>Looper线程</strong>，这意味着<strong>你的线程有了一个消息泵(Looper)和一个消息队列(MessageQueue),此时你就可以调用Handler来进行线程间的通信了。</strong></p><p>我们应用的UI线程也就是主线程，在应用启动的时候，系统会自动初始化一个Looper，也就是说，我们的UI线程默认是Looper线程。这也就是为什么主线程中直接调用Handler没什么事，但是再子线程中创建Handler需要手动调用<code>Looper.prepare()...Looper.loop()</code>的和原因。</p><h2 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h2><p>Message也就是消息，井中的水。一个Message包括了消息类型(what),消息内容(arg1,arg2),发送它的Handler(target),Runnable回调接口等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> what;        <span class="comment">//数据类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> arg1;        <span class="comment">//简单的整数值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> arg2;        <span class="comment">//简单的整数值可以直接发送，是一种替代setData（Bundle）的低成本方案，更加省资源</span></span><br><span class="line"><span class="keyword">public</span> Object obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*package*/</span> <span class="keyword">int</span> flags;</span><br><span class="line"><span class="comment">/*package*/</span> <span class="keyword">long</span> when;          <span class="comment">//Handler发送一个消息之后，返回此消息的目标交付时间（以毫秒为单位）。</span></span><br><span class="line"><span class="comment">/*package*/</span> Bundle data;        <span class="comment">//Bundle可以携带更复杂的数据类型</span></span><br><span class="line"><span class="comment">/*package*/</span> Handler target;     <span class="comment">//哪个Handler发送的消息</span></span><br><span class="line"><span class="comment">/*package*/</span> Runnable callback;  <span class="comment">//回调方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以看到，Message带了一个指向一下个节点的链，也就是说，MessageQueue内部维护的实际上是一个链表</span></span><br><span class="line"><span class="comment">/*package*/</span> Message next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object sPoolSync = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Message sPool;       <span class="comment">//消息池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sPoolSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_POOL_SIZE = <span class="number">50</span>;    <span class="comment">//消息池的最大容量</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Handler 的背后有着 Looper 以及 MessageQueue 的协助，三者通力合作，分工明确。</p><ul><li><strong>Message</strong>：消息分为硬件产生的消息(如按钮、触摸)和软件生成的消息；</li><li><strong>MessageQueue</strong>：消息队列的主要功能向消息池投递消息(<code>MessageQueue.enqueueMessage</code>)和取走消息池的消息(<code>MessageQueue.next</code>)；</li><li><strong>Handler</strong>：消息辅助类，主要功能向消息池发送各种消息事件(<code>Handler.sendMessage</code>)和处理相应消息事件(<code>Handler.handleMessage</code>)；</li><li><strong>Looper</strong>：不断循环执行(<code>Looper.loop</code>)，按分发机制将消息分发给目标处理者。</li></ul><p>一张图来了解一下它们之间的关系：</p><p><img src="messagequene.png" alt></p><h1 id="Handler原理解析（Java层）"><a href="#Handler原理解析（Java层）" class="headerlink" title="Handler原理解析（Java层）"></a>Handler原理解析（Java层）</h1><p>来分析原理前，先明确一下问题：</p><ol><li><strong>Handler 是如何与线程关联的？</strong></li><li><strong>Handler 发出去的消息是谁管理的？</strong></li><li><strong>消息又是怎么回到 handleMessage() 方法的？</strong></li><li><strong>线程的切换是怎么回事？</strong></li></ol><p>带着问题去寻找答案。</p><h2 id="Handler与Looper的关联"><a href="#Handler与Looper的关联" class="headerlink" title="Handler与Looper的关联"></a>Handler与Looper的关联</h2><p>实例化 Handler 的时候 Handler 会去检查当前线程的 Looper 是否存在，如果不存在则会报异常，也就是说<strong>在创建 Handler 之前一定需要先创建 Looper</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(@Nullable Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//检查当前的线程是否有 Looper</span></span><br><span class="line">mLooper = Looper.myLooper();</span><br><span class="line"><span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread "</span> + Thread.currentThread()</span><br><span class="line">                        + <span class="string">" that has not called Looper.prepare()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//Looper 持有一个 MessageQueue</span></span><br><span class="line">mQueue = mLooper.mQueue;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个异常可能有的不熟悉，因为平时直接使用感受不到这个异常是因为主线程已经为我们创建好了 Looper</p></blockquote><p>一个完整的 Handler 使用例子其实是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Handler mHandler;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// process incoming messages here</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Looper.prepare()</strong></p><p>对于无参的情况，默认调用<code>prepare(true)</code>，表示的是这个Looper允许退出，而对于false的情况则表示当前Looper不允许退出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">&#125;</span><br><span class="line">sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>sThreadLocal</code>是ThreadLocal类型，下面，先说说ThreadLocal。</p><p><strong>ThreadLocal</strong>： 线程本地存储区（Thread Local Storage，简称为TLS），每个线程都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的TLS区域。</p><p>Looper类中其定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br></pre></td></tr></table></figure><p>可见<code>sThreadLocal</code>的get()和set()操作的类型都是<code>Looper</code>类型。</p><blockquote><p>另外，与prepare()相近功能的，还有一个<code>prepareMainLooper()</code>方法，该方法主要在ActivityThread类中使用。</p></blockquote><p>Looper 提供了 <code>Looper.prepare()</code> 方法来创建 Looper ，并且会<strong>借助 ThreadLocal 来实现与当前线程的绑定</strong>功能。<strong>Looper.loop() 则会开始不断尝试从 MessageQueue 中获取 Message , 并分发给对应的 Handler</strong></p><p><strong>也就是说 Handler 跟线程的关联是靠 Looper 来实现的。</strong></p><h2 id="Message-的发送"><a href="#Message-的发送" class="headerlink" title="Message 的发送"></a>Message 的发送</h2><p>发送消息调用链：</p><p><img src="java_sendmessage.png" alt></p><p>不管我们调用什么方法，最终都会走到 <code>MessageQueue.enqueueMessage(Message,long)</code> 方法。</p><p>例如<code>sendEmptyMessage</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessage</span><span class="params">(<span class="keyword">int</span> what)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> sendEmptyMessageDelayed(what, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">Message msg = Message.obtain();</span><br><span class="line">msg.what = what;</span><br><span class="line"><span class="keyword">return</span> sendMessageDelayed(msg, delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(@NonNull Message msg, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">delayMillis = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(@NonNull Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">MessageQueue queue = mQueue;</span><br><span class="line"><span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">   <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Handler.sendEmptyMessage()</code>等系列方法最终调用<code>MessageQueue.enqueueMessage(msg, uptimeMillis)</code>，将消息添加到消息队列中，其中uptimeMillis为系统当前的运行时间，不包括休眠时间。</p><p><strong>enqueueMessage</strong></p><p>添加一条消息到消息队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 每一个普通Message必须有一个target</span></span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mQuitting) &#123;  <span class="comment">//正在退出时，回收msg，加入到消息池</span></span><br><span class="line">            msg.recycle();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        msg.markInUse();</span><br><span class="line">        msg.when = when;</span><br><span class="line">        Message p = mMessages;</span><br><span class="line">        <span class="keyword">boolean</span> needWake;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">            <span class="comment">//p为null(代表MessageQueue没有消息） 或者msg的触发时间是队列中最早的， 则进入该该分支</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">            needWake = mBlocked; <span class="comment">//当阻塞时需要唤醒</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//将消息按时间顺序插入到MessageQueue。一般地，不需要唤醒事件队列，除非</span></span><br><span class="line">            <span class="comment">//消息队头存在barrier，并且同时Message是队列中最早的异步消息。</span></span><br><span class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">            Message prev;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                    needWake = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.next = p;</span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消息没有退出，我们认为此时mPtr != 0</span></span><br><span class="line">        <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MessageQueue</code>是按照Message触发时间的先后顺序排列的，队头的消息是将要最早触发的消息。当有消息需要加入消息队列时，会从队列头开始遍历，直到找到消息应该插入的合适位置，以保证所有消息的时间顺序。</p><h2 id="Message的分发"><a href="#Message的分发" class="headerlink" title="Message的分发"></a>Message的分发</h2><p><code>Looper.loop()</code>方法来进行消息的分发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Looper</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper(); <span class="comment">//获取TLS存储的Looper对象</span></span><br><span class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue; <span class="comment">//获取Looper对象中的消息队列</span></span><br><span class="line">  </span><br><span class="line">  Binder.clearCallingIdentity();</span><br><span class="line">    <span class="comment">//确保在权限检查时基于本地进程，而不是调用进程。</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">       <span class="comment">// 不断从 MessageQueue 获取 消息</span></span><br><span class="line">        Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="comment">//退出 Looper </span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            msg.target.dispatchMessage(msg);</span><br><span class="line">            end = (slowDispatchThresholdMs == <span class="number">0</span>) ? <span class="number">0</span> : SystemClock.uptimeMillis();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      <span class="comment">//恢复调用者信息</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class="line"><span class="comment">//回收 message</span></span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loop()进入循环模式，不断重复下面的操作，直到没有消息时退出循环</p><ul><li>读取MessageQueue的下一条Message；</li><li>把Message分发给相应的target；</li><li>再把分发后的Message回收到消息池，以便重复利用。</li></ul><p>这是这个消息处理的核心部分。另外，上面代码中可以看到有logging方法，这是用于debug的，默认情况下<code>logging == null</code>，通过设置setMessageLogging()用来开启debug工作。</p><p><code>loop()</code> 里调用了 <code>MessageQueue.next()</code> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123; <span class="comment">//当消息循环已经退出，则直接返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// 循环迭代的首次为-1</span></span><br><span class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">            Binder.flushPendingCommands();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//阻塞操作，当等待nextPollTimeoutMillis时长，或者消息队列被唤醒，都会返回</span></span><br><span class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">            Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">            Message msg = mMessages;</span><br><span class="line">            <span class="comment">//当消息的Handler为空时，则查询异步消息</span></span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//当查询到异步消息，则立刻退出循环</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    prevMsg = msg;</span><br><span class="line">                    msg = msg.next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                    <span class="comment">//当异步消息触发时间大于当前时间，则设置下一次轮询的超时时长</span></span><br><span class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 获取一条消息，并返回</span></span><br><span class="line">                    mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        prevMsg.next = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mMessages = msg.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    msg.next = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//设置消息的使用状态，即flags |= FLAG_IN_USE</span></span><br><span class="line">                    msg.markInUse();</span><br><span class="line">                    <span class="keyword">return</span> msg;   <span class="comment">//成功地获取MessageQueue中的下一条即将要执行的消息</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//没有消息</span></span><br><span class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//消息正在退出，返回null</span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                dispose();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当消息队列为空，或者是消息队列的第一个消息时</span></span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span> &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//没有idle handlers 需要运行，则循环并等待。</span></span><br><span class="line">                mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只有第一次循环时，会运行idle handlers，执行完成后，重置pendingIdleHandlerCount为0.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">            mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">//去掉handler的引用</span></span><br><span class="line">            <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                keep = idler.queueIdle();  <span class="comment">//idle时执行的方法</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    mIdleHandlers.remove(idler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重置idle handler个数为0，以保证不会再次重复运行</span></span><br><span class="line">        pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//当调用一个空闲handler时，一个新message能够被分发，因此无需等待可以直接查询pending message.</span></span><br><span class="line">        nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>nativePollOnce</code>是阻塞操作，其中<code>nextPollTimeoutMillis</code>代表下一个消息到来前，还需要等待的时长；当nextPollTimeoutMillis = -1时，表示消息队列中无消息，会一直等待下去。</p><p>当处于空闲时，往往会执行<code>IdleHandler</code>中的方法。当nativePollOnce()返回后，next()从<code>mMessages</code>中提取一个消息。</p></blockquote><p>并且loop方法调用了 <code>msg.target.dispatchMessage(msg)</code> ，msg.target 就是发送该消息的 Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Handler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//msg.callback 是 Runnable ，如果是 post方法则会走这个 if</span></span><br><span class="line">  <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">    handleCallback(msg);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//callback </span></span><br><span class="line">    <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回调到 Handler 的 handleMessage 方法</span></span><br><span class="line">    handleMessage(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>dispatchMessage() 方法针对 Runnable 的方法做了特殊处理，如果是 ，则会直接执行 <code>Runnable.run()</code> 。</strong></p></blockquote><p><strong>Looper.loop() 是个死循环，会不断调用 MessageQueue.next() 获取 Message ，并调用 <code>msg.target.dispatchMessage(msg)</code> 回到了 Handler 来分发消息，以此来完成消息的回调</strong>。</p><p><img src="yuanli.webp" alt></p><h2 id="线程的切换"><a href="#线程的切换" class="headerlink" title="线程的切换"></a>线程的切换</h2><p>先将所涉及的方法调用栈画出来，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread.foo()&#123;</span><br><span class="line">Looper.loop()</span><br><span class="line"> -&gt; MessageQueue.next()</span><br><span class="line">   -&gt; Message.target.dispatchMessage()</span><br><span class="line">    -&gt; Handler.handleMessage()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>显而易见，Handler.handleMessage() 所在的线程最终由调用 Looper.loop() 的线程所决定。</strong></p><p>平时我们用的时候从异步线程发送消息到 Handler，这个 Handler 的 <code>handleMessage()</code> 方法是在主线程调用的，所以消息就从异步线程切换到了主线程。</p><h1 id="Handler的正确使用姿势"><a href="#Handler的正确使用姿势" class="headerlink" title="Handler的正确使用姿势"></a>Handler的正确使用姿势</h1><p>Handler很常用，但是也有很多需要注意的。</p><h2 id="为什么主线程可以直接使用-Handler，不需要创建-Looper"><a href="#为什么主线程可以直接使用-Handler，不需要创建-Looper" class="headerlink" title="为什么主线程可以直接使用 Handler，不需要创建 Looper"></a>为什么主线程可以直接使用 Handler，不需要创建 Looper</h2><p>前面我们提到了每个Handler 的线程都有一个 Looper ，主线程当然也不例外，但是我们不曾准备过主线程的 Looper 而可以直接使用，这是为何？</p><p><strong>注意：通常我们认为 ActivityThread 就是主线程。事实上它并不是一个线程，而是主线程操作的管理者，所以吧，我觉得把 ActivityThread 认为就是主线程无可厚非，另外主线程也可以说成 UI 线程。</strong></p><p>在 ActivityThread.main() 方法中有如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//android.app.ActivityThread</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">  //...</span><br><span class="line">  Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">  ActivityThread thread = new ActivityThread();</span><br><span class="line">  thread.attach(false);</span><br><span class="line"></span><br><span class="line">  if (sMainThreadHandler == null) &#123;</span><br><span class="line">    sMainThreadHandler = thread.getHandler();</span><br><span class="line">  &#125;</span><br><span class="line">  //...</span><br><span class="line">  Looper.loop();</span><br><span class="line"></span><br><span class="line">  throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Looper.prepareMainLooper(); 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Initialize the current thread as a looper, marking it as an</span><br><span class="line"> * application&apos;s main looper. The main looper for your application</span><br><span class="line"> * is created by the Android environment, so you should never need</span><br><span class="line"> * to call this function yourself.  See also: &#123;@link #prepare()&#125;</span><br><span class="line"> */</span><br><span class="line">public static void prepareMainLooper() &#123;</span><br><span class="line">    prepare(false);</span><br><span class="line">    synchronized (Looper.class) &#123;</span><br><span class="line">        if (sMainLooper != null) &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;The main Looper has already been prepared.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sMainLooper = myLooper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<strong>在 ActivityThread 里 调用了 Looper.prepareMainLooper() 方法创建了 主线程的 Looper ,并且调用了 loop() 方法</strong>，所以我们就可以直接使用 Handler 了。</p><p><strong>注意：<code>Looper.loop()</code> 是个死循环，后面的代码正常情况不会执行。</strong></p><h2 id="主线程的-Looper-不允许退出"><a href="#主线程的-Looper-不允许退出" class="headerlink" title="主线程的 Looper 不允许退出"></a>主线程的 Looper 不允许退出</h2><p>如果你尝试退出 Looper ，你会得到以下错误信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: Main thread not allowed to quit.</span><br><span class="line">  at android.os.MessageQueue.quit(MessageQueue.java:415)</span><br><span class="line">  at android.os.Looper.quit(Looper.java:240)</span><br></pre></td></tr></table></figure><p> 其实原因很简单，<strong>主线程不允许退出</strong>，退出就意味 APP 要挂。</p><h2 id="为什么Looper-loop方法不会卡死主线程"><a href="#为什么Looper-loop方法不会卡死主线程" class="headerlink" title="为什么Looper.loop方法不会卡死主线程"></a>为什么Looper.loop方法不会卡死主线程</h2><p>参考：<a href="https://www.zhihu.com/question/34652589/answer/90344494" target="_blank" rel="noopener">https://www.zhihu.com/question/34652589/answer/90344494</a></p><h2 id="Handler-里藏着的-Callback-能干什么"><a href="#Handler-里藏着的-Callback-能干什么" class="headerlink" title="Handler 里藏着的 Callback 能干什么"></a>Handler 里藏着的 Callback 能干什么</h2><p>在 Handler 的构造方法中有几个 要求传入 Callback ，那它是什么，又能做什么呢？</p><p>来看看 <code>Handler.dispatchMessage(msg)</code> 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void dispatchMessage(Message msg) &#123;</span><br><span class="line">  //这里的 callback 是 Runnable</span><br><span class="line">  if (msg.callback != null) &#123;</span><br><span class="line">    handleCallback(msg);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    //如果 callback 处理了该 msg 并且返回 true， 就不会再回调 handleMessage</span><br><span class="line">    if (mCallback != null) &#123;</span><br><span class="line">      if (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleMessage(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 Handler.Callback 有<strong>优先处理消息的权利</strong> ，当一条消息被 Callback 处理<strong>并拦截（返回 true）</strong>，那么 Handler 的 <code>handleMessage(msg)</code> 方法就不会被调用了；如果 Callback 处理了消息，但是并没有拦截，那么就意味着<strong>一个消息可以同时被 Callback 以及 Handler 处理</strong>。</p><p><strong>我们可以利用 Callback 这个拦截机制来拦截 Handler 的消息！</strong></p><blockquote><p> 场景：Hook <code>ActivityThread.mH</code>， 在 ActivityThread 中有个成员变量 <code>mH</code> ，它是个 Handler，又是个极其重要的类，几乎所有的插件化框架都使用了这个方法。</p></blockquote><h2 id="创建-Message-实例的方式"><a href="#创建-Message-实例的方式" class="headerlink" title="创建 Message 实例的方式"></a>创建 Message 实例的方式</h2><p>先来看看消息池：</p><p>在代码中，可能经常看到recycle()方法，咋一看，可能是在做虚拟机的gc()相关的工作，其实不然，这是用于把消息加入到消息池的作用。这样的好处是，当消息池不为空时，可以直接从消息池中获取Message对象，而不是直接创建，提高效率。</p><p>静态变量<code>sPool</code>的数据类型为Message，通过next成员变量，维护一个消息池；静态变量<code>MAX_POOL_SIZE</code>代表消息池的可用大小；消息池的默认大小为50。</p><p>消息池常用的操作方法是obtain()和recycle()。</p><p><strong>obtain</strong></p><p>从消息池中获取消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sPool != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Message m = sPool;</span><br><span class="line">            sPool = m.next;</span><br><span class="line">            m.next = <span class="keyword">null</span>; <span class="comment">//从sPool中取出一个Message对象，并消息链表断开</span></span><br><span class="line">            m.flags = <span class="number">0</span>; <span class="comment">// 清除in-use flag</span></span><br><span class="line">            sPoolSize--; <span class="comment">//消息池的可用大小进行减1操作</span></span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Message(); <span class="comment">// 当消息池为空时，直接创建Message对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obtain()，从消息池取Message，都是把消息池表头的Message取走，再把表头指向next;</p><p><strong>recycle</strong></p><p>把不再使用的消息加入消息池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isInUse()) &#123; <span class="comment">//判断消息是否正在使用</span></span><br><span class="line">        <span class="keyword">if</span> (gCheckRecycle) &#123; <span class="comment">//Android 5.0以后的版本默认为true,之前的版本默认为false.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"This message cannot be recycled because it is still in use."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    recycleUnchecked();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于不再使用的消息，加入到消息池</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycleUnchecked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将消息标示位置为IN_USE，并清空消息所有的参数。</span></span><br><span class="line">    flags = FLAG_IN_USE;</span><br><span class="line">    what = <span class="number">0</span>;</span><br><span class="line">    arg1 = <span class="number">0</span>;</span><br><span class="line">    arg2 = <span class="number">0</span>;</span><br><span class="line">    obj = <span class="keyword">null</span>;</span><br><span class="line">    replyTo = <span class="keyword">null</span>;</span><br><span class="line">    sendingUid = -<span class="number">1</span>;</span><br><span class="line">    when = <span class="number">0</span>;</span><br><span class="line">    target = <span class="keyword">null</span>;</span><br><span class="line">    callback = <span class="keyword">null</span>;</span><br><span class="line">    data = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123; <span class="comment">//当消息池没有满时，将Message对象加入消息池</span></span><br><span class="line">            next = sPool;</span><br><span class="line">            sPool = <span class="keyword">this</span>;</span><br><span class="line">            sPoolSize++; <span class="comment">//消息池的可用大小进行加1操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>recycle()，将Message加入到消息池的过程，都是把Message加到链表的表头；</p><p><strong>所以由于 Handler 极为常用，所以为了节省开销，Android 给 Message 设计了回收机制，所以我们在使用的时候尽量复用 Message ，减少内存消耗。</strong></p><ul><li><p>1、通过 Message 的静态方法 <code>Message.obtain();</code>  获取；</p></li><li><p>2、通过 Handler 的公有方法 <code>handler.obtainMessage();</code> 。</p></li></ul><h2 id="Handler-引起的内存泄露原因以及解决方案"><a href="#Handler-引起的内存泄露原因以及解决方案" class="headerlink" title="Handler 引起的内存泄露原因以及解决方案"></a>Handler 引起的内存泄露原因以及解决方案</h2><p>Handler 允许我们发送<strong>延时消息</strong>，如果在延时期间用户关闭了 Activity，那么该 Activity 会泄露。</p><p>这个泄露是因为 Message 会持有 Handler，而又因为 <strong>Java 的特性，内部类会持有外部类</strong>，使得 Activity 会被 Handler 持有，这样最终就导致 Activity 泄露。</p><p>解决该问题的最有效的方法是：<strong>将 Handler 定义成静态的内部类，在内部持有 Activity 的弱引用，并及时移除所有消息</strong>。</p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;DemoActivity&gt; ref;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SafeHandler</span><span class="params">(DemoActivity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ref = <span class="keyword">new</span> WeakReference(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="keyword">final</span> Message msg)</span> </span>&#123;</span><br><span class="line">        DemoActivity activity = ref.get();</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            activity.handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> SafeHandler mSafeHandler = <span class="keyword">new</span> SafeHandler(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// .... do somthing</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//移除消息，加一层保障：</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  mSafeHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">super</span>.onDestroy();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：单纯的在 <code>onDestroy</code> 移除消息并不保险，因为 <code>onDestroy</code> 并不一定执行。</strong></p></blockquote><h2 id="子线程里弹-Toast"><a href="#子线程里弹-Toast" class="headerlink" title="子线程里弹 Toast"></a>子线程里弹 Toast</h2><p>当我们尝试在子线程里直接去弹 Toast 的时候，会 crash ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: Can&apos;t create handler inside thread that has not called Looper.prepare()</span><br></pre></td></tr></table></figure><p><strong>本质上是因为 Toast 的实现依赖于 Handler</strong>，同理的还有 Dialog。</p><p>正确使用代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Looper.prepare();</span><br><span class="line">    Toast.makeText(HandlerActivity.<span class="keyword">this</span>, <span class="string">"子线程下测试不会崩溃啦！"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    Looper.loop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h2 id="巧妙利用-Looper-机制"><a href="#巧妙利用-Looper-机制" class="headerlink" title="巧妙利用 Looper 机制"></a>巧妙利用 Looper 机制</h2><p>我们可以利用 Looper 的机制来帮助我们做一些事情：</p><ol><li>将 Runnable post 到主线程执行；</li><li>利用 Looper 判断当前线程是否是主线程。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MainThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Handler HANDLER = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(@NonNull Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isMainThread()) &#123;</span><br><span class="line">            runnable.run();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            HANDLER.post(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMainThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Looper.myLooper() == Looper.getMainLooper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/f70ee1765a61" target="_blank" rel="noopener">https://www.jianshu.com/p/f70ee1765a61</a></p><p><a href="http://gityuan.com/2015/12/26/handler-message-framework/" target="_blank" rel="noopener">http://gityuan.com/2015/12/26/handler-message-framework/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Handler&lt;/code&gt; 是 &lt;code&gt;Android&lt;/code&gt; 开发过程中非常非常常见的东西。它通常被我们用来做主线程与子线程之间的通信工具，而 Handler 作为 Android 中消息机制的重要一员也确实给我们的开发带来了极大的便利。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Handler" scheme="http://hackycy.github.io/tags/Handler/"/>
    
  </entry>
  
  <entry>
    <title>解决Android Studio——Configuration on demand is not supported by the current version of the Android Gradle</title>
    <link href="http://hackycy.github.io/2020/01/17/%E8%A7%A3%E5%86%B3Android-Studio%E2%80%94%E2%80%94Configuration-on-demand-is-not-supported-by-the-current-version-of-the-Android-Gradle/"/>
    <id>http://hackycy.github.io/2020/01/17/解决Android-Studio——Configuration-on-demand-is-not-supported-by-the-current-version-of-the-Android-Gradle/</id>
    <published>2020-01-17T14:45:50.000Z</published>
    <updated>2020-07-23T08:37:09.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>【错误】<br>Configuration on demand is not supported by the current version of the Android Gradle plugin since you are using Gradle version 4.6 or above. </p><p>Suggestion: disable configuration on demand by setting org.gradle.configureondemand=false in your gradle.properties file or use a Gradle version less than 4.6.</p><p>【翻译】<br>由于使用你正在使用 Gradle 版本4.6或以上，当前版本的Android的 Gradle 插件不支持按需配置。</p><p>建议：通过在你的 gradle.properties 文件中设置 org.gradle.configureondemand=false 禁用按需配置，或者使用一个低于4.6版本的 Gradle。</p><a id="more"></a><p><strong>解决方案1：降级</strong></p><p>打开 <strong>gradle-wrapper.properties</strong> 文件，修改 <strong>distributionUrl</strong> 参数，将其后面修改为低于4.6版本的 Gradle。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip</span><br></pre></td></tr></table></figure><p><img src="properties.png" alt></p><p><strong>解决方法2：禁用按需配置</strong></p><p>1、打开 <strong>gradle.properties</strong> 文件，共有两个：<strong>Global Properties</strong> 和 <strong>Project Properties</strong>，将其中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.configureondemand=true</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.configureondemand=false</span><br></pre></td></tr></table></figure><blockquote><p>或删除该语句，或注释掉该语句。</p></blockquote><p>2、或者通过 <strong>Preferences</strong> 菜单，找到 <strong>Build, Execution, Deployment</strong> 里面的 <strong>Compiler</strong>，将右面的 <strong>Configure on demand</strong> 取消勾选。</p><p><img src="panel.png" alt></p><p><strong>参考链接</strong></p><p><a href="https://stackoverflow.com/questions/49990933/configuration-on-demand-is-not-supported-by-the-current-version-of-the-android-g" target="_blank" rel="noopener">https://stackoverflow.com/questions/49990933/configuration-on-demand-is-not-supported-by-the-current-version-of-the-android-g</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;【错误】&lt;br&gt;Configuration on demand is not supported by the current version of the Android Gradle plugin since you are using Gradle version 4.6 or above. &lt;/p&gt;
&lt;p&gt;Suggestion: disable configuration on demand by setting org.gradle.configureondemand=false in your gradle.properties file or use a Gradle version less than 4.6.&lt;/p&gt;
&lt;p&gt;【翻译】&lt;br&gt;由于使用你正在使用 Gradle 版本4.6或以上，当前版本的Android的 Gradle 插件不支持按需配置。&lt;/p&gt;
&lt;p&gt;建议：通过在你的 gradle.properties 文件中设置 org.gradle.configureondemand=false 禁用按需配置，或者使用一个低于4.6版本的 Gradle。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://hackycy.github.io/tags/Android-Studio/"/>
    
  </entry>
  
</feed>
