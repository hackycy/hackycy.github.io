<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小源Bの博客</title>
  
  <subtitle>zj&amp;ycy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hackycy.github.io/"/>
  <updated>2019-07-09T02:41:34.794Z</updated>
  <id>http://hackycy.github.io/</id>
  
  <author>
    <name>hackycy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android应用内禁止屏幕截图</title>
    <link href="http://hackycy.github.io/2019/07/09/Android%E5%BA%94%E7%94%A8%E5%86%85%E7%A6%81%E6%AD%A2%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE/"/>
    <id>http://hackycy.github.io/2019/07/09/Android应用内禁止屏幕截图/</id>
    <published>2019-07-09T02:18:59.000Z</published>
    <updated>2019-07-09T02:41:34.794Z</updated>
    
    <content type="html"><![CDATA[<p>一个晚上在看了一下微信的收付款功能，想截个图，突然发现提示了一句<strong>由于受安全政策限制，无法截取屏幕截图</strong>，再研究了一下手机的其他APP，中国建设银行APP上也有该提示，出于好奇，查阅了一下该功能的实现方式。</p><a id="more"></a><p>该功能的实现方式很简单，就是在<code>setContentView</code>前加上一句代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);</span><br></pre></td></tr></table></figure><p><img src="demo.jpeg" alt=""></p><p>Google官方对于<a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE" target="_blank" rel="noopener">FLAG_SECURE</a>的解释：</p><blockquote><p>Display flag: Indicates that the display has a secure video output and supports compositing secure surfaces.</p><p>If this flag is set then the display device has a secure video output and is capable of showing secure surfaces. It may also be capable of showing <code>protected buffers</code>.</p><p>If this flag is not set then the display device may not have a secure video output; the user may see a blank region on the screen instead of the contents of secure surfaces or protected buffers.</p><p>Secure surfaces are used to prevent content rendered into those surfaces by applications from appearing in screenshots or from being viewed on non-secure displays. Protected buffers are used by secure video decoders for a similar purpose.</p><p>An application creates a window with a secure surface by specifying the <code>WindowManager.LayoutParams#FLAG_SECURE</code>window flag. Likewise, an application creates a <code>SurfaceView</code> with a secure surface by calling <code>SurfaceView#setSecure</code> before attaching the secure view to its containing window.</p><p>An application can use the absence of this flag as a hint that it should not create secure surfaces or protected buffers on this display because the content may not be visible. For example, if the flag is not set then the application may choose not to show content on this display, show an informative error message, select an alternate content stream or adopt a different strategy for decoding content that does not rely on secure surfaces or protected buffers.</p><p><strong>See also:</strong></p><ul><li><code>getFlags()</code></li></ul><p>Constant Value: 2 (0x00000002)</p></blockquote><p>在设置了该FLAG后，发现该FLAG还可以实现以下功能：</p><ul><li>阻止屏幕截图</li><li>在任务切换界面中（Recent apps）只显示应用名字和图标，不会显示APP具体内容。</li></ul><p><strong>参考资料</strong></p><p><a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE" target="_blank" rel="noopener">https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE</a></p><p><a href="https://developer.android.com/reference/android/view/Display.html#FLAG_SECURE" target="_blank" rel="noopener">https://developer.android.com/reference/android/view/Display.html#FLAG_SECURE</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个晚上在看了一下微信的收付款功能，想截个图，突然发现提示了一句&lt;strong&gt;由于受安全政策限制，无法截取屏幕截图&lt;/strong&gt;，再研究了一下手机的其他APP，中国建设银行APP上也有该提示，出于好奇，查阅了一下该功能的实现方式。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>IOS之UIAlertController使用</title>
    <link href="http://hackycy.github.io/2019/07/08/IOS%E4%B9%8BUIAlertController%E4%BD%BF%E7%94%A8/"/>
    <id>http://hackycy.github.io/2019/07/08/IOS之UIAlertController使用/</id>
    <published>2019-07-08T03:06:30.000Z</published>
    <updated>2019-07-08T06:58:07.546Z</updated>
    
    <content type="html"><![CDATA[<p>当应用需要向用户提示一些重要信息或者提示用户进行选择时，可以使用警告框(Alert)或者操作表(Action Sheet)来进行提示用户。下图中左侧是警告框，右侧是操作表。</p><a id="more"></a><p><img src="tip.png" alt=""></p><p>自iOS 8开始，Apple用继承自<code>UIViewController</code>的<code>UIAlertController</code>取代了<code>UIAlertView</code>和<code>UIAlertSheet</code>。</p><p>警报控制器（UIAlertController）虽然有警告框和操作表两种形式，但其创建步骤是一样的。如下所示：</p><ol><li>创建<code>UIAlertController</code>，指定警报控制器样式。</li><li>向警报控制器添加按钮。</li><li>显示<code>UIAlertController</code>。</li></ol><blockquote><p>“ UIAlertView is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleAlert instead.”</p><p>“UIActionSheet is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleActionSheet instead. “</p></blockquote><h1 id="创建警告框"><a href="#创建警告框" class="headerlink" title="创建警告框"></a>创建警告框</h1><h2 id="创建警告控制器"><a href="#创建警告控制器" class="headerlink" title="创建警告控制器"></a>创建警告控制器</h2><p>创建<code>UIAlertController</code>很简单，不需要设置代理或者指定按钮</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"标题"</span> message:<span class="string">@"这是message"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIAlertControllerStyle</span>) &#123;</span><br><span class="line">    <span class="built_in">UIAlertControllerStyleActionSheet</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">UIAlertControllerStyleAlert</span></span><br><span class="line">&#125; <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">8</span>_0);</span><br></pre></td></tr></table></figure><p>这里的<code>preferredStyle:</code>参数有<code>UIAlertControllerStyleAlert</code>和<code>UIAlertControllerStyleActionSheet</code>两种，这里我们要创建的是<em>Alert View</em>，所以使用第一种。</p><h2 id="添加按钮"><a href="#添加按钮" class="headerlink" title="添加按钮"></a>添加按钮</h2><p><code>UIAlertAction</code>对象由标题、样式和用户单击该按钮时运行的代码块三部分组成。<code>UIAlertActionStyle</code>有三种样式。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIAlertActionStyle</span>) &#123;</span><br><span class="line">    <span class="comment">// 常规样式</span></span><br><span class="line">    <span class="built_in">UIAlertActionStyleDefault</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 取消样式</span></span><br><span class="line">    <span class="built_in">UIAlertActionStyleCancel</span>,</span><br><span class="line">    <span class="comment">// 警示样式，按钮字体为红色</span></span><br><span class="line">    <span class="built_in">UIAlertActionStyleDestructive</span></span><br><span class="line">&#125; <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">8</span>_0);</span><br></pre></td></tr></table></figure><p>创建代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIAlertAction</span> *sure = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"确定"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"确定"</span>);</span><br><span class="line">    &#125;];</span><br><span class="line"><span class="built_in">UIAlertAction</span> *cancel = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"取消"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"取消"</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">[alert addAction:sure];</span><br><span class="line">[alert addAction:cancel];</span><br></pre></td></tr></table></figure><h2 id="显示警告框"><a href="#显示警告框" class="headerlink" title="显示警告框"></a>显示警告框</h2><p>显示alert</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span> presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="alert.png" alt=""></p><p>如果再添加一个reset按钮并设置成<code>UIAlertActionStyleDestructive</code>样式，再看看效果</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="built_in">UIAlertAction</span> *reset = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"Reset"</span> style:<span class="built_in">UIAlertActionStyleDestructive</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Reset Action"</span>);</span><br><span class="line">&#125;];</span><br><span class="line">[alert addAction:reset];</span><br><span class="line"><span class="comment">//show</span></span><br><span class="line">[<span class="keyword">self</span> presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p><img src="alert2.png" alt=""></p><p>只要上面有<code>UIAlertActionStyleCancel</code>样式的按钮，该按钮总是在最底部，其他按钮顺序由添加顺序决定。如果包含<code>UIAlertActionStyleDestructive</code>样式的按钮，一般先添加，以便在第一个位置显示。每一个警报控制器只能包含一个<em>Cancel</em>按钮，如果你添加了两个或多个，在运行时会抛出<code>NSInternalInconsistencyException</code>的异常。</p><blockquote><p><strong>UIAlertActionStyleDefault 和 UIAlertActionStyleCancel 的区别</strong></p><p>添加UIAlertActionStyleCancel样式后，在UIAlertAction只有两个时，UIAlertActionStyleCancel样式的action都会按苹果的默认风格把取消按钮放在左边；</p><p>添加UIAlertActionStyleCancel样式后，在UIAlertAction有三个及其以上的时候，UIAlertActionStyleCancel样式的action会显示在最下面。</p><p>而添加UIAlertActionStyleDefault样式时，与你addAction到alertController上的顺序有关。</p><p><strong>UIAlertActionStyleDestructive 警示样式</strong></p><p>警示样式的按钮会变成红色。根据苹果官方的定义，“警示”样式的按钮是用在可能会改变或删除数据的操作上，因此用了红色的醒目标识来警示用户。</p></blockquote><h2 id="创建带输入框的警告框"><a href="#创建带输入框的警告框" class="headerlink" title="创建带输入框的警告框"></a>创建带输入框的警告框</h2><p><code>UIAlerController</code>的另一个用途是我们可以向警报控制器中添加任意数量的<code>UITextField</code>作为警报控制器内容视图中的一部分。</p><p>比如这里用一个登录框来进行举例：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取UIAlertController实例</span></span><br><span class="line"><span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"登录框"</span> message:<span class="string">@"请输入用户名和密码"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line"><span class="comment">//创建UIAlertAction</span></span><br><span class="line"><span class="built_in">UIAlertAction</span> *sure = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"登陆"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line"><span class="comment">//获取textField实例，根据添加的顺序获取</span></span><br><span class="line"><span class="built_in">UITextField</span> *loginname = alert.textFields.firstObject;</span><br><span class="line"><span class="built_in">UITextField</span> *pwd = alert.textFields.lastObject;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"name:%@,  pwd:%@"</span>, loginname.text, pwd.text);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="built_in">UIAlertAction</span> *cancel = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"取消"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"取消"</span>);        </span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">//添加到UIAlertController实例</span></span><br><span class="line">[alert addAction:sure];</span><br><span class="line">[alert addAction:cancel];</span><br><span class="line"><span class="comment">//添加TextField</span></span><br><span class="line">[alert addTextFieldWithConfigurationHandler:^(<span class="built_in">UITextField</span> * _Nonnull textField) &#123;</span><br><span class="line">   [textField setPlaceholder:<span class="string">@"name"</span>];</span><br><span class="line">&#125;];</span><br><span class="line">[alert addTextFieldWithConfigurationHandler:^(<span class="built_in">UITextField</span> * _Nonnull textField) &#123;</span><br><span class="line">    [textField setPlaceholder:<span class="string">@"password"</span>];</span><br><span class="line">    textField.secureTextEntry = <span class="literal">YES</span>;</span><br><span class="line">&#125;];</span><br><span class="line">[<span class="keyword">self</span> presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="alerttextfield.png" alt=""></p><h1 id="创建操作表Action-Sheet"><a href="#创建操作表Action-Sheet" class="headerlink" title="创建操作表Action Sheet"></a>创建操作表Action Sheet</h1><p>操作表一般用于为用户提供一组可供选择的操作选项，如删除、恢复等。一般根据设备尺寸大小决定呈现形式，在iPhone上，操作表由底部滑出；在iPad上，操作表以弹出框（popover)形式出现。</p><p>创建操作表的方法与警告框类似，唯一不同在于<code>preferredStyle:</code>参数的选择。在<code>showActionSheet:</code>方法中创建操作表。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIAlertController</span> *sheet = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"标题"</span> message:<span class="string">@"这是message"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleActionSheet</span>];</span><br></pre></td></tr></table></figure><p>添加Action Sheet的按钮和添加警告框的按钮代码行为是一致的。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIAlertAction</span> *sure = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"确定"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"确定"</span>);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="built_in">UIAlertAction</span> *reset = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"重置"</span> style:<span class="built_in">UIAlertActionStyleDestructive</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"重置"</span>);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="built_in">UIAlertAction</span> *cancel = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"取消"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"取消"</span>);</span><br><span class="line">&#125;];</span><br><span class="line">[sheet addAction:sure];</span><br><span class="line">[sheet addAction:cancel];</span><br><span class="line">[sheet addAction:reset];</span><br><span class="line"><span class="comment">//show</span></span><br><span class="line">[<span class="keyword">self</span> presentViewController:sheet animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="actionsheet.png" alt=""></p><p>如果<code>Action Sheet</code>中有取消按钮，取消按钮每次都会在底部显示，其他按钮会按照添加的顺序显示。在Action Sheet内不能添加文本框。如果你添加了文本框，在运行时会抛出下面的异常提醒：</p><blockquote><p>Terminating app due to uncaught exception ‘NSInternalInconsistencyException’, reason: ‘Text fields can only be added to an alert controller of style UIAlertControllerStyleAlert’</p></blockquote><p>如上面说到的，在iPad中Action Sheet以弹出框的形式呈现。弹出框总是需要一个锚点，锚点可以是源视图，也可以是按钮。在这个demo中，我们用按钮触发弹出框，所以这里将把按钮作为锚点。<code>showActionSheet:</code>方法更新后如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//inner click func</span></span><br><span class="line"><span class="comment">//(IBAction)actionsheet:(UIButton *)sender</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="built_in">UIPopoverPresentationController</span> *popover = sheet.popoverPresentationController;</span><br><span class="line"><span class="keyword">if</span> (popover) &#123;</span><br><span class="line">popover.sourceView = sender;</span><br><span class="line">popover.sourceRect = sender.bounds;</span><br><span class="line">popover.permittedArrowDirections = <span class="built_in">UIPopoverArrowDirectionAny</span>;        </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">[<span class="keyword">self</span> presentViewController:sheet animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><p>如果在iPad中没有添加上面方法，运行时会出现下面崩溃提示：</p><blockquote><p>Terminating app due to uncaught exception ‘NSGenericException’, reason: ‘Your application has presented a UIAlertController (&lt;UIAlertController: 0x7f88c85221f0&gt;) of style UIAlertControllerStyleActionSheet. The modalPresentationStyle of a UIAlertController with this style is UIModalPresentationPopover. You must provide location information for this popover through the alert controller’s popoverPresentationController. You must provide either a sourceView and sourceRect or a barButtonItem.  If this information is not known when you present the alert controller, you may provide it in the UIPopoverPresentationControllerDelegate method -prepareForPopoverPresentation.’</p></blockquote><p>现在，Action Sheet以触发它的按钮为锚点，以弹出框形式展现。</p><p><img src="actionsheetipad.png" alt=""></p><blockquote><p>当Action Sheet以弹出框形式展现时，<code>UIKit</code>会取消显示<em>Cancel</em>按钮。此时，点击popover以外任何区域和点击<em>Cancel</em>按钮效果一致，同时会调用取消按钮的完成处理程序。</p></blockquote><h1 id="退出警告控制器"><a href="#退出警告控制器" class="headerlink" title="退出警告控制器"></a>退出警告控制器</h1><p>警报控制器会在用户点击按钮后自动消失，但在app进入后台时，警告框和选择表并不会自动退出。此时，我们需要通过代码实现退出警报控制器。</p><p>在<strong>通知中心</strong>进行注册，当接收到app进入后台的通知时退出警报控制器。更新后的<code>viewDidLoad</code>如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// app 进入后台后隐藏警报控制器</span></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserverForName:<span class="built_in">UIApplicationDidEnterBackgroundNotification</span> object:<span class="literal">nil</span> queue:<span class="literal">nil</span> usingBlock:^(<span class="built_in">NSNotification</span> * _Nonnull note) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.presentedViewController dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidDisappear</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 移除观察者</span></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIApplicationDidEnterBackgroundNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记得移除观察者，否则会引起崩溃。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>下面总结下Alert View和Action Sheet的异同。</p><p>警告框Alert View：</p><ul><li>一般显示在当前视图控制器的中心，点击警告框以外区域不能隐藏警告控制器。</li><li>可以添加任意数量文本框。</li><li>有一个或两个按钮时，横向排布，如果有<em>Cancel</em>按钮，则<em>Cancel</em>按钮显示在左侧；有两个以上按钮时，竖列排布，如果有<em>Cancel</em>按钮，则<em>Cancel</em>按钮显示在最底部。其他按钮按照添加顺序排布。</li></ul><p>操作表Action Sheet：</p><ul><li>在iPhone中自下而上滑出显示在当前控制器的底部，点击action sheet以外区域可以隐藏<code>UIAlertController</code>。</li><li>在iPad中以popover方式、以源视图为锚点显示，点击选择表以外的区域可以隐藏警告控制器。</li><li>不能添加文本框。</li><li>按钮竖列排布，在iPhone中，<em>Cancel</em>按钮默认在底部显示；在iPad中，<em>Cancel</em>按钮默认不显示。</li></ul><p><code>UIAlertController</code>类只能原样使用，不支持子类化。该类的视图层次结构是私有的，不能修改。最后，需要注意的是，警告框和操作表向用户显示信息时会中断应用的当前流程，请只在需要的时候使用，切勿滥用。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/7606b6514ec4" target="_blank" rel="noopener">https://www.jianshu.com/p/7606b6514ec4</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当应用需要向用户提示一些重要信息或者提示用户进行选择时，可以使用警告框(Alert)或者操作表(Action Sheet)来进行提示用户。下图中左侧是警告框，右侧是操作表。&lt;/p&gt;
    
    </summary>
    
      <category term="Ios" scheme="http://hackycy.github.io/categories/Ios/"/>
    
    
      <category term="Ios" scheme="http://hackycy.github.io/tags/Ios/"/>
    
  </entry>
  
  <entry>
    <title>Android系统剪贴板使用</title>
    <link href="http://hackycy.github.io/2019/07/04/Android%E7%B3%BB%E7%BB%9F%E5%89%AA%E8%B4%B4%E6%9D%BF%E4%BD%BF%E7%94%A8/"/>
    <id>http://hackycy.github.io/2019/07/04/Android系统剪贴板使用/</id>
    <published>2019-07-04T02:19:05.000Z</published>
    <updated>2019-07-04T03:05:58.508Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司业务用到了关于Android系统剪贴板的使用，所以记录一下剪贴板的使用。</p><a id="more"></a><h1 id="ClipboardManager介绍"><a href="#ClipboardManager介绍" class="headerlink" title="ClipboardManager介绍"></a>ClipboardManager介绍</h1><p>当需要使用到ClipboardManager时，需要把数据放在一个ClipData里，然后在把这个数据对象放在系统的剪贴板里面。</p><p><strong>ClipData有三种形式：</strong></p><ul><li>Text：文字字符串。文字是直接放在clip对象中，然后放在剪贴板里；粘贴这个字符串的时候直接从剪贴板拿到这个对象，把字符串放入你的应用存储中。</li><li>URI：一个Uri对象。表示任何形式的URI。这种形式主要用于从一个content provider中复制复杂的数据。复制的时候把一个<code>Uri</code> 对象放在一个clip对象中，然后再放在剪贴板里；粘贴的时候取出这个clip对象，得到Uri，把它解析为一个数据资源比如content provider，然后从资源中复制数据到应用存储中。</li><li>Intent：Intent对象。这支持了复制应用快捷方式。复制的时候把Intent对象放在clip对象中，再放入剪贴板；粘贴数据时，从clip对象中得到Intent对象，放入应用存储区域中。</li></ul><blockquote><p>注意：剪贴板里每次仅会持有一个ClipData对象，当应用再放入另一个ClipData对象进来时，前一个就消失了。</p></blockquote><h1 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h1><h2 id="ClipboardManager"><a href="#ClipboardManager" class="headerlink" title="ClipboardManager"></a>ClipboardManager</h2><p>ClipboardManager代表了系统的剪贴板，可以通过<code>(ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE)</code>系统服务来获取。</p><p>全名为<strong>android.text.ClipboardManager</strong>从API 11开始就废弃了。</p><p>取而代之的是它的子类：<strong>android.content.ClipboardManager</strong> (since API Level 11)。</p><h2 id="ClipData-ClipDescription-and-ClipData-Item"><a href="#ClipData-ClipDescription-and-ClipData-Item" class="headerlink" title="ClipData, ClipDescription, and ClipData.Item"></a>ClipData, ClipDescription, and ClipData.Item</h2><p>前面说的clip对象就是<strong>ClipData</strong>类的对象，其中包含了一个 <code>ClipDescription</code>对象和一个或多个<code>ClipData.Item</code>对象。</p><p><strong>ClipDescription</strong>对象中包含了一个数组，描述clip对象的MIME类型。</p><p><strong>ClipData.Item</strong>对象中包含文字、URI或者Intent数据。<strong>一个clip对象中可以包含一个或多个Item对象</strong>。</p><p>比如你想要复制list中的多项数据，你可以为list中的每一项创建一个<strong>ClipData.Item</strong>对象，然后把它们放进一个<strong>ClipData</strong>对象中，这样就一次性把多项数据都放在了剪贴板中。</p><blockquote><p>注意ClipData这个类是API 11才有的。</p></blockquote><h2 id="ClipData中的简洁方法"><a href="#ClipData中的简洁方法" class="headerlink" title="ClipData中的简洁方法"></a>ClipData中的简洁方法</h2><ul><li><p><strong>ClipData</strong>类中有一些静态的简洁方法，用于创建只有一个<strong>ClipData.Item</strong>和一条简单描述( <code>ClipDescription</code>)的ClipData对象。</p></li><li><p>newPlainText(label, text)返回ClipData对象，数据是文字text，描述是label，MIME类型是<code>MIMETYPE_TEXT_PLAIN</code>。</p></li><li><p>newUri(resolver, label, URI)</p></li><li><p>newIntent(label, intent)</p></li><li>newHtmlText(label,text, htmlText)</li><li>newRawUri(label, uri)</li></ul><blockquote><p>newHtmlText method need Call requires API level 16</p></blockquote><h1 id="ClipboardFramework架构图"><a href="#ClipboardFramework架构图" class="headerlink" title="ClipboardFramework架构图"></a>ClipboardFramework架构图</h1><p><img src="clipboardframework.png" alt=""></p><h1 id="ClipboardManager使用"><a href="#ClipboardManager使用" class="headerlink" title="ClipboardManager使用"></a>ClipboardManager使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取剪贴板服务：</span></span><br><span class="line">ClipboardManager manager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);</span><br><span class="line"><span class="comment">//然后把数据放在ClipData对象中</span></span><br><span class="line">ClipData data = ClipData.newPlainText(<span class="string">"label"</span>, <span class="string">"this is clipboard data"</span>);       </span><br><span class="line">manager.setPrimaryClip(data);</span><br></pre></td></tr></table></figure><p>上面的代码就可以将文字放到剪贴板了，然后找个输入框“粘贴”就行啦。</p><blockquote><p>如果需要自由复制TextView等控件的文字，只要在该控件上添加<code>android:textIsSelectable=&quot;true&quot;</code>或者使用代码设置<code>setTextIsSelectable(true)</code>即可。</p></blockquote><p><strong>URI:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creates a Uri based on a base Uri and a record ID based on the contact's last name</span></span><br><span class="line"><span class="comment">// Declares the base URI string</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTACTS = <span class="string">"content://com.example.contacts"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declares a path string for URIs that you use to copy data</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COPY_PATH = <span class="string">"/copy"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declares the Uri to paste to the clipboard</span></span><br><span class="line">Uri copyUri = Uri.parse(CONTACTS + COPY_PATH + <span class="string">"/"</span> + lastName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a new URI clip object. The system uses the anonymous getContentResolver() object to</span></span><br><span class="line"><span class="comment">// get MIME types from provider. The clip object's label is "URI", and its data is</span></span><br><span class="line"><span class="comment">// the Uri previously created.</span></span><br><span class="line">ClipData clip = ClipData.newUri(getContentResolver(),<span class="string">"URI"</span>,copyUri);</span><br></pre></td></tr></table></figure><p><strong>Intent:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Creates the Intent</span></span><br><span class="line">Intent appIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, com.example.demo.myapplication.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a clip object with the Intent in it. Its label is "Intent" and its data is</span></span><br><span class="line"><span class="comment">// the Intent object created previously</span></span><br><span class="line">ClipData clip = ClipData.newIntent(<span class="string">"Intent"</span>,appIntent);</span><br></pre></td></tr></table></figure><h1 id="获取剪贴板内容"><a href="#获取剪贴板内容" class="headerlink" title="获取剪贴板内容"></a>获取剪贴板内容</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ClipboardManager manager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);</span><br><span class="line"></span><br><span class="line">String resultString = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查剪贴板是否有内容</span></span><br><span class="line"><span class="keyword">if</span>(manager.hasPrimaryClip())&#123;</span><br><span class="line">ClipData clipData = manager.getPrimaryClip();</span><br><span class="line"><span class="keyword">int</span> count = clipData.getItemCount();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line"></span><br><span class="line">ClipData.Item item = clipData.getItemAt(i);</span><br><span class="line">CharSequence str = item.coerceToText(MainActivity.<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resultString += str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Log.e(<span class="string">"TAG"</span>, resultString);</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>任何时间，都只有一个clip对象在剪贴板里。新的复制操作都会覆盖前一个clip对象，因为用户可能从你的应用中退出，从其他应用中拷贝一个东西，所以你不能假定用户在你的应用中拷贝的上一个东西一定还放在剪贴板里。</p></li><li><p>一个clip对象，即ClipData中的多个<code>ClipData.Item</code> 对象是为了支持多选项的复制粘贴，而不是为了支持单选的多种形式。你通常需要clip对象中的所有的项目，即<a href="http://developer.android.com/reference/android/content/ClipData.Item.html" target="_blank" rel="noopener">ClipData.Item</a>有一样的形式，比如都是文字，都是URI或都是Intent，而不是混合各种形式。</p></li><li><p>当你提供数据时，你可以提供不同的MIME表达方式。将你支持的MIME类型加入到<strong>ClipDescription</strong>中去，然后在你的content provider中实现它。</p></li><li><p>从剪贴板得到数据时，你的应用有责任检查可用的MIME类型，然后决定使用哪一个。即便有一个clip对象在剪贴板中并且用户要求粘贴，你的应用有可能不需要进行粘贴操作。你应该在MIME类型兼容的时候执行粘贴操作。你可以选择使用 <code>coerceToText()</code>方法将粘贴的内容转换为文字。如果你的应用支持多种类型，你可以让用户自己选用哪一个。</p></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://developer.android.com/guide/topics/text/copy-paste.html" target="_blank" rel="noopener">http://developer.android.com/guide/topics/text/copy-paste.html</a></p><p><a href="https://www.cnblogs.com/zhujiabin/p/7605553.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhujiabin/p/7605553.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司业务用到了关于Android系统剪贴板的使用，所以记录一下剪贴板的使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android返回不销毁Activity，直接进入后台</title>
    <link href="http://hackycy.github.io/2019/07/03/Android%E8%BF%94%E5%9B%9E%E4%B8%8D%E9%94%80%E6%AF%81Activity%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BF%9B%E5%85%A5%E5%90%8E%E5%8F%B0/"/>
    <id>http://hackycy.github.io/2019/07/03/Android返回不销毁Activity，直接进入后台/</id>
    <published>2019-07-03T02:20:55.000Z</published>
    <updated>2019-07-09T08:44:50.337Z</updated>
    
    <content type="html"><![CDATA[<p>最近打开闲鱼，微信，发现他们点击返回到桌面的时候，他们的activity并没有直接销毁，还是依然保留在返回之前浏览的界面。查了一下资料，的确有可以操作的办法。</p><a id="more"></a><h1 id="isTaskRoot"><a href="#isTaskRoot" class="headerlink" title="isTaskRoot()"></a>isTaskRoot()</h1><p><code>isTaskRoot()</code>方法用来判断该Activity是否为任务栈中的根Activity，即启动应用的第一个Activity。</p><h1 id="moveTaskToBack"><a href="#moveTaskToBack" class="headerlink" title="moveTaskToBack()"></a>moveTaskToBack()</h1><p><code>moveTaskToBack()</code>方法用于将activity退到后台，而不是直接finish掉。</p><p>从生命周期来说，会执行<code>onPause</code>、<code>onStop</code>，但不会执行<code>onDestroy</code> 。恢复的时候也一样，会执行<code>onStart</code>、<code>onResume</code>，但不会执行<code>onCreate</code>。</p><p>参数nonRoot表示的含义是此方法对非根activity是否有效：</p><ul><li>true表示对所有activity均有效，</li><li>false表示只对根activity有效。</li></ul><p>返回值：该activity被退出到后台或者他已经在后台了返回true，否则返回false</p><h1 id="官方文档："><a href="#官方文档：" class="headerlink" title="官方文档："></a>官方文档：</h1><blockquote><p>public boolean moveTaskToBack (boolean nonRoot)<br>Since: API Level 1Move the task containing this activity to the back of the activity stack. The activity’s order within the task is unchanged.<br>Parameters:<br>nonRoot If false then this only works if the activity is the root of a task; if true it will work for any activity in a task.<br>Returns:<br>If the task was moved (or it was already at the back) true is returned, else false.</p></blockquote><h1 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h1><p>重写<code>onBackPressed</code>或者<code>onKeyDown</code>事件等来监听返回键事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getKeyCode() == KeyEvent.KEYCODE_BACK) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isTaskRoot()) &#123;</span><br><span class="line">                moveTaskToBack(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.voidcn.com/article/p-wbosovty-bru.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-wbosovty-bru.html</a></p><p><a href="http://www.voidcn.com/article/p-poscpyhl-bn.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-poscpyhl-bn.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近打开闲鱼，微信，发现他们点击返回到桌面的时候，他们的activity并没有直接销毁，还是依然保留在返回之前浏览的界面。查了一下资料，的确有可以操作的办法。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA For Mac 快捷键</title>
    <link href="http://hackycy.github.io/2019/06/30/IntelliJ-IDEA-For-Mac-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://hackycy.github.io/2019/06/30/IntelliJ-IDEA-For-Mac-快捷键/</id>
    <published>2019-06-30T09:52:09.000Z</published>
    <updated>2019-06-30T09:59:28.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA-For-Mac-快捷键"><a href="#IntelliJ-IDEA-For-Mac-快捷键" class="headerlink" title="IntelliJ IDEA For Mac 快捷键"></a>IntelliJ IDEA For Mac 快捷键</h1><blockquote><p>建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键</p></blockquote><a id="more"></a><h4 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h4><ul><li><code>⌘</code> Command</li><li><code>⇧</code> Shift</li><li><code>⌥</code> Option</li><li><code>⌃</code> Control</li><li><code>↩︎</code> Return/Enter</li><li><code>⌫</code> Delete</li><li><code>⌦</code> 向前删除键（Fn+Delete）</li><li><code>↑</code> 上箭头</li><li><code>↓</code> 下箭头</li><li><code>←</code> 左箭头</li><li><code>→</code> 右箭头</li><li><code>⇞</code> Page Up（Fn+↑）</li><li><code>⇟</code> Page Down（Fn+↓）</li><li><code>Home</code> Fn + ←</li><li><code>End</code> Fn + →</li><li><code>⇥</code> 右制表符（Tab键）</li><li><code>⇤</code> 左制表符（Shift+Tab）</li><li><code>⎋</code> Escape (Esc)</li></ul><h4 id="一、Editing（编辑）"><a href="#一、Editing（编辑）" class="headerlink" title="一、Editing（编辑）"></a>一、Editing（编辑）</h4><ul><li><code>⌃Space</code> 基本的代码补全（补全任何类、方法、变量）</li><li><code>⌃⇧Space</code> 智能代码补全（过滤器方法列表和变量的预期类型）</li><li><code>⌘⇧↩</code> 自动结束代码，行末自动添加分号</li><li><code>⌘P</code> 显示方法的参数信息</li><li><code>⌃J, Mid. button click</code> 快速查看文档</li><li><code>⇧F1</code> 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li><li><code>⌘+鼠标放在代码上</code> 显示代码简要信息</li><li><code>⌘F1</code> 在错误或警告处显示具体描述信息</li><li><code>⌘N, ⌃↩, ⌃N</code> 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li><li><code>⌃O</code> 覆盖方法（重写父类方法）</li><li><code>⌃I</code> 实现方法（实现接口中的方法）</li><li><code>⌘⌥T</code> 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li><li><code>⌘/</code> 注释/取消注释与行注释</li><li><code>⌘⌥/</code> 注释/取消注释与块注释</li><li><code>⌥↑</code> 连续选中代码块</li><li><code>⌥↓</code> 减少当前选中的代码块</li><li><code>⌃⇧Q</code> 显示上下文信息</li><li><code>⌥↩</code> 显示意向动作和快速修复代码</li><li><code>⌘⌥L</code> 格式化代码</li><li><code>⌃⌥O</code> 优化import</li><li><code>⌃⌥I</code> 自动缩进线</li><li><code>⇥ / ⇧⇥</code> 缩进代码 / 反缩进代码</li><li><code>⌘X</code> 剪切当前行或选定的块到剪贴板</li><li><code>⌘C</code> 复制当前行或选定的块到剪贴板</li><li><code>⌘V</code> 从剪贴板粘贴</li><li><code>⌘⇧V</code> 从最近的缓冲区粘贴</li><li><code>⌘D</code> 复制当前行或选定的块</li><li><code>⌘⌫</code> 删除当前行或选定的块的行</li><li><code>⌃⇧J</code> 智能的将代码拼接成一行</li><li><code>⌘↩</code> 智能的拆分拼接的行</li><li><code>⇧↩</code> 开始新的一行</li><li><code>⌘⇧U</code> 大小写切换</li><li><code>⌘⇧] / ⌘⇧[</code> 选择直到代码块结束/开始</li><li><code>⌥⌦</code> 删除到单词的末尾（⌦键为Fn+Delete）</li><li><code>⌥⌫</code> 删除到单词的开头</li><li><code>⌘+ / ⌘-</code> 展开 / 折叠代码块</li><li><code>⌘⇧+</code> 展开所以代码块</li><li><code>⌘⇧-</code> 折叠所有代码块</li><li><code>⌘W</code> 关闭活动的编辑器选项卡</li></ul><h4 id="二、Search-Replace（查询-替换）"><a href="#二、Search-Replace（查询-替换）" class="headerlink" title="二、Search/Replace（查询/替换）"></a>二、Search/Replace（查询/替换）</h4><ul><li><code>Double ⇧</code> 查询任何东西</li><li><code>⌘F</code> 文件内查找</li><li><code>⌘G</code> 查找模式下，向下查找</li><li><code>⌘⇧G</code> 查找模式下，向上查找</li><li><code>⌘R</code> 文件内替换</li><li><code>⌘⇧F</code> 全局查找（根据路径）</li><li><code>⌘⇧R</code> 全局替换（根据路径）</li><li><code>⌘⇧S</code> 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li><li><code>⌘⇧M</code> 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li></ul><h4 id="三、Usage-Search（使用查询）"><a href="#三、Usage-Search（使用查询）" class="headerlink" title="三、Usage Search（使用查询）"></a>三、Usage Search（使用查询）</h4><ul><li><code>⌥F7 / ⌘F7</code> 在文件中查找用法 / 在类中查找用法</li><li><code>⌘⇧F7</code> 在文件中突出显示的用法</li><li><code>⌘⌥F7</code> 显示用法</li><li><code>⌘⇧I</code> 查看定义的类,快速查看</li></ul><h4 id="四、Compile-and-Run（编译和运行）"><a href="#四、Compile-and-Run（编译和运行）" class="headerlink" title="四、Compile and Run（编译和运行）"></a>四、Compile and Run（编译和运行）</h4><ul><li><code>⌘F9</code> 编译Project</li><li><code>⌘⇧F9</code> 编译选择的文件、包或模块</li><li><code>⌃⌥R</code> 弹出 Run 的可选择菜单</li><li><code>⌃⌥D</code> 弹出 Debug 的可选择菜单</li><li><code>⌃R</code> 运行</li><li><code>⌃D</code> 调试</li><li><code>⌃⇧R, ⌃⇧D</code> 从编辑器运行上下文环境配置</li></ul><h4 id="五、Debugging（调试）"><a href="#五、Debugging（调试）" class="headerlink" title="五、Debugging（调试）"></a>五、Debugging（调试）</h4><ul><li><code>F8</code> 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li><li><code>F7</code> 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li><li><code>⇧F7</code> 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li><li><code>⇧F8</code> 跳出</li><li><code>⌥F9</code> 运行到光标处，如果光标前有其他断点会进入到该断点</li><li><code>⌥F8</code> 计算表达式（可以更改变量值使其生效）</li><li><code>⌘⌥R</code> 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li><li><code>⌘F8</code> 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li><li><code>⌘⇧F8</code> 查看断点信息</li><li></li></ul><h4 id="六、Navigation（导航）"><a href="#六、Navigation（导航）" class="headerlink" title="六、Navigation（导航）"></a>六、Navigation（导航）</h4><ul><li><code>⌘O</code> 查找类文件</li><li><code>⌘⇧O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠<code>/</code></li><li><code>⌘⌥O</code> 前往指定的变量 / 方法</li><li><code>⌃← / ⌃→</code> 左右切换打开的编辑tab页</li><li><code>F12</code> 返回到前一个工具窗口</li><li><code>⎋</code> 从工具窗口进入代码文件窗口</li><li><code>⇧⎋</code> 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li><li><code>⌘⇧F4</code> 关闭活动run/messages/find/… tab</li><li><code>⌘L</code> 在当前文件跳转到某一行的指定处</li><li><code>⌘E</code> 显示最近打开的文件记录列表</li><li><code>⌘⌥← / ⌘⌥→</code> 退回 / 前进到上一个操作的地方</li><li><code>⌘⇧⌫</code> 跳转到最后一个编辑的地方</li><li><code>⌥F1</code> 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li><li><code>⌘B / ⌘ 鼠标点击</code> 进入光标所在的方法/变量的接口或是定义处</li><li><code>⌘⌥B</code> 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li><li><code>⌥ Space, ⌘Y</code> 快速打开光标所在方法、类的定义</li><li><code>⌃⇧B</code> 跳转到类型声明处</li><li><code>⌘U</code> 前往当前光标所在方法的父类的方法 / 接口定义</li><li><code>⌃↓ / ⌃↑</code> 当前光标跳转到当前文件的前一个/后一个方法名位置</li><li><code>⌘] / ⌘[</code> 移动光标到当前所在代码的花括号开始/结束位置</li><li><code>⌘F12</code> 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li><li><code>⌃H</code> 显示当前类的层次结构</li><li><code>⌘⇧H</code> 显示方法层次结构</li><li><code>⌃⌥H</code> 显示调用层次结构</li><li><code>F2 / ⇧F2</code> 跳转到下一个/上一个突出错误或警告的位置</li><li><code>F4 / ⌘↓</code> 编辑/查看代码源</li><li><code>⌥ Home</code> 显示到当前文件的导航条</li><li><code>F3</code>选中文件/文件夹/代码行，添加/取消书签</li><li><code>⌥F3</code> 选中文件/文件夹/代码行，使用助记符添加/取消书签</li><li><code>⌃0...⌃9</code> 定位到对应数值的书签位置</li><li><code>⌘F3</code> 显示所有书签</li></ul><h4 id="七、Refactoring（重构）"><a href="#七、Refactoring（重构）" class="headerlink" title="七、Refactoring（重构）"></a>七、Refactoring（重构）</h4><ul><li><code>F5</code> 复制文件到指定目录</li><li><code>F6</code> 移动文件到指定目录</li><li><code>⌘⌫</code> 在文件上为安全删除文件，弹出确认框</li><li><code>⇧F6</code> 重命名文件</li><li><code>⌘F6</code> 更改签名</li><li><code>⌘⌥N</code> 一致性</li><li><code>⌘⌥M</code> 将选中的代码提取为方法</li><li><code>⌘⌥V</code> 提取变量</li><li><code>⌘⌥F</code> 提取字段</li><li><code>⌘⌥C</code> 提取常量</li><li><code>⌘⌥P</code> 提取参数</li></ul><h4 id="八、VCS-Local-History（版本控制-本地历史记录）"><a href="#八、VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="八、VCS/Local History（版本控制/本地历史记录）"></a>八、VCS/Local History（版本控制/本地历史记录）</h4><ul><li><code>⌘K</code> 提交代码到版本控制器</li><li><code>⌘T</code> 从版本控制器更新代码</li><li><code>⌥⇧C</code> 查看最近的变更记录</li><li><code>⌃C</code> 快速弹出版本控制器操作面板</li></ul><h4 id="九、Live-Templates（动态代码模板）"><a href="#九、Live-Templates（动态代码模板）" class="headerlink" title="九、Live Templates（动态代码模板）"></a>九、Live Templates（动态代码模板）</h4><ul><li><code>⌘⌥J</code> 弹出模板选择窗口，将选定的代码使用动态模板包住</li><li><code>⌘J</code> 插入自定义动态代码模板</li></ul><h4 id="十、General（通用）"><a href="#十、General（通用）" class="headerlink" title="十、General（通用）"></a>十、General（通用）</h4><ul><li><code>⌘1...⌘9</code> 打开相应编号的工具窗口</li><li><code>⌘S</code> 保存所有</li><li><code>⌘⌥Y</code> 同步、刷新</li><li><code>⌃⌘F</code> 切换全屏模式</li><li><code>⌘⇧F12</code> 切换最大化编辑器</li><li><code>⌥⇧F</code> 添加到收藏夹</li><li><code>⌥⇧I</code> 检查当前文件与当前的配置文件</li><li><code>§⌃, ⌃`</code> 快速切换当前的scheme（切换主题、代码样式等）</li><li><code>⌘,</code> 打开IDEA系统设置</li><li><code>⌘;</code> 打开项目结构对话框</li><li><code>⇧⌘A</code> 查找动作（可设置相关选项）</li><li><code>⌃⇥</code> 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IntelliJ-IDEA-For-Mac-快捷键&quot;&gt;&lt;a href=&quot;#IntelliJ-IDEA-For-Mac-快捷键&quot; class=&quot;headerlink&quot; title=&quot;IntelliJ IDEA For Mac 快捷键&quot;&gt;&lt;/a&gt;IntelliJ IDEA For Mac 快捷键&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://hackycy.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="IDEA" scheme="http://hackycy.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Android Toolbar 使用详解</title>
    <link href="http://hackycy.github.io/2019/06/27/Android-Toolbar-%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://hackycy.github.io/2019/06/27/Android-Toolbar-使用详解/</id>
    <published>2019-06-27T02:59:14.000Z</published>
    <updated>2019-06-28T07:54:35.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Toolbar"><a href="#初识Toolbar" class="headerlink" title="初识Toolbar"></a>初识Toolbar</h1><p><strong>Toolbar</strong> 是在 Android 5.0 开始推出的一个 Material Design 风格的导航控件 ，Google 非常推荐大家使用 <strong>Toolbar</strong> 来作为Android客户端的导航栏，以此来取代之前的 <strong>Actionbar</strong> 。</p><a id="more"></a><p>与 <strong>Actionbar</strong> 相比，<strong>Toolbar</strong> 明显要灵活的多。它不像 <strong>Actionbar</strong> 一样，一定要固定在Activity的顶部，而是可以放到界面的任意位置。除此之外，在设计 <strong>Toolbar</strong> 的时候，Google也留给了开发者很多可定制修改的余地，这些可定制修改的属性在API文档中都有详细介绍，如：</p><ul><li><strong>设置导航栏图标；</strong></li><li><strong>设置App的logo；</strong></li><li><strong>支持设置标题和子标题；</strong></li><li><strong>支持添加一个或多个的自定义控件；</strong></li><li><strong>支持Action Menu；</strong></li></ul><h1 id="使用Toolbar"><a href="#使用Toolbar" class="headerlink" title="使用Toolbar"></a>使用Toolbar</h1><p>前面提到 <strong>Toolbar</strong> 是在 Android 5.0 才开始加上的，Google 为了将这一设计向下兼容，自然也少不了要推出兼容版的 <strong>Toolbar</strong> 。为此，我们需要在工程中引入 <strong>appcompat-v7</strong> 的兼容包，使用 <strong>android.support.v7.widget.Toolbar</strong> 进行开发。但是由于<strong>support</strong>库现在google团队已经不在维护了，最新版本好像是28点多，已经迁移到了<strong>AndroidX</strong>，所以该篇文章使用<strong>AndroidX</strong>，只是包名相对的变化了，使用和v7包没有多大变化。</p><p>先来看看运行效果</p><p><img src="toolbar_show.png" alt="Toolbar演示"></p><p>按照效果图，从左到右分别是我们前面提及到的 <strong>导航栏图标</strong>、<strong>App的logo</strong>、<strong>标题和子标题</strong>、<strong>自定义控件</strong>、以及 <strong>ActionMenu</strong> 。接着，我们来看下布局文件和代码实现。</p><p>首先，在布局文件 <code>activity_main.xml</code>中添加进我们需要的 Toolbar 控件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"textview"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.appcompat.widget.Toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着创建一个<code>toolbar_menu.xml</code>菜单项</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_search"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@android:drawable/ic_input_add"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"menu_search"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_notification"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@android:drawable/ic_delete"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"menu_notifications"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_item1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"item_01"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_item2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"item_02"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>我的activity继承自AppCompatActivity，并不是原生sdk内部的，因此不能使用<code>android:showAsAction</code>，否则会报错。所以需要使用自定义的命名空间app。</p><p>ifRoom表示有空间则显示，never表示从不显示，而是会通过overflowwindow显示。</p></blockquote><p>最后在<code>MainActivity</code>中调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Toolbar mToolbar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mToolbar = findViewById(R.id.toolbar);</span><br><span class="line"></span><br><span class="line">        mToolbar.setTitle(<span class="string">"标题"</span>);</span><br><span class="line">        mToolbar.setSubtitle(<span class="string">"子标题"</span>);</span><br><span class="line">        mToolbar.setNavigationIcon(android.R.drawable.ic_menu_info_details);</span><br><span class="line">        mToolbar.setLogo(android.R.drawable.ic_menu_view);</span><br><span class="line">        setSupportActionBar(mToolbar); <span class="comment">//最后设置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  菜单栏目</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.toolbar_menu, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改主题：</p><p>为了能够正常使用ToolBar，我们需要隐藏原来的ActionBar，这个可以在主题中修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者继承某个父类:<code>Theme.AppCompat.Light.NoActionBar</code></p><p>也可以在代码中</p><p>如果是<code>AppCompatActivity</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line"><span class="comment">//setContentView之前调用，否则报错</span></span><br></pre></td></tr></table></figure><p>如果是<code>Activity</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br></pre></td></tr></table></figure><blockquote><p>最后运行就可以有上面图中的效果啦。</p></blockquote><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li><p>如果你想修改标题和子标题的字体大小、颜色等，可以调用<strong>setTitleTextColor</strong>、<strong>setTitleTextAppearance</strong>、<strong>setSubtitleTextColor</strong>、<strong>setSubtitleTextAppearance</strong> 这些API；</p></li><li><p>自定义的View位于 <strong>title</strong>、<strong>subtitle</strong> 和 <strong>actionmenu</strong> 之间，这意味着，如果 <strong>title</strong> 和 <strong>subtitle</strong> 都在，且 <strong>actionmenu选项</strong> 太多的时候，留给自定义View的空间就越小；</p></li><li><p><strong>导航图标</strong> 和 <strong>app logo</strong> 的区别在哪？如果你只设置 <strong>导航图标</strong>（ or <strong>app logo</strong>） 和 <strong>title</strong>、<strong>subtitle</strong>，会发现 <strong>app logo</strong> 和 <strong>title</strong>、<strong>subtitle</strong> 的间距比较小，看起来不如 <strong>导航图标</strong> 与 它们两搭配美观；</p></li><li><p><strong>Toolbar</strong> 和其他控件一样，很多属性设置方法既支持代码设置，也支持在xml中设置</p></li></ul><h1 id="其他样式修改"><a href="#其他样式修改" class="headerlink" title="其他样式修改"></a>其他样式修改</h1><h2 id="修改Toolbar-popup-menu样式"><a href="#修改Toolbar-popup-menu样式" class="headerlink" title="修改Toolbar popup menu样式"></a>修改Toolbar popup menu样式</h2><p>点击右上角的三个点，会弹出一个popup menu，如下所示：</p><p><img src="popup_show.png" alt=""></p><p>可以看到弹出菜单的样式是白底黑字，那么有没有办法改变它的背景颜色呢，使得菜单显示为黑底白字。这肯定是有的。</p><p>在<code>styles.xml</code>文件中新建一个主题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- toolbar弹出菜单样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ToolbarPopupTheme"</span> <span class="attr">parent</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark"</span>&gt;</span><span class="undefined">   </span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackground"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到这个主题的parent是直接继承自<code>ThemeOverlay.AppCompat.Dark</code>，是支持包的一个主题，并且我们在内部声明了<code>android:colorBackground</code>这个属性，我们只要更改这个属性就能变更菜单的背景颜色了。接下来我们在布局文件中引入这个主题，这也很简单，为toolbar添加额外的属性如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:popupTheme="@style/ToolbarPopupTheme"</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="popup_show2.png" alt=""></p><h2 id="修改Toolbar-popup-menu-弹出位置"><a href="#修改Toolbar-popup-menu-弹出位置" class="headerlink" title="修改Toolbar popup menu 弹出位置"></a>修改Toolbar popup menu 弹出位置</h2><p>在上图看到，弹出的菜单的位置是过于偏上的，我们可以修改它的位置，让它在toolbar的下面，这样看起来也美观一些：</p><p>修改<code>styles.xml</code>文件，添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- toolbar弹出菜单样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ToolbarPopupTheme"</span> <span class="attr">parent</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackground"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"actionOverflowMenuStyle"</span>&gt;</span>@style/OverflowMenuStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span> </span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--新增一个item，用于控制menu--&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"OverflowMenuStyle"</span> <span class="attr">parent</span>=<span class="string">"Widget.AppCompat.Light.PopupMenu.Overflow"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"overlapAnchor"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--把该属性改为false即可使menu位置位于toolbar之下--&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>布局文件中引用该主题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:popupTheme="@style/ToolbarPopupTheme"</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="popup_show3.png" alt=""></p><h2 id="修改Action-Menu-Item-的文字颜色"><a href="#修改Action-Menu-Item-的文字颜色" class="headerlink" title="修改Action Menu Item 的文字颜色"></a>修改Action Menu Item 的文字颜色</h2><p>在<code>styles.xml</code>文件中，在popup menu的主题添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- toolbar弹出菜单样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ToolbarPopupTheme"</span> <span class="attr">parent</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackground"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"actionOverflowMenuStyle"</span>&gt;</span>@style/OverflowMenuStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!--新增一个item，用于控制menu--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>布局文件中引用该主题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:popupTheme="@style/ToolbarPopupTheme"</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="popup_show4.png" alt=""></p><h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><h2 id="设置监听事件不生效"><a href="#设置监听事件不生效" class="headerlink" title="设置监听事件不生效"></a>设置监听事件不生效</h2><p>看一下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initToolbar</span><span class="params">()</span></span>&#123;</span><br><span class="line">mToolbar = findViewById(R.id.toolbar);</span><br><span class="line">mToolbar.setTitle(<span class="string">""</span>);</span><br><span class="line">mToolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line"><span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">mToolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line"><span class="comment">//。。。</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">setSupportActionBar(mToolbar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码正常设置监听但是就是监听事件就是没有触发，查询后，监听事件必须在<code>setSupportActionBar(mToolbar);</code>之后设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initToolbar</span><span class="params">()</span></span>&#123;</span><br><span class="line">mToolbar = findViewById(R.id.toolbar);</span><br><span class="line">mToolbar.setTitle(<span class="string">""</span>);</span><br><span class="line">setSupportActionBar(mToolbar);</span><br><span class="line">  mToolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line"><span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">mToolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line"><span class="comment">//。。。</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调换一下位置即可正常运行。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上都是一些基本的使用，Toolbar控件的使用还是很灵活的，还有很多一些高级技巧，比如配合上状态栏变成沉浸式，或者配合<code>CoordinatorLayout</code>等实现更炫的效果。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/79604c3ddcae" target="_blank" rel="noopener">https://www.jianshu.com/p/79604c3ddcae</a></p><p><a href="https://www.jianshu.com/p/ae0013a4f71a" target="_blank" rel="noopener">https://www.jianshu.com/p/ae0013a4f71a</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初识Toolbar&quot;&gt;&lt;a href=&quot;#初识Toolbar&quot; class=&quot;headerlink&quot; title=&quot;初识Toolbar&quot;&gt;&lt;/a&gt;初识Toolbar&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Toolbar&lt;/strong&gt; 是在 Android 5.0 开始推出的一个 Material Design 风格的导航控件 ，Google 非常推荐大家使用 &lt;strong&gt;Toolbar&lt;/strong&gt; 来作为Android客户端的导航栏，以此来取代之前的 &lt;strong&gt;Actionbar&lt;/strong&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Activity 的4种启动模式</title>
    <link href="http://hackycy.github.io/2019/06/20/Activity-%E7%9A%844%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hackycy.github.io/2019/06/20/Activity-的4种启动模式/</id>
    <published>2019-06-20T03:27:34.000Z</published>
    <updated>2019-06-20T03:43:11.049Z</updated>
    
    <content type="html"><![CDATA[<p>启动模式简单地说就是Activity启动时的策略，在<code>AndroidManifest.xml</code>中的标签的<code>android:launchMode</code>属性设置；启动模式有4种，分别为standard、singleTop、singleTask、singleInstance；</p><a id="more"></a><ul><li>standard 标准模式，每次都新建一个实例对象</li><li>singleTop 如果在任务栈顶发现了相同的实例则重用，否则新建并压入栈顶</li><li>singleTask 如果在任务栈中发现了相同的实例，将其上面的任务终止并移除，重用该实例。否则新建实例并入栈</li><li>singleInstance 允许不同应用，进程线程等共用一个实例，无论从何应用调用该实例都重用</li></ul><h1 id="任务栈"><a href="#任务栈" class="headerlink" title="任务栈"></a>任务栈</h1><p>每个应用都有一个任务栈，是用来存放Activity的，功能类似于函数调用的栈，先后顺序代表了Activity的出现顺序；比如Activity1–&gt;Activity2–&gt;Activity3,则任务栈为：</p><p><img src="taskstack.gif" alt=""></p><h1 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h1><h2 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h2><p><img src="standard.gif" alt=""></p><p>每次激活Activity时(startActivity)，都创建Activity实例，并放入任务栈；</p><p>但是每次都新建一个实例的话真是过于浪费，为了优化应该尽量考虑余下三种方式。</p><h2 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h2><p><img src="singleTop.gif" alt=""></p><p>每次扫描栈顶，如果在任务栈顶发现了相同的实例则重用，否则新建并压入栈顶。</p><p>在<code>AndroidManifest.xml</code>中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SingleTopActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/singletop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h2><p><img src="singleTask.gif" alt=""></p><p>与singleTop的区别是singleTask会扫描整个任务栈并制定策略。上效果图：</p><p>使用时需要小心因为会将之前入栈的实例之上的实例全部移除，需要格外小心逻辑。</p><p>在<code>AndroidManifest.xml</code>中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SingleTopActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/singletop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h2><p><img src="singleInstance.gif" alt=""></p><p>这个的理解可以这么看：在微信里点击“用浏览器打开”一个朋友圈，然后切到QQ再用浏览器开一个网页，再跑到哪里再开一个页面。每次我们都在Activity中试图启动另一个浏览器Activity，但是在浏览器端看来，都是调用了同一个自己。因为使用了singleInstance模式，不同应用调用的Activity实际上是共享的。</p><p>在<code>AndroidManifest.xml</code>中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SingleTopActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/singletop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://hit-alibaba.github.io/interview/Android/basic/Android中Activity启动模式详解" target="_blank" rel="noopener">http://www.cnblogs.com/fanchangfa/archive/2012/08/25/2657012.html</a></li><li><a href="http://www.cnblogs.com/meizixiong/archive/2013/07/03/3170591.html" target="_blank" rel="noopener">Android入门：Activity四种启动模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;启动模式简单地说就是Activity启动时的策略，在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中的标签的&lt;code&gt;android:launchMode&lt;/code&gt;属性设置；启动模式有4种，分别为standard、singleTop、singleTask、singleInstance；&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>IOS之UIApplication</title>
    <link href="http://hackycy.github.io/2019/06/20/IOS%E4%B9%8BUIApplication/"/>
    <id>http://hackycy.github.io/2019/06/20/IOS之UIApplication/</id>
    <published>2019-06-20T03:18:53.000Z</published>
    <updated>2019-06-20T03:21:12.167Z</updated>
    
    <content type="html"><![CDATA[<p>UIApplication 的核心作用是提供了 iOS 程序运行期间的控制和协作工作。</p><p>每一个程序在运行期必须有且仅有一个<code>UIApplication</code>（或则其子类）的一个实例。在程序开始运行的时候，<code>UIApplicationMain</code> 函数是程序进入点，这个函数做了很多工作，其中一个重要的工作就是创建一个 <code>UIApplication</code> 的单例实例。在你的代码中你，你可以通过调用 <code>[UIApplication sharedApplication]</code>来得到这个单例实例的指针。</p><a id="more"></a><p>UIApplication 的一个主要工作是处理用户事件，它会起一个队列，把所有用户事件都放入队列，逐个处理，在处理的时候，它会发送当前事件 到一个合适的处理事件的目标控件。此外，UIApplication 实例还维护一个在本应用中打开的 window 列表（UIWindow 实例），这样它就 可以接触应用中的任何一个 UIView 对象。UIApplication 实例会被赋予一个代理对象，以处理应用程序的生命周期事件（比如程序启动和关闭）、系统事件（比如来电、记事项警告）等等。</p><h1 id="UIApplicaion-生命周期"><a href="#UIApplicaion-生命周期" class="headerlink" title="UIApplicaion 生命周期"></a>UIApplicaion 生命周期</h1><p>一个 UIApplication 可以有如下几种状态：</p><ul><li><code>Not running（未运行）</code>程序没启动</li><li><code>Inactive（未激活）</code>程序在前台运行，不过没有接收到事件。在没有事件处理情况下程序通常停留在这个状态</li><li><code>Active（激活）</code>程序在前台运行而且接收到了事件。这也是前台的一个正常的模式</li><li><code>Background（后台）</code> 程序在后台而且能执行代码，大多数程序进入这个状态后会在在这个状态上停留一会。时间到之后会进入挂起状态 (Suspended)。有的程序经过特殊的请求后可以长期处于 Background 状态</li><li><code>Suspended（挂起）</code>程序在后台不能执行代码。系统会自动把程序变成这个状态而且不会发出通知。当挂起时，程序还是停留在内存中的，当系统内存低时，系统就把挂起的程序清除掉，为前台程序提供更多的内存。</li></ul><p>常见的代理方法有</p><ol><li><p><code>(void)applicationWillResignActive:(UIApplication *)application</code></p><p>说明：当应用程序将要入非活动状态执行，在此期间，应用程序不接收消息或事件，比如来电话了</p></li><li><p><code>(void)applicationDidBecomeActive:(UIApplication *)application</code></p><p>说明：当应用程序入活动状态执行，这个刚好跟上面那个方法相反</p></li><li><p><code>(void)applicationDidEnterBackground:(UIApplication *)application</code></p><p>说明：当程序被推送到后台的时候调用。所以要设置后台继续运行，则在这个函数里面设置即可</p></li><li><p><code>(void)applicationWillEnterForeground:(UIApplication *)application</code></p><p>说明：当程序从后台将要重新回到前台时候调用，这个刚好跟上面的那个方法相反。</p></li><li><p><code>(void)applicationWillTerminate:(UIApplication *)application</code></p><p>说明：当程序将要退出是被调用，通常是用来保存数据和一些退出前的清理工作。这个需要设置 UIApplicationExitsOnSuspend 的键值。</p></li><li><p><code>(void)applicationDidReceiveMemoryWarning:(UIApplication *)application</code></p><p>说明：iPhone 设备只有有限的内存，如果为应用程序分配了太多内存操作系统会终止应用程序的运行，在终止前会执行这个方法，通常可以在这里进行内存清理工作防止程序被终止</p></li><li><p><code>(void)applicationSignificantTimeChange:(UIApplication*)application</code></p><p>说明：当系统时间发生改变时执行</p></li><li><p><code>(void)applicationDidFinishLaunching:(UIApplication*)application</code></p><p>说明：当程序载入后执行</p></li></ol><h1 id="App-生命周期示意图"><a href="#App-生命周期示意图" class="headerlink" title="App 生命周期示意图"></a>App 生命周期示意图</h1><p><img src="lifecycle.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIApplication 的核心作用是提供了 iOS 程序运行期间的控制和协作工作。&lt;/p&gt;
&lt;p&gt;每一个程序在运行期必须有且仅有一个&lt;code&gt;UIApplication&lt;/code&gt;（或则其子类）的一个实例。在程序开始运行的时候，&lt;code&gt;UIApplicationMain&lt;/code&gt; 函数是程序进入点，这个函数做了很多工作，其中一个重要的工作就是创建一个 &lt;code&gt;UIApplication&lt;/code&gt; 的单例实例。在你的代码中你，你可以通过调用 &lt;code&gt;[UIApplication sharedApplication]&lt;/code&gt;来得到这个单例实例的指针。&lt;/p&gt;
    
    </summary>
    
      <category term="Ios" scheme="http://hackycy.github.io/categories/Ios/"/>
    
    
      <category term="Ios" scheme="http://hackycy.github.io/tags/Ios/"/>
    
      <category term="Objective-C" scheme="http://hackycy.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>纯HTML+CSS实现轮播图</title>
    <link href="http://hackycy.github.io/2019/06/19/%E7%BA%AFHTML-CSS%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <id>http://hackycy.github.io/2019/06/19/纯HTML-CSS实现轮播图/</id>
    <published>2019-06-19T06:13:12.000Z</published>
    <updated>2019-06-19T08:22:40.391Z</updated>
    
    <content type="html"><![CDATA[<p>一种纯HTML+CSS实现的轮播图，但由于没有JS不支持实现用户进行左右滑动。</p><a id="more"></a><h1 id="DOM结构搭建"><a href="#DOM结构搭建" class="headerlink" title="DOM结构搭建"></a>DOM结构搭建</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide-container middle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>a</span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.slide-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="dom.png" alt=""></p><h1 id="图片并排显示"><a href="#图片并排显示" class="headerlink" title="图片并排显示"></a>图片并排显示</h1><p>可以看到正常文档流图片是向下排列的，如何让他们实现并排显示呢，可能会想到使用float，但是最简单的办法是使用flex布局。给<code>slide-wrap</code>容器指定为Flex布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.slide-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="dom2.png" alt=""></p><p>为什么<code>slide-wrap</code>要给予500%的宽度，因为该列有五张图片，一张图片刚好占满一个父容器。</p><h1 id="实现点击轮播效果"><a href="#实现点击轮播效果" class="headerlink" title="实现点击轮播效果"></a>实现点击轮播效果</h1><p>不用JS如何实现轮播图切换效果呢？我们先实现轮播图的小点点。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.navigation</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> white solid;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inner slide-wrap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为什么使用label来实现指示器呢，这里就关键用到了它的for属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inner slide-wrap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">id</span>=<span class="string">"r1"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">id</span>=<span class="string">"r2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">id</span>=<span class="string">"r3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">id</span>=<span class="string">"r4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">id</span>=<span class="string">"r5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">"r1"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">"r2"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">"r3"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">"r4"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">"r5"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name="r"]</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用label和input:radio进行关联起来后，点击的label就相当于选择了某个单选按钮，默认第一个单选按钮为选中状态，切换到第二个时，我们将第一张图向容器左边挪百分之20%的宽度(因为一共有五张图，一张图就占20%的宽度)，就可以看到切花成了第二张图，以此类推。看看代码的实现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#r1</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r2</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r3</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r4</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">60%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r5</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">80%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击指示器切换轮播图就完成啦。</p><h1 id="自动轮播效果"><a href="#自动轮播效果" class="headerlink" title="自动轮播效果"></a>自动轮播效果</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: loop <span class="number">12s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> loop &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    15% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 停留1500ms */</span></span><br><span class="line">    20% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">20%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 切换500ms 位移-20% */</span></span><br><span class="line">    35% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">20%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    40% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">40%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    55% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">40%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    60% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">60%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    75% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">60%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    80% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">80%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    95% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">80%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 复位到第一张图片 */</span></span><br></pre></td></tr></table></figure><p>CSS3的动画属性就不过多介绍了，但是自动轮播和点击是相冲突的，但是这是一种纯CSS轮播图的一种实现思路，不需JS的实现。挺好玩的。</p><p>源码已放置GitHub：<a href="https://github.com/hackycy/Html-Css-Carousel" target="_blank" rel="noopener">https://github.com/hackycy/Html-Css-Carousel</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一种纯HTML+CSS实现的轮播图，但由于没有JS不支持实现用户进行左右滑动。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://hackycy.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://hackycy.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript必知必会</title>
    <link href="http://hackycy.github.io/2019/05/29/JavaScript%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <id>http://hackycy.github.io/2019/05/29/JavaScript必知必会/</id>
    <published>2019-05-29T14:10:12.000Z</published>
    <updated>2019-06-01T10:55:09.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基本介绍"><a href="#JavaScript基本介绍" class="headerlink" title="JavaScript基本介绍"></a>JavaScript基本介绍</h1><ul><li>JS的用途：Javascript可以实现浏览器端、服务器端(nodejs)。。。</li><li><p>浏览器端JS由以下三个部分组成：</p><ul><li><p>ECMAScript：基础语法(数据类型、运算符、函数。。。)</p></li><li><p>BOM(浏览器对象模型)：window、location、history、navigator。。。</p></li><li><p>DOM(文档对象模型)：div、p、span。。。</p></li></ul></li></ul><a id="more"></a><ul><li>ECMAScript又名es，有以下重大版本：<ul><li>旧时代：<ul><li>es1.0。。。es3.1</li></ul></li><li>新时代：<ul><li>es5</li><li>es6(es2015)</li><li>es7(es2016)、es8(es2017)</li></ul></li></ul></li></ul><h1 id="JavaScript基本数据类型和复杂数据类型"><a href="#JavaScript基本数据类型和复杂数据类型" class="headerlink" title="JavaScript基本数据类型和复杂数据类型"></a>JavaScript基本数据类型和复杂数据类型</h1><p>一句总结，使用排除法，除掉基本数据类型都是复杂数据类型即<code>字符串</code>、<code>数字</code>、<code>布尔值</code>、<code>null</code>、<code>undefined</code>、<code>Symbol</code>其余都是对象类型。复杂数据类型例如<code>Date</code>、<code>Array</code>等。</p><h1 id="对象的基本使用"><a href="#对象的基本使用" class="headerlink" title="对象的基本使用"></a>对象的基本使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> person = &#123;</span></span><br><span class="line"><span class="javascript">                    name : <span class="string">"张三"</span>,</span></span><br><span class="line"><span class="undefined">                    age : 18,</span></span><br><span class="line"><span class="javascript">                    say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">'i am from china'</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取属性</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.name);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.age);</span></span><br><span class="line"><span class="undefined">            person.say();</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//设置属性</span></span></span><br><span class="line"><span class="javascript">            person.address = <span class="string">"中国广东广州"</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.address);</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//清除属性</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">delete</span> person.address;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">delete</span> person.adc  <span class="comment">//无意义,但是也不会报错</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.address);</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//delete只能删除对象的属性,而不能删除变量</span></span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="comment">//清空对象</span></span></span><br><span class="line"><span class="undefined">            person=&#123;&#125;;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//将person变为null</span></span></span><br><span class="line"><span class="javascript">            person = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//两者意义不一样</span></span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line">18</span><br><span class="line">i am from china</span><br></pre></td></tr></table></figure></p><p>对象是键值对的集合：对象是由属性和方法构成的 (ps：也有说法为：对象里面皆属性，认为方法也是一个属性)</p><ul><li>name是属性    age是属性</li><li>say是方法</li></ul><h2 id="获取属性的方式"><a href="#获取属性的方式" class="headerlink" title="获取属性的方式"></a>获取属性的方式</h2><h3 id="语法"><a href="#语法" class="headerlink" title=".语法"></a>.语法</h3><ul><li><code>person.age</code>获取age属性</li><li><code>person.say</code>获取到一个方法</li></ul><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="[]语法"></a>[]语法</h3><ul><li><code>person[&quot;name&quot;]</code>等价于person.age</li><li><code>person[&quot;say&quot;]</code>等价于person.say</li></ul><h3 id="2种方式的差异："><a href="#2种方式的差异：" class="headerlink" title="2种方式的差异："></a>2种方式的差异：</h3><ul><li><p>.语法更方便，但是坑比较多(有局限性)，比如：</p><ul><li>.后面不能使用js中的关键字、保留字(class、this、function。。。)</li><li>.后面不能使用数字<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">obj.this=<span class="number">5</span>; <span class="comment">//语法错误</span></span><br><span class="line">obj<span class="number">.0</span>=<span class="number">10</span>;   <span class="comment">//语法错误</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>[]使用更广泛</p><ul><li>o1[变量name]</li><li>[“class”]、[“this”]都可以随意使用 <code>obj[&quot;this&quot;]=10</code></li><li>[0]、[1]、[2]也可以使用       <ul><li><code>obj[3]=50 = obj[&quot;3&quot;]=50</code>     </li><li>思考：为什么obj[3]=obj[“3”]</li></ul></li><li>甚至还可以这样用：[“[object Array]”]<ul><li>jquery里面就有这样的实现</li></ul></li><li>也可以这样用：[“{abc}”]<ul><li>给对象添加了{abc}属性</li></ul></li></ul></li></ul><h2 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h2><ul><li><code>student[&quot;gender&quot;]=&quot;男&quot;</code>    等价于：    <code>student.gender=&quot;男&quot;</code><ul><li>含义：如果student对象中没有gender属性，就添加一个gender属性，值为”男”</li><li>如果student对象中有gender属性，就修改gender属性的值为”男”</li></ul></li><li>案例1：<code>student.isFemale=true</code></li><li>案例2：<code>student[&quot;children&quot;]=[1,2,5]</code></li><li>案例3：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student.toShanghai=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"正在去往上海的路上"</span>)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h2><ul><li><code>delete student[&quot;gender&quot;]</code>      </li><li><code>delete student.gender</code></li></ul><h2 id="属性简写"><a href="#属性简写" class="headerlink" title="属性简写"></a>属性简写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; a &#125;; <span class="comment">// &#123; a: 10 &#125;</span></span><br></pre></td></tr></table></figure><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.name = name;</span><br><span class="line">                <span class="keyword">this</span>.age = age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">40</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(person);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>person就是根据【Person构造函数】创建出来的对象</p><blockquote><p>任何函数都可以当成构造函数</p></blockquote><p>例如<code>function CreateFunc(){ }</code></p><p>只要把一个函数通过new的方式来进行调用，我们就把这一次函数的调用方式称之为：构造函数的调用</p><ul><li>new CreateFunc(); 此时CreateFunc就是一个构造函数</li><li>CreateFunc();     此时的CreateFunc并不是构造函数</li></ul><p>关于new Object()，new Object()等同于对象字面量{}</p><h2 id="构造函数的执行过程"><a href="#构造函数的执行过程" class="headerlink" title="构造函数的执行过程"></a>构造函数的执行过程</h2><p><code>var person = new Person()</code></p><ul><li>创建一个对象，称之为这个Person构造函数的实例，<code>p1</code></li><li>创建一个内部对象，<code>this</code>，将<code>this</code>指向该实例</li><li>执行函数内部的代码，其中，操作<code>this</code>的部分就是操作了该实例</li><li>返回值<ul><li>如果函数没有返回值，没有<code>return</code>语句，那么就会返回构造函数的实例<code>p1</code></li><li>如果函数返回了一个基本数据类型的值，那么就会返回本次构造函数的实例<code>p1</code></li><li>如果函数返回了一个复杂数据类型的值，那么本次函数的返回值就是该值。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1=<span class="keyword">new</span> fn();    <span class="comment">//f1就是fn的实例</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f2=<span class="keyword">new</span> fn2();   <span class="comment">//f2是fn2构造函数的实例</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]; </span><br><span class="line">    <span class="comment">//数组是一个对象类型的值，</span></span><br><span class="line">    <span class="comment">//所以数组是一个复杂数据类型的值</span></span><br><span class="line">    <span class="comment">//--&gt;本次构造函数的真正返回值就是该数组</span></span><br><span class="line">    <span class="comment">//--&gt;不再是fn3构造函数的实例</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f3=<span class="keyword">new</span> fn3();   <span class="comment">//f3还是fn3的实例吗？错</span></span><br><span class="line"><span class="comment">//f3值为[1,3,5]</span></span><br></pre></td></tr></table></figure><h1 id="JS中的继承"><a href="#JS中的继承" class="headerlink" title="JS中的继承"></a>JS中的继承</h1><p>JS中的继承和其他语言不太一样。JS中的继承是你可以通过某种方式让某个对象访问到其他对象中的属性、方法，那么这种方式就可以称之为继承。而并不是简单的所谓的<code>Xxx extends Parent</code></p><h2 id="为什么要使用继承"><a href="#为什么要使用继承" class="headerlink" title="为什么要使用继承"></a>为什么要使用继承</h2><ul><li>有些对象会有方法(动作、行为)，而这些方法都是函数，如果把这些方法和函数都放在构造函数中声明就会导致内存的浪费<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你好"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> p2=<span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p1.say === p2.say);   <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="继承的方式"><a href="#继承的方式" class="headerlink" title="继承的方式"></a>继承的方式</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><h4 id="原型链继承第一种方式"><a href="#原型链继承第一种方式" class="headerlink" title="原型链继承第一种方式"></a>原型链继承第一种方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这样写没有问题，但是方法一旦过多，代码的冗余将会非常的多。</p><h4 id="原型链继承第二种方式"><a href="#原型链继承第二种方式" class="headerlink" title="原型链继承第二种方式"></a>原型链继承第二种方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype = &#123;</span><br><span class="line"><span class="keyword">constructor</span>:Person,</span><br><span class="line">say:function()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">run:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'running'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>1、一般情况下，应该先改变原型对象，再创建对象。<br>2、对于新原型，一般会添加一个constructor属性，从而不破坏原来的原型对象结构。</p></blockquote><h3 id="拷贝继承（也称混入继承：mixin）"><a href="#拷贝继承（也称混入继承：mixin）" class="headerlink" title="拷贝继承（也称混入继承：mixin）"></a>拷贝继承（也称混入继承：mixin）</h3><p>场景：有时候想使用某个对象中的属性，但是又不想直接破坏它，于是就可以创建这个对象的拷贝<br>类似于jQuery中的<code>$.extend</code>，编写Jquery插件的必经之路</p><p>来看一个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    age : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = o1;</span><br><span class="line"></span><br><span class="line">o2.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o1.age); <span class="comment">//结果输出18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、修改了o2对象的age属性</span></span><br><span class="line"><span class="comment">//2、由于o2对象跟o1对象是同一个对象</span></span><br><span class="line"><span class="comment">//3、所以此时o1对象的age属性也被修改了</span></span><br></pre></td></tr></table></figure></p><p>这里涉及到一个知识点<code>深拷贝和浅拷贝</code>，</p><ul><li>深拷贝只是拷贝一层属性，没有内部对象</li><li>深拷贝其实是利用了递归的原理，将对象的若干层属性拷贝出来。</li><li>上述例子中只是一个浅拷贝。</li></ul><p><em>那么什么场景下适合使用拷贝继承</em><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'张三'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o4 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'李四'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>实现1<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'张三'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cp = &#123;&#125;;</span><br><span class="line">cp.gender = o3.gender;</span><br><span class="line">cp.grade = o3.gender;</span><br><span class="line">cp.name = o3.name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">//&#123;gender: "男", grade: "男", name: "张三"&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>这样的方式可以说在开发中就是写死的，毫无重用性。</p><ul><li>实现2<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'张三'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">target,source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        target[key] = source[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line">extend(target, o3);</span><br><span class="line"><span class="built_in">console</span>.log(target); <span class="comment">//&#123;gender: "男", grade: "初三", name: "张三"&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>如果很多时候需要用到拷贝继承，无疑封装成一个函数来进行复用是很好的。</p><p>在es6中也有了<code>对象扩展运算符</code>，仿佛就是为了拷贝继承而生的:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'张三'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = &#123; ...o3 &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(target);<span class="comment">//&#123;gender: "男", grade: "初三", name: "张三"&#125;</span></span><br><span class="line"><span class="keyword">var</span> target2 = &#123; ...o3, <span class="attr">age</span>:<span class="number">20</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(target2);<span class="comment">//&#123;gender: "男", grade: "初三", name: "张三", age: 20&#125;</span></span><br></pre></td></tr></table></figure></p><p>可以说简单到令人发指的操作，当然也会存在兼容问题啦，这里不涉及es6，单纯扯一下。</p><h3 id="原型式继承（道格拉斯在蝴蝶书中提出的）"><a href="#原型式继承（道格拉斯在蝴蝶书中提出的）" class="headerlink" title="原型式继承（道格拉斯在蝴蝶书中提出的）"></a>原型式继承（道格拉斯在蝴蝶书中提出的）</h3><ul><li>使用场景<ul><li>可以创建一个纯洁的对象，对象中什么属性都没有</li><li>创建一个继承自某个父对象的字对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建空对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(o1); <span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(o1.__proto__) <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//继承父对象</span></span><br><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">age : <span class="number">50</span>,</span><br><span class="line">name : <span class="string">"爸爸"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Object</span>.create(parent);</span><br><span class="line"><span class="built_in">console</span>.log(s1); <span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.__proto__); <span class="comment">//&#123;age: 50, name: "爸爸"&#125;</span></span><br></pre></td></tr></table></figure><p>可以看得出一些区别，所谓的纯洁对象，真的很纯。这个使用也很方便。</p><h3 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h3><p>场景：适用于2种构造函数之间有相似的逻辑的情况。<br>原理：函数的call、apply调用方式（函数的调用方式在文章后面讲解）</p><p>场景举例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.gender=gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender,say</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.gender=gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>局限性：<code>Animal</code>（父类的构造函数）的构造函数必须完全适用于<code>Person</code>（子类的构造函数）</p></blockquote><p>借用构造函数实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name=name;</span><br><span class="line">            <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,say</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// this.name=name;</span></span><br><span class="line">            <span class="comment">// this.age=age;</span></span><br><span class="line">            <span class="comment">// this.gender=gender;</span></span><br><span class="line">    Animal.apply(<span class="keyword">this</span>, [name, age]); </span><br><span class="line">            <span class="comment">//等同与下面语句</span></span><br><span class="line">            <span class="comment">//Animal.call(this, name, age);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">18</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'say'</span>);</span><br><span class="line">&#125;)) <span class="comment">//&#123;name: "张三", age: 18, say: ƒ&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="and-so-on"><a href="#and-so-on" class="headerlink" title="and so on"></a>and so on</h3><p>还有寄生继承，寄生组合继承，这里举例出以上几条常用的，其余这里就不再一一细数了。</p><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>概念：JS中的对象可能会有父对象，父对象中可能还会有父对象，就是祖宗十九代了。<br>根本：继承</p><pre><code>- 属性：对象中几乎都会有一个`__proto__`的一个属性，指向他的父对象- 意义，可以访问到父对象中的相关属性和方法</code></pre><p>根对象：<code>Object.prototype</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="built_in">console</span>.log(cat.__proto__); </span><br><span class="line"><span class="comment">//等同于 Animal.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.__proto__.__proto__);</span><br><span class="line"><span class="comment">//等同于 Object.prototype</span></span><br></pre></td></tr></table></figure><blockquote><p>函数对象都有<code>prototype</code>（原型对象）；而普通对象则只有<code>__proto__</code>（原型指针）</p></blockquote><h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><p>概念：就是一个变量可以使用的范围。</p><ul><li>最外层作用域：全局作用域</li><li>通过函数创建出一个独立的作用域，其中函数还可以嵌套，所以作用域也可以嵌套。</li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><ul><li>由于作用域是相对于变量而言的，而如果存在多级作用域，这个变量又来自于哪里？这个问题就需要好好地探究一下了，我们把这个变量的查找过程称之为变量的作用域链</li><li>作用域链的意义：查找变量（确定变量来自于哪里，变量是否可以访问）</li><li>简单来说，作用域链可以用以下几句话来概括：(或者说：确定一个变量来自于哪个作用域)<ul><li>查看当前作用域，如果当前作用域声明了这个变量，就确定结果</li><li>查找当前作用域的上级作用域，也就是当前函数的上级函数，看看上级函数中有没有声明</li><li>再查找上级函数的上级函数，直到全局作用域为止</li><li>如果全局作用域中也没有，我们就认为这个变量未声明(xxx is not defined)</li></ul></li></ul><p>例子1：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>; <span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">//可访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"zhangsan"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">//可访问</span></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">//不能访问</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">//可访问</span></span><br></pre></td></tr></table></figure></p><p>例子2：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gender  = <span class="string">"男"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(gender); <span class="comment">//可以访问</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(gender); <span class="comment">//可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">&#125;)();</span><br><span class="line">f();</span><br></pre></td></tr></table></figure></p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>一个经典的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line">f(); <span class="comment">//2</span></span><br><span class="line">f(); <span class="comment">//3</span></span><br><span class="line">f(); <span class="comment">//4</span></span><br></pre></td></tr></table></figure></p><p>可以看出a的输出并没有一直输出3，而是2、3、4，而产生的原因是因为<code>fn</code>函数执行完毕后，匿名函数的引用导致没有释放a变量，而作用域中保留了最新的a变量的值，闭包问题就产生了。</p><blockquote><p>闭包不仅仅只是说要返回一个函数，还可以是一个对象</p></blockquote><h2 id="闭包的内存释放"><a href="#闭包的内存释放" class="headerlink" title="闭包的内存释放"></a>闭包的内存释放</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            a++;</span><br><span class="line">            <span class="built_in">console</span>.log(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> q1=f1();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//要想释放q1里面保存的a，只能通过释放q1</span></span><br><span class="line">    q1=<span class="literal">null</span>;    <span class="comment">//q1=undefined</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h2><ul><li>模块化</li><li>防止变量被破坏</li></ul><p>举例：模块化的应用参考Vue.js中的源码</p><p>防止变量被破坏，运用场景</p><p>举例：KTV中的最低消费，最低消费的数值不能够暴露出去让别人随便修改，这样会脏了数据，返回一个对象暴露方法来进行业务操作，而不是进行直接操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//场景举例</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">KTV</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//最低消费1000</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> leastPrice = <span class="number">1000</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sale = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//消费</span></span></span><br><span class="line"><span class="javascript">                pay:<span class="function"><span class="keyword">function</span>(<span class="params">pr</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                    sale += pr;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//结账</span></span></span><br><span class="line"><span class="javascript">                settlement:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(sale&lt;leastPrice)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"您未达到最低消费，请继续消费"</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"欢迎下次光临"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p1 = KTV();</span></span><br><span class="line"><span class="undefined">        p1.pay(100);</span></span><br><span class="line"><span class="javascript">        p1.settlement(); <span class="comment">//您未达到最低消费，请继续消费</span></span></span><br><span class="line"><span class="undefined">        p1.pay(1000);</span></span><br><span class="line"><span class="javascript">        p1.settlement(); <span class="comment">//欢迎下次光临</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是如果需要进行修改最低消费，场景：老板的朋友进行消费，需要修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//场景举例</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">KTV</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//最低消费1000</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> leastPrice = <span class="number">1000</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sale = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//消费</span></span></span><br><span class="line"><span class="javascript">                pay:<span class="function"><span class="keyword">function</span>(<span class="params">pr</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                    sale += pr;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//结账</span></span></span><br><span class="line"><span class="javascript">                settlement:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(sale&lt;leastPrice)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"您未达到最低消费，请继续消费"</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"欢迎下次光临"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//传入工号，和修改最低消费值</span></span></span><br><span class="line"><span class="javascript">                edit:<span class="function"><span class="keyword">function</span>(<span class="params">id,lp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(id == <span class="number">888</span>)&#123;</span></span><br><span class="line"><span class="undefined">                        leastPrice = lp;</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"你不是管理员，无法修改"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p1 = KTV();</span></span><br><span class="line"><span class="undefined">        p1.pay(100);</span></span><br><span class="line"><span class="javascript">        p1.settlement(); <span class="comment">//您未达到最低消费，请继续消费</span></span></span><br><span class="line"><span class="javascript">        p1.edit(<span class="number">100</span>, <span class="number">200</span>); <span class="comment">//你不是管理员，无法修改</span></span></span><br><span class="line"><span class="javascript">        p1.edit(<span class="number">888</span>, <span class="number">100</span>); <span class="comment">//欢迎下次光临</span></span></span><br><span class="line"><span class="undefined">        p1.settlement();</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>闭包的运用防止变量被破坏，暴露出方法来间接修改数值，防止出现脏数据。<br>闭包中也有作用域链的相关运用。</p><h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p>从 ES5 开始，函数内部可以设定为严格模式。</p><p>严格模式主要有以下限制。</p><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性，否则报错</li><li>不能使用<code>with</code>语句</li><li>不能对只读属性赋值，否则报错</li><li>不能使用前缀 0 表示八进制数，否则报错</li><li>不能删除不可删除的属性，否则报错</li><li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li><li><code>eval</code>不会在它的外层作用域引入变量</li><li><code>eval</code>和<code>arguments</code>不能被重新赋值</li><li><code>arguments</code>不会自动反映函数参数的变化</li><li>不能使用<code>arguments.callee</code></li><li>不能使用<code>arguments.caller</code></li><li>禁止<code>this</code>指向全局对象</li><li>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈</li><li>增加了保留字（比如<code>protected</code>、<code>static</code>和<code>interface</code>）</li></ul><p>上面这些限制，模块都必须遵守。由于严格模式是 ES5 引入的，不属于 ES6，所以请参阅相关 ES5 书籍，本书不再详细介绍了。</p><p>其中，尤其需要注意<code>this</code>的限制。ES6 模块之中，顶层的<code>this</code>指向<code>undefined</code>，即不应该在顶层代码使用<code>this</code>。</p><h1 id="函数的四种调用方式"><a href="#函数的四种调用方式" class="headerlink" title="函数的四种调用方式"></a>函数的四种调用方式</h1><p>为什么要区分函数的调用方式呢？是因为在ES6前，函数内部的this是由该函数的调用方式决定的，函数内部的this跟大小写、书写位置无关。</p><h2 id="函数调用方式"><a href="#函数调用方式" class="headerlink" title="函数调用方式"></a>函数调用方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(); <span class="comment">//Window</span></span><br></pre></td></tr></table></figure><p>可以看到打印的this指向的是window对象。</p><p>在看第二种情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;</span><br><span class="line">         say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = p.say;</span><br><span class="line">s(); <span class="comment">//Window</span></span><br><span class="line"></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = Person.prototype.say;</span><br><span class="line">f1(); <span class="comment">//Window</span></span><br></pre></td></tr></table></figure><p>this的指向还是window对象。</p><p>而在严格模式下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">        'use strict'</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = p.say;</span><br><span class="line">s(); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = Person.prototype.say;</span><br><span class="line">f1(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到，如果是以函数方式来调用，函数内部的this将指向window对象。而在严格模式下，由于函数调用方式this都是指向顶层对象，而严格模式禁止this指向顶层对象，所以this都是undefined</p></blockquote><h2 id="方法调用方式"><a href="#方法调用方式" class="headerlink" title="方法调用方式"></a>方法调用方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//这里不讨论age和say方法中的this</span></span><br><span class="line">         <span class="keyword">this</span>.age = <span class="number">10</span>;</span><br><span class="line">         <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.say(); <span class="comment">//Person</span></span><br></pre></td></tr></table></figure><p>this指向了p1对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line">p2.say(); <span class="comment">//Person</span></span><br></pre></td></tr></table></figure><p>this指向了p2对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p3 = &#123;</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">p3.say(); <span class="comment">//p2</span></span><br></pre></td></tr></table></figure><p>this指向了p3对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tom = &#123;</span><br><span class="line">    c: clear,</span><br><span class="line">    length: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tom.c(); <span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>可以看到c函数还是使用方法调用的方式来调用的，c指向了clear函数，所以函数体中的this指向了tom，所以打印了20.</p><blockquote><p>可以看到，使用方法方法调用的this会指向调用该方法的对象。</p></blockquote><h2 id="构造函数调用方式"><a href="#构造函数调用方式" class="headerlink" title="构造函数调用方式"></a>构造函数调用方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(); <span class="comment">//p1</span></span><br></pre></td></tr></table></figure><p>通过new关键字来调用的，那么这种方式就是构造函数的调用方式，这种方式创建的函数内部this将指向该构造函数的实例对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _init=jQuery.prototype.init;</span><br><span class="line">        <span class="comment">//如果函数返回了一个复杂数据类型的值，那么本次函数的返回值就是该值。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _init();</span><br><span class="line">    &#125;</span><br><span class="line">    jQuery.prototype=&#123;</span><br><span class="line">        <span class="keyword">constructor</span>:jQuery,</span><br><span class="line">        length:100,</span><br><span class="line">        init:function()&#123;</span><br><span class="line">            <span class="comment">//this指向init构造函数的实例</span></span><br><span class="line">            <span class="comment">//--&gt;1、首先查看本身有没有length属性</span></span><br><span class="line">            <span class="comment">//--&gt;2、如果本身没有该属性，那么去它的原型对象中查找</span></span><br><span class="line">            <span class="comment">//--&gt;3、如果原型对象中没有，那么就去原型对象的原型对象中查找，最终一直找到根对象（Object.prototype）</span></span><br><span class="line">            <span class="comment">//--&gt;4、最终都没有找到的话，我们认为该对象并没有该属性，如果获取该属性的值：undefined</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> jQuery(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>上述说了this指向该构造函数的实例对象，可以访问自身实例的属性和方法，这里返回了<code>init.prototype</code>的属性，但是这并不是<code>Jquery.prototype</code>的属性，所以打印的是<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改了init函数的默认原型，指向新原型</span></span><br><span class="line">jQuery.prototype.init.prototype = jQuery.prototype;</span><br></pre></td></tr></table></figure><p>如果我们修改了<code>init.prototype</code>指向了<code>jQuery.prototype</code>，那么再运行上述代码，<code>this.length</code>打印的值将是100。</p><h2 id="上下文调用方式"><a href="#上下文调用方式" class="headerlink" title="上下文调用方式"></a>上下文调用方式</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fcall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fcall.call(<span class="keyword">this</span>); <span class="comment">//Window</span></span><br><span class="line">fcall.call([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]); <span class="comment">//[1, 3, 5]</span></span><br><span class="line">fcall.call(<span class="number">1</span>); <span class="comment">//Number</span></span><br><span class="line">fcall.call(<span class="string">"abc"</span>); <span class="comment">//String</span></span><br><span class="line">fcall.call(<span class="literal">true</span>); <span class="comment">//Boolean</span></span><br><span class="line">fcall.call(<span class="literal">null</span>); <span class="comment">//Window</span></span><br><span class="line">fcall.call(<span class="keyword">new</span> fcall()); <span class="comment">//fcall</span></span><br><span class="line">fcall.call(&#123;<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">height</span>:<span class="number">1000</span>&#125;); <span class="comment">//&#123;age: 20, height: 1000&#125;</span></span><br><span class="line">fcall.call(<span class="literal">undefined</span>); <span class="comment">//Window</span></span><br></pre></td></tr></table></figure><p>call方法的第一个参数就决定了函数内部this的指向。<br>如果第一个参数的类型是：</p><ul><li>对象类型：那么this将指向该对象</li><li>如果是<code>undefined</code>,<code>null</code>，那么this将指向Window</li><li>如果是普通的数据类型比如<code>&quot;abc&quot;</code>,<code>1</code>,<code>true</code>则会转换成对应构造函数的实例（装箱），例如<code>String</code>,<code>Number</code>,<code>Boolean</code>。</li></ul><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>apply和call方法调用方式可以完全相同，只是后面传参数时有异同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a+<span class="string">" "</span>+b+<span class="string">" "</span>+c);</span><br><span class="line">&#125;</span><br><span class="line">toString.call(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>)   <span class="comment">//"1 3 5"</span></span><br><span class="line">toString.apply(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>])<span class="comment">//"1 3 5"</span></span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>bind是es5中才有的(IE9+)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.age); <span class="comment">//undefined</span></span><br><span class="line">        &#125;, <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.run();</span><br></pre></td></tr></table></figure><p>以前这样书写时，可能会定义一个另外的变量来指向this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _that = <span class="keyword">this</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(_that.age); <span class="comment">//10</span></span><br><span class="line">        &#125;, <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.run();</span><br></pre></td></tr></table></figure><p>但是现在可以使用bind来实现了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.age); <span class="comment">//10</span></span><br><span class="line">        &#125;).bind(<span class="keyword">this</span>), <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.run();</span><br></pre></td></tr></table></figure><p>可以发现，使用bind方式后this的指向将改为了obj。</p><p>更直观的了解bind方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speed</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.speed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> speedOther = speed.bind(&#123; <span class="attr">speed</span>: <span class="number">20</span> &#125;);</span><br><span class="line">speedOther(); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>speed.bind方法执行后会产生了一个新的函数，新的函数体内与原来的是一样的，但是唯一的不同就是this的指向改为了<code>{ speed: 20 }</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">"西瓜"</span>,</span><br><span class="line">    drink:(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//this指向了：&#123; name:"橙汁" &#125;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;).bind(&#123; <span class="attr">name</span>:<span class="string">"橙汁"</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line">obj.drink();    <span class="comment">//"橙汁"</span></span><br></pre></td></tr></table></figure><h3 id="三者的区别"><a href="#三者的区别" class="headerlink" title="三者的区别"></a>三者的区别</h3><p>call\apply是立刻执行了这个函数，并且在执行过程中绑定了this的值，而bind并没有立刻执行这个函数，而是产生了一个新的函数，新的函数绑定了this的值。</p><h2 id="ES6中的箭头函数"><a href="#ES6中的箭头函数" class="headerlink" title="ES6中的箭头函数"></a>ES6中的箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"你好"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line">div.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"你好"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>有一个参数的箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"abc"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于：</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"abc"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有2个及更多参数的箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f=<span class="function">(<span class="params">a,b,c</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"abc"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>箭头函数和普通匿名函数有哪些不同？</strong></p><ul><li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li><li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li><li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li><li>（不常用）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。 </li><li>generator函数现在经常用async替代</li></ul><h1 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h1><ul><li>typeof <ul><li>typeof只能判断：数字、字符串、布尔值、undefined、函数</li></ul></li><li><code>Object.prototype.toString.call()</code><ul><li>5  <code>[object Number]</code></li><li>“abc”<code>[object String]</code></li><li>true <code>[object Boolean]</code></li><li>null <code>[object Null]</code></li><li>undefined <code>[object Undefined]</code></li><li>[1,3,5] <code>[object Array]</code></li><li>function(){} <code>[object Function]</code></li><li>new Date()   <code>[object Date]</code></li><li>/abc/       <code>[object RegExp]</code></li></ul></li><li>Array.isArray()  es5中提出来的检测数组</li><li>isNaN()   </li><li>isInfinity()</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript基本介绍&quot;&gt;&lt;a href=&quot;#JavaScript基本介绍&quot; class=&quot;headerlink&quot; title=&quot;JavaScript基本介绍&quot;&gt;&lt;/a&gt;JavaScript基本介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;JS的用途：Javascript可以实现浏览器端、服务器端(nodejs)。。。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器端JS由以下三个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ECMAScript：基础语法(数据类型、运算符、函数。。。)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BOM(浏览器对象模型)：window、location、history、navigator。。。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DOM(文档对象模型)：div、p、span。。。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hackycy.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://hackycy.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5移动端自适应方案——手淘flexible方案</title>
    <link href="http://hackycy.github.io/2019/05/28/HTML5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94%E6%89%8B%E6%B7%98flexible%E6%96%B9%E6%A1%88/"/>
    <id>http://hackycy.github.io/2019/05/28/HTML5移动端自适应方案——手淘flexible方案/</id>
    <published>2019-05-28T08:06:59.000Z</published>
    <updated>2019-06-06T02:11:31.662Z</updated>
    
    <content type="html"><![CDATA[<p>前文讲过了[HTML5移动端自适应方案——媒体查询-rem方案]，基于媒体查询方式的响应式有优点也有缺点：</p><p>优点：兼容性好，@media在ie9以上是支持的，PC和MOBILE是同一套代码的，不用分开。</p><p>缺点：要写得css相对另外两个多很多，而且各个断点都要做好。css样式会稍微大点，更麻烦。</p><a id="more"></a><blockquote><p>本文中不涉及一些viewport、dpr、em、rem等的概念介绍，详细了解可以再查看本博客中另一篇文章有具体讲解这些概念。</p></blockquote><p>所以这里介绍另一种使用Flexible实现手淘H5页面的终端适配。</p><h1 id="lib-flexible使用"><a href="#lib-flexible使用" class="headerlink" title="lib-flexible使用"></a>lib-flexible使用</h1><p>GitHub:<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">https://github.com/amfe/lib-flexible</a></p><p><a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener"><code>lib-flexible</code></a>是一个制作H5适配的开源库，可以<a href="https://github.com/amfe/lib-flexible/archive/master.zip" target="_blank" rel="noopener">点击这里</a>下载相关文件，获取需要的JavaScript和CSS文件。</p><p>或者阿里CDN</p><blockquote><p>建议使用经典版本0.3.2 <a href="https://github.com/amfe/lib-flexible/tree/master" target="_blank" rel="noopener">github</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://g.tbcdn.cn/mtb/lib-flexible/&#123;&#123;version&#125;&#125;/??flexible_css.js,flexible.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将代码中的<code></code>换成对应的版本号<code>0.3.4</code>。</p><p>在Web页面的<code>&lt;head&gt;&lt;/head&gt;</code>中添加对应的<code>flexible_css.js,flexible.js</code>文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/flexible.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//cdn</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外强烈建议对JS做<strong>内联处理</strong>，在所有资源加载之前执行这个JS。执行这个JS后，会在<code>&lt;html&gt;</code>元素上增加一个<code>data-dpr</code>属性，以及一个<code>font-size</code>样式。JS会根据不同的设备添加不同的<code>data-dpr</code>值，比如说<code>2</code>或者<code>3</code>，同时会给<code>html</code>加上对应的<code>font-size</code>的值，比如说<code>75px</code>。</p><p>如此一来，页面中的元素，都可以通过<code>rem</code>单位来设置。他们会根据<code>html</code>元素的<code>font-size</code>值做相应的计算，从而实现屏幕的适配效果。</p><p>除此之外，在引入<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener"><code>lib-flexible</code></a>需要执行的JS之前，可以手动设置<code>meta</code>来控制<code>dpr</code>值，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"flexible"</span> <span class="attr">content</span>=<span class="string">"initial-dpr=2"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>initial-dpr</code>会把<code>dpr</code>强制设置为给定的值。如果手动设置了<code>dpr</code>之后，不管设备是多少的<code>dpr</code>，都会强制认为其<code>dpr</code>是你设置的值。<strong>在此不建议手动强制设置<code>dpr</code>，因为在Flexible中，只对iOS设备进行<code>dpr</code>的判断，对于Android系列，始终认为其<code>dpr</code>为<code>1</code>。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!dpr &amp;&amp; !scale) &#123;</span><br><span class="line">    <span class="keyword">var</span> isAndroid = win.navigator.appVersion.match(<span class="regexp">/android/gi</span>);</span><br><span class="line">    <span class="keyword">var</span> isIPhone = win.navigator.appVersion.match(<span class="regexp">/iphone/gi</span>);</span><br><span class="line">    <span class="keyword">var</span> devicePixelRatio = win.devicePixelRatio;</span><br><span class="line">    <span class="keyword">if</span> (isIPhone) &#123;</span><br><span class="line">        <span class="comment">// iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案</span></span><br><span class="line">        <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">3</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">3</span>)) &#123;                </span><br><span class="line">            dpr = <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">2</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">2</span>))&#123;</span><br><span class="line">            dpr = <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dpr = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其他设备下，仍旧使用1倍的方案</span></span><br><span class="line">        dpr = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    scale = <span class="number">1</span> / dpr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Flexible实现自适应"><a href="#Flexible实现自适应" class="headerlink" title="Flexible实现自适应"></a>Flexible实现自适应</h1><p>图片素材：</p><p><img src="designpsd.jpeg" alt=""></p><p><img src="grayscale.jpeg" alt=""></p><p><img src="haibao.jpg" alt=""></p><p>该设计图是按照iPhone6作为基准设计尺寸，iPhone6的分辨率为<code>750px * 1334px</code>，iPhone6的DPR为2，则CSS像素则缩小为设计稿尺寸的<code>1/2</code>。既设计稿量出某宽为20px，则css像素则转为为10px。</p><blockquote><p>理想适口的缩放比为1的情况下</p></blockquote><p>首先按照设计稿尺寸还原页面，为了方便理解，首先使用px还原页面，在iPhone6下显示设计。</p><p>实现代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        * &#123;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">            -webkit-tap-highlight-color: transparent;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        html,body &#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        html,body &#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f5294c</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            font-size: 14px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* background-color: #f5294c; */</span></span></span><br><span class="line"><span class="undefined">            min-width: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.header</span> <span class="selector-tag">h1</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> &#123;</span></span><br><span class="line"><span class="undefined">            padding: 0 5px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">            padding: 5px 0;</span></span><br><span class="line"><span class="undefined">            display: table-cell;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.left</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 88px;</span></span><br><span class="line"><span class="undefined">            height: 88px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: table-cell;</span></span><br><span class="line"><span class="undefined">            padding: 5px 8px 0 8px;</span></span><br><span class="line"><span class="undefined">            vertical-align: top;</span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            font-size: 13px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 1<span class="selector-class">.25</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="undefined">            margin: 9px 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#f32a4c</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="undefined">            font-size: 10px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f32a4c</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fffffd</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.intro</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#ffb09b</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.buy</span> &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            right: 9px;</span></span><br><span class="line"><span class="undefined">            bottom: 7px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 1<span class="selector-class">.25</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 13px;</span></span><br><span class="line"><span class="undefined">            padding: 5px 18px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f42a4b</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fefffc</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.buy</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fefffc</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 海报 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/haibao.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里不做过多的页面美化。预览一下</p><p><img src="preview.png" alt=""></p><p>在head中配置flexible</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/amfe-flexible/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>把视觉稿中的px换算成rem</strong></p><p>之前提到设计稿是以iPhone6为基准的，即<code>750px * 1334px</code>的设计稿。而iPhone6中DPR为2，所以iPhone6下的布局视口宽度为375。</p><blockquote><p>理想适口的缩放比为1的情况下</p></blockquote><p>而Flexible的方案就是将视觉稿分成<strong>100份</strong>，每一份成为<code>a</code>，同时<code>1rem</code>单位被认定为<code>10a</code>，针对该设计稿可以算出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1a = 3.75px</span><br><span class="line">1rem = 37.5px</span><br></pre></td></tr></table></figure><p>则我们将设计稿分成10a，则整个宽度为10rem，所以对应的<code>&lt;html&gt;</code>的<code>font-size</code>则为37.5px。</p><p>得到了基准值后，只需要原始的<code>px值</code><strong>（CSS像素）</strong>除以<code>rem基准值</code>即可。例如一个<code>75px * 75px</code>即转换成<code>2rem * 2rem</code>。</p><p>我们统一将页面内的px值统一换算成rem，来浏览一下适配效果：</p><p><img src="flexibleshipei.gif" alt=""></p><p><strong>如何快速换算</strong></p><ul><li><p>编辑器</p><p>在开发中总不能让自己一个一个的去计算，编辑器可以有一键转换px2rem的插件，sb3有cssrem，vscode有px to rem。</p></li><li><p>CSS处理器，可以使用Less或者Sass实现快速转换</p></li><li><p>PostCSS(px2rem)</p><p>除了Sass这样的CSS处理器这外，手淘团队的大神还开发了一款<code>npm</code>的工具<a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="noopener">px2rem</a>。安装好<a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="noopener">px2rem</a>之后，可以在项目中直接使用。也可以使用<a href="http://www.w3cplus.com/blog/tags/516.html" target="_blank" rel="noopener">PostCSS</a>。使用PostCSS插件<a href="https://www.npmjs.com/package/postcss-px2rem" target="_blank" rel="noopener">postcss-px2rem</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var postcss = require(&apos;gulp-postcss&apos;);</span><br><span class="line">var px2rem = require(&apos;postcss-px2rem&apos;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;, function() &#123;</span><br><span class="line">    var processors = [px2rem(&#123;remUnit: 75&#125;)];</span><br><span class="line">    return gulp.src(&apos;./src/*.css&apos;)</span><br><span class="line">        .pipe(postcss(processors))</span><br><span class="line">        .pipe(gulp.dest(&apos;./dest&apos;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>除了在Gulp中配置外，还可以使用其他的配置方式，详细的介绍可以<a href="https://www.npmjs.com/package/postcss-px2rem" target="_blank" rel="noopener">点击这里</a>进行了解。</p><p>配置完成之后，在实际使用时，你只要像下面这样使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.selector &#123;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 64px; /*px*/</span><br><span class="line">    font-size: 28px; /*px*/</span><br><span class="line">    border: 1px solid #ddd; /*no*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>px2rem</code>处理之后将会变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.selector &#123;</span><br><span class="line">    width: 2rem;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">&#125;</span><br><span class="line">[data-dpr=&quot;1&quot;] .selector &#123;</span><br><span class="line">    height: 32px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">[data-dpr=&quot;2&quot;] .selector &#123;</span><br><span class="line">    height: 64px;</span><br><span class="line">    font-size: 28px;</span><br><span class="line">&#125;</span><br><span class="line">[data-dpr=&quot;3&quot;] .selector &#123;</span><br><span class="line">    height: 96px;</span><br><span class="line">    font-size: 42px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在整个开发中有了这些工具之后，完全不用担心<code>px</code>值转<code>rem</code>值影响开发效率。</p></li></ul><h1 id="文本字号不建议使用rem"><a href="#文本字号不建议使用rem" class="headerlink" title="文本字号不建议使用rem"></a>文本字号不建议使用rem</h1><p>前面大家都见证了如何使用<code>rem</code>来完成H5适配。那么文本又将如何处理适配。是不是也通过<code>rem</code>来做自动适配。</p><p>显然，我们在iPhone3G和iPhone4的Retina屏下面，希望看到的文本字号是相同的。也就是说，我们<strong>不希望文本在Retina屏幕下变小</strong>，另外，我们<strong>希望在大屏手机上看到更多文本</strong>，以及，现在绝大多数的字体文件都自带一些点阵尺寸，通常是<code>16px</code>和<code>24px</code>，所以我们<strong>不希望出现13px和15px这样的奇葩尺寸</strong>。</p><p>如此一来，就决定了在制作H5的页面中，<code>rem</code>并不适合用到段落文本上。所以在Flexible整个适配方案中，考虑文本还是使用<code>px</code>作为单位。只不过使用<code>[data-dpr]</code>属性来区分不同<code>dpr</code>下的文本字号大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1rem</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.4rem</span>;</span><br><span class="line">    font-size: 12px; // 默认写上dpr为1的fontSize</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-dpr="2"]</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-dpr="3"]</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能更好的利于开发，在实际开发中，我们可以定制一个<a href="https://github.com/W3cplus/Sass-Resources/blob/master/mixins/_font-dpr.scss" target="_blank" rel="noopener"><code>font-dpr()</code></a>这样的Sass混合宏：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> font-dpr(<span class="variable">$font-size</span>)&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font-size</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-attr">[data-dpr="2"]</span> &amp; &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="variable">$font-size</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-attr">[data-dpr="3"]</span> &amp; &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="variable">$font-size</span> * <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这样的混合宏之后，在开发中可以直接这样使用：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">include</span> font-dpr(<span class="number">16px</span>);</span><br></pre></td></tr></table></figure><p>当然这只是针对于描述性的文本，比如说段落文本。但有的时候文本的字号也需要分场景的，比如在项目中有一个slogan,业务方希望这个slogan能根据不同的终端适配。针对这样的场景，完全可以使用<code>rem</code>给slogan做计量单位。</p><blockquote><p>注意，如果需要该功能版本的请使用0.3.2版本，既主分支版本或者使用cdn版本</p></blockquote><h1 id="Flexible原理"><a href="#Flexible原理" class="headerlink" title="Flexible原理"></a>Flexible原理</h1><p>flexible的核心代码很简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement  </span><br><span class="line"><span class="comment">// set 1rem = viewWidth / 10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rem = docEl.clientWidth / <span class="number">10</span></span><br><span class="line">  docEl.style.fontSize = rem + <span class="string">'px'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setRemUnit()</span><br></pre></td></tr></table></figure><p>上面的代码中，将<code>html</code>节点的<code>font-size</code>设置为页面<code>clientWidth</code>(布局视口)的<code>1/10</code>，即<code>1rem</code>就等于页面布局视口的<code>1/10</code>，所以这就是为什么上面所说的px换算rem的代码实现。</p><p>里面还有一些监听页面大小变化，布局可以自适应:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reset rem unit on page resize</span></span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, setRemUnit)</span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">     setRemUnit()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>以及设置data-dpr</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docEl.setAttribute(<span class="string">'data-dpr'</span>, dpr);</span><br></pre></td></tr></table></figure><blockquote><p>完整源码请查看主分支版本中的js</p><p>由于<code>viewport</code>单位得到众多浏览器的兼容，lib-flexible这个过渡方案已经被官方弃用，但是其原理还是需要去理解的。因为vh、vw的方案原理都是大致相同的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前文讲过了[HTML5移动端自适应方案——媒体查询-rem方案]，基于媒体查询方式的响应式有优点也有缺点：&lt;/p&gt;
&lt;p&gt;优点：兼容性好，@media在ie9以上是支持的，PC和MOBILE是同一套代码的，不用分开。&lt;/p&gt;
&lt;p&gt;缺点：要写得css相对另外两个多很多，而且各个断点都要做好。css样式会稍微大点，更麻烦。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://hackycy.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://hackycy.github.io/tags/HTML/"/>
    
      <category term="移动端适配" scheme="http://hackycy.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android UI适配指南</title>
    <link href="http://hackycy.github.io/2019/05/22/Android-UI%E9%80%82%E9%85%8D%E6%8C%87%E5%8D%97/"/>
    <id>http://hackycy.github.io/2019/05/22/Android-UI适配指南/</id>
    <published>2019-05-22T08:30:36.000Z</published>
    <updated>2019-05-28T03:43:11.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在Android开发中，由于Android碎片化严重，屏幕分辨率千奇百怪，而想要在各种分辨率的设备上显示基本一致的效果，适配成本越来越高。虽然Android官方提供了dp单位来适配，但其在各种奇怪分辨率下表现却不尽如人意。</p><a id="more"></a><p><img src="fenbutu.png" alt=""></p><p><strong>Android屏幕分辨率分布图</strong></p><p><img src="afenbutu.png" alt=""></p><p><strong>对比IOS屏幕分辨率分布图</strong></p><p><img src="ifenbutu.png" alt=""></p><p>所以Android的屏幕适配已经为重中之重的话题。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>屏幕尺寸、屏幕分辨率、屏幕像素密度</p><p>屏幕尺寸：屏幕对角线长度，单位是英寸，我们常说的多少多少寸，比如4.7存手机、5.7存手机，指的就是这个。</p><p>屏幕分辨率：如 1920×1080，是指在手机屏幕的像素点的个数，单位是px，1px = 1 像素点，一般是纵向像素 × 横向像素，意味着高有 1920 个像素点，宽有 1080 个像素点。</p><p>屏幕像素密度：是指每英寸上的像素点数，单位是 dpi（dotper inch）。像素密度和屏幕尺寸和屏幕分辨率有关，它是由对角线的像素点数除以屏幕的大小得到的，关系如下：</p><p><img src="dpicalc.png" alt=""></p><p>单一变化条件下，屏幕尺寸越小、分辨率越高，像素密度越大，反之越小。</p><blockquote><p>与PPI的概念和计算方式是相同的</p></blockquote><ul><li><p>dp：是Android 特有的，意为密度无关像素，Google 发布的 BASELINE（基准线）为 160，以此为基准。</p></li><li><p>dip：Density Independent Pixels，同dp一个意思，目前废弃了，一般都写dp。</p></li><li><p>dpi：像素密度是屏幕上单位面积内的像素数，称为dpi（每英寸的点数）。 它与分辨率不同，后者是屏幕上像素的总数。</p></li><li><p>sp：Scale-IndependentPixels的缩写，可以根据文字大小首选项自动进行缩放。Google推荐我们使用12sp以上的大小，通常可以使用12sp，14sp，18sp，22sp，为避免精度损失，建议最好不要使用奇数和小数。</p></li><li><p>px：就是我们常说的像素</p></li><li><p>density：就这个单词本身直接翻译的意思而言，其也代表“密度”。但需要注意的是，在Android中，其实并非如此。注意我们这里指的是，通过代码<code>context.getResources().getDisplayMetrics().density</code>获取的“density”值。而通过该方法获取到的该值，实际上是等价于“dpi / 160”的一个结果值。</p></li></ul><h1 id="dp直接适配"><a href="#dp直接适配" class="headerlink" title="dp直接适配"></a>dp直接适配</h1><p>dp的概念是谷歌官方提出的适配的一种方式。</p><p>在android中的dp在渲染前会将dp转为px，计算公式：</p><ul><li>px = density * dp;</li><li>density = dpi / 160;</li><li>px = dp * (dpi / 160);</li></ul><p>而dpi是根据屏幕真实的分辨率和尺寸来计算的，每个设备都可能不一样的。</p><p>而因为Android碎片化非常严重的原因就导致了dpi的值非常乱，根本没有规律可循，即使dp适配可以做到80%的适配，但是效果还是差强人意。</p><p>我们用案例来看一下对比：</p><p><img src="avd.png" alt=""></p><p>这里创建了两个个模拟器，同样的分辨率<code>480 * 800</code>两种类别的设备，同样的放一张图片，布局代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_adapterimg"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@mipmap/img"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"300dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="p480dpshipei.png" alt=""></p><p>同样的代码，设置为300dp，但是两台机型却表现得不尽人意。这里就要涉及到上面一些公式的概念进行换算了，因为最终都会转换成px，我们来换算一下：</p><p><strong>480*800 5.1寸机型下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dpi = √(480^2 * 800^2)/ 5.1 = 182.93</span><br><span class="line">px = 300 * (183 / 160) = 342</span><br></pre></td></tr></table></figure><p>其余相同计算方式，对照表格：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">480*800/5.1</th><th style="text-align:center">480*800/4</th></tr></thead><tbody><tr><td style="text-align:center">dpi</td><td style="text-align:center">182.93</td><td style="text-align:center">233.24</td></tr><tr><td style="text-align:center">density</td><td style="text-align:center">1.14</td><td style="text-align:center">1.46</td></tr><tr><td style="text-align:center">px</td><td style="text-align:center">342</td><td style="text-align:center">438</td></tr></tbody></table><blockquote><p>上述计算结果均为保留小数点后两位</p></blockquote><p>但是计算的结果真的是这样吗，我们使用代码来获取一下控件的高和宽</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ImageView iv_adapterimg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        iv_adapterimg = findViewById(R.id.iv_adapterimg);</span><br><span class="line"></span><br><span class="line">        iv_adapterimg.getViewTreeObserver().addOnPreDrawListener(<span class="keyword">new</span> ViewTreeObserver.OnPreDrawListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreDraw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.e(<span class="string">"logImageViewInfo"</span>, <span class="string">"Height: "</span> + iv_adapterimg.getHeight() + <span class="string">" / Width: "</span> + iv_adapterimg.getWidth());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        logDisplayInfo();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logDisplayInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String TAG = <span class="string">"logDisplayInfo"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通常我们在使用DisplayMetrics时，都是直接获取内部变量来使用。所以下面直接列出各个内部变量。</span></span><br><span class="line"></span><br><span class="line">        DisplayMetrics dm = <span class="keyword">new</span> DisplayMetrics();</span><br><span class="line">        getWindowManager().getDefaultDisplay().getMetrics(dm);</span><br><span class="line"></span><br><span class="line">        Log.e(TAG, <span class="string">"当前设备的系统dpi: "</span> + dm.densityDpi);</span><br><span class="line">        Log.e(TAG, <span class="string">"当前设备的density: "</span> + dm.density);</span><br><span class="line">        Log.e(TAG, <span class="string">"物理屏幕上 Y 轴方向每英寸的像素: "</span> + dm.ydpi);</span><br><span class="line">        Log.e(TAG, <span class="string">"物理屏幕上 X 轴方向每英寸的像素: "</span> + dm.xdpi);</span><br><span class="line">        Log.e(TAG, <span class="string">"屏幕高度的像素数量: "</span> + dm.heightPixels);</span><br><span class="line">        Log.e(TAG, <span class="string">"屏幕宽度的像素数量: "</span> + dm.widthPixels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们查看一下Log输出：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">480*800/5.1</th><th style="text-align:center">480*800/4</th></tr></thead><tbody><tr><td style="text-align:center">Imageview height</td><td style="text-align:center">300</td><td style="text-align:center">450</td></tr><tr><td style="text-align:center">imageview width</td><td style="text-align:center">300</td><td style="text-align:center">450</td></tr><tr><td style="text-align:center">density</td><td style="text-align:center">1.0</td><td style="text-align:center">1.5</td></tr><tr><td style="text-align:center">dpi</td><td style="text-align:center">160</td><td style="text-align:center">240</td></tr><tr><td style="text-align:center">ydpi</td><td style="text-align:center">160.0</td><td style="text-align:center">240.0</td></tr><tr><td style="text-align:center">xdpi</td><td style="text-align:center">160.0</td><td style="text-align:center">240.0</td></tr><tr><td style="text-align:center">heightPixels</td><td style="text-align:center">800</td><td style="text-align:center">800</td></tr><tr><td style="text-align:center">widthPixels</td><td style="text-align:center">480</td><td style="text-align:center">480</td></tr></tbody></table><p>那么这为什么和我们计算的不一样呢，这里就要设计到系统dpi和物理dpi了，我们需要深究到其源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//platform_frameworks_base/core/java/android/util/DisplayMetrics.java</span></span><br><span class="line"><span class="keyword">package</span> android.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.UnsupportedAppUsage;</span><br><span class="line"><span class="keyword">import</span> android.os.SystemProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A structure describing general information about a display, such as its</span></span><br><span class="line"><span class="comment"> * size, density, and font scaling.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;To access the DisplayMetrics members, initialize an object like this:&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt; DisplayMetrics metrics = new DisplayMetrics();</span></span><br><span class="line"><span class="comment"> * getWindowManager().getDefaultDisplay().getMetrics(metrics);&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayMetrics</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The device's current density.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * This value reflects any changes made to the device density. To obtain</span></span><br><span class="line"><span class="comment">     * the device's stable density, use &#123;<span class="doctag">@link</span> #DENSITY_DEVICE_STABLE&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span> This value should not be used.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> Use &#123;<span class="doctag">@link</span> #DENSITY_DEVICE_STABLE&#125; to obtain the stable</span></span><br><span class="line"><span class="comment">     *             device density or &#123;<span class="doctag">@link</span> #densityDpi&#125; to obtain the current</span></span><br><span class="line"><span class="comment">     *             density for a specific display.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DENSITY_DEVICE = getDeviceDensity();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The device's stable density.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * This value is constant at run time and may not reflect the current</span></span><br><span class="line"><span class="comment">     * display density. To obtain the current density for a specific display,</span></span><br><span class="line"><span class="comment">     * use &#123;<span class="doctag">@link</span> #densityDpi&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_DEVICE_STABLE = getDeviceDensity();</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDeviceDensity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// qemu.sf.lcd_density can be used to override ro.sf.lcd_density</span></span><br><span class="line">        <span class="comment">// when running in the emulator, allowing for dynamic configurations.</span></span><br><span class="line">        <span class="comment">// The reason for this is that ro.sf.lcd_density is write-once and is</span></span><br><span class="line">        <span class="comment">// set by the init process when it parses build.prop before anything else.</span></span><br><span class="line">        <span class="keyword">return</span> SystemProperties.getInt(<span class="string">"qemu.sf.lcd_density"</span>,</span><br><span class="line">                SystemProperties.getInt(<span class="string">"ro.sf.lcd_density"</span>, DENSITY_DEFAULT));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深究其方法是一个native方法，在代码注释中提到的init的方法，深究源头</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> DisplayHardware::init(<span class="keyword">uint32_t</span> dpy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">///....省略</span></span><br><span class="line">  </span><br><span class="line"> <span class="comment">/* Read density from build-specific ro.sf.lcd_density property</span></span><br><span class="line"><span class="comment">     * except if it is overridden by qemu.sf.lcd_density.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (property_get(<span class="string">"qemu.sf.lcd_density"</span>, property, <span class="literal">NULL</span>) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (property_get(<span class="string">"ro.sf.lcd_density"</span>, property, <span class="literal">NULL</span>) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            LOGW(<span class="string">"ro.sf.lcd_density not defined, using 160 dpi by default."</span>);</span><br><span class="line">            <span class="built_in">strcpy</span>(property, <span class="string">"160"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* for the emulator case, reset the dpi values too */</span></span><br><span class="line">        mDpiX = mDpiY = atoi(property);</span><br><span class="line">    &#125;</span><br><span class="line">    mDensity = atoi(property) * (<span class="number">1.0f</span>/<span class="number">160.0f</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//....省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看其源码可以看出density的值是通过获取<code>ro.sf.lcd_density</code>配置的值，如果没有默认使用<code>DENSITY_DEFAULT</code>，其默认值有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_LOW = <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_MEDIUM = <span class="number">160</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_TV = <span class="number">213</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_HIGH = <span class="number">240</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_260 = <span class="number">260</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_280 = <span class="number">280</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_300 = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_XHIGH = <span class="number">320</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_340 = <span class="number">340</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_360 = <span class="number">360</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_400 = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_420 = <span class="number">420</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_440 = <span class="number">440</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_XXHIGH = <span class="number">480</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_560 = <span class="number">560</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_600 = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_XXXHIGH = <span class="number">640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_DEFAULT = DENSITY_MEDIUM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DENSITY_DEFAULT_SCALE = <span class="number">1.0f</span> / DENSITY_DEFAULT;</span><br></pre></td></tr></table></figure><p>那么问题来了，<code>ro.sf.lcd_density</code>的值在哪里找到，其配置文件路径在手机的<code>/system/build.prop</code>文件中。</p><p>可以使用adb命令来将文件进行导出。但是要注意的是，avd模拟器下该文件没有<code>ro.sf.lcd_density</code>该配置项。但是可以在<code>emulator根目录下/config.ini</code>中的<code>hw.lcd.density</code>可以找到配置的值。</p><p>4寸模拟器下<code>config.ini</code>的<code>hw.lcd.density</code>值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hw.lcd.density=240</span><br></pre></td></tr></table></figure><p>我们将4寸的模拟器的配置文件修改成160后查看打印日志:</p><p><img src="hw_log.png" alt=""></p><p>可以查看到日志的输出和上面原来的输出发生了改变，改成了自己配置的值。但是该选项只是avd模拟器环境下，真机或者一些游戏模拟器环境下都是在<code>/system/build.prop</code>配置文件中<code>ro.sf.lcd_density</code>的值。一般该值都是出厂时就编译好的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ro.sf.lcd_density=240</span><br></pre></td></tr></table></figure><blockquote><p>这是MUMU中读取<code>/system/build.prop</code>文件的读取的值，这里没有root的真机，无法演示真机环境，但原理相同。但是可以测试一下真机环境下，DPI是根据配置读取的，而非真实通过物理分辨率求出来的从而验证上述的结论。这里以三星s8手机为例，主屏分辨率2960*1440，尺寸5.8，求出dpi约为3.5，而依靠上述代码输出的值为4.5。</p></blockquote><p>所以dp都是使用系统定义的dpi来进行换算的。而非是说单纯的使用物理分辨率和尺寸来计算的。但依然如此，Android的碎片化还是让dp直接适配还是无法让人满意，尽管dp适配可以解决小部分的适配问题。</p><h1 id="宽高限定符适配"><a href="#宽高限定符适配" class="headerlink" title="宽高限定符适配"></a>宽高限定符适配</h1><p>为了高效的实现UI开发，出现了新的适配方案，我把它称作宽高限定符适配。简单说，就是穷举市面上所有的Android手机的宽高像素值：</p><p><img src="genvalue.png" alt=""></p><p>然后我们根据一个基准，为基准的意思就是,比如设计图的尺寸为<code>480 * 800</code>的分辨率，有个300*300px的ImageView，则</p><ul><li>宽度为480，将任何分辨率的宽度分为480份，每一份1px，取值为x1-x480。</li><li>高度为800，将任何分辨率的高度分为800份，每一份1px，取值为y1-y800。</li></ul><p>则对于540 * 860的分辨率来说</p><p><img src="layxcalc.png" alt=""></p><p>可以看到x1 = 540 / 基准 = 540 / 480 = 1.12 ;而其他分辨率的计算方式相同。</p><p>看一下使用该方式适配的对比结果，同样适用dp适配所使用的布局</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@mipmap/img"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"@dimen/x300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/y300"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改了ImageView的宽和高，适配结果为下图</p><p><img src="valueshipei.png" alt=""></p><p>再看看不同机型分辨率下的表现</p><p><img src="valueshipei2.png" alt=""></p><p>可以看到对比于使用dp方案来适配的结果要完美上许多。通过dimens引用去寻找该分辨率的文件夹下面对应的值。这样基本可以解决我们的适配问题。</p><p>那么重点来了，既然可以适配，但为什么很少人使用该方案呢，这就涉及到该方案的一个致命的缺点：那就是需要精准命中才能适配。如果values限定符下的分辨率没有对应上手机，则就只能用默认的values下的dimens文件了。如果使用默认尺寸，而又不同于设计稿的尺寸，就可以会发生UI变形。简单的说容错率太低了。</p><blockquote><p>生成的values文件夹下以哪个为基准也需要同样的拷贝一份基准值去默认values文件夹下作为默认值。</p></blockquote><p><strong>那么如何生成上述所说的文件夹呢，这里使用鸿洋大神给出的一份自动生成代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateValueFiles</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> baseW;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> baseH;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dirStr = <span class="string">"./res"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String WTemplate = <span class="string">"&lt;dimen name=\"x&#123;0&#125;\"&gt;&#123;1&#125;px&lt;/dimen&gt;\n"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String HTemplate = <span class="string">"&lt;dimen name=\"y&#123;0&#125;\"&gt;&#123;1&#125;px&lt;/dimen&gt;\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;0&#125;-HEIGHT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String VALUE_TEMPLATE = <span class="string">"values-&#123;0&#125;x&#123;1&#125;"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 需要适配的分辨率,格式为width,height;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUPPORT_DIMESION = <span class="string">"320,480;480,800;480,854;540,960;600,1024;720,1184;720,1196;720,1280;768,1024;800,1280;1080,1812;1080,1920;1440,2560;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String supportStr = SUPPORT_DIMESION;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenerateValueFiles</span><span class="params">(<span class="keyword">int</span> baseX, <span class="keyword">int</span> baseY, String supportStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baseW = baseX;</span><br><span class="line">        <span class="keyword">this</span>.baseH = baseY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.supportStr.contains(baseX + <span class="string">","</span> + baseY)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.supportStr += baseX + <span class="string">","</span> + baseY + <span class="string">";"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.supportStr += validateInput(supportStr);</span><br><span class="line"></span><br><span class="line">        System.out.println(supportStr);</span><br><span class="line"></span><br><span class="line">        File dir = <span class="keyword">new</span> File(dirStr);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dir.getAbsoluteFile());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> supportStr</span></span><br><span class="line"><span class="comment">     *            w,h_...w,h;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">validateInput</span><span class="params">(String supportStr)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String[] vals = supportStr.split(<span class="string">"_"</span>);</span><br><span class="line">        <span class="keyword">int</span> w = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> h = -<span class="number">1</span>;</span><br><span class="line">        String[] wh;</span><br><span class="line">        <span class="keyword">for</span> (String val : vals) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (val == <span class="keyword">null</span> || val.trim().length() == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                wh = val.split(<span class="string">","</span>);</span><br><span class="line">                w = Integer.parseInt(wh[<span class="number">0</span>]);</span><br><span class="line">                h = Integer.parseInt(wh[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"skip invalidate params : w,h = "</span> + val);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(w + <span class="string">","</span> + h + <span class="string">";"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] vals = supportStr.split(<span class="string">";"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String val : vals) &#123;</span><br><span class="line">            String[] wh = val.split(<span class="string">","</span>);</span><br><span class="line">            generateXmlFile(Integer.parseInt(wh[<span class="number">0</span>]), Integer.parseInt(wh[<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateXmlFile</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuffer sbForWidth = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sbForWidth.append(<span class="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</span>);</span><br><span class="line">        sbForWidth.append(<span class="string">"&lt;resources&gt;"</span>);</span><br><span class="line">        <span class="keyword">float</span> cellw = w * <span class="number">1.0f</span> / baseW;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"width : "</span> + w + <span class="string">","</span> + baseW + <span class="string">","</span> + cellw);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; baseW; i++) &#123;</span><br><span class="line">            sbForWidth.append(WTemplate.replace(<span class="string">"&#123;0&#125;"</span>, i + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>,</span><br><span class="line">                    change(cellw * i) + <span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        sbForWidth.append(WTemplate.replace(<span class="string">"&#123;0&#125;"</span>, baseW + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>,</span><br><span class="line">                w + <span class="string">""</span>));</span><br><span class="line">        sbForWidth.append(<span class="string">"&lt;/resources&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        StringBuffer sbForHeight = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sbForHeight.append(<span class="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</span>);</span><br><span class="line">        sbForHeight.append(<span class="string">"&lt;resources&gt;"</span>);</span><br><span class="line">        <span class="keyword">float</span> cellh = h *<span class="number">1.0f</span>/ baseH;</span><br><span class="line">        System.out.println(<span class="string">"height : "</span>+ h + <span class="string">","</span> + baseH + <span class="string">","</span> + cellh);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; baseH; i++) &#123;</span><br><span class="line">            sbForHeight.append(HTemplate.replace(<span class="string">"&#123;0&#125;"</span>, i + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>,</span><br><span class="line">                    change(cellh * i) + <span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        sbForHeight.append(HTemplate.replace(<span class="string">"&#123;0&#125;"</span>, baseH + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>,</span><br><span class="line">                h + <span class="string">""</span>));</span><br><span class="line">        sbForHeight.append(<span class="string">"&lt;/resources&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        File fileDir = <span class="keyword">new</span> File(dirStr + File.separator</span><br><span class="line">                + VALUE_TEMPLATE.replace(<span class="string">"&#123;0&#125;"</span>, h + <span class="string">""</span>)<span class="comment">//</span></span><br><span class="line">                .replace(<span class="string">"&#123;1&#125;"</span>, w + <span class="string">""</span>));</span><br><span class="line">        fileDir.mkdir();</span><br><span class="line"></span><br><span class="line">        File layxFile = <span class="keyword">new</span> File(fileDir.getAbsolutePath(), <span class="string">"lay_x.xml"</span>);</span><br><span class="line">        File layyFile = <span class="keyword">new</span> File(fileDir.getAbsolutePath(), <span class="string">"lay_y.xml"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(layxFile));</span><br><span class="line">            pw.print(sbForWidth.toString());</span><br><span class="line">            pw.close();</span><br><span class="line">            pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(layyFile));</span><br><span class="line">            pw.print(sbForHeight.toString());</span><br><span class="line">            pw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">change</span><span class="params">(<span class="keyword">float</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = (<span class="keyword">int</span>) (a * <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> temp / <span class="number">100f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//基准分辨率</span></span><br><span class="line">        <span class="keyword">int</span> baseW = <span class="number">480</span>;</span><br><span class="line">        <span class="keyword">int</span> baseH = <span class="number">800</span>;</span><br><span class="line">        String addition = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (args.length &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                baseW = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">                baseH = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">                addition = args[<span class="number">2</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                baseW = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">                baseH = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                addition = args[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line"></span><br><span class="line">            System.err</span><br><span class="line">                    .println(<span class="string">"right input params : java -jar xxx.jar width height w,h_w,h_..._w,h;"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> GenerateValueFiles(baseW, baseH, addition).generate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于主流的分辨率我已经集成到了我们的程序中，当然对于特殊的，你可以通过参数指定。关于屏幕分辨率信息，可以通过该网站查询：<a href="http://screensiz.es/phone" target="_blank" rel="noopener">http://screensiz.es/phone</a></p></blockquote><h1 id="AndroidAutoLayout库适配"><a href="#AndroidAutoLayout库适配" class="headerlink" title="AndroidAutoLayout库适配"></a>AndroidAutoLayout库适配</h1><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FhongyangAndroid%2FAndroidAutoLayout" target="_blank" rel="noopener">鸿洋大佬的适配方案</a>的项目也来自于宽高限定符方案的启发。虽然该框架已经停止维护，但是许多老项目也在使用该方案。因为集成简单，并且不需要使用dp单位，而是定义好设计稿的尺寸后使用px单位即可完成适配。</p><p><strong>使用方法：</strong></p><ul><li>Android Studio</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.zhy:autolayout:1.4.5'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AndroidManifest注册<code>设计稿</code>尺寸</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"design_width"</span> <span class="attr">android:value</span>=<span class="string">"768"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meta-data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"design_height"</span> <span class="attr">android:value</span>=<span class="string">"1280"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meta-data</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>集成<code>AutoLayoutActivity</code></li></ul><p>然后就可以在布局文件按照设计稿的尺寸来使用具体的像素值了。比如，设计稿上是96*96,那么我们可以直接写96px，APP运行时，框架会帮助我们根据不同手机的具体尺寸按比例伸缩。这是比宽高限定符更好的方案，因为解决了宽高限定符的容错率问题。</p><p>但是框架要在运行时会在onMeasure里面做变换，自定义的控件可能会被影响或限制，可能有些特定的控件，需要单独适配，这里面可能存在的暗坑是不可预见的。因为这是由框架来完成，并非系统完成。并且该库作者已经放弃维护了。</p><h1 id="smallestWidth适配"><a href="#smallestWidth适配" class="headerlink" title="smallestWidth适配"></a>smallestWidth适配</h1><p>smallestWidth适配也叫做sw限定符适配。值得是Android会识别屏幕可用宽度和高度的最小尺寸的dp值，然后再根据识别的结果去资源文件中寻找对应的限定符的文件夹下的资源文件。</p><p>这种机制上和上文提到的宽高限定符适配原理上是一样的。都是通过系统特定的规则选择对应的文件。</p><p><img src="genswvalue.png" alt=""></p><p>例如，比如一台手机的dpi为480，横向分辨率为1080px，根据公式px = dp(dpi/160)，横向的dp值是360dp。则系统就会自动去寻找<code>value-sw360dp</code>的文件夹以及对应的资源文件。</p><blockquote><p>理论条件下物理dp等于系统dp</p></blockquote><p>而该方案对比与宽高限定符适配方案最大的区别也是优点就是，该方案有更好的容错率。比如上述例子中，如果系统找不到<code>value-sw350dp</code>文件夹，则系统会向下寻找，比如找到离一个360最近的<code>value-sw320dp</code>文件夹。那么系统就会选择该文件下的资源文件。</p><p>例如设计稿同样为<code>480 * 800</code>,同样有一个<code>300 * 300</code>px的ImageView，例如在values-sw360dp文件夹下的dimen应该如何编写呢？360dp则意味着手机最小宽度为360dp，我们将360dp分成480份，每一个设计稿中的像素大概代表着手机的0.75dp。那么一个<code>300 * 300</code>px对应的dimen引用则为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"base_dpi"</span>&gt;</span>360dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">  //....</span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_0"</span>&gt;</span>0.00dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_1"</span>&gt;</span>0.75dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_300"</span>&gt;</span>225.00dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">  //...</span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而这种dimens引用，在不同的<code>values-sw&lt;N&gt;</code>dp文件夹下的数值是不同的，比如values-sw400dp和values-sw420dp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//400dp</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"base_dpi"</span>&gt;</span>400dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_0"</span>&gt;</span>0.00dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_1"</span>&gt;</span>0.83dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_2"</span>&gt;</span>1.67dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_3"</span>&gt;</span>2.50dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_4"</span>&gt;</span>3.33dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">//420dp</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"base_dpi"</span>&gt;</span>420dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_0"</span>&gt;</span>0.00dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_1"</span>&gt;</span>0.88dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_2"</span>&gt;</span>1.75dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_3"</span>&gt;</span>2.63dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_4"</span>&gt;</span>3.50dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算完后，那么对应的布局文件编写代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_adapterimg"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@mipmap/img"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"@dimen/qb_px_300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/qb_px_300"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行一下来看看适配的效果：</p><p><img src="swvalueshipei.png" alt=""></p><p>smallestWidth的适配机制由系统保证，我们只需要针对这套规则生成对应的资源文件即可，不会出现什么难以解决的问题，也根本不会影响我们的业务逻辑代码，而且只要我们生成的资源文件分布合理，，即使对应的smallestWidth值没有找到完全对应的资源文件，它也能向下兼容，寻找最接近的资源文件。</p><p>当然该方案也有他的缺点，生成的文件夹越多，也就意味着生成的dimens文件的覆盖范围和尺寸范围越大，apk的安装包也会增加，宽高限定符适配方案也同样有着该缺点。</p><blockquote><p>smallestWidth适配方案有一个小问题，那就是它是在Android 3.2 以后引入的，Google的本意是用它来适配平板的布局文件（但是实际上显然用于diemns适配的效果更好），不过目前所有的项目应该最低支持版本应该都是4.0了（糗事百科这么老的项目最低都是4.0哦），所以，这问题其实也不重要了。</p></blockquote><p>当然，计算的方式肯定也不会是自己一点计算再编写， 附上生成的代码文件。<a href="https://github.com/ladingwu/dimens_sw" target="_blank" rel="noopener">代码链接</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateSWValueFiles</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 适配手机dp列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> DimenTypes &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//适配Android 3.2以上   大部分手机的sw值集中在  300-460之间</span></span><br><span class="line">        DP_sw__300(<span class="number">300</span>),  <span class="comment">// values-sw300</span></span><br><span class="line">        DP_sw__310(<span class="number">310</span>),</span><br><span class="line">        DP_sw__320(<span class="number">320</span>),</span><br><span class="line">        DP_sw__330(<span class="number">330</span>),</span><br><span class="line">        DP_sw__340(<span class="number">340</span>),</span><br><span class="line">        DP_sw__350(<span class="number">350</span>),</span><br><span class="line">        DP_sw__360(<span class="number">360</span>),</span><br><span class="line">        DP_sw__370(<span class="number">370</span>),</span><br><span class="line">        DP_sw__380(<span class="number">380</span>),</span><br><span class="line">        DP_sw__390(<span class="number">390</span>),</span><br><span class="line">        DP_sw__410(<span class="number">410</span>),</span><br><span class="line">        DP_sw__420(<span class="number">420</span>),</span><br><span class="line">        DP_sw__430(<span class="number">430</span>),</span><br><span class="line">        DP_sw__440(<span class="number">440</span>),</span><br><span class="line">        DP_sw__450(<span class="number">450</span>),</span><br><span class="line">        DP_sw__460(<span class="number">460</span>),</span><br><span class="line">        DP_sw__470(<span class="number">470</span>),</span><br><span class="line">        DP_sw__480(<span class="number">480</span>),</span><br><span class="line">        DP_sw__490(<span class="number">490</span>),</span><br><span class="line"></span><br><span class="line">        DP_sw__400(<span class="number">400</span>);</span><br><span class="line">        <span class="comment">// 想生成多少自己以此类推</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 屏幕最小宽度</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> swWidthDp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        DimenTypes(<span class="keyword">int</span> swWidthDp) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.swWidthDp = swWidthDp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSwWidthDp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> swWidthDp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSwWidthDp</span><span class="params">(<span class="keyword">int</span> swWidthDp)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.swWidthDp = swWidthDp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成SW工具类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_HEADER = <span class="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_RESOURCE_START = <span class="string">"&lt;resources&gt;\r\n"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_RESOURCE_END = <span class="string">"&lt;/resources&gt;\r\n"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_DIMEN_TEMPLETE = <span class="string">"&lt;dimen name=\"qb_%1$spx_%2$d\"&gt;%3$.2fdp&lt;/dimen&gt;\r\n"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_BASE_DPI = <span class="string">"&lt;dimen name=\"base_dpi\"&gt;%ddp&lt;/dimen&gt;\r\n"</span>;</span><br><span class="line">        <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">720</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成的文件名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_NAME = <span class="string">"lay_sw.xml"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">px2dip</span><span class="params">(<span class="keyword">float</span> pxValue, <span class="keyword">int</span> sw,<span class="keyword">int</span> designWidth)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">float</span> dpValue =   (pxValue/(<span class="keyword">float</span>)designWidth) * sw;</span><br><span class="line">            BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(dpValue);</span><br><span class="line">            <span class="keyword">float</span> finDp = bigDecimal.setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).floatValue();</span><br><span class="line">            <span class="keyword">return</span> finDp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成所有的尺寸数据</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">makeAllDimens</span><span class="params">(DimenTypes type, <span class="keyword">int</span> designWidth)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">float</span> dpValue;</span><br><span class="line">            String temp;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sb.append(XML_HEADER);</span><br><span class="line">                sb.append(XML_RESOURCE_START);</span><br><span class="line">                <span class="comment">//备份生成的相关信息</span></span><br><span class="line">                temp = String.format(XML_BASE_DPI, type.getSwWidthDp());</span><br><span class="line">                sb.append(temp);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= MAX_SIZE; i++) &#123;</span><br><span class="line"></span><br><span class="line">                    dpValue = px2dip((<span class="keyword">float</span>) i,type.getSwWidthDp(),designWidth);</span><br><span class="line">                    temp = String.format(XML_DIMEN_TEMPLETE,<span class="string">""</span>, i, dpValue);</span><br><span class="line">                    sb.append(temp);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                sb.append(XML_RESOURCE_END);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成的目标文件夹</span></span><br><span class="line"><span class="comment">         * 只需传宽进来就行</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> type 枚举类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> buildDir 生成的目标文件夹</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeAll</span><span class="params">(<span class="keyword">int</span> designWidth, DimenTypes type, String buildDir)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//生成规则</span></span><br><span class="line">                <span class="keyword">final</span> String folderName;</span><br><span class="line">                <span class="keyword">if</span> (type.getSwWidthDp() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//适配Android 3.2+</span></span><br><span class="line">                    folderName = <span class="string">"values-sw"</span> + type.getSwWidthDp() + <span class="string">"dp"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//生成目标目录</span></span><br><span class="line">                File file = <span class="keyword">new</span> File(buildDir + File.separator + folderName);</span><br><span class="line">                <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                    file.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//生成values文件</span></span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file.getAbsolutePath() + File.separator + XML_NAME);</span><br><span class="line">                fos.write(makeAllDimens(type,designWidth).getBytes());</span><br><span class="line">                fos.flush();</span><br><span class="line">                fos.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设计稿尺寸(将自己设计师的设计稿的宽度填入)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DESIGN_WIDTH = <span class="number">480</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设计稿的高度  （将自己设计师的设计稿的高度填入）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DESIGN_HEIGHT = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//generater</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> smallest = DESIGN_WIDTH &gt; DESIGN_HEIGHT ? DESIGN_HEIGHT : DESIGN_WIDTH;  <span class="comment">//     求得最小宽度</span></span><br><span class="line">        DimenTypes[] values = DimenTypes.values();</span><br><span class="line">        <span class="keyword">for</span> (DimenTypes value : values) &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"dimens"</span>); <span class="comment">//当前项目路径</span></span><br><span class="line">            MakeUtils.makeAll(smallest, value, file.getAbsolutePath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>主流dp也可以查询相关网站</p></blockquote><h1 id="今日头条适配方案"><a href="#今日头条适配方案" class="headerlink" title="今日头条适配方案"></a>今日头条适配方案</h1><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fd9QCoBP6kV9VSWvVldVVwA" target="_blank" rel="noopener">文章链接</a></p><p>该方案的思想来源就是修改density的值，强行把所有不同分辨率的手机的宽度改成一个统一的值。</p><p>上文提到dp适配的<code>DisplayMetrics</code>中的相关变量：</p><ul><li>DisplayMetrics#density 就是上述的density</li><li>DisplayMetrics#densityDpi 就是上述的dpi</li><li>DisplayMetrics#scaledDensity 字体的缩放因子，正常情况下和density相等，但是调节系统字体大小后会改变这个值</li></ul><p><strong>那么是不是所有的dp和px的转换都是通过 DisplayMetrics 中相关的值来计算的呢？</strong></p><p>首先来看看布局文件中dp的转换，最终都是调用 <code>TypedValue#applyDimension(int unit, float value, DisplayMetrics metrics)</code>来进行转换:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">applyDimension</span><span class="params">(<span class="keyword">int</span> unit, <span class="keyword">float</span> value,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       DisplayMetrics metrics)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (unit) &#123;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_PX:</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_DIP:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.density;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_SP:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.scaledDensity;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_PT:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi * (<span class="number">1.0f</span>/<span class="number">72</span>);</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_IN:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_MM:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi * (<span class="number">1.0f</span>/<span class="number">25.4f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里用到的DisplayMetrics正是从Resources中获得的。</p><p>再看看图片的decode，<code>BitmapFactory#decodeResourceStream</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeResourceStream</span><span class="params">(@Nullable Resources res, @Nullable TypedValue value,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable InputStream is, @Nullable Rect pad, @Nullable Options opts)</span> </span>&#123;</span><br><span class="line">        validate(opts);</span><br><span class="line">        <span class="keyword">if</span> (opts == <span class="keyword">null</span>) &#123;</span><br><span class="line">            opts = <span class="keyword">new</span> Options();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (opts.inDensity == <span class="number">0</span> &amp;&amp; value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> density = value.density;</span><br><span class="line">            <span class="keyword">if</span> (density == TypedValue.DENSITY_DEFAULT) &#123;</span><br><span class="line">                opts.inDensity = DisplayMetrics.DENSITY_DEFAULT;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (density != TypedValue.DENSITY_NONE) &#123;</span><br><span class="line">                opts.inDensity = density;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (opts.inTargetDensity == <span class="number">0</span> &amp;&amp; res != <span class="keyword">null</span>) &#123;</span><br><span class="line">            opts.inTargetDensity = res.getDisplayMetrics().densityDpi;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> decodeStream(is, pad, opts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当然还有些其他dp转换的场景，基本都是通过 DisplayMetrics 来计算的，这里不再详述。因此，想要满足上述需求，我们只需要修改 DisplayMetrics 中和 dp 转换相关的变量即可。</p><p>通过该原理得到的适配方案：</p><p>比如，设计稿的宽度是480px，那么开发代码时会把目标dp值设置为480dp，在不同设备中，动态修改density的值，从而保证手机像素宽度/density这个值始终是360dp。这样来保证UI在不同设备上表现一致。</p><p>今日头条屏幕适配方案的核心原理在于，根据以下公式算出 <strong>density</strong></p><p><strong>当前设备屏幕总宽度（单位为像素）/ 设计图总宽度（单位为 dp) = density</strong></p><p>今日头条方案代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.content.ComponentCallbacks;</span><br><span class="line"><span class="keyword">import</span> android.content.res.Configuration;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.util.DisplayMetrics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> sNoncompatDensity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> sNoncompatScaledDensity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCustomDensity</span><span class="params">(@NonNull Activity activity, @NonNull <span class="keyword">final</span> Application application)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> DisplayMetrics appDisplayMetrics = application.getResources().getDisplayMetrics();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( sNoncompatDensity == <span class="number">0</span>) &#123;</span><br><span class="line">            sNoncompatDensity = appDisplayMetrics.density;</span><br><span class="line">            sNoncompatScaledDensity = appDisplayMetrics.scaledDensity;</span><br><span class="line">            application.registerComponentCallbacks(<span class="keyword">new</span> ComponentCallbacks() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(newConfig != <span class="keyword">null</span> &amp;&amp; newConfig.fontScale &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        sNoncompatScaledDensity = application.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> targetDensity = (<span class="keyword">float</span>) (appDisplayMetrics.widthPixels / <span class="number">480.0</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> targetDensityDPI = (<span class="keyword">int</span>) (targetDensity * <span class="number">160</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> targetScaledDensity = targetDensity * (sNoncompatScaledDensity / sNoncompatDensity);</span><br><span class="line"></span><br><span class="line">        appDisplayMetrics.density  = targetDensity;</span><br><span class="line">        appDisplayMetrics.densityDpi = targetDensityDPI;</span><br><span class="line">        appDisplayMetrics.scaledDensity = targetScaledDensity;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DisplayMetrics activityDisplayMetrics = activity.getResources().getDisplayMetrics();</span><br><span class="line">        activityDisplayMetrics.density  = targetDensity;</span><br><span class="line">        activityDisplayMetrics.densityDpi = targetDensityDPI;</span><br><span class="line">        activityDisplayMetrics.scaledDensity = targetScaledDensity;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在activity#onCreate方法中调用即可，在setContentView之前。运行看看适配的效果：</p><p><img src="toutiaoshipei.png" alt=""></p><blockquote><p>以设计图宽480dp去适配的，如果要以高维度适配，可以再扩展下代码即可</p></blockquote><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>使用成本非常低，操作非常简单，使用该方案后在页面布局时不需要额外的代码和操作，这点可以说完虐其他屏幕适配方案</li><li>侵入性非常低，该方案和项目完全解耦，在项目布局时不会依赖哪怕一行该方案的代码，而且使用的还是 <strong>Android</strong> 官方的 <strong>API</strong>，意味着当你遇到什么问题无法解决，想切换为其他屏幕适配方案时，基本不需要更改之前的代码，整个切换过程几乎在瞬间完成，会少很多麻烦，节约很多时间，试错成本接近于 0</li><li>可适配三方库的控件和系统的控件(不止是是 <strong>Activity</strong> 和 <strong>Fragment</strong>，<strong>Dialog</strong>、<strong>Toast</strong> 等所有系统控件都可以适配)，由于修改的 <strong>density</strong> 在整个项目中是全局的，所以只要一次修改，项目中的所有地方都会受益</li><li>不会有任何性能的损耗</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>暂时没发现其他什么很明显的缺点，已知的缺点有一个，那就是第三个优点，它既是这个方案的优点也同样是缺点，但是就这一个缺点也是非常致命的</p><p>只需要修改一次 <strong>density</strong>，项目中的所有地方都会自动适配，这个看似解放了双手，减少了很多操作，但是实际上反应了一个缺点，那就是只能一刀切的将整个项目进行适配，但适配范围是不可控的</p><p>这样不是很好吗？这样本来是很好的，但是应用到这个方案是就不好了，因为我上面的原理也分析了，这个方案依赖于设计图尺寸，但是项目中的系统控件、三方库控件、等非我们项目自身设计的控件，它们的设计图尺寸并不会和我们项目自身的设计图尺寸一样</p><p>当这个适配方案不分类型，将所有控件都强行使用我们项目自身的设计图尺寸进行适配时，这时就会出现问题，<strong>当某个系统控件或三方库控件的设计图尺寸和和我们项目自身的设计图尺寸差距非常大时，这个问题就越严重</strong></p><blockquote><p>这里是JessYan总结的优缺点，个人很赞同。</p></blockquote><h1 id="AndroidAutoSIze"><a href="#AndroidAutoSIze" class="headerlink" title="AndroidAutoSIze"></a>AndroidAutoSIze</h1><p>一个基于今日头条方案的开源库，一个极低成本的 Android 屏幕适配方案.</p><p>如果项目没有什么特殊要求，两个步骤即可完成适配：</p><p><strong>添加依赖</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'me.jessyan:autosize:1.1.2'</span></span><br></pre></td></tr></table></figure><p><strong>请在 AndroidManifest 中填写全局设计图尺寸 (单位 dp)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"design_width_in_dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"360"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"design_height_in_dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"640"</span>/&gt;</span>           </span><br><span class="line">     <span class="tag">&lt;/<span class="name">application</span>&gt;</span>           </span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/JessYanCoding/AndroidAutoSize/blob/master/README-zh.md" target="_blank" rel="noopener">Github</a>，更多详细集成文档建议查看github链接。github中有很详细的用法以及使用的问题。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>适配就是根据设计图来达到某一个维度上显示一致，不能够说使用适配就可以不使用wrap_content等，比如一个页面时上下滑动的，我们只需要保持设备在宽的维度上保持显示一致即可。而如果一个不支持上下滑动的页面，只需要保持设备在高的维度上保持显示一致。</p><p>如何适配，如何选择适配的方案还是要结合自己业务的需求。因为开发就是要追求高效和稳定。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/ghost_Programmer/article/details/50042805" target="_blank" rel="noopener">https://blog.csdn.net/ghost_Programmer/article/details/50042805</a></p><p><a href="https://juejin.im/post/5ae9cc3a5188253dc612842b" target="_blank" rel="noopener">https://juejin.im/post/5ae9cc3a5188253dc612842b</a></p><p><a href="https://blog.csdn.net/lmj623565791/article/details/45460089" target="_blank" rel="noopener">https://blog.csdn.net/lmj623565791/article/details/45460089</a></p><p><a href="https://juejin.im/post/5b7a29736fb9a019d53e7ee2" target="_blank" rel="noopener">https://juejin.im/post/5b7a29736fb9a019d53e7ee2</a></p><p><a href="https://mp.weixin.qq.com/s/SDHL26XgIjjlK-RLd_SSCw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/SDHL26XgIjjlK-RLd_SSCw</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在Android开发中，由于Android碎片化严重，屏幕分辨率千奇百怪，而想要在各种分辨率的设备上显示基本一致的效果，适配成本越来越高。虽然Android官方提供了dp单位来适配，但其在各种奇怪分辨率下表现却不尽如人意。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android屏幕适配" scheme="http://hackycy.github.io/tags/Android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB安装和使用</title>
    <link href="http://hackycy.github.io/2019/05/11/MongoDB%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://hackycy.github.io/2019/05/11/MongoDB安装和使用/</id>
    <published>2019-05-11T15:38:48.000Z</published>
    <updated>2019-05-11T17:32:13.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h1><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p><p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><a id="more"></a><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>MongoDB的提供了一个面向文档存储，操作起来比较简单和容易。</li><li>你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=”Sameer”,Address=”8 Gandhi Road”)来实现更快的排序。</li><li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li><li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li><li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li><li>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li><li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li><li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li><li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li><li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li><li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li><li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li><li>MongoDB安装简单。</li></ul><h1 id="安装MongoDB-Community-Edition"><a href="#安装MongoDB-Community-Edition" class="headerlink" title="安装MongoDB Community Edition"></a>安装MongoDB Community Edition</h1><p>本文只介绍Mac安装，其余安装方法请查阅：<a href="https://docs.mongodb.com/manual/administration/install-community/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/administration/install-community/</a></p><p>使用Homebrew安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ brew tap mongodb/brew</span><br><span class="line">$ brew install mongodb-community@4.0</span><br><span class="line">==&gt; Caveats</span><br><span class="line">To have launchd start mongodb/brew/mongodb-community now and restart at login:</span><br><span class="line">  brew services start mongodb/brew/mongodb-community</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string">  mongod --config /usr/local/etc/mongod.conf</span></span><br><span class="line"><span class="string">==&gt; Summary</span></span><br><span class="line"><span class="string">🍺  /usr/local/Cellar/mongodb-community/4.0.9: 20 files, 221.0MB, built in 23 seconds</span></span><br></pre></td></tr></table></figure><p>安装后可查看到后面这段文字，为MongoDB的一些配置文件路径</p><ul><li>the <a href="https://docs.mongodb.com/manual/reference/configuration-options/" target="_blank" rel="noopener">configuration file</a> (<code>/usr/local/etc/mongod.conf</code>)</li><li>the <a href="https://docs.mongodb.com/manual/reference/configuration-options/#systemLog.path" target="_blank" rel="noopener"><code>log directory path</code></a> (<code>/usr/local/var/log/mongodb</code>)</li><li>the <a href="https://docs.mongodb.com/manual/reference/configuration-options/#storage.dbPath" target="_blank" rel="noopener"><code>data directory path</code></a> (<code>/usr/local/var/mongodb</code>)</li></ul><h1 id="MongoDB-数据类型"><a href="#MongoDB-数据类型" class="headerlink" title="MongoDB 数据类型"></a>MongoDB 数据类型</h1><table><thead><tr><th style="text-align:left">数据类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">String</td><td style="text-align:left">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td style="text-align:left">Integer</td><td style="text-align:left">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td style="text-align:left">Boolean</td><td style="text-align:left">布尔值。用于存储布尔值（真/假）。</td></tr><tr><td style="text-align:left">Double</td><td style="text-align:left">双精度浮点值。用于存储浮点值。</td></tr><tr><td style="text-align:left">Min/Max keys</td><td style="text-align:left">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td></tr><tr><td style="text-align:left">Arrays</td><td style="text-align:left">用于将数组或列表或多个值存储为一个键。</td></tr><tr><td style="text-align:left">Timestamp</td><td style="text-align:left">时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td style="text-align:left">Object</td><td style="text-align:left">用于内嵌文档。</td></tr><tr><td style="text-align:left">Null</td><td style="text-align:left">用于创建空值。</td></tr><tr><td style="text-align:left">Symbol</td><td style="text-align:left">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left">日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td style="text-align:left">Object ID</td><td style="text-align:left">对象 ID。用于创建文档的 ID。</td></tr><tr><td style="text-align:left">Binary Data</td><td style="text-align:left">二进制数据。用于存储二进制数据。</td></tr><tr><td style="text-align:left">Code</td><td style="text-align:left">代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td style="text-align:left">Regular expression</td><td style="text-align:left">正则表达式类型。用于存储正则表达式。</td></tr></tbody></table><h1 id="MongoDB概念"><a href="#MongoDB概念" class="headerlink" title="MongoDB概念"></a>MongoDB概念</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>一个mongodb中可以建立多个数据库。</p><p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。</p><p>MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p><p><strong>“show dbs”</strong> 命令可以显示所有数据的列表。</p><p>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</p><ul><li>不能是空字符串（””)。</li><li>不得含有’ ‘（空格)、.、$、/、\和\0 (空宇符)。</li><li>应全部小写。</li><li>最多64字节。</li></ul><p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p><ul><li><strong>admin</strong>： 从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li><li><strong>local:</strong> 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li><li><strong>config</strong>: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>文档是一个键值(key-value)对(即BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><p>一个简单的文档例子如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"site"</span>:<span class="string">"hackycy.github.io"</span>, <span class="attr">"name"</span>:<span class="string">"博客"</span>&#125;</span><br></pre></td></tr></table></figure><p>关系型数据库和MongoDB的一些区别</p><table><thead><tr><th style="text-align:left">RDBMS</th><th style="text-align:left">MongoDB</th></tr></thead><tbody><tr><td style="text-align:left">数据库</td><td style="text-align:left">数据库</td></tr><tr><td style="text-align:left">表格</td><td style="text-align:left">集合</td></tr><tr><td style="text-align:left">行</td><td style="text-align:left">文档</td></tr><tr><td style="text-align:left">列</td><td style="text-align:left">字段</td></tr><tr><td style="text-align:left">表联合</td><td style="text-align:left">嵌入文档</td></tr><tr><td style="text-align:left">主键</td><td style="text-align:left">主键 (MongoDB 提供了 key 为 _id )</td></tr></tbody></table><p>需要注意的是：</p><ol><li>文档中的键/值对是有序的。</li><li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li><li>MongoDB区分类型和大小写。</li><li>MongoDB的文档不能有重复的键。</li><li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li></ol><p>文档键命名规范：</p><ul><li>键不能含有\0 (空字符)。这个字符用来表示键的结尾。</li><li>.和$有特别的意义，只有在特定环境下才能使用。</li><li>以下划线”_”开头的键是保留的(不是严格要求的)。</li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。</p><p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p><h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><p><a href="https://docs.mongodb.com/manual/crud/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/crud/</a></p><p><a href="http://www.runoob.com/mongodb/mongodb-operators.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-operators.html</a></p><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongod --dbpath <span class="string">"/usr/local/var/mongodb"</span></span><br></pre></td></tr></table></figure><p>mongodb常用启动参数</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">–bind_ip</td><td style="text-align:left">绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</td></tr><tr><td style="text-align:left">–logpath</td><td style="text-align:left">定义MongoDB日志文件，注意是指定文件不是目录</td></tr><tr><td style="text-align:left">–logappend</td><td style="text-align:left">使用追加的方式写日志</td></tr><tr><td style="text-align:left">–dbpath</td><td style="text-align:left">指定数据库路径</td></tr><tr><td style="text-align:left">–port</td><td style="text-align:left">指定服务端口号，默认端口27017</td></tr><tr><td style="text-align:left">–serviceName</td><td style="text-align:left">指定服务名称</td></tr><tr><td style="text-align:left">–serviceDisplayName</td><td style="text-align:left">指定服务名称，有多个mongodb服务时执行。</td></tr><tr><td style="text-align:left">–install</td><td style="text-align:left">指定作为一个Windows服务安装。</td></tr></tbody></table><h2 id="命令行连接服务器"><a href="#命令行连接服务器" class="headerlink" title="命令行连接服务器"></a>命令行连接服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br></pre></td></tr></table></figure><p>默认连接的是test数据库</p><h2 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs;</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br></pre></td></tr></table></figure><h2 id="切换-创建数据库"><a href="#切换-创建数据库" class="headerlink" title="切换/创建数据库"></a>切换/创建数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; use shop;</span><br><span class="line">switched to db shop</span><br><span class="line">&gt; db</span><br><span class="line">shop</span><br></pre></td></tr></table></figure><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.dropDatabase()</span><br></pre></td></tr></table></figure><p>删除当前数据库，默认为 test，你可以使用 db 命令查看当前数据库名。</p><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><p>语法：<code>db.createCollection(name, options)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.createCollection(<span class="string">"users"</span>);</span><br></pre></td></tr></table></figure><h2 id="查询集合"><a href="#查询集合" class="headerlink" title="查询集合"></a>查询集合</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; show collections;</span><br></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>语法：<code>db.集合名.find(条件);</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br><span class="line">&gt; db.users.find(&#123;age:&#123;<span class="variable">$gt</span>:21&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br></pre></td></tr></table></figure><ul><li>(&gt;) 大于 - $gt</li><li>(&lt;) 小于 - $lt</li><li>(&gt;=) 大于等于 - $gte</li><li>(&lt;= ) 小于等于 - $lte</li></ul><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>语法：<code>db.集合名.save(对象)</code>或者<code>db.集合名.insert(对象)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.save(&#123;name:<span class="string">"jack"</span>, age:20&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : 1 &#125;)</span><br><span class="line">&gt; show collections;</span><br><span class="line">users</span><br><span class="line">&gt; db.users.find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f5e919ee5a000f483e6e"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 20 &#125;</span><br></pre></td></tr></table></figure><p>mongo默认会给我们加入<code>_id</code>作为该文档对象的唯一标识</p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>语法：<code>db.集合名.remove(条件对象);</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; db.users.remove(&#123;name:<span class="string">"jack"</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nRemoved"</span> : 1 &#125;)</span><br><span class="line">&gt; db.users.find();</span><br></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>语法：<code>db.集合名.update({匹配条件对象},{$set:{修改后的对象}});</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.save(&#123;name:<span class="string">"jack"</span>, age:20&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : 1 &#125;)</span><br><span class="line">&gt; db.users.update(&#123;name:<span class="string">'jack'</span>&#125;,&#123;<span class="variable">$set</span>:&#123;name:<span class="string">'tom'</span>&#125;&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nMatched"</span> : 1, <span class="string">"nUpserted"</span> : 0, <span class="string">"nModified"</span> : 1 &#125;)</span><br><span class="line">&gt; db.users.find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p><strong>skip()</strong></p><p>skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。</p><p>语法：<code>db.集合名.find().skip(Number)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br><span class="line">&gt; db.users.find().skip(1);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br></pre></td></tr></table></figure><p><strong>limit()</strong></p><p>该方法可以读取指定数量的数据记录。</p><p>语法：<code>db.集合名.find().limit(Number)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br><span class="line">&gt; db.users.find().<span class="built_in">limit</span>(1);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这两个方法可以连用。</p></blockquote><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>使用 sort() 方法对数据进行排序</p><p>语法：<code>db.集合名.find().sort({key:排序方式});</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br><span class="line">&gt; db.users.find().sort(&#123;age:-1&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br></pre></td></tr></table></figure><blockquote><p>正数代表升序，负数代表降序</p></blockquote><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。</p><table><thead><tr><th style="text-align:left">表达式</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">$sum</td><td style="text-align:left">计算总和。</td><td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])</td></tr><tr><td style="text-align:left">$avg</td><td style="text-align:left">计算平均值</td><td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])</td></tr><tr><td style="text-align:left">$min</td><td style="text-align:left">获取集合中所有文档对应值得最小值。</td><td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])</td></tr><tr><td style="text-align:left">$max</td><td style="text-align:left">获取集合中所有文档对应值得最大值。</td><td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])</td></tr><tr><td style="text-align:left">$push</td><td style="text-align:left">在结果文档中插入值到一个数组中。</td><td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])</td></tr><tr><td style="text-align:left">$addToSet</td><td style="text-align:left">在结果文档中插入值到一个数组中，但不创建副本。</td><td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])</td></tr><tr><td style="text-align:left">$first</td><td style="text-align:left">根据资源文档的排序获取第一个文档数据。</td><td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])</td></tr><tr><td style="text-align:left">$last</td><td style="text-align:left">根据资源文档的排序获取最后一个文档数据</td><td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])</td></tr></tbody></table><h2 id="管道的概念"><a href="#管道的概念" class="headerlink" title="管道的概念"></a>管道的概念</h2><p>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。</p><p>MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。</p><p>表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。</p><p>这里我们介绍一下聚合框架中常用的几个操作：</p><ul><li><code>$project</code>：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li><li><code>$match</code>：用于过滤数据，只输出符合条件的文档。<code>$match</code>使用MongoDB的标准查询操作。</li><li><code>$limit</code>：用来限制MongoDB聚合管道返回的文档数。</li><li><code>$skip</code>：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li><li><code>$unwind</code>：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li><li><code>$group</code>：将集合中的文档分组，可用于统计结果。</li><li><code>$sort</code>：将输入文档排序后输出。</li><li><code>$geoNear</code>：输出接近某一地理位置的有序文档。</li></ul><p>求当前集合的记录数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.users.find().count();</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>类似于sql语句</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; select name, count(*) from users group by name;</span><br></pre></td></tr></table></figure><h1 id="方便练习的基础数据"><a href="#方便练习的基础数据" class="headerlink" title="方便练习的基础数据"></a>方便练习的基础数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">db.users.save(&#123;contry:&apos;中国&apos;,name:&apos;小明&apos;,score:77&#125;);</span><br><span class="line">db.users.save(&#123;contry:&apos;中国&apos;,name:&apos;小红&apos;,score:88&#125;);</span><br><span class="line">db.users.save(&#123;contry:&apos;中国&apos;,name:&apos;小张&apos;,score:99&#125;);</span><br><span class="line">db.users.save(&#123;contry:&apos;美国&apos;,name:&apos;jack&apos;,score:45&#125;);</span><br><span class="line">db.users.save(&#123;contry:&apos;美国&apos;,name:&apos;rose&apos;,score:67&#125;);</span><br><span class="line">db.users.save(&#123;contry:&apos;美国&apos;,name:&apos;mick&apos;,score:89&#125;);</span><br><span class="line"></span><br><span class="line">db.orders.insert([</span><br><span class="line">   &#123; &quot;_id&quot; : 1, &quot;item&quot; : &quot;almonds&quot;, &quot;price&quot; : 12, &quot;quantity&quot; : 2 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 2, &quot;item&quot; : &quot;pecans&quot;, &quot;price&quot; : 20, &quot;quantity&quot; : 1 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 3  &#125;</span><br><span class="line">]);</span><br><span class="line">db.inventory.insert([</span><br><span class="line">   &#123; &quot;_id&quot; : 1, &quot;sku&quot; : &quot;almonds&quot;, description: &quot;product 1&quot;, &quot;instock&quot; : 120 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 2, &quot;sku&quot; : &quot;bread&quot;, description: &quot;product 2&quot;, &quot;instock&quot; : 80 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 3, &quot;sku&quot; : &quot;cashews&quot;, description: &quot;product 3&quot;, &quot;instock&quot; : 60 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 4, &quot;sku&quot; : &quot;pecans&quot;, description: &quot;product 4&quot;, &quot;instock&quot; : 70 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 5, &quot;sku&quot;: null, description: &quot;Incomplete&quot; &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 6 &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><blockquote><p>使用命令还是很不方便，开发中尽量使用一些界面式的工具，例如Navicat</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MongoDB简介&quot;&gt;&lt;a href=&quot;#MongoDB简介&quot; class=&quot;headerlink&quot; title=&quot;MongoDB简介&quot;&gt;&lt;/a&gt;MongoDB简介&lt;/h1&gt;&lt;p&gt;MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。&lt;/p&gt;
&lt;p&gt;在高负载的情况下，添加更多的节点，可以保证服务器性能。&lt;/p&gt;
&lt;p&gt;MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。&lt;/p&gt;
&lt;p&gt;MongoDB 将数据存储为一个文档，数据结构由键值(key=&amp;gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。&lt;/p&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="http://hackycy.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://hackycy.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Android Manifest权限描述表</title>
    <link href="http://hackycy.github.io/2019/05/11/Android-Manifest%E6%9D%83%E9%99%90%E6%8F%8F%E8%BF%B0%E8%A1%A8/"/>
    <id>http://hackycy.github.io/2019/05/11/Android-Manifest权限描述表/</id>
    <published>2019-05-11T15:24:16.000Z</published>
    <updated>2019-05-11T15:28:05.626Z</updated>
    
    <content type="html"><![CDATA[<p>Android权限描述，方便自己查找。</p><a id="more"></a><table><thead><tr><th style="text-align:center">权限</th><th style="text-align:left">名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">android.permission.ACCESS_CHECKIN_PROPERTIES</td><td style="text-align:left">访问登记属性</td><td style="text-align:left">读取或写入登记check-in数据库属性表的权限</td></tr><tr><td style="text-align:center">android.permission.ACCESS_COARSE_LOCATION</td><td style="text-align:left">获取错略位置</td><td style="text-align:left">通过WiFi或移动基站的方式获取用户错略的经纬度信息,定位精度大概误差在30~1500米</td></tr><tr><td style="text-align:center">android.permission.ACCESS_FINE_LOCATION</td><td style="text-align:left">获取精确位置</td><td style="text-align:left">通过GPS芯片接收卫星的定位信息,定位精度达10米以内</td></tr><tr><td style="text-align:center">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</td><td style="text-align:left">访问定位额外命令</td><td style="text-align:left">允许程序访问额外的定位提供者指令</td></tr><tr><td style="text-align:center">android.permission.ACCESS_MOCK_LOCATION</td><td style="text-align:left">获取模拟定位信息</td><td style="text-align:left">获取模拟定位信息,一般用于帮助开发者调试应用</td></tr><tr><td style="text-align:center">android.permission.ACCESS_NETWORK_STATE</td><td style="text-align:left">获取网络状态</td><td style="text-align:left">获取网络信息状态,如当前的网络连接是否有效</td></tr><tr><td style="text-align:center">android.permission.ACCESS_SURFACE_FLINGER</td><td style="text-align:left">访问Surface Flinger</td><td style="text-align:left">Android平台上底层的图形显示支持,一般用于游戏或照相机预览界面和底层模式的屏幕截图</td></tr><tr><td style="text-align:center">android.permission.ACCESS_WIFI_STATE</td><td style="text-align:left">获取WiFi状态</td><td style="text-align:left">获取当前WiFi接入的状态以及WLAN热点的信息</td></tr><tr><td style="text-align:center">android.permission.ACCOUNT_MANAGER</td><td style="text-align:left">账户管理</td><td style="text-align:left">获取账户验证信息,主要为GMail账户信息,只有系统级进程才能访问的权限</td></tr><tr><td style="text-align:center">android.permission.AUTHENTICATE_ACCOUNTS</td><td style="text-align:left">验证账户</td><td style="text-align:left">允许一个程序通过账户验证方式访问账户管理ACCOUNT_MANAGER相关信息</td></tr><tr><td style="text-align:center">android.permission.BATTERY_STATS</td><td style="text-align:left">电量统计</td><td style="text-align:left">获取电池电量统计信息</td></tr><tr><td style="text-align:center">android.permission.BIND_APPWIDGET</td><td style="text-align:left">绑定小插件</td><td style="text-align:left">允许一个程序告诉appWidget服务需要访问小插件的数据库,只有非常少的应用才用到此权限</td></tr><tr><td style="text-align:center">android.permission.BIND_DEVICE_ADMIN</td><td style="text-align:left">绑定设备管理</td><td style="text-align:left">请求系统管理员接收者receiver,只有系统才能使用</td></tr><tr><td style="text-align:center">android.permission.BIND_INPUT_METHOD</td><td style="text-align:left">绑定输入法</td><td style="text-align:left">请求InputMethodService服务,只有系统才能使用</td></tr><tr><td style="text-align:center">android.permission.BIND_REMOTEVIEWS</td><td style="text-align:left">绑定RemoteView</td><td style="text-align:left">必须通过RemoteViewsService服务来请求,只有系统才能用</td></tr><tr><td style="text-align:center">android.permission.BIND_WALLPAPER</td><td style="text-align:left">绑定壁纸</td><td style="text-align:left">必须通过WallpaperService服务来请求,只有系统才能用</td></tr><tr><td style="text-align:center">android.permission.BLUETOOTH</td><td style="text-align:left">使用蓝牙</td><td style="text-align:left">允许程序连接配对过的蓝牙设备</td></tr><tr><td style="text-align:center">android.permission.BLUETOOTH_ADMIN</td><td style="text-align:left">蓝牙管理</td><td style="text-align:left">允许程序进行发现和配对新的蓝牙设备</td></tr><tr><td style="text-align:center">android.permission.BRICK</td><td style="text-align:left">变成砖头</td><td style="text-align:left">能够禁用手机,非常危险,顾名思义就是让手机变成砖头</td></tr><tr><td style="text-align:center">android.permission.BROADCAST_PACKAGE_REMOVED</td><td style="text-align:left">应用删除时广播</td><td style="text-align:left">当一个应用在删除时触发一个广播</td></tr><tr><td style="text-align:center">android.permission.BROADCAST_SMS</td><td style="text-align:left">收到短信时广播</td><td style="text-align:left">当收到短信时触发一个广播</td></tr><tr><td style="text-align:center">android.permission.BROADCAST_STICKY</td><td style="text-align:left">连续广播</td><td style="text-align:left">允许一个程序收到广播后快速收到下一个广播</td></tr><tr><td style="text-align:center">android.permission.BROADCAST_WAP_PUSH</td><td style="text-align:left">WAP PUSH广播</td><td style="text-align:left">WAP PUSH服务收到后触发一个广播</td></tr><tr><td style="text-align:center">android.permission.CALL_PHONE</td><td style="text-align:left">拨打电话</td><td style="text-align:left">允许程序从非系统拨号器里输入电话号码</td></tr><tr><td style="text-align:center">android.permission.CALL_PRIVILEGED</td><td style="text-align:left">通话权限</td><td style="text-align:left">允许程序拨打电话,替换系统的拨号器界面</td></tr><tr><td style="text-align:center">android.permission.CAMERA</td><td style="text-align:left">拍照权限</td><td style="text-align:left">允许访问摄像头进行拍照</td></tr><tr><td style="text-align:center">android.permission.CHANGE_COMPONENT_ENABLED_STATE</td><td style="text-align:left">改变组件状态</td><td style="text-align:left">改变组件是否启用状态</td></tr><tr><td style="text-align:center">android.permission.CHANGE_CONFIGURATION</td><td style="text-align:left">改变配置</td><td style="text-align:left">允许当前应用改变配置,如定位</td></tr><tr><td style="text-align:center">android.permission.CHANGE_NETWORK_STATE</td><td style="text-align:left">改变网络状态</td><td style="text-align:left">改变网络状态如是否能联网</td></tr><tr><td style="text-align:center">android.permission.CHANGE_WIFI_MULTICAST_STATE</td><td style="text-align:left">改变WiFi多播状态</td><td style="text-align:left">改变WiFi多播状态</td></tr><tr><td style="text-align:center">android.permission.CHANGE_WIFI_STATE</td><td style="text-align:left">改变WiFi状态</td><td style="text-align:left">改变WiFi状态</td></tr><tr><td style="text-align:center">android.permission.CLEAR_APP_CACHE</td><td style="text-align:left">清除应用缓存</td><td style="text-align:left">清除应用缓存</td></tr><tr><td style="text-align:center">android.permission.CLEAR_APP_USER_DATA</td><td style="text-align:left">清除用户数据</td><td style="text-align:left">清除应用的用户数据</td></tr><tr><td style="text-align:center">android.permission.CWJ_GROUP</td><td style="text-align:left">底层访问权限</td><td style="text-align:left">允许CWJ账户组访问底层信息</td></tr><tr><td style="text-align:center">android.permission.CELL_PHONE_MASTER_EX</td><td style="text-align:left">手机优化大师扩展权限</td><td style="text-align:left">手机优化大师扩展权限</td></tr><tr><td style="text-align:center">android.permission.CONTROL_LOCATION_UPDATES</td><td style="text-align:left">控制定位更新</td><td style="text-align:left">允许获得移动网络定位信息改变</td></tr><tr><td style="text-align:center">android.permission.DELETE_CACHE_FILES</td><td style="text-align:left">删除缓存文件</td><td style="text-align:left">允许应用删除缓存文件</td></tr><tr><td style="text-align:center">android.permission.DELETE_PACKAGES</td><td style="text-align:left">删除应用</td><td style="text-align:left">允许程序删除应用</td></tr><tr><td style="text-align:center">android.permission.DEVICE_POWER</td><td style="text-align:left">电源管理</td><td style="text-align:left">允许访问底层电源管理</td></tr><tr><td style="text-align:center">android.permission.DIAGNOSTIC</td><td style="text-align:left">应用诊断</td><td style="text-align:left">允许程序到RW到诊断资源</td></tr><tr><td style="text-align:center">android.permission.DISABLE_KEYGUARD</td><td style="text-align:left">禁用键盘锁</td><td style="text-align:left">允许程序禁用键盘锁</td></tr><tr><td style="text-align:center">android.permission.DUMP</td><td style="text-align:left">转存系统信息</td><td style="text-align:left">允许程序获取系统dump信息从系统服务</td></tr><tr><td style="text-align:center">android.permission.EXPAND_STATUS_BAR</td><td style="text-align:left">状态栏控制</td><td style="text-align:left">允许程序扩展或收缩状态栏</td></tr><tr><td style="text-align:center">android.permission.FACTORY_TEST</td><td style="text-align:left">工厂测试模式</td><td style="text-align:left">允许程序运行工厂测试模式</td></tr><tr><td style="text-align:center">android.permission.FLASHLIGHT</td><td style="text-align:left">使用闪光灯</td><td style="text-align:left">允许访问闪光灯</td></tr><tr><td style="text-align:center">android.permission.FORCE_BACK</td><td style="text-align:left">强制后退</td><td style="text-align:left">允许程序强制使用back后退按键,无论Activity是否在顶层</td></tr><tr><td style="text-align:center">android.permission.GET_ACCOUNTS</td><td style="text-align:left">访问账户Gmail列表</td><td style="text-align:left">访问GMail账户列表</td></tr><tr><td style="text-align:center">android.permission.GET_PACKAGE_SIZE</td><td style="text-align:left">获取应用大小</td><td style="text-align:left">获取应用的文件大小</td></tr><tr><td style="text-align:center">android.permission.GET_TASKS</td><td style="text-align:left">获取任务信息</td><td style="text-align:left">允许程序获取当前或最近运行的应用</td></tr><tr><td style="text-align:center">android.permission.GLOBAL_SEARCH</td><td style="text-align:left">允许全局搜索</td><td style="text-align:left">允许程序使用全局搜索功能</td></tr><tr><td style="text-align:center">android.permission.HARDWARE_TEST</td><td style="text-align:left">硬件测试</td><td style="text-align:left">访问硬件辅助设备,用于硬件测试</td></tr><tr><td style="text-align:center">android.permission.INJECT_EVENTS</td><td style="text-align:left">注射事件</td><td style="text-align:left">允许访问本程序的底层事件,获取按键、轨迹球的事件流</td></tr><tr><td style="text-align:center">android.permission.INSTALL_LOCATION_PROVIDER</td><td style="text-align:left">安装定位提供</td><td style="text-align:left">安装定位提供</td></tr><tr><td style="text-align:center">android.permission.INSTALL_PACKAGES</td><td style="text-align:left">安装应用程序</td><td style="text-align:left">允许程序安装应用</td></tr><tr><td style="text-align:center">android.permission.INTERNAL_SYSTEM_WINDOW</td><td style="text-align:left">内部系统窗口</td><td style="text-align:left">允许程序打开内部窗口,不对第三方应用程序开放此权限</td></tr><tr><td style="text-align:center">android.permission.INTERNET</td><td style="text-align:left">访问网络</td><td style="text-align:left">访问网络连接,可能产生GPRS流量</td></tr><tr><td style="text-align:center">android.permission.KILL_BACKGROUND_PROCESSES</td><td style="text-align:left">结束后台进程</td><td style="text-align:left">允许程序调用killBackgroundProcesses(String).方法结束后台进程</td></tr><tr><td style="text-align:center">android.permission.MANAGE_ACCOUNTS</td><td style="text-align:left">管理账户</td><td style="text-align:left">允许程序管理AccountManager中的账户列表</td></tr><tr><td style="text-align:center">android.permission.MANAGE_APP_TOKENS</td><td style="text-align:left">管理程序引用</td><td style="text-align:left">管理创建、摧毁、Z轴顺序,仅用于系统</td></tr><tr><td style="text-align:center">android.permission.MTWEAK_USER</td><td style="text-align:left">高级权限</td><td style="text-align:left">允许mTweak用户访问高级系统权限</td></tr><tr><td style="text-align:center">android.permission.MTWEAK_FORUM</td><td style="text-align:left">社区权限</td><td style="text-align:left">允许使用mTweak社区权限</td></tr><tr><td style="text-align:center">android.permission.MASTER_CLEAR</td><td style="text-align:left">软格式化</td><td style="text-align:left">允许程序执行软格式化,删除系统配置信息</td></tr><tr><td style="text-align:center">android.permission.MODIFY_AUDIO_SETTINGS</td><td style="text-align:left">修改声音设置</td><td style="text-align:left">修改声音设置信息</td></tr><tr><td style="text-align:center">android.permission.MODIFY_PHONE_STATE</td><td style="text-align:left">修改电话状态</td><td style="text-align:left">修改电话状态,如飞行模式,但不包含替换系统拨号器界面</td></tr><tr><td style="text-align:center">android.permission.MOUNT_FORMAT_FILESYSTEMS</td><td style="text-align:left">格式化文件系统</td><td style="text-align:left">格式化可移动文件系统,比如格式化清空SD卡</td></tr><tr><td style="text-align:center">android.permission.MOUNT_UNMOUNT_FILESYSTEMS</td><td style="text-align:left">挂载文件系统</td><td style="text-align:left">挂载、反挂载外部文件系统</td></tr><tr><td style="text-align:center">android.permission.NFC</td><td style="text-align:left">允许NFC通讯</td><td style="text-align:left">允许程序执行NFC近距离通讯操作,用于移动支持</td></tr><tr><td style="text-align:center">android.permission.PERSISTENT_ACTIVITY</td><td style="text-align:left">永久Activity</td><td style="text-align:left">创建一个永久的Activity,该功能标记为将来将被移除</td></tr><tr><td style="text-align:center">android.permission.PROCESS_OUTGOING_CALLS</td><td style="text-align:left">处理拨出电话</td><td style="text-align:left">允许程序监视,修改或放弃播出电话</td></tr><tr><td style="text-align:center">android.permission.READ_CALENDAR</td><td style="text-align:left">读取日程提醒</td><td style="text-align:left">允许程序读取用户的日程信息</td></tr><tr><td style="text-align:center">android.permission.READ_CONTACTS</td><td style="text-align:left">读取联系人</td><td style="text-align:left">允许应用访问联系人通讯录信息</td></tr><tr><td style="text-align:center">android.permission.READ_FRAME_BUFFER</td><td style="text-align:left">屏幕截图</td><td style="text-align:left">读取帧缓存用于屏幕截图</td></tr><tr><td style="text-align:center">com.android.browser.permission.READ_HISTORY_BOOKMARKS</td><td style="text-align:left">读取收藏夹和历史记录</td><td style="text-align:left">读取浏览器收藏夹和历史记录</td></tr><tr><td style="text-align:center">android.permission.READ_INPUT_STATE</td><td style="text-align:left">读取输入状态</td><td style="text-align:left">读取当前键的输入状态,仅用于系统</td></tr><tr><td style="text-align:center">android.permission.READ_LOGS</td><td style="text-align:left">读取系统日志</td><td style="text-align:left">读取系统底层日志</td></tr><tr><td style="text-align:center">android.permission.READ_PHONE_STATE</td><td style="text-align:left">读取电话状态</td><td style="text-align:left">访问电话状态</td></tr><tr><td style="text-align:center">android.permission.READ_SMS</td><td style="text-align:left">读取短信内容</td><td style="text-align:left">读取短信内容</td></tr><tr><td style="text-align:center">android.permission.READ_SYNC_SETTINGS</td><td style="text-align:left">读取同步设置</td><td style="text-align:left">读取同步设置,读取Google在线同步设置</td></tr><tr><td style="text-align:center">android.permission.READ_SYNC_STATS</td><td style="text-align:left">读取同步状态</td><td style="text-align:left">读取同步状态,获得Google在线同步状态</td></tr><tr><td style="text-align:center">android.permission.REBOOT</td><td style="text-align:left">重启设备</td><td style="text-align:left">允许程序重新启动设备</td></tr><tr><td style="text-align:center">android.permission.RECEIVE_BOOT_COMPLETED</td><td style="text-align:left">开机自动允许</td><td style="text-align:left">允许程序开机自动运行</td></tr><tr><td style="text-align:center">android.permission.RECEIVE_MMS</td><td style="text-align:left">接收彩信</td><td style="text-align:left">接收彩信</td></tr><tr><td style="text-align:center">android.permission.RECEIVE_SMS</td><td style="text-align:left">接收短信</td><td style="text-align:left">接收短信</td></tr><tr><td style="text-align:center">android.permission.RECEIVE_WAP_PUSH</td><td style="text-align:left">接收Wap Push</td><td style="text-align:left">接收WAP PUSH信息</td></tr><tr><td style="text-align:center">android.permission.RECORD_AUDIO</td><td style="text-align:left">录音</td><td style="text-align:left">录制声音通过手机或耳机的麦克</td></tr><tr><td style="text-align:center">android.permission.REORDER_TASKS</td><td style="text-align:left">排序系统任务</td><td style="text-align:left">重新排序系统Z轴运行中的任务</td></tr><tr><td style="text-align:center">android.permission.RESTART_PACKAGES</td><td style="text-align:left">结束系统任务</td><td style="text-align:left">结束任务通过restartPackage(String)方法,该方式将在外来放弃</td></tr><tr><td style="text-align:center">android.permission.SEND_SMS</td><td style="text-align:left">发送短信</td><td style="text-align:left">发送短信</td></tr><tr><td style="text-align:center">android.permission.SET_ACTIVITY_WATCHER</td><td style="text-align:left">设置Activity观察其</td><td style="text-align:left">设置Activity观察器一般用于monkey测试</td></tr><tr><td style="text-align:center">com.android.alarm.permission.SET_ALARM</td><td style="text-align:left">设置闹铃提醒</td><td style="text-align:left">设置闹铃提醒</td></tr><tr><td style="text-align:center">android.permission.SET_ALWAYS_FINISH</td><td style="text-align:left">设置总是退出</td><td style="text-align:left">设置程序在后台是否总是退出</td></tr><tr><td style="text-align:center">android.permission.SET_ANIMATION_SCALE</td><td style="text-align:left">设置动画缩放</td><td style="text-align:left">设置全局动画缩放</td></tr><tr><td style="text-align:center">android.permission.SET_DEBUG_APP</td><td style="text-align:left">设置调试程序</td><td style="text-align:left">设置调试程序,一般用于开发</td></tr><tr><td style="text-align:center">android.permission.SET_ORIENTATION</td><td style="text-align:left">设置屏幕方向</td><td style="text-align:left">设置屏幕方向为横屏或标准方式显示,不用于普通应用</td></tr><tr><td style="text-align:center">android.permission.SET_PREFERRED_APPLICATIONS</td><td style="text-align:left">设置应用参数</td><td style="text-align:left">设置应用的参数,已不再工作具体查看addPackageToPreferred(String)介绍</td></tr><tr><td style="text-align:center">android.permission.SET_PROCESS_LIMIT</td><td style="text-align:left">设置进程限制</td><td style="text-align:left">允许程序设置最大的进程数量的限制</td></tr><tr><td style="text-align:center">android.permission.SET_TIME</td><td style="text-align:left">设置系统时间</td><td style="text-align:left">设置系统时间</td></tr><tr><td style="text-align:center">android.permission.SET_TIME_ZONE</td><td style="text-align:left">设置系统时区</td><td style="text-align:left">设置系统时区</td></tr><tr><td style="text-align:center">android.permission.SET_WALLPAPER</td><td style="text-align:left">设置桌面壁纸</td><td style="text-align:left">设置桌面壁纸</td></tr><tr><td style="text-align:center">android.permission.SET_WALLPAPER_HINTS</td><td style="text-align:left">设置壁纸建议</td><td style="text-align:left">设置壁纸建议</td></tr><tr><td style="text-align:center">android.permission.SIGNAL_PERSISTENT_PROCESSES</td><td style="text-align:left">发送永久进程信号</td><td style="text-align:left">发送一个永久的进程信号</td></tr><tr><td style="text-align:center">android.permission.STATUS_BAR</td><td style="text-align:left">状态栏控制</td><td style="text-align:left">允许程序打开、关闭、禁用状态栏</td></tr><tr><td style="text-align:center">android.permission.SUBSCRIBED_FEEDS_READ</td><td style="text-align:left">访问订阅内容</td><td style="text-align:left">访问订阅信息的数据库</td></tr><tr><td style="text-align:center">android.permission.SUBSCRIBED_FEEDS_WRITE</td><td style="text-align:left">写入订阅内容</td><td style="text-align:left">写入或修改订阅内容的数据库</td></tr><tr><td style="text-align:center">android.permission.SYSTEM_ALERT_WINDOW</td><td style="text-align:left">显示系统窗口</td><td style="text-align:left">显示系统窗口</td></tr><tr><td style="text-align:center">android.permission.UPDATE_DEVICE_STATS</td><td style="text-align:left">更新设备状态</td><td style="text-align:left">更新设备状态</td></tr><tr><td style="text-align:center">android.permission.USE_CREDENTIALS</td><td style="text-align:left">使用证书</td><td style="text-align:left">允许程序请求验证从AccountManager</td></tr><tr><td style="text-align:center">android.permission.USE_SIP</td><td style="text-align:left">使用SIP视频</td><td style="text-align:left">允许程序使用SIP视频服务</td></tr><tr><td style="text-align:center">android.permission.VIBRATE</td><td style="text-align:left">使用振动</td><td style="text-align:left">允许振动</td></tr><tr><td style="text-align:center">android.permission.WAKE_LOCK</td><td style="text-align:left">唤醒锁定</td><td style="text-align:left">允许程序在手机屏幕关闭后后台进程仍然运行</td></tr><tr><td style="text-align:center">android.permission.WRITE_APN_SETTINGS</td><td style="text-align:left">写入GPRS接入点设置</td><td style="text-align:left">写入网络GPRS接入点设置</td></tr><tr><td style="text-align:center">android.permission.WRITE_CALENDAR</td><td style="text-align:left">写入日程提醒</td><td style="text-align:left">写入日程,但不可读取</td></tr><tr><td style="text-align:center">android.permission.WRITE_CONTACTS</td><td style="text-align:left">写入联系人</td><td style="text-align:left">写入联系人,但不可读取</td></tr><tr><td style="text-align:center">android.permission.WRITE_EXTERNAL_STORAGE</td><td style="text-align:left">写入外部存储</td><td style="text-align:left">允许程序写入外部存储,如SD卡上写文件</td></tr><tr><td style="text-align:center">android.permission.WRITE_GSERVICES</td><td style="text-align:left">写入Google地图数据</td><td style="text-align:left">允许程序写入Google Map服务数据</td></tr><tr><td style="text-align:center">com.android.browser.permission.WRITE_HISTORY_BOOKMARKS</td><td style="text-align:left">写入收藏夹和历史记录</td><td style="text-align:left">写入浏览器历史记录或收藏夹,但不可读取</td></tr><tr><td style="text-align:center">android.permission.WRITE_SECURE_SETTINGS</td><td style="text-align:left">读写系统敏感设置</td><td style="text-align:left">允许程序读写系统安全敏感的设置项</td></tr><tr><td style="text-align:center">android.permission.WRITE_SETTINGS</td><td style="text-align:left">读写系统设置</td><td style="text-align:left">允许读写系统设置项</td></tr><tr><td style="text-align:center">android.permission.WRITE_SMS</td><td style="text-align:left">编写短信</td><td style="text-align:left">允许编写短信</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android权限描述，方便自己查找。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://hackycy.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://hackycy.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>浅析JS中的模块化(CommonJS,AMD,CMD)</title>
    <link href="http://hackycy.github.io/2019/05/07/%E6%B5%85%E6%9E%90JS%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96-CommonJS-AMD-CMD/"/>
    <id>http://hackycy.github.io/2019/05/07/浅析JS中的模块化-CommonJS-AMD-CMD/</id>
    <published>2019-05-07T14:27:33.000Z</published>
    <updated>2019-05-09T02:15:59.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>历史上，JavaScript一直都没有模块（module）体系，这就导致了在大项目中无法拆分成互相依赖的小文件，再进行拼装。这对开发复杂的项目形成了巨大的障碍。</p><a id="more"></a><h1 id="模块化概念"><a href="#模块化概念" class="headerlink" title="模块化概念"></a>模块化概念</h1><p>理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。</p><p><strong>原始的写法</strong></p><p>模块就是实现某个特定功能的方法，只要把不同的函数或变量放在一起就算是一个模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// m1();</span></span><br><span class="line"><span class="comment">// m2();</span></span><br><span class="line"><span class="comment">// console.log(_count);</span></span><br></pre></td></tr></table></figure><p>这里的m1,m2方法组成了一个模块，使用的时候直接调用即可。但是这样很明显有一个缺点：“污染”全局变量，没有办法保证模块与模块之间不发生变量名或者方法名冲突，并且模块间与模块间并无法分清是否有直接联系。</p><p><strong>对象写法</strong></p><p>对于原始写法的缺点，将方法或者变量声明在某个对象中，像m1,m2函数都封装在对象体内，需要时再用对象进行调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = &#123;</span><br><span class="line">    _count: <span class="number">0</span>,</span><br><span class="line">    m1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    m2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module1.m1();</span></span><br><span class="line"><span class="comment">// module1.m2();</span></span><br><span class="line"><span class="comment">// console.log(module1._count);</span></span><br></pre></td></tr></table></figure><p>但是这样依然会有缺点：暴露出了模块的所有成员，内部状态可以被改写，比如内部_count变量会被外部直接改写。</p><p><strong>立即执行函数写法</strong></p><p>会涉及到闭包的概念，用‘立即执行函数’（Immediately-Invoked Function Expression，IIFE）即可以达到不暴露私有成员的目的。类似于jQuery的封装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        m1: m1,</span><br><span class="line">        m2: m2,</span><br><span class="line">        getCount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// module1.m1();</span></span><br><span class="line"><span class="comment">// module1.m2();</span></span><br><span class="line"><span class="comment">// console.log(module1._count); //undefined</span></span><br><span class="line"><span class="comment">// console.log(module1.getCount()); //0</span></span><br></pre></td></tr></table></figure><h1 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h1><p><a href="[http://wiki.commonjs.org/wiki/CommonJS](http://wiki.commonjs.org/wiki/CommonJS">CommonJS</a>) 是以在浏览器环境之外构建 JavaScript 生态系统为目标而产生的项目，比如在服务器和桌面环境中。</p><blockquote><p>2009年，美国程序员Ryan Dahl创造了node.js项目，将javascript语言用于服务器端编程。</p></blockquote><blockquote><p>这标志”Javascript模块化编程”正式诞生。前端的复杂程度有限，没有模块也是可以的，但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。</p></blockquote><blockquote><p>node编程中最重要的思想之一就是模块，而正是这个思想，让JavaScript的大规模工程成为可能。模块化编程在js界流行，也是基于此，随后在浏览器端，requirejs和seajs之类的工具包也出现了，可以说在对应规范下，require统治了ES6之前的所有模块化编程，即使现在，在ES6 module被完全实现之前，还是这样。</p></blockquote><p><img src="commonjs.png" alt=""></p><p>例如在Node中，Node 应用由模块组成，采用 CommonJS 模块规范。</p><p>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</p><p>CommonJS规范规定，每个模块内部，<code>module</code>变量代表当前模块。这个变量是一个对象，它的·<code>exports</code>属性（即·<code>module.exports</code>）是对外的接口。加载某个模块，其实是加载该模块的·<code>module.exports</code>属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//user.js</span></span><br><span class="line"><span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> expose_num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports.m1 = m1;</span><br><span class="line"><span class="built_in">module</span>.exports.m2 = m2;</span><br><span class="line"><span class="built_in">module</span>.exports.getCount = getCount;</span><br><span class="line"><span class="built_in">module</span>.exports.expose_num = expose_num;</span><br></pre></td></tr></table></figure><p>上面代码通过<code>module.exports</code>输出变量<code>expose_num</code>和函数<code>m1</code>,<code>m2</code>,<code>getCount</code>。</p><p><code>require</code>方法进行加载模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">const</span> module1 = <span class="built_in">require</span>(<span class="string">'./user.js'</span>);</span><br><span class="line">module1.m1(); <span class="comment">//m1</span></span><br><span class="line">module1.m2(); <span class="comment">//m2</span></span><br><span class="line"><span class="built_in">console</span>.log(module1.getCount()); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(module1.expose_num); <span class="comment">//100</span></span><br></pre></td></tr></table></figure><p><strong>module.exports属性</strong></p><p><code>module.exports</code>属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取<code>module.exports</code>变量。</p><p><strong>exports变量</strong></p><p>为了方便，Node为每个模块提供一个<code>exports</code>变量，指向<code>module.exports</code>。这等同在每个模块头部，有一行这样的命令。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exports = <span class="built_in">module</span>.exports;</span><br></pre></td></tr></table></figure><blockquote><p>如果你觉得，<code>exports</code>与<code>module.exports</code>之间的区别很难分清，一个简单的处理方法，就是放弃使用<code>exports</code>，只使用<code>module.exports</code>。</p><p>es6中为<code>export</code>,注意区分。</p></blockquote><p><strong>CommonJS模块的特点如下</strong></p><ul><li>所有代码都运行在模块作用域，不会污染全局作用域。</li><li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li><li>模块加载的顺序，按照其在代码中出现的顺序。</li></ul><p>详细学习使用请参考链接：<a href="https://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="noopener">https://javascript.ruanyifeng.com/nodejs/module.html</a></p><h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>有了服务器端的模块化后，很自然客户端也需要进行模块化，最好两者能够兼容，并且在服务器和浏览器都能够运行。也由于一个重大的局限，使得CommonJS规范不适用于浏览器环境上。</p><p><img src="amd.png" alt=""></p><p>就例如上述中CommonJS中的案例代码，在未加载完第一行的<code>require(&#39;./user.js&#39;)</code>代码时，后面的<code>module1.m1()</code>等的方法都会进行等待第一行完成后才可以继续运行。这对服务端来说不是问题，因为所有的模块都存放在本地硬盘，没有网络等其他原因，可以很快的同步加载完成，只需要等待硬盘的读取时间。但是对于浏览器环境，却是一个很大的问题，因为所有的模块都放置于服务端，等待时间不是取决于硬盘，而是取决于网速的快慢，这就导致了可能会导致等待时间过长，导致浏览器出现’假死’状态。</p><p>因此浏览器端的模块不可以采用’同步加载’（synchronous），只能使用’异步加载’（asynchronous）。这就是<a href="[https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88">AMD</a>](<a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(中文版))规范的诞生背景。" target="_blank" rel="noopener">https://github.com/amdjs/amdjs-api/wiki/AMD-(中文版))规范的诞生背景。</a></p><blockquote><p>所谓AMD即Asynchronous Module Definition的缩写，意思就是’异步模块定义’。它采用异步方式加载模块，模块的加载不影响后面的语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p></blockquote><p>该规范只定义了一个函数 <code>define</code>，它是全局变量。函数的描述为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(id?, dependencies?, factory);</span><br></pre></td></tr></table></figure><ul><li>id：第一个参数，id，是个字符串。它指的是定义中模块的名字，这个参数是可选的</li><li>dependencies：第二个参数，dependencies，是个定义中模块所依赖模块的数组</li><li>factory：第三个参数，factory，为模块初始化要执行的函数或对象。</li></ul><p>例如在<code>RequireJS</code>中，</p><blockquote><p>RequireJS是一个工具库，主要用于客户端的模块管理。它可以让客户端的代码分成一个个模块，实现异步或动态加载，从而提高代码的性能和可维护性。它的模块管理遵守<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener">AMD规范</a>（Asynchronous Module Definition）。</p></blockquote><blockquote><p>RequireJS的基本思想是，通过define方法，将代码定义为模块；通过require方法，实现代码的模块加载。</p></blockquote><p>首先，将require.js嵌入网页，然后就能在网页中进行模块化编程了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"app"</span> <span class="attr">src</span>=<span class="string">"https://requirejs.org/docs/release/2.3.6/comments/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码的<code>data-main</code>属性不可省略，用于指定主代码所在的脚本文件，在上例中为当前目录下的<code>app.js</code>文件。用户自定义的代码就放在这个<code>app.js</code>文件中。</p><p><strong>define方法：定义模块</strong></p><ul><li>独立模块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//user.js</span></span><br><span class="line">define(&#123;</span><br><span class="line">    m1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    m2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>另一种等价的写法是，把对象写成一个函数，该函数的返回值就是输出的模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//user.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        m1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        m2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>后一种写法的自由度更高一点，可以在函数体内写一些模块初始化代码。值得指出的是，define定义的模块可以返回任何值，不限于对象。</p></blockquote><ul><li>非独立模块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cart.js</span></span><br><span class="line">define([<span class="string">'user'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'cart'</span>);</span><br><span class="line">    user.m1();</span><br><span class="line">    user.m2();</span><br><span class="line">    <span class="keyword">var</span> getCartCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getCartCount:getCartCount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>define方法的第一个参数是一个数组，它的成员是当前模块所依赖的模块。比如，[‘user’]表示我们定义的这个新模块依赖于user模块，只有先加载这两个模块，新模块才能正常运行。一般情况下，user模块指的是，当前目录下的user.js文件，等同于写成[’./user’]。</p><p>define方法的第二个参数是一个函数，当前面数组的所有成员加载成功后，它将被调用。它的参数与数组的成员一一对应，比如function(user)就表示，这个函数的第一个参数user对应user模块，以此类推。这个函数必须返回一个对象，供其他模块调用。</p><p><strong>require方法：调用模块</strong></p><p>require方法用于调用模块。它的参数与define方法类似。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'cart'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">cart</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...do</span></span><br><span class="line">    <span class="built_in">console</span>.log(cart.getCartCount());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//cart</span></span><br><span class="line"><span class="comment">//m1</span></span><br><span class="line"><span class="comment">//m2</span></span><br><span class="line"><span class="comment">//100</span></span><br></pre></td></tr></table></figure><p>上面方法表示加载cart一个模块，当这一个模块都加载成功后，执行一个回调函数。该回调函数就用来完成具体的任务。而<code>cart.getCartCount()</code>和<code>cart</code>模块加载不是同步的，浏览器不会再发生假死状态，所以AMD规范更适合浏览器环境。</p><blockquote><p>require方法也可以用在define方法内部，即动态加载。</p></blockquote><p>define和require这两个定义模块、调用模块的方法，合称为AMD模式。它的模块定义的方法非常清晰，不会污染全局环境，能够清楚地显示依赖关系。</p><p>AMD模式可以用于浏览器环境，并且允许非同步加载模块，也可以根据需要动态加载模块。</p><p>详细学习使用请参考链接：<a href="https://javascript.ruanyifeng.com/tool/requirejs.html" target="_blank" rel="noopener">https://javascript.ruanyifeng.com/tool/requirejs.html</a></p><h1 id="AMD规范与CommonJS规范的兼容性"><a href="#AMD规范与CommonJS规范的兼容性" class="headerlink" title="AMD规范与CommonJS规范的兼容性"></a>AMD规范与CommonJS规范的兼容性</h1><p>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。</p><p>AMD规范使用define方法定义模块，下面就是一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'package/lib'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">lib</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    lib.log(<span class="string">'hello world!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: foo</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>AMD规范允许输出的模块兼容CommonJS规范，这时<code>define</code>方法需要写成下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> someModule = <span class="built_in">require</span>(<span class="string">"someModule"</span>);</span><br><span class="line">  <span class="keyword">var</span> anotherModule = <span class="built_in">require</span>(<span class="string">"anotherModule"</span>);</span><br><span class="line"></span><br><span class="line">  someModule.doTehAwesome();</span><br><span class="line">  anotherModule.doMoarAwesome();</span><br><span class="line"></span><br><span class="line">  exports.asplode = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    someModule.doTehAwesome();</span><br><span class="line">    anotherModule.doMoarAwesome();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><p><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">CMD</a> 是 SeaJS 在推广过程中对模块定义的规范化产出。</p><p>首先通过 <code>script</code> 引入 <code>sea.js</code> 后，有一段配置代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// seajs 的简单配置</span></span><br><span class="line">seajs.config(&#123;</span><br><span class="line">  base: <span class="string">"../sea-modules/"</span>,</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery/jquery/1.10.1/jquery.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载入口模块</span></span><br><span class="line">seajs.use(<span class="string">"../static/hello/src/main"</span>)</span><br></pre></td></tr></table></figure><p><code>sea.js</code> 在下载完成后，会自动加载入口模块。页面中的代码就这么简单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(id?, deps?, factory)</span><br></pre></td></tr></table></figure><ul><li>id：第一个参数，id，是个字符串。它指的是定义中模块的名字，这个参数是可选的</li><li>deps：第二个参数，dependencies，是个定义中模块所依赖模块的数组</li><li>factory：第三个参数，factory，为模块初始化要执行的函数或对象。</li></ul><blockquote><p>注意：带 id 和 dependencies 参数的 define 用法不属于 CMD 规范，而属于 Modules/Transport 规范。</p></blockquote><p>如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有模块都通过 define 来定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 require 引入依赖</span></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 exports 对外提供接口</span></span><br><span class="line">  exports.doSomething = ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 或者通过 module.exports 提供整个接口</span></span><br><span class="line">  <span class="built_in">module</span>.exports = ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面就是 Sea.js 推荐的 CMD 模块书写格式。如果你有使用过 Node.js，一切都很自然。</p><p>详细学习使用请参考链接：<a href="https://seajs.github.io/seajs/docs/#quick-start" target="_blank" rel="noopener">https://seajs.github.io/seajs/docs/#quick-start</a></p><h1 id="AMD和CMD的区别"><a href="#AMD和CMD的区别" class="headerlink" title="AMD和CMD的区别"></a>AMD和CMD的区别</h1><p>AMD和CMD最大的区别是对依赖模块的执行时机处理不同，而不是加载的时机或者方式不同，二者皆为异步加载模块。</p><ul><li><p>AMD依赖前置，js可以方便知道依赖模块是谁，立即加载；</p></li><li><p>CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块。</p></li><li><p>AMD 的 API 默认是<strong>一个当多个用</strong>，CMD 的 API 严格区分，推崇<strong>职责单一</strong>。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都<strong>简单纯粹</strong>。</p></li></ul><p>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong></p><blockquote><p>RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;   </span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)   </span><br><span class="line">a.doSomething()   </span><br><span class="line"> <span class="comment">// 此处略去 100 行   </span></span><br><span class="line"> <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>) </span><br><span class="line"> <span class="comment">// 依赖可以就近书写   </span></span><br><span class="line"> b.doSomething()   </span><br><span class="line"> <span class="comment">// ... </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AMD 默认推荐的是</span></span><br><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 依赖必须一开始就写好    </span></span><br><span class="line">  a.doSomething()    </span><br><span class="line"><span class="comment">// 此处略去 100 行    </span></span><br><span class="line">b.doSomething()    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>即使AMD也可以支持CMD的写法，因为define内部也可以使用require，前面有提到。但是RequireJS 的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。</p><h1 id="ES6-Module"><a href="#ES6-Module" class="headerlink" title="ES6 Module"></a>ES6 Module</h1><p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。</p><p><strong>export导出模块</strong></p><p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量。下面是一个 JS 文件，里面使用<code>export</code>命令输出变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</span><br></pre></td></tr></table></figure><p><code>export</code>命令除了输出变量，还可以输出函数或类（class）。</p><p><strong>import导入模块</strong></p><p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这个模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;firstName, lastName, year&#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  element.textContent = firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的<code>import</code>命令，用于加载<code>profile.js</code>文件，并从中输入变量。<code>import</code>命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（<code>profile.js</code>）对外接口的名称相同。</p><p><strong>export default默认导出</strong></p><p>从前面的例子可以看出，使用<code>import</code>命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p><p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到<code>export default</code>命令，为模块指定默认输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码是一个模块文件<code>export-default.js</code>，它的默认输出是一个函数。</p><p>其他模块加载该模块时，<code>import</code>命令可以为该匿名函数指定任意名字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</span><br><span class="line">customName(); <span class="comment">// 'foo'</span></span><br></pre></td></tr></table></figure><p>ES6中Module还有很多语法，这里主要讲解es6前js的模块化概念，所以不多概述使用，详细使用参考下面链接。</p><p>详细学习使用请参考链接：<a href="https://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">https://es6.ruanyifeng.com/#docs/module</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;历史上，JavaScript一直都没有模块（module）体系，这就导致了在大项目中无法拆分成互相依赖的小文件，再进行拼装。这对开发复杂的项目形成了巨大的障碍。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://hackycy.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://hackycy.github.io/tags/JavaScript/"/>
    
      <category term="CommonJS" scheme="http://hackycy.github.io/tags/CommonJS/"/>
    
      <category term="AMD" scheme="http://hackycy.github.io/tags/AMD/"/>
    
      <category term="CMD" scheme="http://hackycy.github.io/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title>PHP常用函数参考表</title>
    <link href="http://hackycy.github.io/2019/05/05/PHP%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83%E8%A1%A8/"/>
    <id>http://hackycy.github.io/2019/05/05/PHP常用函数参考表/</id>
    <published>2019-05-05T14:26:40.000Z</published>
    <updated>2019-05-05T15:28:36.958Z</updated>
    
    <content type="html"><![CDATA[<p>各种常用的php函数，包括php字符串函数,php数组函数,php数学函数,mysql函数,文件目录函数,GD库函数,SESSION函数,Date/Time 函数等，涵盖了php基本操作所涉及的各类常用函数，并针对各个函数提供了简单的解释说明，方便查阅</p><a id="more"></a><h1 id="字符串相关操作函数"><a href="#字符串相关操作函数" class="headerlink" title="字符串相关操作函数"></a>字符串相关操作函数</h1><h2 id="去除空格或其他字符"><a href="#去除空格或其他字符" class="headerlink" title="去除空格或其他字符"></a>去除空格或其他字符</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>trim</td><td>删除字符串两端空格或其他预定义字符</td></tr><tr><td>rtrim</td><td>删除字符串右边空格或其他预定义字符</td></tr><tr><td>chop</td><td>rtrim() 的别名 chop() 与 Perl 的 chop() 函数有所不同，它会删除字符串的最后一个字符。</td></tr><tr><td>ltrim</td><td>删除字符串左边空格或其他预定义字符</td></tr></tbody></table><h2 id="字符串生成与转换"><a href="#字符串生成与转换" class="headerlink" title="字符串生成与转换"></a>字符串生成与转换</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>str_pad</td><td>使用另一个字符串填充字符串为指定长度</td></tr><tr><td>str_replace</td><td>子字符串替换</td></tr><tr><td>str_split</td><td>将字符串转换为数组</td></tr><tr><td>strrev</td><td>反转字符串</td></tr><tr><td>wordwrap</td><td>打断字符串为指定数量的字串</td></tr><tr><td>str_shuffle</td><td>随机打乱一个字符串</td></tr><tr><td>parse_str</td><td>将字符串解析成变量</td></tr><tr><td>number_format</td><td>通过千位分组来格式化字符串</td></tr></tbody></table><h2 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>strtolower</td><td>将字符串转化为小写</td></tr><tr><td>strtoupper</td><td>将字符串转化为大写</td></tr><tr><td>ucfirst</td><td>将字符串的首字母转换为大写</td></tr><tr><td>ucwords</td><td>将字符串中每个单词的首字母转换为大写</td></tr></tbody></table><h2 id="html标签关联"><a href="#html标签关联" class="headerlink" title="html标签关联"></a>html标签关联</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>htmlentities</td><td>将字符转换为HTML实体</td></tr><tr><td>htmlspecialchars</td><td>预定义字符串转HTML编码</td></tr><tr><td>nl2br</td><td>在字符串所有新行之前插入 HTML 换行标记 <code>\n</code>转换为<code>&lt;br&gt;</code>标签</td></tr><tr><td>strip_tags</td><td>从字符串中去除 HTML 和 PHP 标记</td></tr><tr><td>addcslashes</td><td>以 C 语言风格使用反斜线转义字符串中的字符</td></tr><tr><td>stripcslashes</td><td>反引用一个使用 addcslashes() 转义的字符串</td></tr><tr><td>addslashes</td><td>使用反斜线引用字符串</td></tr><tr><td>stripslashes</td><td>删除由addslashes添加的转义字符</td></tr><tr><td>quotemeta</td><td>字符串中某些预定义字符串前加反斜杠</td></tr><tr><td>chr</td><td>从指定的 ASCII 值返回字符</td></tr><tr><td>ord</td><td>返回字符串第一个字符的 ASCII 值</td></tr></tbody></table><h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>strcasecmp</td><td>不区分大小写比较两个字符串</td></tr><tr><td>strcmp</td><td>区分大小写比较两个字符串</td></tr><tr><td>strncmp</td><td>比较字符串前N个字符，区分大小写</td></tr><tr><td>strncasecmp</td><td>比较字符串前N个字符，不区分大小写</td></tr><tr><td>strnatmp</td><td>自然顺序法比较字符串长度，区分大小写</td></tr><tr><td>strnatcasecmp</td><td>自然顺序法比较字符串长度，不区分大小写</td></tr></tbody></table><h2 id="字符串查找替换"><a href="#字符串查找替换" class="headerlink" title="字符串查找替换"></a>字符串查找替换</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>str_replace</td><td>字符串替换操作，区分大小写</td></tr><tr><td>str_ireplace</td><td>字符串替换操作，不区分大小写</td></tr><tr><td>substr_count</td><td>统计一个字符串，在另一个字符串中出现的次数</td></tr><tr><td>substr_replace</td><td>替换字符串中某串为另一个字符串</td></tr><tr><td>similar_text</td><td>返回两字符串相同字符的数量</td></tr><tr><td>strrchr</td><td>返回一个字符串在另一个字符串中最后一次出现位置开始到末尾的字符串</td></tr><tr><td>strstr</td><td>返回一个字符串在另一个字符串中开始位置到结束位置的字符串</td></tr><tr><td>strchr</td><td>strstr的别名，返回一个字符串在另一个中首次出现位置开始到末尾的字符串</td></tr><tr><td>stristr</td><td>返回一个字符串在另一个字符串中开始位置到结束位置的字符串，不区分大小写</td></tr><tr><td>strtr</td><td>转换字符串中某些字符</td></tr><tr><td>strpos</td><td>寻找字符中某些字符最先出现的位置</td></tr><tr><td>stripos</td><td>寻找字符中某些字符最先出现的位置，不区分大小写</td></tr><tr><td>strrpos</td><td>寻找字符中某些字符最后出现的位置</td></tr><tr><td>strripos</td><td>寻找字符中某些字符最后出现的位置，不区分大小写</td></tr><tr><td>strspn</td><td>返回字符串中首次符合mask的字符串长度</td></tr><tr><td>strcspn</td><td>返回字符串中不符合mask的字符串的长度</td></tr></tbody></table><h2 id="字符串统计"><a href="#字符串统计" class="headerlink" title="字符串统计"></a>字符串统计</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>str_word_count</td><td>统计字符串含有的单词数</td></tr><tr><td>strlen</td><td>统计字符串长度</td></tr><tr><td>count_chars</td><td>统计字符串中所有字母出现的次数（0..255）</td></tr></tbody></table><h2 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>md5</td><td>计算字符串的 MD5 散列值</td></tr><tr><td>hash</td><td>生成一个哈希码</td></tr></tbody></table><h1 id="数组相关函数"><a href="#数组相关函数" class="headerlink" title="数组相关函数"></a>数组相关函数</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>array</td><td>生成一个数组</td></tr><tr><td>array_combine</td><td>生成一个数组，用一个数组的值作为键名，另一个数组的值作为值</td></tr><tr><td>range</td><td>创建并返回一个包含指定范围的元素的数组</td></tr><tr><td>compact</td><td>创建一个由参数所带变量组成的数组</td></tr><tr><td>array_fill</td><td>用给定的值填充生成数组</td></tr></tbody></table><h2 id="数组合并和拆分"><a href="#数组合并和拆分" class="headerlink" title="数组合并和拆分"></a>数组合并和拆分</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>array_chunk</td><td>把一个数组分割为新的数组块</td></tr><tr><td>array_merge</td><td>把两个或多个数组合并成一个数组</td></tr><tr><td>array_slice</td><td>在数组中根据条件取出一段值，并返回。</td></tr></tbody></table><h2 id="数组比较"><a href="#数组比较" class="headerlink" title="数组比较"></a>数组比较</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>array_diff</td><td>返回两个数组的差集数组</td></tr><tr><td>array_intersect</td><td>返回两个或多个数组的交集数组</td></tr></tbody></table><h2 id="数组查找替换"><a href="#数组查找替换" class="headerlink" title="数组查找替换"></a>数组查找替换</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>array_search</td><td>在数组中查找一个键值</td></tr><tr><td>array_splice</td><td>把数组一部分删除把其他值替代</td></tr><tr><td>array_sum</td><td>返回数组中所有值的总和</td></tr><tr><td>in_array</td><td>在数组中搜索指定的值，区分大小写</td></tr><tr><td>array_key_exists</td><td>判断某个数组中是否存在指定的key</td></tr></tbody></table><h2 id="数组指针操作"><a href="#数组指针操作" class="headerlink" title="数组指针操作"></a>数组指针操作</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>返回数组内部指针当前指向的键名</td></tr><tr><td>current</td><td>返回数组中的当前元素</td></tr><tr><td>next</td><td>把指向当前元素的指针移动到下一个元素位置，并返回当前元素的值</td></tr><tr><td>prev</td><td>把指向当前元素的指针移动到上一个元素位置，并返回当前元素的值</td></tr><tr><td>end</td><td>将数组内部指针指向最后一个元素，并返回该元素的值（如果成功）</td></tr><tr><td>reset</td><td>把数组内部指针指向第一个元素，并返回该元素的值</td></tr><tr><td>list</td><td>用数组中的元素为一组变量赋值</td></tr><tr><td>array_shift</td><td>删除数组中的第一个元素，并返回被删除元素的值</td></tr><tr><td>array_unshif</td><td>在数组开头插入一个或者多个元素</td></tr><tr><td>array_push</td><td>向数组最后压入一个或多个元素</td></tr><tr><td>array_pop</td><td>删除数组最后一个元素</td></tr></tbody></table><h2 id="数组键值操作"><a href="#数组键值操作" class="headerlink" title="数组键值操作"></a>数组键值操作</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>shuffle</td><td>将数组打乱，保留键名</td></tr><tr><td>count</td><td>计算数组中单元个数或者对象属性个数</td></tr><tr><td>array_flip</td><td>返回一个键值翻转后的数组</td></tr><tr><td>array_keys</td><td>返回数组所有键，组成一个数组</td></tr><tr><td>array_values</td><td>返回数组所有值，组成一个数组</td></tr><tr><td>array_reverse</td><td>返回一个元素顺序相反的数组</td></tr><tr><td>array_count_values</td><td>统计数组中所有值出现的次数</td></tr><tr><td>array_rand</td><td>从数组中随机抽取一个或者多个元素，注意是键名</td></tr><tr><td>each</td><td>返回数组中当前的键／值对并将数组指针向前移动一步</td></tr><tr><td>array_unique</td><td>移除数组中重复的值</td></tr></tbody></table><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>sort</td><td>对数组排序</td></tr><tr><td>rsort</td><td>对数组逆向排序</td></tr><tr><td>asort</td><td>对数组进行排序并保持索引关系</td></tr><tr><td>arsort</td><td>对数组进行逆向排序并保持索引关系</td></tr><tr><td>ksort</td><td>对数组按照键名排序</td></tr><tr><td>krsort</td><td>对数组按照键名逆向排序</td></tr><tr><td>natsort</td><td>用“自然排序”算法对数组排序</td></tr><tr><td>natcasesort</td><td>用“自然排序”算法对数组进行不区分大小写字母的排序</td></tr></tbody></table><h1 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a>数学相关函数</h1><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>abs</td><td>求绝对值</td></tr><tr><td>ceil</td><td>进一法取整</td></tr><tr><td>floor</td><td>舍去法取整</td></tr><tr><td>fmod</td><td>返回除法的浮点数余数</td></tr><tr><td>pow</td><td>返回数的N次方</td></tr><tr><td>round</td><td>浮点数四舍五入法</td></tr><tr><td>sqrt</td><td>求平方根</td></tr><tr><td>max</td><td>求最大值</td></tr><tr><td>min</td><td>求最小值</td></tr><tr><td>mt_rand</td><td>更好的随机数</td></tr><tr><td>rand</td><td>随机数</td></tr><tr><td>pi</td><td>获得圆周率</td></tr><tr><td>octdec</td><td>八进制转换为十进制</td></tr></tbody></table><h1 id="mysql相关函数"><a href="#mysql相关函数" class="headerlink" title="mysql相关函数"></a>mysql相关函数</h1><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>mysql_affected_rows</td><td>取得前一次 MySQL 操作所影响的记录行数</td></tr><tr><td>mysql_client_encoding</td><td>返回字符集的名称</td></tr><tr><td>mysql_close</td><td>关闭 MySQL 连接</td></tr><tr><td>mysql_connect</td><td>打开一个到 MySQL 服务器的连接</td></tr><tr><td>mysql_create_db</td><td>新建一个 MySQL 数据库</td></tr><tr><td>mysql_data_seek</td><td>移动内部结果的指针</td></tr><tr><td>mysql_db_name</td><td>取得结果数据</td></tr><tr><td>mysql_db_query</td><td>发送一条 MySQL 查询</td></tr><tr><td>mysql_drop_db</td><td>丢弃（删除）一个 MySQL 数据库</td></tr><tr><td>mysql_errno</td><td>返回上一个 MySQL 操作中的错误信息的数字编码</td></tr><tr><td>mysql_error</td><td>返回上一个 MySQL 操作产生的文本错误信息</td></tr><tr><td>mysql_escape_string</td><td>转义一个字符串用于 mysql_query</td></tr><tr><td>mysql_fetch_array</td><td>从结果集中取得一行作为关联数组，或数字数组，或二者兼有</td></tr><tr><td>mysql_fetch_assoc</td><td>从结果集中取得一行作为关联数组</td></tr><tr><td>mysql_fetch_field</td><td>从结果集中取得列信息并作为对象返回</td></tr><tr><td>mysql_fetch_lengths</td><td>取得结果集中每个输出的长度</td></tr><tr><td>mysql_fetch_object</td><td>从结果集中取得一行作为对象</td></tr><tr><td>mysql_fetch_object</td><td>从结果集中取得一行作为枚举数组</td></tr><tr><td>mysql_field_flags</td><td>从结果中取得和指定字段关联的标志</td></tr><tr><td>mysql_field_len</td><td>返回指定字段的长度</td></tr><tr><td>mysql_field_name</td><td>取得结果中指定字段的字段名</td></tr><tr><td>mysql_field_seek</td><td>将结果集中的指针设定为制定的字段偏移量</td></tr><tr><td>mysql_field_table</td><td>取得指定字段所在的表名</td></tr><tr><td>mysql_field_type</td><td>取得结果集中指定字段的类型</td></tr><tr><td>mysql_free_result</td><td>释放结果内存</td></tr><tr><td>mysql_get_client_info</td><td>取得 MySQL 客户端信息</td></tr><tr><td>mysql_get_host_info</td><td>取得 MySQL 主机信息</td></tr><tr><td>mysql_get_proto_info</td><td>取得 MySQL 协议信息</td></tr><tr><td>mysql_get_server_info</td><td>取得 MySQL 服务器信息</td></tr><tr><td>mysql_info</td><td>取得最近一条查询的信息</td></tr><tr><td>mysql_insert_id</td><td>取得上一步 INSERT 操作产生的 ID</td></tr><tr><td>mysql_list_dbs</td><td>列出 MySQL 服务器中所有的数据库</td></tr><tr><td>mysql_list_fields</td><td>列出 MySQL 结果中的字段</td></tr><tr><td>mysql_list_processes</td><td>列出 MySQL 进程</td></tr><tr><td>mysql_list_tables</td><td>列出 MySQL 数据库中的表</td></tr><tr><td>mysql_num_fields</td><td>取得结果集中字段的数目</td></tr><tr><td>mysql_num_rows</td><td>取得结果集中行的数目</td></tr><tr><td>mysql_pconnect</td><td>打开一个到 MySQL 服务器的持久连接</td></tr><tr><td>mysql_ping</td><td>Ping 一个服务器连接，如果没有连接则重新连接</td></tr><tr><td>mysql_query</td><td>发送一条 MySQL 查询</td></tr><tr><td>mysql_real_escape_string</td><td>转义 SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集</td></tr><tr><td>mysql_result</td><td>取得结果数据</td></tr><tr><td>mysql_select_db</td><td>选择 MySQL 数据库</td></tr><tr><td>mysql_set_charset</td><td>设置客户端字符集</td></tr><tr><td>mysql_stat</td><td>取得当前系统状态</td></tr><tr><td>mysql_tablename</td><td>取得表名</td></tr><tr><td>mysql_thread_id</td><td>返回当前线程的 ID</td></tr><tr><td>mysql_unbuffered_query</td><td>向 MySQL 发送一条 SQL 查询，并不获取和缓存结果的行</td></tr></tbody></table><h1 id="文件目录处理相关函数"><a href="#文件目录处理相关函数" class="headerlink" title="文件目录处理相关函数"></a>文件目录处理相关函数</h1><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>basename</td><td>返回路径中的文件名部分</td></tr><tr><td>chgrp</td><td>改变文件所属的组</td></tr><tr><td>chmod</td><td>改变文件模式</td></tr><tr><td>chown</td><td>改变文件的所有者</td></tr><tr><td>clearstatcache</td><td>清除文件状态缓存</td></tr><tr><td>copy</td><td>拷贝文件</td></tr><tr><td>delete</td><td>参见 unlink 或 unset</td></tr><tr><td>dirname</td><td>返回路径中的目录部分</td></tr><tr><td>disk_free_space</td><td>返回目录中的可用空间</td></tr><tr><td>disk_total_space</td><td>返回一个目录的磁盘总大小</td></tr><tr><td>diskfreespace</td><td>disk_free_space 的别名</td></tr><tr><td>fclose</td><td>关闭一个已打开的文件指针</td></tr><tr><td>feof</td><td>测试文件指针是否到了文件结束的位置</td></tr><tr><td>fflush</td><td>将缓冲内容输出到文件</td></tr><tr><td>fgetc</td><td>从文件指针中读取字符</td></tr><tr><td>fgetcsv</td><td>从文件指针中读入一行并解析 CSV 字段</td></tr><tr><td>fgets</td><td>从文件指针中读取一行</td></tr><tr><td>fgetss</td><td>从文件指针中读取一行并过滤掉 HTML 标记</td></tr><tr><td>file_exists</td><td>检查文件或目录是否存在</td></tr><tr><td>file_get_contents</td><td>将整个文件读入一个字符串</td></tr><tr><td>file_put_contents</td><td>将一个字符串写入文件</td></tr><tr><td>file</td><td>把整个文件读入一个数组中</td></tr><tr><td>fileatime</td><td>取得文件的上次访问时间</td></tr><tr><td>filectime</td><td>取得文件的 inode 修改时间</td></tr><tr><td>filegroup</td><td>取得文件的组</td></tr><tr><td>fileinode</td><td>取得文件的 inode</td></tr><tr><td>filemtime</td><td>取得文件修改时间</td></tr><tr><td>fileowner</td><td>取得文件的所有者</td></tr><tr><td>fileperms</td><td>取得文件的权限</td></tr><tr><td>filesize</td><td>取得文件大小</td></tr><tr><td>filetype</td><td>取得文件类型</td></tr><tr><td>flock</td><td>轻便的咨询文件锁定</td></tr><tr><td>fnmatch</td><td>用模式匹配文件名</td></tr><tr><td>fopen</td><td>打开文件或者 URL</td></tr><tr><td>fpassthru</td><td>输出文件指针处的所有剩余数据</td></tr><tr><td>fputcsv</td><td>将行格式化为 CSV 并写入文件指针</td></tr><tr><td>fputs</td><td>fwrite 的别名</td></tr><tr><td>fread</td><td>读取文件（可安全用于二进制文件)</td></tr><tr><td>fscanf</td><td>从文件中格式化输入</td></tr><tr><td>fseek</td><td>在文件指针中定位</td></tr><tr><td>fstat</td><td>通过已打开的文件指针取得文件信息</td></tr><tr><td>ftell</td><td>返回文件指针读/写的位置</td></tr><tr><td>ftruncate</td><td>将文件截断到给定的长度</td></tr><tr><td>fwrite</td><td>写入文件（可安全用于二进制文件）</td></tr><tr><td>glob</td><td>寻找与模式匹配的文件路径</td></tr><tr><td>is_dir</td><td>判断给定文件名是否是一个目录</td></tr><tr><td>is_executable</td><td>判断给定文件名是否可执行</td></tr><tr><td>is_file</td><td>判断给定文件名是否为一个正常的文件</td></tr><tr><td>is_link</td><td>判断给定文件名是否为一个符号连接</td></tr><tr><td>is_readable</td><td>判断给定文件名是否可读</td></tr><tr><td>is_uploaded_file</td><td>判断文件是否是通过 HTTP POST 上传的</td></tr><tr><td>is_writable</td><td>判断给定的文件名是否可写</td></tr><tr><td>is_writeable</td><td>is_writable 的别名</td></tr><tr><td>lchgrp</td><td>Changes group ownership of symlink</td></tr><tr><td>lchown</td><td>Changes user ownership of symlink</td></tr><tr><td>link</td><td>建立一个硬连接</td></tr><tr><td>linkinfo</td><td>获取一个连接的信息</td></tr><tr><td>lstat</td><td>给出一个文件或符号连接的信息</td></tr><tr><td>mkdir</td><td>新建目录</td></tr><tr><td>move_uploaded_file</td><td>将上传的文件移动到新位置</td></tr><tr><td>parse_ini_file</td><td>解析一个配置文件</td></tr><tr><td>parse_ini_string</td><td>Parse a configuration string</td></tr><tr><td>pathinfo</td><td>返回文件路径的信息</td></tr><tr><td>pclose</td><td>关闭进程文件指针</td></tr><tr><td>popen</td><td>打开进程文件指针</td></tr><tr><td>readfile</td><td>输出一个文件</td></tr><tr><td>readlink</td><td>返回符号连接指向的目标</td></tr><tr><td>realpath_cache_get</td><td>Get realpath cache entries</td></tr><tr><td>realpath_cache_size</td><td>Get realpath cache size</td></tr><tr><td>realpath</td><td>返回规范化的绝对路径名</td></tr><tr><td>rename</td><td>重命名一个文件或目录</td></tr><tr><td>rewind</td><td>倒回文件指针的位置</td></tr><tr><td>rmdir</td><td>删除目录</td></tr><tr><td>set_file_buffer</td><td>stream_set_write_buffer 的别名</td></tr><tr><td>stat</td><td>给出文件的信息</td></tr><tr><td>symlink</td><td>建立符号连接</td></tr><tr><td>tempnam</td><td>建立一个具有唯一文件名的文件</td></tr><tr><td>tmpfile</td><td>建立一个临时文件</td></tr><tr><td>touch</td><td>设定文件的访问和修改时间</td></tr><tr><td>umask</td><td>改变当前的 umask</td></tr><tr><td>unlink</td><td>删除文件</td></tr></tbody></table><h1 id="GD-Image函数"><a href="#GD-Image函数" class="headerlink" title="GD/Image函数"></a>GD/Image函数</h1><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>gd_info</td><td>取得当前安装的 GD 库的信息</td></tr><tr><td>getimagesize</td><td>取得图像大小</td></tr><tr><td>getimagesizefromstring</td><td>Get the size of an image from a string</td></tr><tr><td>image_type_to_extension</td><td>取得图像类型的文件后缀</td></tr><tr><td>image_type_to_mime_type</td><td>取得 getimagesize，exif_read_data，exif_thumbnail，exif_imagetype 所返回的图像类型的 MIME 类型</td></tr><tr><td>image2wbmp</td><td>以 WBMP 格式将图像输出到浏览器或文件</td></tr><tr><td>imagealphablending</td><td>设定图像的混色模式</td></tr><tr><td>imageantialias</td><td>是否使用抗锯齿（antialias）功能</td></tr><tr><td>imagearc</td><td>画椭圆弧</td></tr><tr><td>imagechar</td><td>水平地画一个字符</td></tr><tr><td>imagecharup</td><td>垂直地画一个字符</td></tr><tr><td>imagecolorallocate</td><td>为一幅图像分配颜色</td></tr><tr><td>imagecolorallocatealpha</td><td>为一幅图像分配颜色 + alpha</td></tr><tr><td>imagecolorat</td><td>取得某像素的颜色索引值</td></tr><tr><td>imagecolorclosest</td><td>取得与指定的颜色最接近的颜色的索引值</td></tr><tr><td>imagecolorclosestalpha</td><td>取得与指定的颜色加透明度最接近的颜色</td></tr><tr><td>imagecolorclosesthwb</td><td>取得与给定颜色最接近的色度的黑白色的索引</td></tr><tr><td>imagecolordeallocate</td><td>取消图像颜色的分配</td></tr><tr><td>imagecolorexact</td><td>取得指定颜色的索引值</td></tr><tr><td>imagecolorexactalpha</td><td>取得指定的颜色加透明度的索引值</td></tr><tr><td>imagecolormatch</td><td>使一个图像中调色板版本的颜色与真彩色版本更能匹配</td></tr><tr><td>imagecolorresolve</td><td>取得指定颜色的索引值或有可能得到的最接近的替代值</td></tr><tr><td>imagecolorresolvealpha</td><td>取得指定颜色 + alpha 的索引值或有可能得到的最接近的替代值</td></tr><tr><td>imagecolorset</td><td>给指定调色板索引设定颜色</td></tr><tr><td>imagecolorsforindex</td><td>取得某索引的颜色</td></tr><tr><td>imagecolorstotal</td><td>取得一幅图像的调色板中颜色的数目</td></tr><tr><td>imagecolortransparent</td><td>将某个颜色定义为透明色</td></tr><tr><td>imageconvolution</td><td>用系数 div 和 offset 申请一个 3x3 的卷积矩阵</td></tr><tr><td>imagecopy</td><td>拷贝图像的一部分</td></tr><tr><td>imagecopymerge</td><td>拷贝并合并图像的一部分</td></tr><tr><td>imagecopymergegray</td><td>用灰度拷贝并合并图像的一部分</td></tr><tr><td>imagecopyresampled</td><td>重采样拷贝部分图像并调整大小</td></tr><tr><td>imagecopyresized</td><td>拷贝部分图像并调整大小</td></tr><tr><td>imagecreate</td><td>新建一个基于调色板的图像</td></tr><tr><td>imagecreatefromgd2</td><td>从 GD2 文件或 URL 新建一图像</td></tr><tr><td>imagecreatefromgd2part</td><td>从给定的 GD2 文件或 URL 中的部分新建一图像</td></tr><tr><td>imagecreatefromgd</td><td>从 GD 文件或 URL 新建一图像</td></tr><tr><td>imagecreatefromgif</td><td>由文件或URL创建一个新图象</td></tr><tr><td>imagecreatefromjpeg</td><td>由文件或URL创建一个新图象</td></tr><tr><td>imagecreatefrompng</td><td>由文件或URL创建一个新图象</td></tr><tr><td>imagecreatefromstring</td><td>从字符串中的图像流新建一图像</td></tr><tr><td>imagecreatefromwbmp</td><td>由文件或URL创建一个新图象</td></tr><tr><td>imagecreatefromxbm</td><td>由文件或URL创建一个新图象</td></tr><tr><td>imagecreatefromxpm</td><td>由文件或URL创建一个新图象</td></tr><tr><td>imagecreatetruecolor</td><td>新建一个真彩色图像</td></tr><tr><td>imagedashedline</td><td>画一虚线</td></tr><tr><td>imagedestroy</td><td>销毁一图像</td></tr><tr><td>imageellipse</td><td>画一个椭圆</td></tr><tr><td>imagefill</td><td>区域填充</td></tr><tr><td>imagefilledarc</td><td>画一椭圆弧且填充</td></tr><tr><td>imagefilledellipse</td><td>画一椭圆并填充</td></tr><tr><td>imagefilledpolygon</td><td>画一多边形并填充</td></tr><tr><td>imagefilledrectangle</td><td>画一矩形并填充</td></tr><tr><td>imagefilltoborder</td><td>区域填充到指定颜色的边界为止</td></tr><tr><td>imagefilter</td><td>对图像使用过滤器</td></tr><tr><td>imagefontheight</td><td>取得字体高度</td></tr><tr><td>imagefontwidth</td><td>取得字体宽度</td></tr><tr><td>imageftbbox</td><td>给出一个使用 FreeType 2 字体的文本框</td></tr><tr><td>imagefttext</td><td>使用 FreeType 2 字体将文本写入图像</td></tr><tr><td>imagegammacorrect</td><td>对 GD 图像应用 gamma 修正</td></tr><tr><td>imagegd2</td><td>将 GD2 图像输出到浏览器或文件</td></tr><tr><td>imagegd</td><td>将 GD 图像输出到浏览器或文件</td></tr><tr><td>imagegif</td><td>输出图象到浏览器或文件</td></tr><tr><td>imagegrabscreen</td><td>Captures the whole screen</td></tr><tr><td>imagegrabwindow</td><td>Captures a window</td></tr><tr><td>imageinterlace</td><td>激活或禁止隔行扫描</td></tr><tr><td>imageistruecolor</td><td>检查图像是否为真彩色图像</td></tr><tr><td>imagejpeg</td><td>输出图象到浏览器或文件</td></tr><tr><td>imagelayereffect</td><td>设定 alpha 混色标志以使用绑定的 libgd 分层效果</td></tr><tr><td>imageline</td><td>画一条线段</td></tr><tr><td>imageloadfont</td><td>载入一新字体</td></tr><tr><td>imagepalettecopy</td><td>将调色板从一幅图像拷贝到另一幅</td></tr><tr><td>imagepng</td><td>以 PNG 格式将图像输出到浏览器或文件</td></tr><tr><td>imagepolygon</td><td>画一个多边形</td></tr><tr><td>imagepsbbox</td><td>给出一个使用 PostScript Type1 字体的文本方框</td></tr><tr><td>imagepsencodefont</td><td>改变字体中的字符编码矢量</td></tr><tr><td>imagepsextendfont</td><td>扩充或精简字体</td></tr><tr><td>imagepsfreefont</td><td>释放一个 PostScript Type 1 字体所占用的内存</td></tr><tr><td>imagepsloadfont</td><td>从文件中加载一个 PostScript Type 1 字体</td></tr><tr><td>imagepsslantfont</td><td>倾斜某字体</td></tr><tr><td>imagepstext</td><td>用 PostScript Type1 字体把文本字符串画在图像上</td></tr><tr><td>imagerectangle</td><td>画一个矩形</td></tr><tr><td>imagerotate</td><td>用给定角度旋转图像</td></tr><tr><td>imagesavealpha</td><td>设置标记以在保存 PNG 图像时保存完整的 alpha 通道信息（与单一透明色相反）</td></tr><tr><td>imagesetbrush</td><td>设定画线用的画笔图像</td></tr><tr><td>imagesetpixel</td><td>画一个单一像素</td></tr><tr><td>imagesetstyle</td><td>设定画线的风格</td></tr><tr><td>imagesetthickness</td><td>设定画线的宽度</td></tr><tr><td>imagesettile</td><td>设定用于填充的贴图</td></tr><tr><td>imagestring</td><td>水平地画一行字符串</td></tr><tr><td>imagestringup</td><td>垂直地画一行字符串</td></tr><tr><td>imagesx</td><td>取得图像宽度</td></tr><tr><td>imagesy</td><td>取得图像高度</td></tr><tr><td>imagetruecolortopalette</td><td>将真彩色图像转换为调色板图像</td></tr><tr><td>imagettfbbox</td><td>取得使用 TrueType 字体的文本的范围</td></tr><tr><td>imagettftext</td><td>用 TrueType 字体向图像写入文本</td></tr><tr><td>imagetypes</td><td>返回当前 PHP 版本所支持的图像类型</td></tr><tr><td>imagewbmp</td><td>以 WBMP 格式将图像输出到浏览器或文件</td></tr><tr><td>imagexbm</td><td>将 XBM 图像输出到浏览器或文件</td></tr><tr><td>iptcembed</td><td>将二进制 IPTC 数据嵌入到一幅 JPEG 图像中</td></tr><tr><td>iptcparse</td><td>将二进制 IPTC <a href="http://www.iptc.org/" target="_blank" rel="noopener">http://www.iptc.org/</a> 块解析为单个标记</td></tr><tr><td>jpeg2wbmp</td><td>将 JPEG 图像文件转换为 WBMP 图像文件</td></tr><tr><td>png2wbmp</td><td>将 PNG 图像文件转换为 WBMP 图像文件</td></tr></tbody></table><h1 id="session函数"><a href="#session函数" class="headerlink" title="session函数"></a>session函数</h1><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>session_cache_expire</td><td>返回当前缓存到期</td></tr><tr><td>session_cache_limiter</td><td>get和set the current缓存限制/金</td></tr><tr><td>session_commit</td><td>session_write_close 的别名</td></tr><tr><td>session_decode</td><td>将会话数据从一个会话编码的字符串</td></tr><tr><td>session_destroy</td><td>销毁已注册到会话的所有数据</td></tr><tr><td>session_encode</td><td>将当前会话数据编码为一个字符串</td></tr><tr><td>session_get_cookie_params</td><td>获得会话饼干参数</td></tr><tr><td>session_id</td><td>获得和/或设置当前会话标识</td></tr><tr><td>session_is_registered</td><td>检查变量是否在会话中已经注册</td></tr><tr><td>session_module_name</td><td>获得和/或设置当前会话模块</td></tr><tr><td>session_name</td><td>获得和/或设置当前会话名称</td></tr><tr><td>session_regenerate_id</td><td>更新新生成的会话标识</td></tr><tr><td>session_register_shutdown</td><td>会话关机功能</td></tr><tr><td>session_register</td><td>注册一个或多个全局变量与当前会话</td></tr><tr><td>session_save_path</td><td>获取和/或设置当前会话保存路径</td></tr><tr><td>session_set_cookie_params</td><td>设置会话饼干参数</td></tr><tr><td>session_set_save_handler</td><td>设置用户级会话存储功能</td></tr><tr><td>session_start</td><td>开始新的或恢复现有的会话</td></tr><tr><td>session_status</td><td>返回当前会话状态</td></tr><tr><td>session_unregister</td><td>注销当前会话的一个全局变量</td></tr><tr><td>session_unset</td><td>自由所有会话变量</td></tr><tr><td>session_write_close</td><td>写会话数据和结束会话</td></tr></tbody></table><h1 id="cookie函数"><a href="#cookie函数" class="headerlink" title="cookie函数"></a>cookie函数</h1><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setcookie</td><td>设置cookie</td></tr><tr><td>setrawcookie</td><td>发送没有URL编码的cookie</td></tr></tbody></table><h1 id="Date-Time-函数"><a href="#Date-Time-函数" class="headerlink" title="Date/Time 函数"></a>Date/Time 函数</h1><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>checkdate</td><td>验证一个格里高里日期</td></tr><tr><td>date_add</td><td>别名 DateTime::add</td></tr><tr><td>date_create_from_format</td><td>别名 DateTime::createFromFormat</td></tr><tr><td>date_create</td><td>别名 DateTime::__construct</td></tr><tr><td>date_date_set</td><td>别名 DateTime::setDate</td></tr><tr><td>date_default_timezone_get</td><td>取得一个脚本中所有日期时间函数所使用的默认时区</td></tr><tr><td>date_default_timezone_set</td><td>设定用于一个脚本中所有日期时间函数的默认时区</td></tr><tr><td>date_diff</td><td>别名 DateTime::diff</td></tr><tr><td>date_format</td><td>别名 DateTime::format</td></tr><tr><td>date_get_last_errors</td><td>别名 DateTime::getLastErrors</td></tr><tr><td>date_interval_create_from_date_string</td><td>别名 DateInterval::createFromDateString</td></tr><tr><td>date_interval_format</td><td>别名 DateInterval::format</td></tr><tr><td>date_isodate_set</td><td>别名 DateTime::setISODate</td></tr><tr><td>date_modify</td><td>别名 DateTime::modify</td></tr><tr><td>date_offset_get</td><td>别名 DateTime::getOffset</td></tr><tr><td>date_parse_from_format</td><td>Get info about given date formatted according to the specified format</td></tr><tr><td>date_parse</td><td>Returns associative array with detailed info about given date</td></tr><tr><td>date_sub</td><td>别名 DateTime::sub</td></tr><tr><td>date_sun_info</td><td>Returns an array with information about sunset/sunrise and twilight begin/end</td></tr><tr><td>date_sunrise</td><td>返回给定的日期与地点的日出时间</td></tr><tr><td>date_sunset</td><td>返回给定的日期与地点的日落时间</td></tr><tr><td>date_time_set</td><td>别名 DateTime::setTime</td></tr><tr><td>date_timestamp_get</td><td>别名 DateTime::getTimestamp</td></tr><tr><td>date_timestamp_set</td><td>别名 DateTime::setTimestamp</td></tr><tr><td>date_timezone_get</td><td>别名 DateTime::getTimezone</td></tr><tr><td>date_timezone_set</td><td>别名 DateTime::setTimezone</td></tr><tr><td>date</td><td>格式化一个本地时间／日期</td></tr><tr><td>getdate</td><td>取得日期／时间信息</td></tr><tr><td>gettimeofday</td><td>取得当前时间</td></tr><tr><td>gmdate</td><td>格式化一个 GMT/UTC 日期／时间</td></tr><tr><td>gmmktime</td><td>取得 GMT 日期的 UNIX 时间戳</td></tr><tr><td>gmstrftime</td><td>根据区域设置格式化 GMT/UTC 时间／日期</td></tr><tr><td>idate</td><td>将本地时间日期格式化为整数</td></tr><tr><td>localtime</td><td>取得本地时间</td></tr><tr><td>microtime</td><td>返回当前 Unix 时间戳和微秒数</td></tr><tr><td>mktime</td><td>取得一个日期的 Unix 时间戳</td></tr><tr><td>strftime</td><td>根据区域设置格式化本地时间／日期</td></tr><tr><td>strptime</td><td>解析由 strftime 生成的日期／时间</td></tr><tr><td>strtotime</td><td>将任何英文文本的日期时间描述解析为 Unix 时间戳</td></tr><tr><td>time</td><td>返回当前的 Unix 时间戳</td></tr><tr><td>timezone_abbreviations_list</td><td>别名 DateTimeZone::listAbbreviations</td></tr><tr><td>timezone_identifiers_list</td><td>别名 DateTimeZone::listIdentifiers</td></tr><tr><td>timezone_location_get</td><td>别名 DateTimeZone::getLocation</td></tr><tr><td>timezone_name_from_abbr</td><td>Returns the timezone name from abbreviation</td></tr><tr><td>timezone_name_get</td><td>别名 DateTimeZone::getName</td></tr><tr><td>timezone_offset_get</td><td>别名 DateTimeZone::getOffset</td></tr><tr><td>timezone_open</td><td>别名 DateTimeZone::__construct</td></tr><tr><td>timezone_transitions_get</td><td>别名 DateTimeZone::getTransitions</td></tr><tr><td>timezone_version_get</td><td>Gets the version of the timezonedb</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;各种常用的php函数，包括php字符串函数,php数组函数,php数学函数,mysql函数,文件目录函数,GD库函数,SESSION函数,Date/Time 函数等，涵盖了php基本操作所涉及的各类常用函数，并针对各个函数提供了简单的解释说明，方便查阅&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://hackycy.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://hackycy.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态代码</title>
    <link href="http://hackycy.github.io/2019/05/05/HTTP%E7%8A%B6%E6%80%81%E4%BB%A3%E7%A0%81/"/>
    <id>http://hackycy.github.io/2019/05/05/HTTP状态代码/</id>
    <published>2019-05-05T09:06:34.000Z</published>
    <updated>2019-05-05T14:12:11.546Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP 状态代码指示特定 HTTP 请求是否已成功完成。响应分为五类：信息响应，成功响应，重定向，客户端错误和服务器错误。</p><a id="more"></a><h1 id="常见的状态代码"><a href="#常见的状态代码" class="headerlink" title="常见的状态代码"></a>常见的状态代码</h1><ul><li>200 服务器成功返回内容</li><li>301/2 永久/临时重定向</li><li>304 未修改 Not Modified</li><li>307 重定向中保留原始数据</li><li>404 请求的页面不存在</li><li>500 服务器内部错误</li><li>503 服务器暂时不可用</li></ul><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><h1 id="信息响应"><a href="#信息响应" class="headerlink" title="信息响应"></a>信息响应</h1><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>100 Continue</td><td>这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。</td></tr><tr><td>101 Switching Protocol</td><td>该代码是响应客户端的 Upgrade 标头发送的，并且指示服务器也正在切换的协议。</td></tr><tr><td>102 Processing</td><td>此代码表示服务器已收到并正在处理该请求，但没有响应可用。</td></tr><tr><td>103 Early Hints</td><td>此状态代码主要用于与Link 链接头一起使用，以允许用户代理在服务器仍在准备响应时开始预加载资源</td></tr></tbody></table><h1 id="成功响应"><a href="#成功响应" class="headerlink" title="成功响应"></a>成功响应</h1><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>200 OK</td><td>请求成功。成功的含义取决于HTTP方法：GET：资源已被提取并在消息正文中传输。HEAD：实体标头位于消息正文中。POST：描述动作结果的资源在消息体中传输。TRACE：消息正文包含服务器收到的请求消息</td></tr><tr><td>201 Created</td><td>该请求已成功，并因此创建了一个新的资源。这通常是在PUT请求之后发送的响应。</td></tr><tr><td>202 Accepted</td><td>请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。</td></tr><tr><td>203 Non-Authoritative Information</td><td>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</td></tr><tr><td>204 No Content</td><td>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</td></tr><tr><td>205 Reset Content</td><td>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</td></tr><tr><td>206 Partial Content</td><td>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。</td></tr><tr><td>207 Multi-Status</td><td>由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</td></tr><tr><td>208 Multi-Status</td><td>在 DAV 里面使用: propstat 响应元素以避免重复枚举多个绑定的内部成员到同一个集合。</td></tr><tr><td>226 IM Used</td><td>服务器已经完成了对资源的 GET 请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。</td></tr></tbody></table><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>300 Multiple Choice</td><td>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</td></tr><tr><td>301 Moved Permanently</td><td>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</td></tr><tr><td>302 Found</td><td>请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</td></tr><tr><td>303 See Other</td><td>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。</td></tr><tr><td>304 Not Modified</td><td>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</td></tr><tr><td><del>305 Use Proxy</del></td><td>被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。</td></tr><tr><td><del>306 unused</del></td><td>在最新版的规范中，306 状态码已经不再被使用。</td></tr><tr><td>307 Temporary Redirect</td><td>请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</td></tr><tr><td>308 Permanent Redirect</td><td>这意味着资源现在永久位于由 Location: HTTP Response 标头指定的另一个 URI。 这与 301 Moved Permanently HTTP 响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP 方法：如果在第一个请求中使用 POST，则必须在第二个请求中使用 POST。</td></tr></tbody></table><h1 id="客户端响应"><a href="#客户端响应" class="headerlink" title="客户端响应"></a>客户端响应</h1><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>400 Bad Request</td><td>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。2、请求参数有误。</td></tr><tr><td>401 Unauthorized</td><td>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</td></tr><tr><td><del>402 Payment Required</del></td><td>此响应码保留以便将来使用，创造此响应码的最初目的是用于数字支付系统，然而现在并未使用</td></tr><tr><td>403 Forbidden</td><td>服务器已经理解请求，但是拒绝执行它。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个 404 响应，假如它不希望让客户端获得任何信息。</td></tr><tr><td>404 Not Found</td><td>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</td></tr><tr><td>405 Method Not Allowed</td><td>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</td></tr><tr><td>406 Not Acceptable</td><td>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。</td></tr><tr><td>407 Proxy Authentication Required</td><td>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。</td></tr><tr><td>408 Request Timeout</td><td>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</td></tr><tr><td>409 Conflict</td><td>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。</td></tr><tr><td>410 Gone</td><td>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用 404 状态码。除非额外说明，否则这个响应是可缓存的。</td></tr><tr><td>411 Length Required</td><td>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</td></tr><tr><td>412 Precondition Failed</td><td>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</td></tr><tr><td>413 Payload Too Large</td><td>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</td></tr><tr><td>414 URI Too Long</td><td>请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。</td></tr><tr><td>415 Unsupported Media Type</td><td>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</td></tr><tr><td>416 Requested Range Not Satisfiable</td><td>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。</td></tr><tr><td>417 Expectation Failed</td><td>此响应代码意味着服务器无法满足 Expect 请求标头字段指示的期望值。</td></tr><tr><td>418 I’m a teapot</td><td>服务器拒绝尝试用 “茶壶冲泡咖啡”。</td></tr><tr><td>421 Misdirected Request</td><td>该请求针对的是无法产生响应的服务器。 这可以由服务器发送，该服务器未配置为针对包含在请求 URI 中的方案和权限的组合产生响应。</td></tr><tr><td>422 Unprocessable Entity</td><td>请求格式良好，但由于语义错误而无法遵循。</td></tr><tr><td>423 Locked</td><td>正在访问的资源被锁定</td></tr><tr><td>424 Failed Dependency</td><td>由于先前的请求失败，所以此次请求失败。</td></tr><tr><td>425 Too Early</td><td>服务器不愿意冒着风险去处理可能重播的请求.</td></tr><tr><td>426 Upgrade Required</td><td>服务器拒绝使用当前协议执行请求，但可能在客户机升级到其他协议后愿意这样做。 服务器在 426 响应中发送 Upgrade 头以指示所需的协议。</td></tr><tr><td>428 Precondition Required</td><td>原始服务器要求该请求是有条件的。 旨在防止“丢失更新”问题，即客户端获取资源状态，修改该状态并将其返回服务器，同时第三方修改服务器上的状态，从而导致冲突。</td></tr><tr><td>429 Too Many Requests</td><td>用户在给定的时间内发送了太多请求（“限制请求速率”）。</td></tr><tr><td>431 Request Header Fields Too Large</td><td>服务器不愿意处理请求，因为它的 请求头字段太大（ Request Header Fields Too Large）。 请求可以在减小请求头字段的大小后重新提交。</td></tr><tr><td>451 Unavailable For Legal Reasons</td><td>用户请求非法资源，例如：由政府审查的网页。</td></tr></tbody></table><h1 id="服务端响应"><a href="#服务端响应" class="headerlink" title="服务端响应"></a>服务端响应</h1><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>500 Internal Server Error</td><td>服务器遇到了不知道如何处理的情况。</td></tr><tr><td>501 Not Implemented</td><td>此请求方法不被服务器支持且无法被处理。只有GET和HEAD是要求服务器支持的，它们必定不会返回此错误代码。</td></tr><tr><td>502 Bad Gateway</td><td>此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</td></tr><tr><td>503 Service Unavailable</td><td>服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机。 请注意，与此响应一起，应发送解释问题的用户友好页面。 这个响应应该用于临时条件和 Retry-After：如果可能的话，HTTP头应该包含恢复服务之前的估计时间。 网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。</td></tr><tr><td>504 Gateway Timeout</td><td>当服务器作为网关，不能及时得到响应时返回此错误代码。</td></tr><tr><td>505 HTTP Version Not Supported</td><td>服务器不支持请求中所使用的HTTP协议版本。</td></tr><tr><td>506 Variant Also Negotiates</td><td>服务器有一个内部配置错误：对请求的透明内容协商导致循环引用。</td></tr><tr><td>507 Insufficient Storage</td><td>服务器有内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当端点。</td></tr><tr><td>508 Loop Detected</td><td>服务器在处理请求时检测到无限循环。</td></tr><tr><td>510 Not Extended</td><td>客户端需要对请求进一步扩展，服务器才能实现它。服务器会回复客户端发出扩展请求所需的所有信息。</td></tr><tr><td>511 Network Authentication Required</td><td>511 状态码指示客户端需要进行身份验证才能获得网络访问权限。</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP 状态代码指示特定 HTTP 请求是否已成功完成。响应分为五类：信息响应，成功响应，重定向，客户端错误和服务器错误。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://hackycy.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://hackycy.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Mac Homebrew常用命令</title>
    <link href="http://hackycy.github.io/2019/05/04/Mac-Homebrew%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://hackycy.github.io/2019/05/04/Mac-Homebrew常用命令/</id>
    <published>2019-05-04T04:02:34.000Z</published>
    <updated>2019-05-10T02:42:04.530Z</updated>
    
    <content type="html"><![CDATA[<p>Homebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 使用命令，非常方便。</p><a id="more"></a><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ brew --<span class="built_in">help</span>        <span class="comment">#简洁命令帮助</span></span><br><span class="line">$ man brew           <span class="comment">#完整命令帮助</span></span><br><span class="line">$ brew install git   <span class="comment">#安装软件包(这里是示例安装的Git版本控制)</span></span><br><span class="line">$ brew uninstall git <span class="comment">#卸载软件包</span></span><br><span class="line">$ brew search git    <span class="comment">#搜索软件包</span></span><br><span class="line">$ brew list          <span class="comment">#显示已经安装的所有软件包</span></span><br><span class="line">$ brew update        <span class="comment">#同步远程最新更新情况，对本机已经安装并有更新的软件用*标明</span></span><br><span class="line">$ brew outdated      <span class="comment">#查看已安装的哪些软件包需要更新</span></span><br><span class="line">$ brew upgrade git   <span class="comment">#更新单个软件包</span></span><br><span class="line">$ brew info git      <span class="comment">#查看软件包信息</span></span><br><span class="line">$ brew home git      <span class="comment">#访问软件包官方站</span></span><br><span class="line">$ brew cleanup       <span class="comment">#清理所有已安装软件包的历史老版本</span></span><br><span class="line">$ brew cleanup git   <span class="comment">#清理单个已安装软件包的历史版本</span></span><br><span class="line">$ brew tap           <span class="comment">#可以为brew的软件的 跟踪,更新,安装添加更多的的tap formulae</span></span><br></pre></td></tr></table></figure><h1 id="程序安装路径及文件夹"><a href="#程序安装路径及文件夹" class="headerlink" title="程序安装路径及文件夹"></a>程序安装路径及文件夹</h1><ul><li>bin          #用于存放所安装程序的启动链接（相当于快捷方式）</li><li>Cellar       #所有brew安装的程序，都将以[程序名/版本号]存放于本目录下</li><li>etc          #brew安装程序的配置文件默认存放路径</li><li>Library      #Homebrew 系统自身文件夹<ul><li>Formula     #程序的下载路径和编译参数及安装路径等配置文件存放地</li><li>Homebrew    #brew程序自身命令集</li></ul></li></ul><h1 id="替换及重置Homebrew默认源"><a href="#替换及重置Homebrew默认源" class="headerlink" title="替换及重置Homebrew默认源"></a>替换及重置Homebrew默认源</h1><ul><li>替换brew.git:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure><p>​    <strong>可选镜像源：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://git.coding.net/homebrew/homebrew.git - Coding</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git - 清华</span><br><span class="line">https://mirrors.ustc.edu.cn/brew.git - 中科大</span><br></pre></td></tr></table></figure><ul><li>替换homebrew-core.git:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure><ul><li>重置brew.git:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/brew.git</span><br></pre></td></tr></table></figure><ul><li>重置homebrew-core.git:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure><h1 id="LaunchRocket"><a href="#LaunchRocket" class="headerlink" title="LaunchRocket"></a>LaunchRocket</h1><p>LaunchRecket是管理homebrew所安装应用的一个管理器，它在系统设置中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line">brew cask install launchrocket</span><br><span class="line"><span class="comment"># uninstall</span></span><br><span class="line">brew cask uninstall launchrocket</span><br></pre></td></tr></table></figure><p><a href="https://github.com/jimbojsb/launchrocket" target="_blank" rel="noopener">https://github.com/jimbojsb/launchrocket</a></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Homebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 使用命令，非常方便。&lt;/p&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://hackycy.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="Homebrew" scheme="http://hackycy.github.io/tags/Homebrew/"/>
    
  </entry>
  
  <entry>
    <title>MacOS Apache配置</title>
    <link href="http://hackycy.github.io/2019/05/04/MacOS-Apache%E9%85%8D%E7%BD%AE/"/>
    <id>http://hackycy.github.io/2019/05/04/MacOS-Apache配置/</id>
    <published>2019-05-04T03:08:05.000Z</published>
    <updated>2019-05-16T15:58:29.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>macOS Mojave 10.14.4</li><li>Apache/2.4.38</li></ul><a id="more"></a><h1 id="查看Apache"><a href="#查看Apache" class="headerlink" title="查看Apache"></a>查看Apache</h1><p>macOS系统自带Apache软件，我们直接在命令行下查看Apache版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ httpd -v</span><br><span class="line">Server version: Apache/2.4.38 (Unix)</span><br><span class="line">Server built:   Feb 10 2019 02:48:38</span><br></pre></td></tr></table></figure><h1 id="启动Apache"><a href="#启动Apache" class="headerlink" title="启动Apache"></a>启动Apache</h1><p>命令行直接启动，如果是普通用户下需要<code>sudo</code>，普通用户没有权限操作<code>apachectl</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apachectl start</span><br><span class="line">$ sudo apachectl stop</span><br><span class="line">$ sudo apachectl restart</span><br></pre></td></tr></table></figure><p>mac 下 <code>Apache</code> 默认的目录在 <code>/Library/WebServer</code> 下</p><h1 id="开启Apache多用户主目录"><a href="#开启Apache多用户主目录" class="headerlink" title="开启Apache多用户主目录"></a>开启Apache多用户主目录</h1><p>执行 <code>sudo vim /etc/apache2/httpd.conf</code> 打开 <code>httpd.conf</code> 文件，然后查找 <code>userdir</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># User home directories</span><br><span class="line">#Include /private/etc/apache2/extra/httpd-userdir.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#LoadModule userdir_module libexec/apache2/mod_userdir.so</span><br></pre></td></tr></table></figure><p>去掉前面<code>#</code>注释即可。</p><p>接着再编辑 <code>/private/etc/apache2/extra/httpd-userdir.conf</code> 文件，增加内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserDir Sites</span><br></pre></td></tr></table></figure><p>如果有则不用添加了。</p><h1 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h1><p>执行 <code>sudo vim /etc/apache2/httpd.conf</code>，查找<code>vhost</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Virtual hosts</span><br><span class="line">#Include /private/etc/apache2/extra/httpd-vhosts.conf</span><br></pre></td></tr></table></figure><p>去掉前面<code>#</code>注释即可。再修改<code>/private/etc/apache2/extra/httpd-vhosts.conf</code>配置即可。</p><h1 id="使用Homebrew代替自带的"><a href="#使用Homebrew代替自带的" class="headerlink" title="使用Homebrew代替自带的"></a>使用Homebrew代替自带的</h1><p>由于之前不知道搞了什么，自带的怎么更改都不生效，所以重新安装了。</p><h2 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew tap homebrew/apache</span><br><span class="line">$ brew tap homebrew/php</span><br><span class="line">$ brew install httpd</span><br></pre></td></tr></table></figure><h2 id="配置apache"><a href="#配置apache" class="headerlink" title="配置apache"></a>配置apache</h2><p>配置文件路径为<code>/usr/local/etc/httpd/httpd.conf</code>，配置的方法和上述自带无差别。只是配置路径发生了变化。</p><h2 id="配置PHP模块"><a href="#配置PHP模块" class="headerlink" title="配置PHP模块"></a>配置PHP模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LoadModule php7_module /usr/local/Cellar/php@7.1/7.1.26/lib/httpd/modules/libphp7.so</span><br><span class="line">&lt;IfModule mod_php7.c&gt;</span><br><span class="line"></span><br><span class="line">    AddType application/x-httpd-php .php</span><br><span class="line">    AddType application/x-httpd-php-source .phps</span><br><span class="line"></span><br><span class="line">    &lt;IfModule mod_dir.c&gt;</span><br><span class="line">        DirectoryIndex index.html index.php</span><br><span class="line">    &lt;/IfModule&gt;</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>找到所在php的so文件添加进配置即可，php版本可根据自己需要更改。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;macOS Mojave 10.14.4&lt;/li&gt;
&lt;li&gt;Apache/2.4.38&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Apache" scheme="http://hackycy.github.io/categories/Apache/"/>
    
    
      <category term="环境搭建" scheme="http://hackycy.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Apache" scheme="http://hackycy.github.io/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>Apache配置文件详解</title>
    <link href="http://hackycy.github.io/2019/04/29/Apache%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://hackycy.github.io/2019/04/29/Apache配置文件详解/</id>
    <published>2019-04-29T12:39:51.000Z</published>
    <updated>2019-05-10T09:45:03.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Centos7</li><li>Apache/2.4.38</li></ul><a id="more"></a><h1 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h1><p>找到apache所在的配置文件，在本文环境下即centos7以yum源安装的httpd所在的配置环境路径为<code>/etc/httpd/conf</code>。也可以使用命令找到该配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo find / -name <span class="string">'httpd.conf'</span></span><br></pre></td></tr></table></figure><blockquote><p>以下以本文中的配置路径为准，其他系统下路径可能不一致。<br>在 Ubnutu/Mac 上，apache 服务叫 apache2，而不是 httpd（在 Centos 上叫 httpd），主配置文件为 /etc/apache2/apache2.conf</p></blockquote><h1 id="Apache配置文件"><a href="#Apache配置文件" class="headerlink" title="Apache配置文件"></a>Apache配置文件</h1><p>Apache提供了灵活的web服务配置，理解其参数的含义很重要。</p><p>Apache配置文件中英文对照：<a href="http://www.cnblogs.com/adamite/p/apache_configuration.html" target="_blank" rel="noopener">http://www.cnblogs.com/adamite/p/apache_configuration.html</a></p><h2 id="Apache主目录"><a href="#Apache主目录" class="headerlink" title="Apache主目录"></a>Apache主目录</h2><p><code>ServerRoot &quot;/etc/httpd&quot;</code></p><h2 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h2><p><code>Listen 80</code></p><h2 id="加载动态模块"><a href="#加载动态模块" class="headerlink" title="加载动态模块"></a>加载动态模块</h2><p><code>LoadModule php5_module modules/libphp5.so</code></p><p>或者加载动态模块的配置文件</p><p><code>Include conf.modules.d/*.conf</code></p><h2 id="Apache的进程执行者"><a href="#Apache的进程执行者" class="headerlink" title="Apache的进程执行者"></a>Apache的进程执行者</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User apache</span><br><span class="line">Group apache</span><br></pre></td></tr></table></figure><h2 id="服务器域名"><a href="#服务器域名" class="headerlink" title="服务器域名"></a>服务器域名</h2><p>该项可配置也可不配置 <code>ServerName www.example.com:80</code></p><h2 id="网站根目录"><a href="#网站根目录" class="headerlink" title="网站根目录"></a>网站根目录</h2><p><code>DocumentRoot &quot;/var/www/html&quot;</code></p><h2 id="设置网站根目录的访问权限"><a href="#设置网站根目录的访问权限" class="headerlink" title="设置网站根目录的访问权限"></a>设置网站根目录的访问权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">    #</span><br><span class="line">    # Possible values for the Options directive are &quot;None&quot;, &quot;All&quot;,</span><br><span class="line">    # or any combination of:</span><br><span class="line">    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews</span><br><span class="line">    #</span><br><span class="line">    # Note that &quot;MultiViews&quot; must be named *explicitly* --- &quot;Options All&quot;</span><br><span class="line">    # doesn&apos;t give it to you.</span><br><span class="line">    #</span><br><span class="line">    # The Options directive is both complicated and important.  Please see</span><br><span class="line">    # http://httpd.apache.org/docs/2.4/mod/core.html#options</span><br><span class="line">    # for more information.</span><br><span class="line">    #</span><br><span class="line">    Options Indexes FollowSymLinks</span><br><span class="line"></span><br><span class="line">    #</span><br><span class="line">    # AllowOverride controls what directives may be placed in .htaccess files.</span><br><span class="line">    # It can be &quot;All&quot;, &quot;None&quot;, or any combination of the keywords:</span><br><span class="line">    #   Options FileInfo AuthConfig Limit</span><br><span class="line">    #</span><br><span class="line">    AllowOverride None</span><br><span class="line"></span><br><span class="line">    #</span><br><span class="line">    # Controls who can get stuff from this server.</span><br><span class="line">    #</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p><strong>参数详解</strong></p><ul><li><code>Allow from all</code> 参数允许所有人访问<code>/var/www/html</code>下的资源</li><li><code>Deny from all</code> 参数拒绝所有人访问<code>/var/www/html</code>下的资源</li><li><code>Options Indexes</code> 参数:访问目录时,如果不存在默认首页则展示站点列表 该行建议改成 Options None</li><li><code>Options FollowSymLinks</code> 参数:是否允许快捷方式(ln -s 软连接)</li><li><code>Options MultiViews</code> 多视图,访问<code>/index</code>等同访问<code>index.php</code>或<code>index.html</code></li></ul><h3 id="Apache服务器访问权限控制包括"><a href="#Apache服务器访问权限控制包括" class="headerlink" title="Apache服务器访问权限控制包括:"></a>Apache服务器访问权限控制包括:</h3><h4 id="Apache-服务权限"><a href="#Apache-服务权限" class="headerlink" title="Apache 服务权限"></a>Apache 服务权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deny from all (**403 forbidden** error!)</span><br><span class="line">allow from all</span><br></pre></td></tr></table></figure><h4 id="Linux-系统权限"><a href="#Linux-系统权限" class="headerlink" title="Linux 系统权限"></a>Linux 系统权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selinux</span><br><span class="line">iptables</span><br><span class="line">httpd进程执行者对根目录的权限(**403 forbidden** error!)</span><br></pre></td></tr></table></figure><h2 id="设置目录默认首页"><a href="#设置目录默认首页" class="headerlink" title="设置目录默认首页"></a>设置目录默认首页</h2><p>优先级从左往右依次降低</p><p><code>DirectoryIndex index.html index.php</code></p><h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><p><code>ErrorLog &quot;logs/error_log&quot;</code></p><h2 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h2><p><code>CustomLog &quot;logs/access_log&quot; common</code></p><h2 id="解析php脚本"><a href="#解析php脚本" class="headerlink" title="解析php脚本"></a>解析php脚本</h2><p><code>AddType application/x-httpd-php .php</code></p><h2 id="控制错误页面的输出"><a href="#控制错误页面的输出" class="headerlink" title="控制错误页面的输出"></a>控制错误页面的输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#ErrorDocument 500 &quot;The server made a boo boo.&quot;</span><br><span class="line">#ErrorDocument 404 /missing.html</span><br><span class="line">#ErrorDocument 404 &quot;/cgi-bin/missing_handler.pl&quot;</span><br><span class="line">#ErrorDocument 402 http://www.example.com/subscription_info.html</span><br></pre></td></tr></table></figure><h2 id="包含外部配置文件"><a href="#包含外部配置文件" class="headerlink" title="包含外部配置文件"></a>包含外部配置文件</h2><p><code>Include extra/httpd-vhosts.conf</code></p><h2 id="虚拟目录"><a href="#虚拟目录" class="headerlink" title="虚拟目录"></a>虚拟目录</h2><p><code>http://localhost/mnt</code> mnt目录并不在网站根目录下,目录资源在<code>/tmp/mnt</code>目录下 在<code>/usr/local/apache2/etc/http.conf</code>文件里增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Alias /mnt &quot;/mnt/www&quot; # 虚拟目录（目录别名）</span><br><span class="line">&lt;Directory &quot;/mnt/www&quot;&gt;</span><br><span class="line">    Options none</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Deny from all # 拒绝所有</span><br><span class="line">    Allow from all # 允许所有</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p><code>http://localhost/mnt</code> 重启apache后访问的资源便是 <code>/mnt/www</code>目录下的资源</p><h1 id="Apache虚拟主机配置"><a href="#Apache虚拟主机配置" class="headerlink" title="Apache虚拟主机配置"></a>Apache虚拟主机配置</h1><p>基于域名的虚拟主机，指定服务器IP（和可能的端口）使主机接受请求。用<code>NameVirtualHost</code>进行配置。 如果服务器上所有的IP地址都会用到，可以用<code>*</code>作为<code>NameVirtualHost</code>的参数。在<code>NameVirtualHost</code>指令中指明IP地址不会使服务器自动侦听那个IP地址。</p><h2 id="找到Apache的主配置文件httpd-conf"><a href="#找到Apache的主配置文件httpd-conf" class="headerlink" title="找到Apache的主配置文件httpd.conf"></a>找到Apache的主配置文件<code>httpd.conf</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /etc/httpd/conf</span><br><span class="line">$ vim httpd.conf</span><br></pre></td></tr></table></figure><p>我们搜索关键字<code>vhosts</code>，如果没有则在文件后添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Load vhost-config files in the &quot;/etc/httpd/vhost-conf.d&quot; directory if any</span><br><span class="line">Include vhost.d/*.conf</span><br></pre></td></tr></table></figure><blockquote><p>不使用官方原版的单个配置文件有个好处是 每个虚拟主机配置独立开来 减少操作的误差</p></blockquote><p>然后我们到<code>/etc/httpd/</code>目录下创建<code>vhost.d</code>文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir vhost.d</span><br><span class="line">$ <span class="built_in">cd</span> vhost.d</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/etc/httpd/vhost.d</span><br><span class="line">$ vim www_sweetlover_cn_net.conf</span><br></pre></td></tr></table></figure><p><strong>添加以下内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin zjyzy@www.sweetlover.net.cn</span><br><span class="line">    DocumentRoot /var/www/html/sweetlover</span><br><span class="line">    ServerName www.sweetlover.net.cn</span><br><span class="line">    RewriteEngine On</span><br><span class="line">    Options All</span><br><span class="line">    &lt;Directory &quot;/var/www/html/sweetlover&quot;&gt;</span><br><span class="line">        # Options -Indexes FollowSymLinks </span><br><span class="line">        # 为了服务器的安全 Indexes参数一般要取消</span><br><span class="line">        Options FollowSymLinks </span><br><span class="line">        AllowOverride All</span><br><span class="line">        Allow from all</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">    ErrorLog logs/www_sweetlover_net_cn-error_log</span><br><span class="line">    CustomLog logs/www_sweetlover_net_cn-access_log common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p><strong>再次修改主配置文件<code>httpd.conf</code>,找到<code>Listen 80</code>，添加以下代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Listen 80</span><br><span class="line">NameVirtualHost *:80</span><br></pre></td></tr></table></figure><p><strong>我们再配置一个同域名下不同端口虚拟主机，配置<code>8080</code>端口下的</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/httpd/vhost.d</span><br><span class="line">$ vim www_sweetlover_net_cn_8080.conf</span><br></pre></td></tr></table></figure><p>针对<code>www_sweetlover_cn_net.conf</code>改变相应的配置，即修改<code>ServerName</code>为<code>www.sweetlover.net.cn:8080</code>，<code>DocumentRoot</code>和<code>Directory</code>修改为<code>/var/www/html/sweetlover@8080</code>。</p><p><strong>修改主配置文件，添加</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Listen 8080</span><br><span class="line">NameVirtualHost *:8080</span><br></pre></td></tr></table></figure><blockquote><p>由于环境下为虚拟机环境，直接访问ip加端口号即可访问到配置的网站。在上述配置的DocumentRoot下创建index.html或者index.php即可访问网页。</p></blockquote><p><strong>如果出现该错误</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[warn] default VirtualHost overlap on port 80, the first has precedence</span><br></pre></td></tr></table></figure><blockquote><p>打开apache主配置文件在任意位置添加一行,在 40行的Listion:80后添加一行内容如下:<code>NameVirtualHost *:80</code></p></blockquote><blockquote><p>如果使用源码编译安装的，直接去掉注释即可，然后再修改配置文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Virtual hosts</span><br><span class="line">#Include /private/etc/apache2/extra/httpd-vhosts.conf</span><br></pre></td></tr></table></figure><p>去掉前面<code>#</code>注释即可。再修改<code>/private/etc/apache2/extra/httpd-vhosts.conf</code>配置即可。</p><h1 id="Apache常见错误"><a href="#Apache常见错误" class="headerlink" title="Apache常见错误"></a>Apache常见错误</h1><h2 id="ServerName配置未填写或错误"><a href="#ServerName配置未填写或错误" class="headerlink" title="ServerName配置未填写或错误"></a>ServerName配置未填写或错误</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpd: Could not reliably determine the server<span class="string">'s fully qualified domain name, using luo.centos6.5 for ServerName</span></span><br></pre></td></tr></table></figure><p>在Apache主配置文件<code>httpd.conf</code>的98行左右<code>#ServerName www.example.com:80</code>前面的<code>#</code>去掉，换成自己的域名或者ip地址。<br>例如：修改为<code>ServerName localhost:80</code>或者<code>ServerName 127.0.0.1:80</code></p><h2 id="403-Forbidden错误"><a href="#403-Forbidden错误" class="headerlink" title="403 Forbidden错误"></a>403 Forbidden错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">403 - Forbidden（禁止访问）,服务器拒绝请求</span><br><span class="line">    - forbidden request (matches a deny filter) =&gt; HTTP 403</span><br><span class="line">    - The request was a legal request, but the server is refusing to respond to it.</span><br></pre></td></tr></table></figure><p><strong>原因1：apache的配置文件没有对站点目录许可</strong></p><p>apache配置文件中没有对站点目录的权限许可配置，这通常是在初始化安装apahce后，更改了默认的apache站点目录导致。</p><p>解决办法可能是：通过给主配置文件增加<code>&lt;Directory &quot;/var/www/html&quot;&gt;&lt;/Directory&gt;</code>标签实现对指定目录的权限控制<br>典型如下(对/var/www目录下的文件允许访问)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www&quot;&gt;</span><br><span class="line">    Options -Indexes FollowSymLinks # 为了服务器的安全 Indexes参数一般要取消</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny # 允许未被明确拒绝的</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p><strong>原因2：站点目录下没有首页文件，而apache 的配置又禁止了目录的浏览</strong></p><p>站点目录下没有首页文件(index.php、index.html等默认文件)，而apache的配置又禁止了目录浏览（#Indexes参数:访问目录时,如果不存在默认首页则展示站点列表，该行建议改成<code>Options None</code>，也会提示403错误。<br>解决办法：在站点目录添加默认首页文件或者将配置文件中<code>Options Index</code>增加上。</p><p><strong>原因3：deny from all 禁用了所有来访者访问</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www&quot;&gt;</span><br><span class="line">    Options -Indexes FollowSymLinks # 为了服务器的安全 Indexes参数一般要取消</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny # 允许未被明确拒绝的</span><br><span class="line">    Deny from all</span><br><span class="line">    # Deny from </span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p><strong>解决办法：</strong>参考原因2解决方法配置<code>&lt;Directory &gt;&lt;/Directory&gt;</code>参数。</p><p><strong>站点目录权限问题</strong></p><p>站点目录需要apache的用户有访问权限，否则就会报403错误(一般web站点目录权限给755，站点文件权限给644，上传程序通过另外的上传服务器提供文件上传)。</p><h1 id="Apache服务器优化"><a href="#Apache服务器优化" class="headerlink" title="Apache服务器优化"></a>Apache服务器优化</h1><h2 id="错误页面优雅显示"><a href="#错误页面优雅显示" class="headerlink" title="错误页面优雅显示"></a>错误页面优雅显示</h2><p>可以将404 500等的错误信息页面重定向到网站首页或其他页面，提升用户体验。</p><p>编辑apache主配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim httpd.conf</span><br></pre></td></tr></table></figure></p><p>修改如下内容<code>ErrorDocument 404 http://www.domain.com</code></p><h2 id="mod-defalte文件压缩功能"><a href="#mod-defalte文件压缩功能" class="headerlink" title="mod_defalte文件压缩功能"></a><code>mod_defalte</code>文件压缩功能</h2><p>gzip是把文件先在服务器端进行压缩然后再传输，传输完毕后浏览器会重新对压缩过得内容进行解压缩。这样可以显著减少文件传输的大小，没有特殊情况，所有的文本内容都应该被gzip压缩（html,css,js,xml,txt..）</p><p>添加如下内容到<code>httpd.conf</code>或者<code>vhost.conf</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ifmodule mod_deflate.c&gt;</span><br><span class="line">    DeflateCompressionLevel 9</span><br><span class="line">    SetOutputFilter DEFLATE</span><br><span class="line">    AddOutputFilterByType DEFLATE text/html text/plain text/xml</span><br><span class="line">    AddOutputFilterByType DEFLATE application/javscript</span><br><span class="line">    AddOutputFilterByType DEFLATE text/css</span><br><span class="line">&lt;/ifmodule&gt;</span><br></pre></td></tr></table></figure><h2 id="更改apache的默认用户"><a href="#更改apache的默认用户" class="headerlink" title="更改apache的默认用户"></a>更改apache的默认用户</h2><p>创建apache用户，用于子进程和线程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ useradd -M -s /sbin/nologin webadmin</span><br></pre></td></tr></table></figure><p>编辑apache的主配置文件,添加或者修改如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User webadmin</span><br><span class="line">Group webadmin</span><br></pre></td></tr></table></figure><h2 id="开启apache防盗链功能"><a href="#开启apache防盗链功能" class="headerlink" title="开启apache防盗链功能"></a>开启apache防盗链功能</h2><p>主配置文件中增加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule rewrite_module&gt;</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://domain.com/.*$ [NC]</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://www.domain.com/.*$ [NC]</span><br><span class="line"></span><br><span class="line">RewriteRule .*\.(gif|jpg|swf)$ http://www.domain.com [R,NC]</span><br><span class="line"># RewriteRule .*\.(gif|jpg|swf)$ http://www.domain.com/about/no.png [R,NC]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><h2 id="禁止目录Index"><a href="#禁止目录Index" class="headerlink" title="禁止目录Index"></a>禁止目录Index</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">    Options -Indexes FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">    Options FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h2 id="禁止用户覆盖-重载-配置文件"><a href="#禁止用户覆盖-重载-配置文件" class="headerlink" title="禁止用户覆盖(重载)配置文件"></a>禁止用户覆盖(重载)配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">    Options FollowSymLinks</span><br><span class="line">    AllowOverride None  # 禁止用户覆盖(重载)配置文件, All即为开启</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h2 id="关闭CGI-Common-Gateway-Interface-通用网关接口"><a href="#关闭CGI-Common-Gateway-Interface-通用网关接口" class="headerlink" title="关闭CGI(Common Gateway Interface 通用网关接口)"></a>关闭CGI(Common Gateway Interface 通用网关接口)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule alias_module&gt;</span><br><span class="line">ScriptAlias /cgi-bin/ &quot;/var/www/cgi-bin/&quot;</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">&lt;Directory &quot;/var/www/cgi-bin&quot;&gt;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Options None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h2 id="避免使用-htaccess文件-分布式配置文件"><a href="#避免使用-htaccess文件-分布式配置文件" class="headerlink" title="避免使用.htaccess文件(分布式配置文件)"></a>避免使用.htaccess文件(分布式配置文件)</h2><p><strong>默认选项：</strong><code>AccessFileName .htaccess</code> 改为 <code># AccessFileName .htaccess</code></p><p>先考虑性能，如果AllowOverride启用了.haccess文件，则apache需要在每个目录中查找.htaccess文件，因此无论是否真正用到启用.htaccess文件都会导致服务器性能的下降。<br>　　另外对于每一个请求，都需要读取一次.htaccess文件。<br>　　其次是安全考虑，这样会允许用户自己修改服务器的配置，这可能会导致某些意想不到的修改，所以请认真考虑是否应道给予用户这样的特权。</p><blockquote><p>PHP开启路由重写下需要使用</p></blockquote><h2 id="apache-的安全模块"><a href="#apache-的安全模块" class="headerlink" title="apache 的安全模块"></a>apache 的安全模块</h2><p><code>mod_evasive20</code>( 防DDOS攻击)<br><code>mod_limittipconn</code>(针对单站点)配置<br><code>mod_security</code>(防止SQL注入)</p><h2 id="apache日志授予root-700权限"><a href="#apache日志授予root-700权限" class="headerlink" title="apache日志授予root 700权限"></a>apache日志授予root 700权限</h2><p><strong>不需要在日志目录给apache用户读或者写权限许可，因为apache的初始进程用户为root</strong></p><h2 id="禁止PHP解析指点站点目录"><a href="#禁止PHP解析指点站点目录" class="headerlink" title="禁止PHP解析指点站点目录"></a>禁止PHP解析指点站点目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Directory &quot;/var/www/html/bbs/Uploads&quot;&gt;</span><br><span class="line">    Options FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    php_flag engine off # 注意这行</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.kancloud.cn/curder/apache/91272" target="_blank" rel="noopener">https://www.kancloud.cn/curder/apache/91272</a></p><p><a href="https://www.linuxidc.com/Linux/2017-05/143590.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2017-05/143590.htm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Centos7&lt;/li&gt;
&lt;li&gt;Apache/2.4.38&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Apache" scheme="http://hackycy.github.io/categories/Apache/"/>
    
    
      <category term="服务器运维" scheme="http://hackycy.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Apache" scheme="http://hackycy.github.io/tags/Apache/"/>
    
  </entry>
  
</feed>
