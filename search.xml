<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JSON.stringify()知识点总结</title>
    <url>/2021/08/09/JSON-stringify-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JSON是一种轻量级数据格式，可以方便地表示复杂数据结构。JSON对象有两个方法：stringify()和parse()。在简单的情况下，这两个方法分别可以将JavaScript序列化为JSON字符串，以及将JSON解析为原生JavaScript值。</p>
<a id="more"></a>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><code>JSON.stringify()</code>可以把一个JavaScript对象序列化为一个JSON字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> json1 = &#123;</span><br><span class="line">  title: <span class="string">"Json.stringify"</span>,</span><br><span class="line">  author: [</span><br><span class="line">    <span class="string">"浪里行舟"</span></span><br><span class="line">  ],</span><br><span class="line">  year: <span class="number">2021</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> jsonText = <span class="built_in">JSON</span>.stringify(json1);</span><br></pre></td></tr></table></figure>
<p>默认情况下，JSON.stringify()会输出不包含空格或缩进的JSON字符串，因此jsonText的值是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"&#123;"</span>title<span class="string">":"</span>Json.stringify<span class="string">","</span>author<span class="string">":["</span>浪里行舟<span class="string">"],"</span>year<span class="string">":2021&#125;"</span></span><br></pre></td></tr></table></figure>
<p>在序列化JavaScript对象时，所有函数和原型成员都会有意地在结果中省略。此外，值为<code>undefined</code>的任何属性也会被跳过。最终得到的就是所有实例属性均为有效JSON数据类型的表示。</p>
<p>在<code>JSON.stringify()</code>方法一共能接受3个参数，其中两个可选的参数（分别是第二、第三个参数）。这两个可选参数可以用于指定其他序列化JavaScript对象的方式。<strong>第二个参数是过滤器</strong>，可以是数组或函数；<strong>第三个参数是用于缩进结果JSON字符串的选项</strong>。单独或组合使用这些参数可以更好地控制JSON序列化。</p>
<h2 id="第二个参数–过滤器"><a href="#第二个参数–过滤器" class="headerlink" title="第二个参数–过滤器"></a>第二个参数–过滤器</h2><p>如果第二个参数是一个数组，那么<code>JSON.stringify()</code>返回的结果只会包含该数组中列出的对象属性。比如下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> json1 = &#123;</span><br><span class="line">  title: <span class="string">"Json.stringify"</span>,</span><br><span class="line">  author: [</span><br><span class="line">    <span class="string">"浪里行舟"</span></span><br><span class="line">  ],</span><br><span class="line">  year: <span class="number">2021</span>,</span><br><span class="line">  like: <span class="string">'frontend'</span>,</span><br><span class="line">  weixin: <span class="string">'frontJS'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> jsonText = <span class="built_in">JSON</span>.stringify(json1, [<span class="string">'weixin'</span>]);</span><br></pre></td></tr></table></figure>
<p>在这个例子中，JSON.stringify()方法的第二个参数是一个包含一个字符串的数组：”weixin”。它对应着要序列化的对象中的属性，因此结果JSON字符串中只会包含这个属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"&#123;"</span>weixin<span class="string">":"</span>frontJS<span class="string">"&#125;"</span></span><br></pre></td></tr></table></figure>
<p>如果第二个参数是一个函数，则行为又有不同。提供的函数接收两个参数：属性名（key）和属性值（value）。可以根据这个key决定要对相应属性执行什么操作。这个key始终是字符串，只是在值不属于某个键/值对时会是空字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'james'</span>,</span><br><span class="line">    score: <span class="number">100</span>,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'jordon'</span>,</span><br><span class="line">    score: <span class="number">60</span>,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    name: <span class="string">'kobe'</span>,</span><br><span class="line">    score: <span class="number">90</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span> (<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">'score'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="number">100</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'S'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'A'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'B'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'C'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'E'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(students, replacer, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>上面的代码，我们通过replacer将成绩从百分制替换为成绩等级。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"james"</span>,</span><br><span class="line">        <span class="string">"score"</span>: <span class="string">"S"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"jordon"</span>,</span><br><span class="line">        <span class="string">"score"</span>: <span class="string">"C"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"kobe"</span>,</span><br><span class="line">        <span class="string">"score"</span>: <span class="string">"A"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>值得注意的是，如果stringify的第二个参数为函数那么它的返回值<strong>如果是undefined，那么对应的属性不会被序列化</strong>，如果返回其他的值，那么用返回的值替代原来的值进行序列化。</p>
<h2 id="第三个参数–字符串缩进"><a href="#第三个参数–字符串缩进" class="headerlink" title="第三个参数–字符串缩进"></a>第三个参数–字符串缩进</h2><p><code>JSON.stringify()</code>方法的第三个参数控制缩进和空格。在这个参数是数值时，表示每一级缩进的空格数。例如，每级缩进4个空格，可以这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> json1 = &#123;</span><br><span class="line">  title: <span class="string">"Json.stringify"</span>,</span><br><span class="line">  author: [</span><br><span class="line">    <span class="string">"浪里行舟"</span></span><br><span class="line">  ],</span><br><span class="line">  year: <span class="number">2021</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> jsonText = <span class="built_in">JSON</span>.stringify(json1, <span class="literal">null</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<p>这样得到的jsonText格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"Json.stringify"</span>,</span><br><span class="line">    <span class="string">"author"</span>: [</span><br><span class="line">        <span class="string">"浪里行舟"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"year"</span>: <span class="number">2021</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>JSON.stringify()</code>在处理数据的时候同时考虑了数据转换和方便阅读，只不过，<strong>方便阅读这一点，常常被人忽略</strong>。</p>
<h2 id="toJSON-方法–自定义JSON序列化"><a href="#toJSON-方法–自定义JSON序列化" class="headerlink" title="toJSON()方法–自定义JSON序列化"></a>toJSON()方法–自定义JSON序列化</h2><p><strong>有时候，对象需要在<code>JSON.stringify()</code>之上自定义JSON序列化</strong>。此时，可以在要序列化的对象中添加<code>toJSON()</code>方法，序列化时会基于这个方法返回适当的JSON表示。</p>
<p>下面的对象为自定义序列化而添加了一个toJSON()方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> json1 = &#123;</span><br><span class="line">  title: <span class="string">"Json.stringify"</span>,</span><br><span class="line">  author: [</span><br><span class="line">    <span class="string">"浪里行舟"</span></span><br><span class="line">  ],</span><br><span class="line">  year: <span class="number">2021</span>,</span><br><span class="line">  like: <span class="string">'frontend'</span>,</span><br><span class="line">  weixin: <span class="string">'frontJS'</span>,</span><br><span class="line">  toJSON: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.author</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(json1)); <span class="comment">// ["浪里行舟"]</span></span><br></pre></td></tr></table></figure>
<p>注意，<strong>箭头函数不能用来定义toJSON()方法</strong>。主要原因是箭头函数的词法作用域是全局作用域，在这种情况下不合适。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><h2 id="判断数组是否包含某对象，或者判断对象是否相等。"><a href="#判断数组是否包含某对象，或者判断对象是否相等。" class="headerlink" title="判断数组是否包含某对象，或者判断对象是否相等。"></a>判断数组是否包含某对象，或者判断对象是否相等。</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断数组是否包含某对象</span></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'浪里行舟'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'前端工匠'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'前端开发'</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    val = &#123;<span class="attr">name</span>:<span class="string">'浪里行舟'</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data).indexOf(<span class="built_in">JSON</span>.stringify(val)) !== <span class="number">-1</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>我们还可以使用<code>JSON.stringify()</code>方法,来判断两个对象是否相等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断对象是否相等</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1) === <span class="built_in">JSON</span>.stringify(obj2)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>不过这种方式存在着较大的局限性，<strong>对象如果调整了键的顺序，就会判断出错！</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调整对象键的位置后</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1) === <span class="built_in">JSON</span>.stringify(obj2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h2 id="使用localStorage-sessionStorage时"><a href="#使用localStorage-sessionStorage时" class="headerlink" title="使用localStorage/sessionStorage时"></a>使用localStorage/sessionStorage时</h2><p><code>localStorage/sessionStorage</code>默认只能存储字符串，而实际开发中，我们往往需要存储对象类型，那么此时我们需要在存储时利用<code>json.stringify()</code>将对象转为字符串，在取本地缓存时，使用<code>json.parse()</code>转回对象即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setLocalStorage</span>(<span class="params">key,val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.localStorage.setItem(key, <span class="built_in">JSON</span>.stringify(val));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 取数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocalStorage</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> val = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(key));</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">setLocalStorage(<span class="string">'Test'</span>,[<span class="string">'前端工匠'</span>,<span class="string">'浪里行舟'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(getLocalStorage(<span class="string">'Test'</span>));</span><br></pre></td></tr></table></figure>
<h2 id="实现对象深拷贝"><a href="#实现对象深拷贝" class="headerlink" title="实现对象深拷贝"></a>实现对象深拷贝</h2><p>开发中，有时候怕影响原数据，我们常深拷贝出一份数据做任意操作，使用<code>JSON.stringify()</code>与<code>JSON.parse()</code>来实现深拷贝是很不错的选择。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, &#123;</span><br><span class="line">    username: <span class="string">' kobe'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr1));</span><br><span class="line">arr2[<span class="number">2</span>].username = <span class="string">'duncan'</span>; </span><br><span class="line"><span class="built_in">console</span>.log(arr1, arr2)</span><br></pre></td></tr></table></figure>
<p>这是利用<code>JSON.stringify</code>将对象转成JSON字符串，再用<code>JSON.parse</code>把字符串解析成对象，一去一来，新的对象产生了，新对象会开辟新的栈，实现深拷贝。</p>
<p>这种方法虽然可以实现数组或对象深拷贝,<strong>但不能处理函数和正则</strong>，因为这两者基于<code>JSON.stringify</code>和<code>JSON.parse</code>处理后，得到的正则就不再是正则（变为空对象），得到的函数就不再是函数（变为<code>null</code>）了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;, &#123;</span><br><span class="line">  username: <span class="string">' kobe'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr1));</span><br><span class="line">arr2[<span class="number">3</span>].username = <span class="string">'duncan'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1, arr2)</span><br></pre></td></tr></table></figure>
<h1 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h1><p><code>JSON.stringify()</code>虽然功能很强大，但是有些属性无法被stringify，所以在开发中需注意以下几种情况，以免产生一些始料未及的BUG。</p>
<h2 id="被转换值中有-NaN-和-Infinity"><a href="#被转换值中有-NaN-和-Infinity" class="headerlink" title="被转换值中有 NaN 和 Infinity"></a>被转换值中有 NaN 和 Infinity</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myObj = &#123;</span><br><span class="line">  name: <span class="string">"浪里行舟"</span>,</span><br><span class="line">  age: <span class="literal">Infinity</span>,</span><br><span class="line">  money: <span class="literal">NaN</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(myObj));</span><br><span class="line"><span class="comment">// &#123;"name":"浪里行舟","age":null,"money":null&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify([<span class="literal">NaN</span>, <span class="literal">Infinity</span>])</span><br><span class="line"><span class="comment">// [null,null]</span></span><br></pre></td></tr></table></figure>
<h2 id="被转换值中有-undefined、任意的函数以及-symbol-值"><a href="#被转换值中有-undefined、任意的函数以及-symbol-值" class="headerlink" title="被转换值中有 undefined、任意的函数以及 symbol 值"></a>被转换值中有 undefined、任意的函数以及 symbol 值</h2><p>分为两种情况：</p>
<h3 id="数组-undefined、任意的函数以及symbol值在序列化的过程中会被转换成-null"><a href="#数组-undefined、任意的函数以及symbol值在序列化的过程中会被转换成-null" class="headerlink" title="数组,undefined、任意的函数以及symbol值在序列化的过程中会被转换成 null"></a>数组,<code>undefined</code>、任意的函数以及<code>symbol</code>值在序列化的过程中会被转换成 <code>null</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify([<span class="literal">undefined</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;, <span class="built_in">Symbol</span>(<span class="string">""</span>)]);</span><br><span class="line"><span class="comment">// '[null,null,null]'</span></span><br></pre></td></tr></table></figure>
<h3 id="非数组-undefined、任意的函数以及symbol值在序列化的过程中会被忽略"><a href="#非数组-undefined、任意的函数以及symbol值在序列化的过程中会被忽略" class="headerlink" title="非数组,undefined、任意的函数以及symbol值在序列化的过程中会被忽略"></a>非数组,undefined、任意的函数以及symbol值在序列化的过程中会被忽略</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(&#123; <span class="attr">x</span>: <span class="literal">undefined</span>, <span class="attr">y</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;, <span class="attr">z</span>: <span class="built_in">Symbol</span>(<span class="string">""</span>) &#125;);</span><br><span class="line"><span class="comment">// '&#123;&#125;'</span></span><br></pre></td></tr></table></figure>
<h2 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h2><p>如果一个对象的属性值通过某种间接的方式指回该对象本身，那么就是一个循环引用。比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> bar = &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    c: foo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">  b: bar</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(foo)</span><br></pre></td></tr></table></figure>
<p>这种情况下，序列化会报错的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误信息</span></span><br><span class="line">Uncaught <span class="built_in">ReferenceError</span>: foo is not defined</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">3</span>:<span class="number">8</span></span><br></pre></td></tr></table></figure>
<h2 id="含有不可枚举的属性值时"><a href="#含有不可枚举的属性值时" class="headerlink" title="含有不可枚举的属性值时"></a>含有不可枚举的属性值时</h2><p>不可枚举的属性默认会被忽略：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> personObj = <span class="built_in">Object</span>.create(<span class="literal">null</span>, &#123;</span><br><span class="line">  name: &#123; <span class="attr">value</span>: <span class="string">"浪里行舟"</span>, <span class="attr">enumerable</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  year: &#123; <span class="attr">value</span>: <span class="string">"2021"</span>, <span class="attr">enumerable</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(personObj)) <span class="comment">// &#123;"year":"2021"&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>JSON.stringify()</code>用于将JavaScript对象序列化为JSON字符串，这方法有一些选项可以用来改变默认的行为，以实现过滤或修改流程。不过也应该注意有些属性是无法被 stringify，所以开发时候应该避开这些坑！</p>
<blockquote>
<p>文章来源：<strong>前端工匠</strong>:<a href="https://mp.weixin.qq.com/s/sxAyJO8wWxpkapwLB1i9Yw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/sxAyJO8wWxpkapwLB1i9Yw</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome DevTools查看页面是否开启gzip压缩</title>
    <url>/2021/06/24/Chrome-DevTools%E6%9F%A5%E7%9C%8B%E9%A1%B5%E9%9D%A2%E6%98%AF%E5%90%A6%E5%BC%80%E5%90%AFgzip%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>在自身不确定服务器是否开启了支持gzip时可以通过以下方法查看。</strong></p>
<p><strong>方法一</strong></p>
<p>打开<code>Chrome DevTools</code>，选中<code>Network</code>面板右键点击表头</p>
<a id="more"></a>
<p><img src="devtool.png" alt></p>
<p>如果<code>Content-Encoding</code>中有<code>gzip</code>值则代表已经开启支持gzip。</p>
<p><strong>方法二</strong></p>
<p>打开网址<a href="http://tool.chinaz.com/Gzips" target="_blank" rel="noopener">http://tool.chinaz.com/Gzips</a>进行查询，如：</p>
<p><img src="chinaz.png" alt></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>手写实现Promise</title>
    <url>/2021/06/11/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0Promise/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Promise的出现"><a href="#Promise的出现" class="headerlink" title="Promise的出现"></a>Promise的出现</h1><p>在 Promise 出现以前，在我们处理多个异步请求嵌套时，代码往往是个回掉地狱</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./name.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">  fs.readFile(data, <span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    fs.readFile(data,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>为了拿到回调的结果，我们必须一层一层的嵌套，可以说是相当恶心了。而且基本上我们还要对每次请求的结果进行一系列的处理，使得代码变的更加难以阅读和难以维护，这就是传说中臭名昭著的<strong>回调地狱</strong>～产生<strong>回调地狱</strong>的原因归结起来有两点：</p>
<ol>
<li><strong>嵌套调用</strong>，第一个函数的输出往往是第二个函数的输入；</li>
<li><strong>处理多个异步请求并发</strong>，开发时往往需要同步请求最终的结果。</li>
</ol>
<a id="more"></a>
<p>原因分析出来后，那么问题的解决思路就很清晰了：</p>
<ol>
<li><strong>消灭嵌套调用</strong>：通过 Promise 的链式调用可以解决；</li>
<li><strong>合并多个任务的请求结果</strong>：使用 Promise.all 获取合并多个任务的错误处理。</li>
</ol>
<p>Promise 正是用一种更加友好的代码组织方式，解决了异步嵌套的问题。</p>
<p>我们来看看上面的例子用 Promise 实现是什么样的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filename, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read(<span class="string">'./name.txt'</span>).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> read(data) </span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> read(data)  </span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在传统的异步编程中，如果异步之间存在依赖关系，就需要通过层层嵌套回调的方式满足这种依赖，如果嵌套层数过多，可读性和可以维护性都会变得很差，产生所谓的“回调地狱”，而 Promise 将嵌套调用改为链式调用，增加了可阅读性和可维护性。也就是说，Promise 解决的是异步编码风格的问题。 <strong>那 Promise 的业界实现都有哪些呢？</strong> 业界比较著名的实现 Promise 的类库有 bluebird、Q、ES6-Promise。</p>
<h1 id="Promise-A-手写步骤分析"><a href="#Promise-A-手写步骤分析" class="headerlink" title="Promise/A+手写步骤分析"></a>Promise/A+手写步骤分析</h1><p>我们想要手写一个 Promise，就要遵循 <a href="https://promisesaplus.com/" target="_blank" rel="noopener">Promise/A+</a> 规范，业界所有 Promise 的类库都遵循这个规范。</p>
<p>其实 Promise/A+ 规范对如何实现一个符合标准的 Promise 类库已经阐述的很详细了。每一行代码在 Promise/A+ 规范中都有迹可循，所以在下面的实现的过程中，我会尽可能的将代码和 Promise/A+ 规范一一对应起来。</p>
<blockquote>
<p>中文译文：<a href="https://www.ituring.com.cn/article/66566" target="_blank" rel="noopener">https://www.ituring.com.cn/article/66566</a></p>
<p>本文讲解使用ES5方式实现，代码仓库中补充ES6 class方式实现</p>
</blockquote>
<p>结合Promise/A+的规范，边分析基础特征，边一步步实现代码：</p>
<h2 id="promise-有三个状态：pending，fulfilled，or-rejected"><a href="#promise-有三个状态：pending，fulfilled，or-rejected" class="headerlink" title="promise 有三个状态：pending，fulfilled，or rejected"></a>promise 有三个状态：<code>pending</code>，<code>fulfilled</code>，or <code>rejected</code></h2><p>根据三种状态，我们先定义成枚举，方便后续使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> State = &#123;</span><br><span class="line">  PENDING: <span class="built_in">Symbol</span>.for(<span class="string">'pending'</span>),</span><br><span class="line">  FULFILLED: <span class="built_in">Symbol</span>.for(<span class="string">'fulfilled'</span>),</span><br><span class="line">  REJECTED: <span class="built_in">Symbol</span>.for(<span class="string">'rejected'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当处于某一种状态时又需要满足以下的条件：</p>
<ul>
<li>等待态（Pending）<ul>
<li>可以迁移至执行态或拒绝态</li>
</ul>
</li>
<li>执行态（Fulfilled）<ul>
<li>不能迁移至其他任何状态</li>
<li>必须拥有一个<strong>不可变</strong>的终值</li>
</ul>
</li>
<li>拒绝态（Rejected）<ul>
<li>不能迁移至其他任何状态</li>
<li>必须拥有一个<strong>不可变</strong>的据因</li>
</ul>
</li>
</ul>
<p>根据以上条件当改变状态时，抽象成一个通用改变State的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this需要绑定指向Promise实例</span></span><br><span class="line"><span class="comment"> * @param &#123;State&#125; state </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeState</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === state) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不能迁移至相同状态'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (state === State.PENDING) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不允许迁移至Pending状态'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === State.FULFILLED || <span class="keyword">this</span>.state === State.REJECTED) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'当前State不为Pending状态时则不能再迁移至其他任何状态'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.state = state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Promise-是一个拥有-then-方法的对象或函数，且new-Promise-时，需要传递一个executor-函数执行器。"><a href="#Promise-是一个拥有-then-方法的对象或函数，且new-Promise-时，需要传递一个executor-函数执行器。" class="headerlink" title="Promise 是一个拥有 then 方法的对象或函数，且new Promise()时，需要传递一个executor()函数执行器。"></a>Promise 是一个拥有 <code>then</code> 方法的对象或函数，且<code>new Promise()</code>时，需要传递一个<code>executor()</code>函数执行器。</h2><p>那么我们先定义两个工具函数，后续也会用到</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测是否是一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">check</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">typeof</span> check === <span class="string">'function'</span> || <span class="built_in">Object</span>.prototype.toString.call(check) === <span class="string">'[object Function]'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测是否是一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">check</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> check === <span class="built_in">Object</span>(check)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么根据定义可以实现一下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isFunction(executor)) &#123;</span><br><span class="line">    executor()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="executor并接受两个参数，分别是fulfill和reject，且该函数执行器立即执行。"><a href="#executor并接受两个参数，分别是fulfill和reject，且该函数执行器立即执行。" class="headerlink" title="executor并接受两个参数，分别是fulfill和reject，且该函数执行器立即执行。"></a><code>executor</code>并接受两个参数，分别是<code>fulfill</code>和<code>reject</code>，且该函数执行器立即执行。</h2><p>并且这里要结合第一点：</p>
<p><code>Promise</code>中有变量来代表当前的状态，且状态默认为Pending</p>
<p><code>Promise</code>有一个<code>value</code>保存成功状态的值，可以是<code>undefined/thenable/promise</code>；「规范 Promise/A+ 1.3」</p>
<p><code>Promise</code> 有一个<code>reason</code>保存失败状态的值；「规范 Promise/A+ 1.5」</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用方法时改变Promise状态且拥有一个终值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  changeState.call(<span class="keyword">this</span>, State.FULFILLED)</span><br><span class="line">  <span class="keyword">this</span>.value = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法时改变Promise状态且拥有一个据因</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  changeState.call(<span class="keyword">this</span>, State.REJECTED)</span><br><span class="line">  <span class="keyword">this</span>.reason = reason</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.state = State.PENDING</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isFunction(executor)) &#123;</span><br><span class="line">    executor(fulfill.bind(<span class="keyword">this</span>), reject.bind(<span class="keyword">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通常fulfill的定义也可以表示为resolve，但是本文和后续方法名字有点冲突不方便查看所以定义为fulfill，平常所用的resolve意义一样。</p>
</blockquote>
<h2 id="一个-promise-必须提供一个-then-方法以访问其当前值、终值和据因。且接受两个参数onFulfilled-onRejected"><a href="#一个-promise-必须提供一个-then-方法以访问其当前值、终值和据因。且接受两个参数onFulfilled-onRejected" class="headerlink" title="一个 promise 必须提供一个 then 方法以访问其当前值、终值和据因。且接受两个参数onFulfilled, onRejected"></a>一个 promise 必须提供一个 <code>then</code> 方法以访问其当前值、终值和据因。且接受两个参数<code>onFulfilled</code>, <code>onRejected</code></h2><p><code>onFulfilled</code> 和 <code>onRejected</code> 都是可选参数，并且两者不为函数则都需要忽略（内部实现用默认函数替代）</p>
<p>如果 <code>onFulfilled</code> 是函数：</p>
<ul>
<li>当 <code>promise</code> 执行结束后其必须被调用，其第一个参数为 <code>promise</code> 的终值</li>
<li>在 <code>promise</code> 执行结束前其不可被调用</li>
<li>其调用次数不可超过一次</li>
</ul>
<p>如果 <code>onRejected</code> 是函数：</p>
<ul>
<li>当 <code>promise</code> 被拒绝执行后其必须被调用，其第一个参数为 <code>promise</code> 的据因</li>
<li>在 <code>promise</code> 被拒绝执行前其不可被调用</li>
<li>其调用次数不可超过一次</li>
</ul>
<p><code>onFulfilled</code> 和 <code>onRejected</code> 只有在<a href="http://es5.github.io/#x10.3" target="_blank" rel="noopener">执行环境</a>堆栈仅包含<strong>平台代码</strong>时才可被调用（后面再解释）</p>
<p>根据以上定义，完善现在的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加try catch保证稳定执行，因为changeState在不正当切换State时会抛出错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    changeState.call(<span class="keyword">this</span>, State.FULFILLED)</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="comment">// 当状态改变时，需要遍历执行队列中的任务</span></span><br><span class="line">    <span class="keyword">this</span>.fulfillQueue.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123; fn() &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    changeState.call(<span class="keyword">this</span>, State.REJECTED)</span><br><span class="line">    <span class="keyword">this</span>.reason = reason</span><br><span class="line">    <span class="comment">// 当状态改变时，需要遍历执行队列中的任务</span></span><br><span class="line">    <span class="keyword">this</span>.rejectQueue.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123; fn() &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.state = State.PENDING</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保存异步执行的队列 &#123; fulfill, reject &#125;</span></span><br><span class="line">  <span class="keyword">this</span>.fulfillQueue = []</span><br><span class="line">  <span class="keyword">this</span>.rejectQueue = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isFunction(executor)) &#123;</span><br><span class="line">    executor(fulfill.bind(<span class="keyword">this</span>), reject.bind(<span class="keyword">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === State.FULFILLED) &#123;</span><br><span class="line">    onFulfilled(<span class="keyword">this</span>.value)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === State.REJECTED) &#123;</span><br><span class="line">    onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当还没执行时不可以被调用，那么需要将此保存起来，在后续状态改变后调用</span></span><br><span class="line">    <span class="keyword">this</span>.fulfillQueue.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      onFulfilled(_self.value)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.rejectQueue.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      onRejected(_self.reason)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="then-方法必须返回一个-promise-对象"><a href="#then-方法必须返回一个-promise-对象" class="headerlink" title="then 方法必须返回一个 promise 对象"></a><code>then</code> 方法必须返回一个 <code>promise</code> 对象</h2><p>Promise的优势就在于链式调用，在我们使用Promise的时候，当then函数中返回了一个值，不管是什么值，我们都能在下一个then中获取到，这就是所谓的<strong>then的链式调用</strong>。而且，当我们不再<code>then</code>中放入参数，例如：<code>promise.then().then()</code>，那么其后面的<code>then</code>依然可以得到之前<code>then</code>返回的值，这就是<strong>值得穿透</strong>。这也是规范实现得思路。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise2 = promise1.then(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure>
<ul>
<li>如果 <code>onFulfilled</code> 或者 <code>onRejected</code> 返回一个值 <code>x</code> ，则运行下面的 <strong>Promise 解决过程</strong>：<code>[[Resolve]](promise2, x)</code></li>
<li>如果 <code>onFulfilled</code> 或者 <code>onRejected</code> 抛出一个异常 <code>e</code> ，则 <code>promise2</code> 必须拒绝执行，并返回拒因 <code>e</code></li>
<li>如果 <code>onFulfilled</code> 不是函数且 <code>promise1</code> 成功执行， <code>promise2</code> 必须成功执行并返回相同的值</li>
<li>如果 <code>onRejected</code> 不是函数且 <code>promise1</code> 拒绝执行， <code>promise2</code> 必须拒绝执行并返回相同的据因</li>
</ul>
<blockquote>
<p> <strong>理解上面的“返回”部分非常重要，即：不论 <code>promise1</code> 被 <code>reject</code> 还是被 <code>resolve</code> 时 <code>promise2</code> 都会被 <code>resolve</code>，只有出现异常时才会被 <code>rejected</code></strong>。</p>
</blockquote>
<p>分析一下上述可以看到，then方法需要返回一个新的Promise对象（promise2）,且需要进行处理promise1中<code>then</code>两个参数的返回值</p>
<p>并且多了一个<code>resolve</code>方法定义<code>Promise解决过程</code>，方法的参数传入<code>（promise2，x）</code>。具体下面再实现，先进行调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise解决过程</span></span><br><span class="line"><span class="comment"> * @param &#123;Promise&#125; promise2 </span></span><br><span class="line"><span class="comment"> * @param &#123;value&#125; x </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">promise2, x</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Promise类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.state = State.PENDING</span><br><span class="line">   <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">   <span class="keyword">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 保存异步执行的队列 &#123; fulfill, reject &#125;</span></span><br><span class="line">   <span class="keyword">this</span>.fulfillQueue = []</span><br><span class="line">   <span class="keyword">this</span>.rejectQueue = []</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> (isFunction(executor)) &#123;</span><br><span class="line">     executor(fulfill.bind(<span class="keyword">this</span>), reject.bind(<span class="keyword">this</span>))</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> _self = <span class="keyword">this</span> <span class="comment">// 处理this指向</span></span><br><span class="line">   <span class="comment">// 如果 onFulfilled 不是函数且 promise1 成功执行， promise2 必须成功执行并返回相同的值</span></span><br><span class="line">   onFulfilled = isFunction(onFulfilled) ? onFulfilled : <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123; <span class="keyword">return</span> v &#125;</span><br><span class="line">   <span class="comment">// 如果 onRejected 不是函数且 promise1 拒绝执行， promise2 必须拒绝执行并返回相同的据因</span></span><br><span class="line">   onRejected = isFunction(onRejected) ? onRejected : <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; <span class="keyword">throw</span> err &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (_self.state === State.FULFILLED) &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 如果 onFulfilled 或者 onRejected 返回一个值 x ，则运行下面的 Promise 解决过程</span></span><br><span class="line">         <span class="keyword">const</span> x = onFulfilled(_self.value)</span><br><span class="line">         resolve(promise2, x)</span><br><span class="line">       &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">         <span class="comment">// 如果 onFulfilled 或者 onRejected 抛出一个异常 e ，则 promise2 必须拒绝执行，并返回拒因 e</span></span><br><span class="line">         reject.call(promise2, e)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_self.state === State.REJECTED) &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 如果 onFulfilled 或者 onRejected 返回一个值 x ，则运行下面的 Promise 解决过程</span></span><br><span class="line">         <span class="keyword">const</span> x = onRejected(_self.reason)</span><br><span class="line">         resolve(promise2, x)</span><br><span class="line">       &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">         <span class="comment">// 如果 onFulfilled 或者 onRejected 抛出一个异常 e ，则 promise2 必须拒绝执行，并返回拒因 e</span></span><br><span class="line">         reject.call(promise2, e)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 当还没执行时不可以被调用，那么需要将此保存起来，在后续状态改变后调用</span></span><br><span class="line">       _self.fulfillQueue.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        onFulfilled(_self.value)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      _self.rejectQueue.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        onRejected(_self.reason)</span><br><span class="line">      &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> promise2</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Promise解决过程-The-Promise-Resolution-Procedure"><a href="#Promise解决过程-The-Promise-Resolution-Procedure" class="headerlink" title="Promise解决过程 (The Promise Resolution Procedure)"></a>Promise解决过程 (The Promise Resolution Procedure)</h2><p>我们先看看规范是怎么定义的：</p>
<p>Promise 解决过程是一个抽象的操作，其需输入一个 promise 和一个值，我们表示为<code>[[Resolve]](promise, x)</code>，如果 x 有 then 方法且看上去像一个 Promise ，解决程序即尝试使 promise 接受 x 的状态；否则其用 x 的值来执行 promise 。</p>
<blockquote>
<p> 这种<code>thenable</code> 的特性使得 Promise 的实现更具有通用性：只要其暴露出一个遵循 Promise/A+ 协议的 then 方法即可；这同时也使遵循 Promise/A+ 规范的实现可以与那些不太规范但可用的实现能良好共存。</p>
</blockquote>
<p>运行 <code>[[Resolve]](promise, x)</code>需遵循以下步骤：</p>
<ul>
<li><p>x 与 promise 相等<br>如果 promise 和 x 指向同一对象，以 <code>TypeError</code> 为据因拒绝执行 promise</p>
</li>
<li><p>x 为 Promise时 ，则使 promise 接受 x 的状态 ：</p>
<ul>
<li><p>如果 x 处于等待态， promise 需保持为等待态直至 x 被执行或拒绝</p>
</li>
<li><p>如果 x 处于执行态，用相同的值执行 promise</p>
</li>
<li><p>如果 x 处于拒绝态，用相同的据因拒绝 promise</p>
</li>
</ul>
</li>
<li><p>x 为对象或函数时</p>
<ul>
<li><p>把 <code>x.then</code> 赋值给 then </p>
</li>
<li><p>如果取 <code>x.then</code> 的值时抛出错误 e ，则以 e 为据因拒绝 promise</p>
</li>
<li><p>如果 then 是函数，将 x 作为函数的作用域<code>this</code> 调用之。传递两个回调函数作为参数，第一个参数叫做 <code>resolvePromise</code> ，第二个参数叫做 <code>rejectPromise</code>:<br>(1) 如果 <code>resolvePromise</code> 以值 y 为参数被调用，则运行 <code>[[Resolve]](promise, y)</code><br>(2) 如果 <code>rejectPromise</code> 以据因 r 为参数被调用，则以据因 r 拒绝 promise<br>(3) 如果 <code>resolvePromise</code> 和 <code>rejectPromise</code> 均被调用，或者被同一参数调用了多次，则优先采用首次调用并忽略剩下的调用<br>(4) 如果调用 then 方法抛出了异常 e， 如果<code>resolvePromise</code> 或 <code>rejectPromise</code> 已经被调用，则忽略之。否则以 e 为据因拒绝 promise<br>(5) 如果 then 不是函数，以 x 为参数执行 promise</p>
</li>
<li><p>如果 x 不为对象或者函数，以 x 为参数执行 promise</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p> 注：如果一个 promise 被一个循环的 <code>thenable</code> 链中的对象解决，而 <code>[[Resolve]](promise, thenable)</code>的递归性质又使得其被再次调用，根据上述的算法将会陷入无限递归之中。算法虽不强制要求，但也鼓励施者检测这样的递归是否存在，若检测到存在则以一个可识别的<code>TypeError</code>为据因来拒绝 promise。</p>
</blockquote>
<p>那么根据定义我们来完善一下先前空实现的<code>resolve</code>方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise解决过程</span></span><br><span class="line"><span class="comment"> * @param &#123;Promise&#125; promise2 </span></span><br><span class="line"><span class="comment"> * @param &#123;value&#125; x </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">promise2, x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="comment">// 如果 promise 和 x 指向同一对象，以 TypeError 为据因拒绝执行 promise</span></span><br><span class="line">    reject.call(promise2, <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'x 与 promise2 不能相等'</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &amp;&amp; x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x.state === State.PENDING) &#123;</span><br><span class="line">      <span class="comment">// 如果 x 处于等待态， promise 需保持为等待态直至 x 被执行或拒绝</span></span><br><span class="line">      x.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        resolve(promise2, value)</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        reject.call(promise2, reason)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x.state === State.FULFILLED) &#123;</span><br><span class="line">      <span class="comment">// 如果 x 处于执行态，用相同的值执行 promise</span></span><br><span class="line">      resolve(promise2, x.value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果 x 处于拒绝态，用相同的据因拒绝 promise</span></span><br><span class="line">      reject.call(promise2, x.reason)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isObject(x) || isFunction(x)) &#123;</span><br><span class="line">    <span class="comment">// x 为对象或函数时</span></span><br><span class="line">    <span class="comment">// 由于不允许调用多次，采用一个变量记录是否已经被调用过</span></span><br><span class="line">    <span class="keyword">let</span> called = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 把 `x.then` 赋值给 then </span></span><br><span class="line">      <span class="keyword">const</span> then = x.then</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果then是个函数</span></span><br><span class="line">      <span class="keyword">if</span> (isFunction(then)) &#123;</span><br><span class="line"></span><br><span class="line">        then.call(x, <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// resolvePromise</span></span><br><span class="line">          <span class="keyword">if</span> (!called) &#123;</span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            resolve(promise2, y)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// resolvePromise</span></span><br><span class="line">          <span class="keyword">if</span> (!called) &#123;</span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            reject.call(promise2, r)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不是函数</span></span><br><span class="line">        fulfill.call(promise2, x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!called) &#123;</span><br><span class="line">        <span class="comment">// 如果已经调用过则忽略</span></span><br><span class="line">        <span class="comment">// 如果取 `x.then` 的值时抛出错误 e ，则以 e 为据因拒绝 promise</span></span><br><span class="line">        reject.call(promise2, e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 x 不为对象或者函数</span></span><br><span class="line">    fulfill.call(promise2, x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>看到这里问题来了，Promise的异步概念还没有体现到，这是因为规范后面有一个注释：</p>
<p>有英文能力的可以看一下原文：<a href="https://promisesaplus.com/#notes" target="_blank" rel="noopener">https://promisesaplus.com/#notes</a></p>
<p><strong>注释</strong></p>
<p>在本文第四点提到的<strong>平台代码</strong>指的是引擎、环境以及 promise 的实施代码。实践中要确保 <code>onFulfilled</code> 和 <code>onRejected</code> 方法异步执行，且应该在 <code>then</code> 方法被调用的那一轮事件循环之后的新执行栈中执行。这个事件队列可以采用“宏任务（macro-task）”机制或者“微任务（micro-task）”机制来实现。由于 promise 的实施代码本身就是平台代码（<strong>译者注：</strong>即都是 JavaScript），故代码自身在处理在处理程序时可能已经包含一个任务调度队列。</p>
<p><strong>译者注：</strong>这里提及了 macrotask 和 microtask 两个概念，这表示异步任务的两种分类。在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直至两个队列的任务都取完。</p>
<p>两个类别的具体分类如下：</p>
<ul>
<li><strong>macro-task:</strong> script（整体代码）, <code>setTimeout</code>, <code>setInterval</code>, <code>setImmediate</code>, <code>I/O</code>, <code>UI rendering</code></li>
<li><strong>micro-task:</strong> <code>process.nextTick</code>, <code>Promises</code>（这里指浏览器实现的原生 Promise）, <code>Object.observe</code>, <code>MutationObserver</code></li>
</ul>
<p>详见 <a href="http://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context" target="_blank" rel="noopener">stackoverflow 解答</a> 或 <a href="http://wengeezhang.com/?p=11" target="_blank" rel="noopener">这篇博客</a></p>
</blockquote>
<h2 id="使用setTimeout模拟异步处理"><a href="#使用setTimeout模拟异步处理" class="headerlink" title="使用setTimeout模拟异步处理"></a>使用setTimeout模拟异步处理</h2><p>最终完善一下<code>then</code>方法，直接贴所有代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尝试手写实现Promise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">check</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">typeof</span> check === <span class="string">'function'</span> || <span class="built_in">Object</span>.prototype.toString.call(check) === <span class="string">'[object Function]'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">check</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> check === <span class="built_in">Object</span>(check)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 的三种状态</span></span><br><span class="line"><span class="keyword">const</span> State = &#123;</span><br><span class="line">  PENDING: <span class="built_in">Symbol</span>.for(<span class="string">'pending'</span>),</span><br><span class="line">  FULFILLED: <span class="built_in">Symbol</span>.for(<span class="string">'fulfilled'</span>),</span><br><span class="line">  REJECTED: <span class="built_in">Symbol</span>.for(<span class="string">'rejected'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this需要绑定指向Promise实例</span></span><br><span class="line"><span class="comment"> * @param &#123;State&#125; state </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeState</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === state) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不能迁移至相同状态'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (state === State.PENDING) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不允许迁移至Pending状态'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === State.FULFILLED || <span class="keyword">this</span>.state === State.REJECTED) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不能迁移至其他任何状态'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.state = state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    changeState.call(<span class="keyword">this</span>, State.FULFILLED)</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="comment">// 当状态改变时，需要遍历执行队列中的任务</span></span><br><span class="line">    <span class="keyword">this</span>.fulfillQueue.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123; fn() &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    changeState.call(<span class="keyword">this</span>, State.REJECTED)</span><br><span class="line">    <span class="keyword">this</span>.reason = reason</span><br><span class="line">    <span class="comment">// 当状态改变时，需要遍历执行队列中的任务</span></span><br><span class="line">    <span class="keyword">this</span>.rejectQueue.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123; fn() &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise解决过程</span></span><br><span class="line"><span class="comment"> * @param &#123;Promise&#125; promise2 </span></span><br><span class="line"><span class="comment"> * @param &#123;value&#125; x </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">promise2, x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="comment">// 如果 promise 和 x 指向同一对象，以 TypeError 为据因拒绝执行 promise</span></span><br><span class="line">    reject.call(promise2, <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'x 与 promise2 不能相等'</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &amp;&amp; x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x.state === State.PENDING) &#123;</span><br><span class="line">      <span class="comment">// 如果 x 处于等待态， promise 需保持为等待态直至 x 被执行或拒绝</span></span><br><span class="line">      x.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        resolve(promise2, value)</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        reject.call(promise2, reason)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x.state === State.FULFILLED) &#123;</span><br><span class="line">      <span class="comment">// 如果 x 处于执行态，用相同的值执行 promise</span></span><br><span class="line">      resolve(promise2, x.value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果 x 处于拒绝态，用相同的据因拒绝 promise</span></span><br><span class="line">      reject.call(promise2, x.reason)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isObject(x) || isFunction(x)) &#123;</span><br><span class="line">    <span class="comment">// x 为对象或函数时</span></span><br><span class="line">    <span class="comment">// 由于不允许调用多次，采用一个变量记录是否已经被调用过</span></span><br><span class="line">    <span class="keyword">let</span> called = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 把 `x.then` 赋值给 then </span></span><br><span class="line">      <span class="keyword">const</span> then = x.then</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果then是个函数</span></span><br><span class="line">      <span class="keyword">if</span> (isFunction(then)) &#123;</span><br><span class="line"></span><br><span class="line">        then.call(x, <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// resolvePromise</span></span><br><span class="line">          <span class="keyword">if</span> (!called) &#123;</span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            resolve(promise2, y)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// resolvePromise</span></span><br><span class="line">          <span class="keyword">if</span> (!called) &#123;</span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            reject.call(promise2, r)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不是函数</span></span><br><span class="line">        fulfill.call(promise2, x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!called) &#123;</span><br><span class="line">        <span class="comment">// 如果已经调用过则忽略</span></span><br><span class="line">        <span class="comment">// 如果取 `x.then` 的值时抛出错误 e ，则以 e 为据因拒绝 promise</span></span><br><span class="line">        reject.call(promise2, e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 x 不为对象或者函数</span></span><br><span class="line">    fulfill.call(promise2, x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.state = State.PENDING</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">this</span>.reason = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保存异步执行的队列 &#123; fulfill, reject &#125;</span></span><br><span class="line">  <span class="keyword">this</span>.fulfillQueue = []</span><br><span class="line">  <span class="keyword">this</span>.rejectQueue = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isFunction(executor)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(fulfill.bind(<span class="keyword">this</span>), reject.bind(<span class="keyword">this</span>))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject.call(<span class="keyword">this</span>, e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _self = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// promise2 必须成功执行并返回相同的值</span></span><br><span class="line">  onFulfilled = isFunction(onFulfilled) ? onFulfilled : <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123; <span class="keyword">return</span> v &#125;</span><br><span class="line">  <span class="comment">// promise2 必须拒绝执行并返回相同的据因</span></span><br><span class="line">  onRejected = isFunction(onRejected) ? onRejected : <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; <span class="keyword">throw</span> err &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_self.state === State.FULFILLED) &#123;</span><br><span class="line">      <span class="comment">// 重点步骤</span></span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 如果 onFulfilled 或者 onRejected 返回一个值 x ，则运行下面的 Promise 解决过程</span></span><br><span class="line">          <span class="keyword">const</span> x = onFulfilled(_self.value)</span><br><span class="line">          resolve(promise2, x)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="comment">// 如果 onFulfilled 或者 onRejected 抛出一个异常 e ，则 promise2 必须拒绝执行，并返回拒因 e</span></span><br><span class="line">          reject.call(promise2, e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_self.state === State.REJECTED) &#123;</span><br><span class="line">      <span class="comment">// 重点步骤</span></span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 如果 onFulfilled 或者 onRejected 返回一个值 x ，则运行下面的 Promise 解决过程</span></span><br><span class="line">          <span class="keyword">const</span> x = onRejected(_self.reason)</span><br><span class="line">          resolve(promise2, x)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="comment">// 如果 onFulfilled 或者 onRejected 抛出一个异常 e ，则 promise2 必须拒绝执行，并返回拒因 e</span></span><br><span class="line">          reject.call(promise2, e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 当还没执行时不可以被调用，那么需要将此保存起来，在后续状态改变后调用</span></span><br><span class="line">      _self.fulfillQueue.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 重点步骤</span></span><br><span class="line">          setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 onFulfilled 或者 onRejected 返回一个值 x ，则运行下面的 Promise 解决过程</span></span><br><span class="line">            <span class="keyword">const</span> x = onFulfilled(_self.value)</span><br><span class="line">            resolve(promise2, x)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="comment">// 如果 onFulfilled 或者 onRejected 抛出一个异常 e ，则 promise2 必须拒绝执行，并返回拒因 e</span></span><br><span class="line">            reject.call(promise2, e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      _self.rejectQueue.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 重点步骤</span></span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 onFulfilled 或者 onRejected 返回一个值 x ，则运行下面的 Promise 解决过程</span></span><br><span class="line">            <span class="keyword">const</span> x = onRejected(_self.reason)</span><br><span class="line">            resolve(promise2, x)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="comment">// 如果 onFulfilled 或者 onRejected 抛出一个异常 e ，则 promise2 必须拒绝执行，并返回拒因 e</span></span><br><span class="line">            reject.call(promise2, e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span></span><br></pre></td></tr></table></figure>
<h1 id="测试手写Promise-A-代码"><a href="#测试手写Promise-A-代码" class="headerlink" title="测试手写Promise/A+代码"></a>测试手写Promise/A+代码</h1><p>需要安装<code>mocha</code>以及<code>promises-aplus-tests</code>库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -D mocha promises-aplus-tests</span><br></pre></td></tr></table></figure>
<p>新建<strong>test.js</strong>文件，并添加以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'./promise-step'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> adapter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res, rej;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        deferred: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                promise: <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">                    res = resolve;</span><br><span class="line">                    rej = reject;</span><br><span class="line">                &#125;),</span><br><span class="line">                resolve: res,</span><br><span class="line">                reject: rej,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"Promises/A+ Tests"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"promises-aplus-tests"</span>).mocha(adapter);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>手动执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./node_modules/mocha/bin/mocha</span><br></pre></td></tr></table></figure>
<p>或者在<code>package.json</code>中添加<code>scripts</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "mocha"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>部分运行结果如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    The value is `1` with `Number.prototype` modified to have a `<span class="keyword">then</span>` method</span><br><span class="line">      ✓ already-fulfilled</span><br><span class="line">      ✓ immediately-fulfilled</span><br><span class="line">      ✓ eventually-fulfilled (56ms)</span><br><span class="line">      ✓ already-rejected</span><br><span class="line">      ✓ immediately-rejected</span><br><span class="line">      ✓ eventually-rejected (56ms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">872 passing (16s)</span><br></pre></td></tr></table></figure>
<h1 id="Promise的API"><a href="#Promise的API" class="headerlink" title="Promise的API"></a>Promise的API</h1><h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h2><p>我们来看看MDN上的定义：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve" target="_blank" rel="noopener">Promise.resolve()</a></p>
<p><code>**Promise.resolve(value)**</code>方法返回一个以给定值解析后的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a> 对象。如果这个值是一个 promise ，那么将返回这个 promise如果这个值是thenable（即带有<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then" target="_blank" rel="noopener"><code>&quot;then&quot;</code></a>方法），返回的promise会“跟随”这个thenable的对象，采用它的最终状态；否则返回的promise将以此值完成。此函数将类promise对象的多层嵌套展平。</p>
<p>根据定义我们来手写实现一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果value是个Promise，那么直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (value &amp;&amp; value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isFunction(value.then)) &#123;</span><br><span class="line">      x.then(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        resolve(v)</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        reject(e)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试一下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Promise.resolve(new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    resolve('ok');</span><br><span class="line">  &#125;, 3000);</span><br><span class="line">&#125;)).then(data=&gt;&#123;</span><br><span class="line">  console.log(data,'success')</span><br><span class="line">&#125;).catch(err=&gt;&#123;</span><br><span class="line">  console.log(err,'error')</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>控制台等待 <code>3s</code> 后输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"ok success"</span></span><br></pre></td></tr></table></figure>
<h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h2><p><code>Promise.reject()</code>方法返回一个带有拒绝原因的<code>Promise</code>对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">_, reject</span>) </span>&#123;</span><br><span class="line">    reject(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch"></a>Promise.prototype.catch</h2><p><strong>catch()</strong> 方法返回一个<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise (en-US)</a>，并且处理拒绝的情况。它的行为与调用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then" target="_blank" rel="noopener"><code>Promise.prototype.then(undefined, onRejected)</code></a> 相同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, callback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally"></a>Promise.prototype.finally</h2><p><code>finally()</code> 方法返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a>。在promise结束时，无论结果是fulfilled或者是rejected，都会执行指定的回调函数。这为在<code>Promise</code>是否成功完成后都需要执行的代码提供了一种方式。</p>
<p>这避免了同样的语句需要在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then" target="_blank" rel="noopener"><code>then()</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch" target="_blank" rel="noopener"><code>catch()</code></a>中各写一次的情况。</p>
<blockquote>
<p><strong>注意:</strong> 在<code>finally</code>回调中 <code>throw</code>（或返回被拒绝的promise）将以 <code>throw()</code> 指定的原因拒绝新的promise.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.finally = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callback()).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> value &#125;)</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callback()).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">throw</span> err &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><p>Promise.all() 方法接收一个promise的iterable类型（注：Array，Map，Set都属于ES6的iterable类型）的输入，并且只返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a>实例， 那个输入的所有promise的resolve回调的结果是一个数组。这个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a>的resolve回调执行是在所有输入的promise的resolve回调都结束，或者输入的iterable里没有promise了的时候。它的reject回调执行是，只要任何一个输入的promise的reject回调执行或者输入不合法的promise就会立即抛出错误，并且reject的是第一个抛出的错误信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'param is not iterable'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> resultArr = []</span><br><span class="line">    <span class="comment">// 已处理计数</span></span><br><span class="line">    <span class="keyword">let</span> processCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> processResultByIndex = <span class="function"><span class="keyword">function</span>(<span class="params">result, i</span>) </span>&#123;</span><br><span class="line">      resultArr[i] = result</span><br><span class="line">      <span class="comment">// 已处理计数 + 1</span></span><br><span class="line">      processCount += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果计数等于arr长度则代表已处理完毕，则执行resolve</span></span><br><span class="line">      <span class="keyword">if</span> (processCount === arr.length) &#123;</span><br><span class="line">        resolve(resultArr)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> item = arr[i]</span><br><span class="line">      <span class="keyword">if</span> (item &amp;&amp; <span class="keyword">typeof</span> item.then === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="comment">// is a promise or thenable</span></span><br><span class="line">        item.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">          processResultByIndex(value, i)</span><br><span class="line">        &#125;, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// normal value</span></span><br><span class="line">        processResultByIndex(item, i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(resolve, <span class="number">100</span>, <span class="string">'foo'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([promise1, promise2, promise3]).then(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(values);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// expected output: Array [3, 42, "foo"]</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从 promise 的使用方法入手，构造出了 promise 的大致框架，然后根据 promise/A+ 规范填充代码，重点实现了 <strong>then 的链式调用和值的穿透</strong>；然后使用测试脚本对所写的代码是否符合规范进行了测试；最后完成了 Promise 的 API 的实现。弄懂 promise 其实并不复杂，归根结底还是孰能生巧。</p>
<p>且涉及到了JS 的循环机制EventLoop（主线程、微任务、渲染、宏任务）。</p>
<p>代码已放置Github：<a href="https://github.com/hackycy/practice-examples/blob/master/javascript/promise/promise-step.js" target="_blank" rel="noopener">es5实现</a>、<a href="https://github.com/hackycy/practice-examples/blob/master/javascript/promise/promise-step-es6.js" target="_blank" rel="noopener">es6实现</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈CSS设计模式/架构</title>
    <url>/2021/06/09/%E6%B5%85%E8%B0%88CSS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一套可维护的CSS库离不开一套好的CSS设计模式或者架构。那么这三个主流的CSS设计思想和一个最近通用的CSS设计思想：OOCSS、SMACSS、BEMCSS、METACSS都是必须要去了解的。</p>
<a id="more"></a>
<h1 id="OOCSS"><a href="#OOCSS" class="headerlink" title="OOCSS"></a>OOCSS</h1><p><code>OOCSS</code>,字面意思是面向对象的CSS，是由<code>Nicole Sullivan</code>提出的css理论，虽说是理论，实则更像一种程序员间约定的规范：</p>
<ul>
<li>Separate structure and skin（分离结构和主题）减少对 HTML 结构的依赖</li>
<li>Separate container and content（分离容器和内容）增加样式的复用性</li>
</ul>
<p>在 <code>OOCSS</code> 的观念中，强调重复使用 <code>class</code>，而应该避免使用 <code>id</code> 作为 CSS 的选择器。OOCSS追求元件的复用，其<code>class</code>命名更为抽象，一般不体现具体事物，而注重表现层的抽取。</p>
<h1 id="SMACSS"><a href="#SMACSS" class="headerlink" title="SMACSS"></a>SMACSS</h1><p><code>SMACSS</code>通过一个灵活的思维过程来检查你的设计过程和方式是否符合你的架构</p>
<p>设计的主要规范有三点：</p>
<ul>
<li>Categorizing CSS Rules（为css分类）</li>
<li>Naming Rules（命名规范）</li>
<li>Minimizing the Depth of Applicability（最小化适配深度）</li>
</ul>
<h2 id="Categorizing-CSS-Rules"><a href="#Categorizing-CSS-Rules" class="headerlink" title="Categorizing CSS Rules"></a>Categorizing CSS Rules</h2><p>这一点是<code>SMACSS</code>的核心。SMACSS认为css有5个类别，分别是：</p>
<ul>
<li>Base </li>
<li>Layout </li>
<li>Module </li>
<li>State </li>
<li>Theme or Skin</li>
</ul>
<h2 id="Base-Rules"><a href="#Base-Rules" class="headerlink" title="Base Rules"></a>Base Rules</h2><p>基础规范,描述的是任何场合下，页面元素的默认外观。它的定义不会用到class和ID。<code>css reset</code>也属于此类。常见的如<code>normalize.css</code>, <code>CSS Tools</code></p>
<h2 id="Layout-Rules"><a href="#Layout-Rules" class="headerlink" title="Layout Rules"></a>Layout Rules</h2><p>布局规范,元素是有层次级别之分的，Layout Rules属于较高的一层，它可以作为层级较低的Module Rules元素的容器。左右分栏、栅格系统等都属于布局规范。布局是一个网站的基本，无论是左右还是居中，甚至其他什么布局，要实现页面的基本浏览功能，布局必不可少。SMACSS还约定了一个前缀l-/layout-来标识布局的class。举个最普遍的例子。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.layout-header</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.layout-container</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.layout-sidebar</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.layout-content</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.layout-footer</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Module-Rules"><a href="#Module-Rules" class="headerlink" title="Module Rules"></a>Module Rules</h2><p>模块规范,模块是SMACSS最基本的思想，同时也是大部分CSS理论的基本，将样式模块化就能达到复用和可维护的目的，但是SMACSS提出了更具体的模块化方案。SMACSS中的模块具有自己的一个命名，隶属于模块下的类皆以该模块为前缀，例子如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.todolist</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.todolist-title</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.todolist-image</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.todolist-article</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到<code>todolist</code>作为一个模块，包含了title，image，article等组件，同时还可以加上如<code>todolist-background-danger</code>等修饰类，在模块内可以使用其名称做前缀任意组织模块结构，但目的是让其变得更易用，提高可扩展性和灵活度，如果只是为了修饰而修饰，写出大量没有任何复用性的类，便是一种弄巧成拙的做法。</p>
<h2 id="State-Rules"><a href="#State-Rules" class="headerlink" title="State Rules"></a>State Rules</h2><p>状态规范,这个应该很多前端开发者都很好理解，描述的是任一元素在特定状态下的外观。例如，一个消息框可能有success和error等状态。与OOCSS抽取修饰类的方式的不同，SMACSS是抽取更高级别的样式类，得到更强的复用性，如隐藏某个元素的写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.is-hidden</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Theme-Rules"><a href="#Theme-Rules" class="headerlink" title="Theme Rules"></a>Theme Rules</h2><p>主题规范,描述了页面主题外观，一般是指颜色、背景图。Theme Rules可以修改前面4个类别的样式，且应和前面4个类别分离开来（便于切换，也就是“换肤”）。SMACSS的Theme Rules不要求使用单独的class命名，也就是说，你可以在Module Rules中定义.header{ }然后在Theme Rules中也用.header { }来定义需要修改的部分(后加载覆盖前加载样式内容)</p>
<h2 id="Naming-Rules"><a href="#Naming-Rules" class="headerlink" title="Naming Rules"></a>Naming Rules</h2><p>命名规范</p>
<p>按照前面5种的划分:</p>
<ul>
<li>Base Rules(Pass)</li>
<li>Layout Rules用l-或layout-这样的前缀，例如：<code>.l-header</code>、<code>.l-sidebar</code>。</li>
<li>Module Rules用模块本身的命名，例如图文排列的<code>.media</code>、<code>.media-image</code>。</li>
<li>State Rules用is-前缀，例如：<code>.is-active</code>、<code>.is-hidden</code>。</li>
<li>Theme Rules如果作为单独class，用theme-前缀，例如<code>.theme-a-background</code>、<code>.theme-a-shadow</code>。</li>
</ul>
<h3 id="Minimizing-the-Depth-of-Applicability"><a href="#Minimizing-the-Depth-of-Applicability" class="headerlink" title="Minimizing the Depth of Applicability"></a>Minimizing the Depth of Applicability</h3><p>最小适配深度原则，简单的例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* depth 1 */</span></span><br><span class="line"><span class="selector-class">.sidebar</span> <span class="selector-tag">ul</span> <span class="selector-tag">h3</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* depth 2 */</span></span><br><span class="line"><span class="selector-class">.sub-title</span> &#123; &#125;</span><br></pre></td></tr></table></figure>
<p>两段css的区别在于html和css的耦合度(这一点上和OOCSS的分离容器和内容的原则不谋而合)。可以想到，由于上面的样式规则使用了继承选择符，因此对于html的结构实际是有一定依赖的。如果html发生重构，就有可能不再具有这些样式。对应的，下面的样式规则只有一个选择符，因此不依赖于特定html结构，只要为元素添加class，就可以获得对应样式。</p>
<p>当然，继承选择符是有用的，它可以减少因相同命名引发的样式冲突（常发生于多人协作开发）。但是，我们不应过度使用，在不造成样式冲突的允许范围之内，尽可能使用短的、不限定html结构的选择符。这就是SMACSS的最小化适配深度的意义。</p>
<h1 id="BEMCSS"><a href="#BEMCSS" class="headerlink" title="BEMCSS"></a>BEMCSS</h1><p>BEM 分别代表着：Block（块）、Element（元素/子块/组成部分）、Modifier（修饰符），是一种组件化的 CSS 命名方法和规范，由俄罗斯 Yandex 团队所提出。其目的是将用户界面划分成独立的（模）块，使开发更为简单和快速，利于团队协作开发。</p>
<p><strong>特点</strong></p>
<p>组件化/模块化的开发思路。书写方式解耦化，不会造成命名空间的污染，如：<code>.xxx ul li</code> 写法带来的潜在嵌套风险。命名方式化扁平，避免样式层级过多而导致的解析效率降低，渲染开销变大。组件结构独立化，减少样式冲突，可以将已开完成的组件快速应用到新项目中。有着较好的维护性、易读性、灵活性。规则</p>
<p>BEM的命名模式在社区中有着不同方式，以下为 Yandex 团队所提出的命名规则为：</p>
<p><code>.[Block 块]__[Element 元素]_[Modifier 修饰符]</code>不同的命名模式，区别在于BEM之间的连接符号不同，依个人而定：</p>
<p><code>.[Block 块]__[Element 元素]--[Modifier 修饰符]</code>任何一种规范，都是基于实际需求而定，便于团队开发和维护扩展，每个规范都是经过合理评估后所得出的一种“思路”和“建议”。</p>
<h2 id="Block（块）"><a href="#Block（块）" class="headerlink" title="Block（块）"></a>Block（块）</h2><p>是一个独立的实体，即通常所说的模块或组件。</p>
<p>例：header、menu、search</p>
<p>规则：块名需能清晰的表达出，其用途、功能或意义，具有唯一性。块名称之间用-连接。每个块名前应增加一个前缀，<strong>这前缀在 CSS 中有命名空间（如：m-、u-、分别代表：mod 模块、ui 元件）。每个块在逻辑上和功能上都相互独立。由于块是独立的，可以在应用开发中进行复用，从而降低代码重复并提高开发效率。块可以放置在页面上的任何位置，也可以互相嵌套。同类型的块，在显示上可能会有一定的差异，所以不要定义过多的外观显示样式，主要负责结构的呈现。</strong></p>
<p>这样就能确保块在不同地方复用和嵌套时，增加其扩展性。综上所述，最终我们可以把BEM规则最终定义成：</p>
<p><code>.[命名空间]-[组件名/块]__[元素名/元素]--[修饰符]</code> 情景 需要构建一个 <code>search</code> 组件。</p>
<p>写法 <code>.m-search{}</code> 结构</p>
<p>如果打算开发一套框架，可以使用具有代表性的缩写，用来表示命名空间：<code>Element UI(el-)</code>、<code>Ant Design(ant-)</code>、<code>iView(ivu-)</code>。</p>
<h2 id="Element（元素）"><a href="#Element（元素）" class="headerlink" title="Element（元素）"></a>Element（元素）</h2><p>是块中的组成部分，对应块中的子元素/子节点。</p>
<p>例：header title、menu item、list item</p>
<p>规则：元素名需能简单的描述出，其结构、布局或意义，并且在语义上与块相关联。<strong>块与元素之间用<code>__</code>连接。</strong>不能与块分开单独使用。块的内部元素，都被认为是块的子元素。一个块中元素的类名必须用父级块的名称作为前缀，因此不能写成：<code>block__elem1__elem2</code>。情景 search 组件中包含 input 和 button，是列表中的一个子元素。</p>
<p>写法 <code>.m-search{}</code>、<code>.m-search__input{}</code>、<code>.m-search__button{}</code>结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- search 组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"m-search"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- input 是 search 组件的子元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"m-search__input"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- button 是 search 组件的子元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"m-search__button"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>原则上书写时不会出现两层以上的嵌套，所有样式都为平级，嵌套只出现在<code>.m-block_active</code> ，状态激活时的情况。</p>
<h2 id="Modifier（修饰符）"><a href="#Modifier（修饰符）" class="headerlink" title="Modifier（修饰符）"></a>Modifier（修饰符）</h2><p>定义块和元素的外观、状态或类型。</p>
<p>例：<code>color</code>、<code>disabled</code>、<code>size</code></p>
<p>规则：修饰符需能直观易懂表达出，其外观、状态或行为。修饰符用_连接块与元素。修饰符不能单独使用。在必要时可进行扩展，书写成：<code>block__elem_modifier_modifier</code>，第一个modifier表示其命名空间。情景 假定 search 组件有多种外观，我们选择其中一种。并且在用户未输入内容时，button 显示为禁用样式。</p>
<p>写法<code>.m-search{}</code> 、 <code>.m-search_dark{}</code>  、<code>.m-search__input{}</code> 、 <code>.m-search__button{}</code> 、 <code>.m-search__button_disabled{}</code> 结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- dark 表明 search 组件的外观 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"m-search m-search-form_dark"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"m-search__input"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- disabled 表明 search__button 的状态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"m-search__button m-search__button_disabled"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>很多人觉得 BEM 写法难看，审美本是“智者见智，仁者见仁”的事。刚刚接触可能是会觉得有点奇怪，但所有东西都有一个适应过程。如果仅仅为了好看，规避其优点，我认为得不偿失。个人建议可以尝试使用 BEM 规范来书写代码。</p>
<p>BEM 命名会使得 Class 类名变长，但经过 GZIP 等压缩后，文件的体积其实并无太大影响。</p>
<p>就和早年提出 CSS语义化 一样，不要为了语义而去语义，语义化本身的作用就是帮助大家更好的识别代码，所有的规范都是基于项目的发展和团队的协作，团队可以根据成员的意愿选择最合适的方式。</p>
</blockquote>
<h1 id="METACSS"><a href="#METACSS" class="headerlink" title="METACSS"></a>METACSS</h1><p>一些写在全局的通用方法，是SMACSS中通用方法思想的分支，一般以css属性、Emmet css缩写或功能来命名，通常以一个css属性为一个单位</p>
<p>表示属性的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.df</span> &#123; <span class="attribute">display</span>: flex; &#125;</span><br></pre></td></tr></table></figure>
<p>表示功能的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tcut</span> &#123;  </span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以此类推，封装好放到全局来使用，快速添加属性来开发页面。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>smacss覆盖了所有的细节点；bemcss着重css的命名和语义化；oocss着重可复用，把每一个dom节点当成一个对象，是css返璞归真的思想；metacss着重快速开发快速添加属性，颗粒度更细，通过在html代码中添加类名来添加属性，不必再去找相对应的选择器中的css代码来修改样式。</p>
<blockquote>
<p>原文来自：<a href="https://juejin.cn/post/6958690548009926687" target="_blank" rel="noopener">https://juejin.cn/post/6958690548009926687</a></p>
</blockquote>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Git项目换行符LF与CRLF导致ESLint报错解决方法</title>
    <url>/2021/03/19/Git%E9%A1%B9%E7%9B%AE%E6%8D%A2%E8%A1%8C%E7%AC%A6LF%E4%B8%8ECRLF%E5%AF%BC%E8%87%B4ESLint%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="产生该问题的原因"><a href="#产生该问题的原因" class="headerlink" title="产生该问题的原因"></a>产生该问题的原因</h1><p>产生该问题的原因是由于Windows平台和linux平台的默认换行符是不一样的,linux使用的是<code>0x0A(LF)</code>而Windows使用的是<code>0x0D0A(CRLF)</code>,这就导致了当Windows下的代码放到linux下运行时,虽然代码没有错,但是linux下的git检测到项目的换行符为CRLF时会自动换成LF。</p>
<a id="more"></a>
<h1 id="该问题的症状"><a href="#该问题的症状" class="headerlink" title="该问题的症状"></a>该问题的症状</h1><p>出现这个问题的症状表现为git会提示项目的每一个文件的所有位置都发生了修改,但是查看diff的时候发现其实哪都没修改,这是因为换行符被换了但是我们是看不出来的。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>由于代码多是运行在linux,所以现在主流的换行符标准就是LF,所以我们的项目一开始就应该有将换行符设置为LF的意识.</p>
<p>项目一开始创建,还没有加入git仓库的时候就应该将换行符设置为LF,vscode等工具都提供了这个简单的功能,</p>
<p><img src="1.png" alt></p>
<p>如果项目已经加入了git仓库,那就让git帮我们解决问题,git有一个<code>autocrlf</code>配置,可以在我们提交时自动转换换行符,它有3个选项:</p>
<ul>
<li><strong>true:</strong> 提交时转换为 LF，检出时转换为 CRLF</li>
<li><strong>false:</strong> 提交检出均不转换</li>
<li><strong>input:</strong> 提交时转换为LF，检出时不转换</li>
</ul>
<p>另一个设置项<code>safecrlf</code>用于检查文件是否包含着混合换行符,也有3个选项:</p>
<ul>
<li><strong>true:</strong> 拒绝提交包含混合换行符的文件</li>
<li><strong>false:</strong> 允许提交包含混合换行符的文件</li>
<li><strong>warn:</strong> 提交包含混合换行符的文件时给出警告</li>
</ul>
<p>所以,如果我们要将已经加入git的大量CRLF结尾文件批量转换成LF结尾的文件,可以这样设置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global core.autocrlf input</span><br><span class="line">$ git config --global core.safecrlf warn</span><br></pre></td></tr></table></figure>
<p>这样设置之后,先将项目提交一次,这样所有的文件就都会被改成LF结尾.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://jiayaoo3o.github.io/2019/06/26/git项目换行符LF与CRLF导致的大量更改解决办法" target="_blank" rel="noopener">link</a></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学之MD5 + Salt</title>
    <url>/2021/03/17/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%8BMD5-Salt/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MD算法的基本概念"><a href="#MD算法的基本概念" class="headerlink" title="MD算法的基本概念"></a>MD算法的基本概念</h1><p>MD5算法是典型的消息摘要算法，其前身有MD2、MD3和MD4算法，它由MD4、MD3和MD2算法改进而来。不论是哪一种MD算法，它们都需 要获得一个随机长度的信息并产生一个128位的信息摘要。如果将这个128位的二进制摘要信息换算成十六进制，可以得到一个32位的字符串，故我们见到的 大部分MD5算法的数字指纹都是32为十六进制的字符串。</p>
<a id="more"></a>
<h1 id="MD算法的发展史"><a href="#MD算法的发展史" class="headerlink" title="MD算法的发展史"></a>MD算法的发展史</h1><h2 id="MD2算法"><a href="#MD2算法" class="headerlink" title="MD2算法"></a>MD2算法</h2><p>1989年，著名的非对称算法RSA发明人之一—-麻省理工学院教授罗纳德.李维斯特开发了MD2算法。这个算法首先对信息进行数据补位，使信 息的字节长度是16的倍数。再以一个16位的检验和做为补充信息追加到原信息的末尾。最后根据这个新产生的信息计算出一个128位的散列值，MD2算法由 此诞生。</p>
<h2 id="MD4算法"><a href="#MD4算法" class="headerlink" title="MD4算法"></a>MD4算法</h2><p>1990年，罗纳德.李维斯特教授开发出较之MD2算法有着更高安全性的MD4算法。在这个算法中，我们仍需对信息进行数据补位。不同的是，这种补 位使其信息的字节长度加上448个字节后成为512的倍数（信息字节长度mod 512 =448）。此外，关于MD4算的处理和MD2算法有很大的差别。但最终仍旧会获得一个128为的散列值。MD4算法对后续消息摘要算法起到了推动作用， 许多比较有名的消息摘要算法都是在MD4算法的基础上发展而来的，如MD5、SHA-1、RIPE-MD和HAVAL算法等。</p>
<h2 id="MD5算法"><a href="#MD5算法" class="headerlink" title="MD5算法"></a>MD5算法</h2><p>1991年，继MD4算法后，罗纳德.李维斯特教授开发了MD5算法，将MD算法推向成熟。MD5算法经MD2、MD3和MD4算法发展而来，算法复杂程度和安全强度打打提高，但浙西MD算法的最终结果都是产生一个128位的信息摘要。这也是MD系列算法的特点。MD5算法的算法特点如下： （1）压缩性：任意长度的数据，算出的MD5值长度都是固定的。 （2）容易计算：从原数据计算出MD5值很容易。 （3）抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。 （4）弱抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。 （5）强抗碰撞：想找到两个不同的数据，使它们具有相同的MD5值，是非常困难的。</p>
<h2 id="MD5破解方面"><a href="#MD5破解方面" class="headerlink" title="MD5破解方面"></a>MD5破解方面</h2><p>在破解md5方面，最常用的方法是“跑字典”，有两种方法得到字典，一种是日常搜集的用做密码的字符串表，另一种是用排列组合方法生成的，先用MD5程序计算出这些字典项的MD5值，然后再用目标的MD5值在这个字典中检索。我们假设密码的最大长度为8位字节（8 Bytes），同时密码只能是字母和数字，共26+26+10=62个字节，排列组合出的字典的项数则是P（62,1）+P（62,2）….+P（62,8），那也已经是一个很天文的数字了，存储这个字典就需要TB级的磁盘阵列，而且这种方法还有一个前提，就是能获得目标账户的密码MD5值的情况下才可以。</p>
<p>所以总体而言，md5加密是十分安全的，即使有一些瑕疵，但并不影响具体的使用，外加md5是免费的，所以它的应用还是十分广泛的。</p>
<h1 id="MD5算法应用"><a href="#MD5算法应用" class="headerlink" title="MD5算法应用"></a>MD5算法应用</h1><h2 id="Md5-密码存储加盐"><a href="#Md5-密码存储加盐" class="headerlink" title="Md5 密码存储加盐"></a>Md5 密码存储加盐</h2><p>MD5算法，可以用来保存用户的密码信息。为了更好的保存，可以在保存的过程中，加入盐。/在保存用户密码的时候，盐可以利用生成的随机数。可以将密码结合MD5加盐，生成的数据摘要和盐保存起来 。以便于下次用户验证使用。在用户表里面，也保存salt。</p>
<h2 id="Md5-文件完整性校验"><a href="#Md5-文件完整性校验" class="headerlink" title="Md5 文件完整性校验"></a>Md5 文件完整性校验</h2><p>每个文件都可以用MD5验证程序算出一个固定的MD5值，是独一无二的。一般来说，开发方会在软件发布时预先算出文件的MD5值，如果文件被盗用，加了木马或者被篡改版权，那么它的MD5值也随之改变，也就是说我们对比文件当前的MD5值和它标准的MD5值来检验它是否正确和完整。 （1）例如网盘中的秒传4G文件，可以使用用户需要上传的文件进行Md5运算，判断与服务器中是否存在该文件，如果存在只需添加文件索引，不存在再真正上传。 （2）例如自动升级的客户端，判断下载的程序安装包是否完整，可以计算文件的MD5值，与服务器端计算的Md5值进行比对。</p>
<h1 id="MD5加盐"><a href="#MD5加盐" class="headerlink" title="MD5加盐"></a>MD5加盐</h1><p>我们知道，如果直接对密码进行散列，那么黑客可以对通过获得这个密码散列值，然后通过查散列值字典（例如MD5密码破解网站），得到某用户的密码。</p>
<p>加Salt可以一定程度上解决这一问题。所谓加Salt方法，就是加点“佐料”。其基本想法是这样的：当用户首次提供密码时（通常是注册时），由系统自动往这个密码里撒一些“佐料”，然后再散列。而当用户登录时，系统为用户提供的代码撒上同样的“佐料”，然后散列，再比较散列值，已确定密码是否正确。</p>
<p><strong>这里的“佐料”被称作“Salt值”，这个值是由系统随机生成的，并且只有系统知道。这样，即便两个用户使用了同一个密码，由于系统为它们生成的salt值不同，他们的散列值也是不同的。即便黑客可以通过自己的密码和自己生成的散列值来找具有特定密码的用户，但这个几率太小了（密码和salt值都得和黑客使用的一样才行）。 </strong></p>
<p>下面详细介绍一下加Salt散列的过程。介绍之前先强调一点，前面说过，验证密码时要使用和最初散列密码时使用“相同的”佐料。所以Salt值是要存放在数据库里的。</p>
<p><strong>用户注册时，</strong></p>
<ol>
<li>用户输入【账号】和【密码】（以及其他用户信息）；</li>
<li>系统为用户生成【Salt值】；</li>
<li>系统将【Salt值】和【用户密码】连接到一起；</li>
<li>对连接后的值进行散列，得到【Hash值】；</li>
<li>将【Hash值1】和【Salt值】分别放到数据库中。</li>
</ol>
<p><strong>用户登录时，</strong></p>
<ol>
<li>用户输入【账号】和【密码】；</li>
<li>系统通过用户名找到与之对应的【Hash值】和【Salt值】；</li>
<li>系统将【Salt值】和【用户输入的密码】连接到一起；</li>
<li>对连接后的值进行散列，得到【Hash值2】（注意是即时运算出来的值）；</li>
<li>比较【Hash值1】和【Hash值2】是否相等，相等则表示密码正确，否则表示密码错误。</li>
</ol>
<p>有时候，为了减轻开发压力，程序员会统一使用一个salt值（储存在某个地方），而不是每个用户都生成私有的salt值。</p>
<p>例子详解：</p>
<h2 id="第一代密码"><a href="#第一代密码" class="headerlink" title="第一代密码"></a>第一代密码</h2><p>早期的软件系统或者互联网应用，数据库中设计用户表的时候，大致是这样的结构：</p>
<p><img src="d1.png" alt></p>
<p>数据存储形式如下：</p>
<p><img src="d1-s.png" alt></p>
<p>主要的关键字段就是这么两个，一个是登陆时的用户名，对应的一个密码，而且那个时候的用户名是明文存储的，如果你登陆时用户名是 123，那么数据库里存的就是 <code>123</code>。这种设计思路非常简单，但是缺陷也非常明显，数据库一旦泄露，那么所有用户名和密码都会泄露，后果非常严重。</p>
<h2 id="第二代密码"><a href="#第二代密码" class="headerlink" title="第二代密码"></a>第二代密码</h2><p>为了规避第一代密码设计的缺陷，聪明的人在数据库中不在存储明文密码，转而存储加密后的密码，典型的加密算法是 MD5 和 SHA1，其数据表大致是这样设计的：</p>
<p><img src="d2.png" alt></p>
<p>数据存储形式如下： </p>
<p><img src="d2-s.png" alt></p>
<p>假如你设置的密码是<code>123</code>，那么数据库中存储的就是<code>202cb962ac59075b964b07152d234b70</code>或 <code>40bd001563085fc35165329ea1ff5c5ecbdbbeef</code>。当用户登陆的时候，会把用户输入的密码执行 MD5（或者 SHA1）后再和数据库就行对比，判断用户身份是否合法，这种加密算法称为散列。</p>
<p>严格地说，这种算法不能算是加密，因为理论上来说，它不能被解密。所以即使数据库丢失了，但是由于数据库里的密码都是密文，根本无法判断用户的原始密码，所以后果也不算太严重。</p>
<h2 id="第三代密码"><a href="#第三代密码" class="headerlink" title="第三代密码"></a>第三代密码</h2><p>本来第二代密码设计方法已经很不错了，只要你密码设置得稍微复杂一点，就几乎没有被破解的可能性。但是如果你的密码设置得不够复杂，被破解出来的可能性还是比较大的。</p>
<p>好事者收集常用的密码，然后对他们执行 MD5 或者 SHA1，然后做成一个数据量非常庞大的数据字典，然后对泄露的数据库中的密码就行对比，如果你的原始密码很不幸的被包含在这个数据字典中，那么花不了多长时间就能把你的原始密码匹配出来。这个数据字典很容易收集，CSDN 泄露的那 600w 个密码，就是很好的原始素材。</p>
<p>于是，第三代密码设计方法诞生，用户表中多了一个字段：</p>
<p><img src="d3.png" alt></p>
<p> 数据存储形式如下：</p>
<p><img src="d3-s.png" alt></p>
<p>Salt 可以是任意字母、数字、或是字母或数字的组合，但必须是随机产生的，每个用户的 Salt 都不一样，用户注册的时候，数据库中存入的不是明文密码，也不是简单的对明文密码进行散列，而是 MD5( 明文密码 + Salt)，也就是说： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MD5(&apos;123&apos; + &apos;1ck12b13k1jmjxrg1h0129h2lj&apos;) = &apos;6c22ef52be70e11b6f3bcf0f672c96ce&apos;</span><br><span class="line">MD5(&apos;456&apos; + &apos;1h029kh2lj11jmjxrg13k1c12b&apos;) = &apos;7128f587d88d6686974d6ef57c193628&apos;</span><br></pre></td></tr></table></figure>
<p>由于加了 Salt，即便数据库泄露了，但是由于密码都是加了 Salt 之后的散列，坏人们的数据字典已经无法直接匹配，明文密码被破解出来的概率也大大降低。</p>
<p>是不是加了 Salt 之后就绝对安全了呢？淡然没有！坏人们还是可以他们数据字典中的密码，加上我们泄露数据库中的 Salt，然后散列，然后再匹配。但是由于我们的 Salt 是随机产生的，假如我们的用户数据表中有 30w 条数据，数据字典中有 600w 条数据，坏人们如果想要完全覆盖的坏，他们加上 Salt 后再散列的数据字典数据量就应该是 300000* 6000000 = 1800000000000，一万八千亿啊，干坏事的成本太高了吧。但是如果只是想破解某个用户的密码的话，只需为这 600w 条数据加上 Salt，然后散列匹配。可见 Salt 虽然大大提高了安全系数，但也并非绝对安全。</p>
<p>实际项目中，Salt 不一定要加在最前面或最后面，也可以插在中间嘛，也可以分开插入，也可以倒序，程序设计时可以灵活调整，都可以使破解的难度指数级增长。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/myseries/p/11581170.html" target="_blank" rel="noopener">https://www.cnblogs.com/myseries/p/11581170.html</a></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
  </entry>
  <entry>
    <title>Windows Server 2012/2016搭建VPN教程</title>
    <url>/2021/03/09/Windows-Server-2012-2016%E6%90%AD%E5%BB%BAVPN%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><ul>
<li>Windows Server 2012/2016版服务器</li>
</ul>
<blockquote>
<p>该文以腾讯云创建的Server 2016服务器为例</p>
</blockquote>
<a id="more"></a>
<p>需要先放通服务器安全组端口，以腾讯云服务器为例：</p>
<p><img src="server_port.png" alt></p>
<p>以及关闭服务器的防火墙。</p>
<h1 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h1><p>连接远程服务器，打开服务器管理器。</p>
<p><img src="open_manager.png" alt></p>
<p>点击<code>添加角色和功能</code>，进行下图所示配置。</p>
<p><img src="add_role.png" alt></p>
<p>开始之前直接点击下一步</p>
<p><img src="config_1.png" alt></p>
<p>安装类型直接点击下一步</p>
<p><img src="config_2.png" alt></p>
<p>服务器选择直接点击下一步</p>
<p><img src="config_3.png" alt></p>
<p>服务器角色增加<code>网络策略和访问服务</code>以及<code>远程访问</code></p>
<p><img src="config_4.png" alt></p>
<p>选择添加功能</p>
<p><img src="config_5.png" alt></p>
<p>勾选后点击下一步</p>
<p><img src="config_6.png" alt></p>
<p>功能默认即可，直接点击下一步</p>
<p><img src="config_7.png" alt></p>
<p>网络策略和访问服务直接点击下一步</p>
<p><img src="config_8.png" alt></p>
<p>远程访问直接点击下一步</p>
<p><img src="config_9.png" alt></p>
<p>角色服务增加<code>DirectAccess和VPN(RAS)</code>以及路由</p>
<p><img src="config_10.png" alt></p>
<p>选择添加功能即可</p>
<p><img src="config_11.png" alt></p>
<p>勾选后点击下一步</p>
<p><img src="config_12.png" alt></p>
<p>Web服务器角色直接点击下一步</p>
<p><img src="config_13.png" alt></p>
<p>角色服务默认即可直接点击下一步</p>
<p><img src="config_14.png" alt></p>
<p>确认安装</p>
<p><img src="config_15.png" alt></p>
<p>点击安装后等待安装完毕关闭即可。</p>
<p><img src="config_16.png" alt></p>
<p>打开服务器管理器，点击工具，选择路由和远程访问</p>
<p><img src="config_17.png" alt></p>
<p>右键本地服务器，选择“配置并启用路由和远程访问”，启动配置向导。</p>
<p><img src="config_18.png" alt></p>
<p>点击下一步</p>
<p><img src="config_19.png" alt></p>
<p>选择自定义配置</p>
<p><img src="config_20.png" alt></p>
<p>全部勾选，并点击下一步</p>
<p><img src="config_21.png" alt></p>
<p>点击完成</p>
<p><img src="config_22.png" alt></p>
<p>如出现该提示直接点击确定</p>
<p><img src="config_23.png" alt></p>
<p>点击启动服务</p>
<p><img src="config_24.png" alt></p>
<p>展开本地服务器，展开<code>IPv4</code>，右键<code>NAT</code>，选择<code>新建接口</code></p>
<p><img src="config_25.png" alt></p>
<p>选择<code>以太网</code>，点击确定</p>
<p><img src="config_26.png" alt></p>
<p>勾选公用以及启用NAT，如图所示，点击确定</p>
<p><img src="config_27.png" alt></p>
<p>再次展开本地服务器，展开<code>IPv4</code>，右键<code>NAT</code>，选择<code>新建接口</code></p>
<p>选择<code>内部</code>，点击确定</p>
<p><img src="config_28.png" alt></p>
<p>勾选专用，点击确定</p>
<p><img src="config_29.png" alt></p>
<p>配置本地服务器属性</p>
<p><img src="config_30.png" alt></p>
<p>点击<code>IPv4</code>标签页为远端连接分配IP地址池</p>
<p><img src="config_31.png" alt></p>
<p><img src="config_32.png" alt></p>
<p>再次配置本地服务器属性</p>
<p>选择<code>安全</code>标签页，配置允许L2TP策略选项，并填入<strong>预共享密钥</strong>，点击确定</p>
<blockquote>
<p>务必记住该密钥，后续需要填写</p>
</blockquote>
<p><img src="config_33.png" alt></p>
<p>点击确定</p>
<p><img src="config_34.png" alt></p>
<p>打开服务器管理器，点击工具选择计算机管理</p>
<p><img src="config_35.png" alt></p>
<p>展开本地用户和组，选择新建组</p>
<p><img src="config_36.png" alt></p>
<p>展开本地用户和组，选择新用户</p>
<p><img src="config_37.png" alt></p>
<p>点击新建的用户名右键选择属性</p>
<p><img src="config_38.png" alt></p>
<p>按图中依次点击<code>隶属于</code>–<code>添加</code>–<code>高级</code>—<code>立即查找</code>—<code>VPNGroup（刚刚创建的组）</code>—<code>确定</code></p>
<p><img src="config_39.png" alt></p>
<p>点击确定</p>
<p><img src="config_40.png" alt></p>
<p>配置 VPN 访问权限，回到服务器管理器，点击<code>NAPS</code>–<code>选择服务器</code>–启动<code>网络策略服务器</code>配置</p>
<p><img src="config_41.png" alt></p>
<p>展开策略，右键点击网络策略并新建</p>
<p><img src="config_42.png" alt></p>
<p>填写名称并在“网络访问服务器的类型”中选择<code>远程访问服务器(VPN 拨号)</code>，点击下一步</p>
<p><img src="config_43.png" alt></p>
<p>在指定条件中，根据实际需求，选择合适的匹配条件。比如，文中选择了域中的<code>VPNGroup</code>用户组。</p>
<p><img src="config_44.png" alt></p>
<p><img src="config_45.png" alt></p>
<p><img src="config_46.png" alt></p>
<p>点击下一步</p>
<p><img src="config_47.png" alt></p>
<p>点击下一步</p>
<p><img src="config_48.png" alt></p>
<p>点击下一步</p>
<p><img src="config_49.png" alt></p>
<p>点击下一步</p>
<p><img src="config_50.png" alt></p>
<p>点击完成</p>
<p><img src="config_51.png" alt></p>
<p>然后重启服务器（重启服务）但懒得找服务直接重启服务器了。</p>
<p>重启完成后打开服务器管理器，找到远程访问，并启动对应的服务。</p>
<p><img src="config_52.png" alt></p>
<p>右键启动即可</p>
<p><img src="config_53.png" alt></p>
<h1 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h1><h2 id="Mac环境"><a href="#Mac环境" class="headerlink" title="Mac环境"></a>Mac环境</h2><p>打开<code>设置</code>—<code>网络</code>，点击<code>+</code>号新建</p>
<p><img src="test_1.png" alt></p>
<p>选择图中对应类型</p>
<p><img src="test_2.png" alt></p>
<p><img src="test_3.png" alt></p>
<p><img src="test_4.png" alt></p>
<h2 id="Win10环境"><a href="#Win10环境" class="headerlink" title="Win10环境"></a>Win10环境</h2><p>打开<code>设置</code>—<code>网络和Internet</code>—<code>VPN</code></p>
<p><img src="wtest_1.png" alt></p>
<p>配置如图所示</p>
<p><img src="wtest_2.png" alt></p>
<p><img src="wtest_3.png" alt></p>
<h1 id="错误修复"><a href="#错误修复" class="headerlink" title="错误修复"></a>错误修复</h1><p>这边测试在Win7或Win10连接时会出现<code>无法建立计算机与VPN服务器之间的网络连接,因为远程服务器未响应</code>的问题。查找了文章修复了问题。</p>
<h2 id="错误1：因为没有修改过注册表，所以是报这样的错误"><a href="#错误1：因为没有修改过注册表，所以是报这样的错误" class="headerlink" title="错误1：因为没有修改过注册表，所以是报这样的错误"></a>错误1：因为没有修改过注册表，所以是报这样的错误</h2><p><img src="fix_1.jpg" alt></p>
<p><strong>解决办法</strong></p>
<p>按<code>windows图标键 + R键</code> &gt;在运行中输入<code>regedit</code>，单击<code>确定</code>，进入<code>注册表编辑器</code></p>
<p><img src="fix_2.png" alt></p>
<p>在注册表编辑器”页面的左侧导航树点开 <code>HKEY_LOCAL_MACHINE</code>&gt;<code>SYSTEM</code>&gt;<code>CurrentControlSet</code>&gt;<code>Services</code>&gt;<code>PolicyAgent</code></p>
<p><img src="fix_3.jpg" alt></p>
<p>在右边空白处新建 &gt; <code>DWORD值</code>，名称为<code>AssumeUDPEncapsulationContextOnSendRule</code></p>
<p><img src="fix_4.jpg" alt></p>
<p>右键单击<code>AssumeUDPEncapsulationContextOnSendRule</code>，选择“修改”，进入修改界面，修改值为<code>2</code>(表示可以与位于NAT设备后方的服务器建立安全关联)</p>
<p><img src="fix_5.jpg" alt></p>
<blockquote>
<p>重启电脑即可。一般Win7配置完该步骤后即可连接，但Win10还会出现问题。</p>
</blockquote>
<h2 id="错误2：修改完注册表，错误就变了，是因为认证的协议问题"><a href="#错误2：修改完注册表，错误就变了，是因为认证的协议问题" class="headerlink" title="错误2：修改完注册表，错误就变了，是因为认证的协议问题"></a>错误2：修改完注册表，错误就变了，是因为认证的协议问题</h2><p><img src="fix_6.jpg" alt></p>
<p><strong>解决办法</strong></p>
<p>打开更改适配器选项，找到对应的VPN名称的适配器，右键属性</p>
<p><img src="fix_7.jpg" alt></p>
<p>打开安全选项，选择使用这些协议勾上；注意此处还有高级设置里面的L2TP身份验证类型，这里也要填写的（秘钥方式还是证书方式）</p>
<p><img src="fix_8.jpg" alt></p>
<blockquote>
<p>再次连接，即可修复</p>
</blockquote>
<h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><p><a href="https://www.365jz.com/article/24912" target="_blank" rel="noopener">https://www.365jz.com/article/24912</a></p>
<p><a href="https://me.jinchuang.org/archives/381.html" target="_blank" rel="noopener">https://me.jinchuang.org/archives/381.html</a></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
  </entry>
  <entry>
    <title>利用Canvas进行前端图片压缩</title>
    <url>/2021/02/25/%E5%88%A9%E7%94%A8Canvas%E8%BF%9B%E8%A1%8C%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>纯前端利用Canvas来进行图片压缩的方法</strong></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 压缩方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compress</span>(<span class="params">file, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  reader.readAsDataURL(file);</span><br><span class="line">  reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> base64Image = e.target.result;</span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">    image.src = base64Image;</span><br><span class="line"></span><br><span class="line">    image.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> needCompress = <span class="literal">false</span>; <span class="comment">// 是否需要压缩</span></span><br><span class="line">      <span class="keyword">var</span> ratio;</span><br><span class="line">			</span><br><span class="line">      <span class="comment">// 支持最大的宽高</span></span><br><span class="line">      <span class="keyword">var</span> maxH = <span class="number">400</span>;</span><br><span class="line">      <span class="keyword">var</span> maxW = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> imageH = image.naturalHeight;</span><br><span class="line">      <span class="keyword">var</span> imageW = image.naturalWidth;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 宽高压缩</span></span><br><span class="line">      <span class="keyword">if</span> (maxH &lt; imageH) &#123;</span><br><span class="line">        needCompress = <span class="literal">true</span>;</span><br><span class="line">        ratio = imageH / maxH;</span><br><span class="line">        maxW = imageW / ratio;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (maxW &lt; imageW) &#123;</span><br><span class="line">        needCompress = <span class="literal">true</span>;</span><br><span class="line">        ratio = imageW / maxW;</span><br><span class="line">        maxH = imageH / ratio;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!needCompress) &#123;</span><br><span class="line">        maxW = imageW;</span><br><span class="line">        maxH = imageH;</span><br><span class="line">      &#125;</span><br><span class="line">			</span><br><span class="line">      <span class="comment">// 创建canvas并隐藏</span></span><br><span class="line">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">      canvas.setAttribute(<span class="string">'id'</span>, <span class="string">'__compress__'</span>);</span><br><span class="line">      canvas.width = maxW;</span><br><span class="line">      canvas.height = maxH;</span><br><span class="line">      canvas.style.visibility = <span class="string">'hidden'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">      ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, maxW, maxH);</span><br><span class="line">      ctx.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, maxW, maxH);</span><br><span class="line">			</span><br><span class="line">      <span class="comment">// canvas 压缩比值，不宜过小</span></span><br><span class="line">      <span class="keyword">const</span> compressImage = canvas.toDataURL(file.type, <span class="number">0.9</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'原来大小：'</span> + base64Image.length);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'压缩后大小：'</span> + compressImage.length)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'压缩比：'</span> + base64Image.length / compressImage.length);</span><br><span class="line">      callback(compressImage);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用案例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"upload"</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 支持的类型</span></span><br><span class="line"><span class="keyword">var</span> ACCEPT_TYPE = [ <span class="string">'image/jpeg'</span>, <span class="string">'image/png'</span>, <span class="string">'image/jpg'</span> ];</span><br><span class="line"><span class="keyword">const</span> upload = <span class="built_in">document</span>.getElementById(<span class="string">'upload'</span>);</span><br><span class="line">upload.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">const</span> [ file ] = e.target.files;</span><br><span class="line">	<span class="keyword">if</span> (!file) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">const</span> &#123; <span class="attr">type</span>: fileType, <span class="attr">size</span>: fileSize &#125; = file;</span><br><span class="line">	<span class="keyword">if</span> (ACCEPT_TYPE.indexOf(fileType) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		upload.value = <span class="literal">null</span>;</span><br><span class="line">		alert(<span class="string">'不支持的文件类型'</span> + fileType);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	compress(file, (compressImage) =&gt; <span class="built_in">console</span>.log(compressImage));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/hackycy/practice-examples/blob/master/javascript/canvas/compress.html" target="_blank" rel="noopener">案例源码</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Mac出现Kotlin could not find the required JDK tools in the Java installation</title>
    <url>/2020/12/25/%E8%A7%A3%E5%86%B3Mac%E5%87%BA%E7%8E%B0Kotlin-could-not-find-the-required-JDK-tools-in-the-Java-installation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Task :compileKotlin FAILED</span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">Execution failed <span class="keyword">for</span> task <span class="string">':compileKotlin'</span>.</span><br><span class="line">&gt; Kotlin could not find the require JDK tools <span class="keyword">in</span> the Java installtion <span class="string">'/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home'</span> used by Gradle. Make sure is running on a JDK, not JRE.</span><br></pre></td></tr></table></figure>
<p>在混编开发过程中，打包的时候出现了该问题，排查很久，总算找到了原因：<strong>没有配置JAVA_HOME环境变量</strong>。</p>
<a id="more"></a>
<p><strong>解决方案</strong></p>
<p>安装好JDK后，获取JAVA的安装路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/libexec/java_home -V</span><br><span class="line">Matching Java Virtual Machines (2):</span><br><span class="line">    1.8.201.09 (x86_64) <span class="string">"Oracle Corporation"</span> - <span class="string">"Java"</span> /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</span><br><span class="line">    1.8.0_201 (x86_64) <span class="string">"Oracle Corporation"</span> - <span class="string">"Java SE 8"</span> /Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home</span><br></pre></td></tr></table></figure>
<p>mac下编辑profile：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># android</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/Users/zjyzy/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;ANDROID_HOME&#125;</span>/tools</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;ANDROID_HOME&#125;</span>/platform-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># java</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home</span><br><span class="line"><span class="built_in">export</span> CLASSPAHT=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span>:</span><br></pre></td></tr></table></figure>
<p>编辑完成后，按<code>esc</code>退出插入模式，输入<code>:wq</code>退出保存即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>生效后验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home</span><br></pre></td></tr></table></figure>
<p>问题解决。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter屏幕适配攻略</title>
    <url>/2020/12/25/Flutter%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>目前移动端的设备已经非常多，并且不同的设备手机屏幕也不相同。</strong></p>
<p><strong>目前做移动端开发都要针对不同的设备进行一定的适配，无论是移动原生开发、小程序、H5页面。</strong></p>
<a id="more"></a>
<h1 id="Flutter中的单位"><a href="#Flutter中的单位" class="headerlink" title="Flutter中的单位"></a>Flutter中的单位</h1><p>在进行Flutter开发时，我们通常不需要传入尺寸的单位，那么Flutter使用的是什么单位呢？</p>
<ul>
<li>Flutter使用的是类似于iOS中的点pt，也就是point。</li>
<li>所以我们经常说iPhone6的尺寸是375x667，但是它的分辨率其实是750x1334。</li>
<li>因为iPhone6的dpr（devicePixelRatio）是2.0，iPhone6plus的dpr是3.0</li>
</ul>
<p><img src="1.png" alt></p>
<blockquote>
<p> 在Flutter开发中，我们使用的是对应的逻辑分辨率</p>
</blockquote>
<h1 id="Flutter设备信息"><a href="#Flutter设备信息" class="headerlink" title="Flutter设备信息"></a>Flutter设备信息</h1><p>获取屏幕上的一些信息，可以通过MediaQuery：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.媒体查询信息</span></span><br><span class="line"><span class="keyword">final</span> mediaQueryData = MediaQuery.of(context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获取宽度和高度</span></span><br><span class="line"><span class="keyword">final</span> screenWidth = mediaQueryData.size.width;</span><br><span class="line"><span class="keyword">final</span> screenHeight = mediaQueryData.size.height;</span><br><span class="line"><span class="keyword">final</span> physicalWidth = <span class="built_in">window</span>.physicalSize.width;</span><br><span class="line"><span class="keyword">final</span> physicalHeight = <span class="built_in">window</span>.physicalSize.height;</span><br><span class="line"><span class="keyword">final</span> dpr = <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"屏幕width:<span class="subst">$screenWidth</span> height:<span class="subst">$screenHeight</span>"</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"分辨率: <span class="subst">$physicalWidth</span> - <span class="subst">$physicalHeight</span>"</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"dpr: <span class="subst">$dpr</span>"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.状态栏的高度</span></span><br><span class="line"><span class="comment">// 有刘海的屏幕:44 没有刘海的屏幕为20</span></span><br><span class="line"><span class="keyword">final</span> statusBarHeight = mediaQueryData.padding.top;</span><br><span class="line"><span class="comment">// 有刘海的屏幕:34 没有刘海的屏幕0</span></span><br><span class="line"><span class="keyword">final</span> bottomHeight = mediaQueryData.padding.bottom;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"状态栏height: <span class="subst">$statusBarHeight</span> 底部高度:<span class="subst">$bottomHeight</span>"</span>);</span><br></pre></td></tr></table></figure>
<p>获取一些设备相关的信息，可以使用官方提供的一个库：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  device_info: ^<span class="number">0.4</span><span class="number">.2</span>+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h1><p>假如我们有下面这样一段代码：</p>
<ul>
<li>在屏幕中间显示一个200*200的Container</li>
<li>Container中有一段文字是30</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">"首页"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Container(</span><br><span class="line">          width: <span class="number">200</span>,</span><br><span class="line">          height: <span class="number">200</span>,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: Text(<span class="string">"Hello World"</span>, style: TextStyle(fontSize: <span class="number">30</span>, color: Colors.white),),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码在不同屏幕上会有不同的表现：</p>
<ul>
<li>很明显，如果按照上面的规则，在iPhone5上面，尺寸过大，在iPhone6plus上面尺寸过小</li>
<li>在开发中，我们应该可以根据不同的屏幕来完成尺寸的缩放</li>
</ul>
<p><img src="2.png" alt></p>
<p>在前端开发中，针对不同的屏幕常见的适配方案有下面几种：</p>
<ul>
<li>rem：<ul>
<li>rem是给根标签（HTML标签）设置一个字体大小；</li>
<li>但是不同的屏幕要动画设置不同的字体大小（可以通过媒体查询，也可以通过js动态计算）；</li>
<li>其它所有的单位都使用rem单位（相对于根标签）；</li>
</ul>
</li>
<li>vw、wh：<ul>
<li>vw和vh是将屏幕（视口）分成100等份，一个1vw相当于是1%的大小；</li>
<li>其它所有的单位都使用vw或wh单位；</li>
</ul>
</li>
<li>rpx：<ul>
<li>rpx是小程序中的适配方案，它将750px作为设计稿，1rpx=屏幕宽度/750；</li>
<li>其它所有的单位都使用rpx单位；</li>
</ul>
</li>
</ul>
<p><strong>该文采用类似小程序的rpx方案来完成Flutter的适配</strong></p>
<h1 id="rpx适配"><a href="#rpx适配" class="headerlink" title="rpx适配"></a>rpx适配</h1><p>小程序中rpx的原理是什么呢？</p>
<ul>
<li>不管是什么屏幕，统一分成750份</li>
<li>在iPhone5上：1rpx = 320/750 = 0.4266 ≈ 0.42px</li>
<li>在iPhone6上： 1rpx = 375/750 = 0.5px</li>
<li>在iPhone6plus上：1rpx = 414/750 = 0.552px</li>
</ul>
<p>那么我们就可以通过上面的计算方式，算出一个rpx，再将自己的size和rpx单位相乘即可：</p>
<ul>
<li>比如100px的宽度：100 <em> 2 </em> rpx</li>
<li>在iPhone5上计算出的结果是84px</li>
<li>在iPhone6上计算出的结果是100px</li>
<li>在iPhone6plus上计算出的结果是110.4px</li>
</ul>
<p>我们自己来封装一个工具类：</p>
<ul>
<li>工具类需要进行初始化，传入context</li>
<li>可以通过传入context，利用媒体查询获取屏幕的宽度和高度</li>
<li>也可以传入一个可选的参数，以什么尺寸作为设计稿</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="markdown">屏幕适配工具类</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScreenAdapterUtils</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> ScreenAdapterUtils _instance;</span><br><span class="line">  <span class="keyword">static</span> MediaQueryData _mediaQueryData;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">double</span> screenWidth;</span><br><span class="line">  <span class="built_in">double</span> screenHeight;</span><br><span class="line">  <span class="built_in">double</span> density = <span class="number">2.0</span>;</span><br><span class="line">  <span class="built_in">double</span> standartWidth = <span class="number">750</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">比值</span></span></span><br><span class="line">  <span class="built_in">double</span> _rpxW;</span><br><span class="line">  <span class="built_in">double</span> _rpxH;</span><br><span class="line"></span><br><span class="line">  ScreenAdapterUtils._() &#123;</span><br><span class="line">    screenWidth = _mediaQueryData.size.width;</span><br><span class="line">    screenHeight = _mediaQueryData.size.height;</span><br><span class="line">    _rpxW = screenWidth / standartWidth;</span><br><span class="line">    _rpxH = screenHeight / standartWidth;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> ScreenAdapterUtils.instance() &#123;</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">初始化</span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> init(BuildContext context) &#123;</span><br><span class="line">    _mediaQueryData = MediaQuery.of(context);</span><br><span class="line">    _instance = ScreenAdapterUtils._();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">是否为横屏</span></span></span><br><span class="line">  <span class="built_in">bool</span> isLand() &#123;</span><br><span class="line">    <span class="keyword">return</span> _mediaQueryData.orientation == Orientation.landscape;</span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line">  <span class="comment">/// <span class="markdown">需要考虑横屏和竖屏</span></span></span><br><span class="line">  <span class="built_in">double</span> px(<span class="built_in">double</span> size) &#123;</span><br><span class="line">    <span class="keyword">return</span> (isLand() ? _rpxH : _rpxW) * size * density;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">double</span> rpx(<span class="built_in">double</span> size) &#123;</span><br><span class="line">    <span class="keyword">return</span> (isLand() ? _rpxH : _rpxW) * size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化<code>ScreenAdapterUtils</code>类的属性：</p>
<ul>
<li>注意：必须在已经有<code>MaterialApp</code>的Widget中使用context，否则是无效的</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 初始化ScreenAdapterUtils</span></span><br><span class="line">    ScreenAdapterUtils.init(context);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用rpx来完成屏幕适配：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    ScreenAdapterUtils.init(context);</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">"首页"</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Container(</span><br><span class="line">          width: ScreenAdapterUtils.instance().px(<span class="number">200</span>),</span><br><span class="line">          height: ScreenAdapterUtils.instance().rpx(<span class="number">400</span>),</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: Text(<span class="string">"Hello World"</span>, style: TextStyle(fontSize: SizeFit.setPx(<span class="number">30</span>), color: Colors.white),),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现效果：</p>
<p><img src="4.png" alt></p>
<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><p>如果每次我们需要将现在的宽度或者高度，去使用<code>ScreenAdapterUtils.instance().px(200)</code>或者<code>ScreenAdapterUtils.instance().rpx(400)</code>类似的方式去适配，显然看起来非常麻烦。</p>
<p><strong>有没有更好的方案可以实现了？比如 200.px或者400.rpx，非常的清晰简洁</strong></p>
<p><strong>当然可以，我们需要依赖Dart语言的一个特性：extension</strong></p>
<ul>
<li>Dart从<code>2.7.0</code>开始，可以通过extension来给现有的类进行扩展（事实上Swift里面也有）</li>
<li>对现有的类包括：自定义的类、第三方库的类、系统的类</li>
</ul>
<p>比如我们现在对String类型扩展：</p>
<ul>
<li>扩展一个parseInt的方法，当然内部调用的是<code>int.parse(this)</code>，只是调用者变成了<code>String</code>本身</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 步骤一：扩展代码</span></span><br><span class="line"><span class="keyword">extension</span> NumberParsing <span class="keyword">on</span> <span class="built_in">String</span> &#123;</span><br><span class="line">  <span class="built_in">int</span> parseInt() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>.parse(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤二：调用代码</span></span><br><span class="line"><span class="comment">// 导入扩展类对应的模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'string_apis.dart'</span>;</span><br><span class="line"><span class="comment">// 使用里面的方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'42'</span>.parseInt()); <span class="comment">// 使用String扩展的方法</span></span><br></pre></td></tr></table></figure>
<p>显然，数字（比如200、200.0）有对应的包装类int、double，我们可以对其进行扩展：</p>
<p><strong>对int类型扩展</strong></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'../utils/screen_adapter.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> IntScreenAdapter <span class="keyword">on</span> <span class="built_in">int</span> &#123;</span><br><span class="line">  <span class="built_in">double</span> <span class="keyword">get</span> rpx &#123;</span><br><span class="line">    <span class="keyword">return</span> ScreenAdapterUtils.instance().rpx(<span class="keyword">this</span>.toDouble());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">double</span> <span class="keyword">get</span> px &#123;</span><br><span class="line">    <span class="keyword">return</span> ScreenAdapterUtils.instance().px(<span class="keyword">this</span>.toDouble());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>对double类型扩展</strong></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'../utils/screen_adapter.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> DoubleScreenAdapter <span class="keyword">on</span> <span class="built_in">double</span> &#123;</span><br><span class="line">  <span class="built_in">double</span> <span class="keyword">get</span> rpx &#123;</span><br><span class="line">    <span class="keyword">return</span> ScreenAdapterUtils.instance().rpx(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">double</span> <span class="keyword">get</span> px &#123;</span><br><span class="line">    <span class="keyword">return</span> ScreenAdapterUtils.instance().px(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用</strong></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./extension/adapter.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">200.</span>px); <span class="comment">// 在不同屏幕下200px是不同的值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">400.</span>rpx); <span class="comment">// 在不同屏幕下400rpx是不同的值</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果美工提供的设计稿为iPhone6尺寸的设计稿（最好不过），那么直接使用对着稿子量多少代码填多少rpx单位即可。</p>
<h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>当使用extension时出现报错时，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Undefined class <span class="string">'extension'</span>.</span><br><span class="line">Try changing the name to the name of an existing class, or creating a class with the name <span class="string">'extension'</span>. dartundefined_class</span><br><span class="line">This requires the <span class="string">'extension-methods'</span> language feature to be enabled.</span><br></pre></td></tr></table></figure>
<p><strong>解决办法：</strong></p>
<p>在项目根目录下创建<code>analysis_options.yaml</code>，并写入以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">include:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">analyzer:</span></span><br><span class="line">  <span class="attr">enable-experiment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">extension-methods</span></span><br><span class="line"></span><br><span class="line"><span class="attr">linter:</span></span><br></pre></td></tr></table></figure>
<p>以及设置<code>pubspec.yaml</code>的environment</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">sdk:</span> <span class="string">'&gt;=2.6.0 &lt;3.0.0'</span></span><br></pre></td></tr></table></figure>
<p>重启VSCode即可。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://juejin.cn/post/6844904176489594893" target="_blank" rel="noopener">https://juejin.cn/post/6844904176489594893</a></li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Android各版本迭代信息集合</title>
    <url>/2020/12/22/Android%E5%90%84%E7%89%88%E6%9C%AC%E8%BF%AD%E4%BB%A3%E4%BF%A1%E6%81%AF%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天分享的面试题是：</p>
<p>Android在版本迭代中，总会进行很多改动，那么你熟知各版本都改动了什么内容？又要怎么适配呢？</p>
<a id="more"></a>
<h1 id="Android4-4"><a href="#Android4-4" class="headerlink" title="Android4.4"></a>Android4.4</h1><ul>
<li>发布<code>ART</code>虚拟机，提供选项可以开启。</li>
<li><code>HttpURLConnection</code>的底层实现改为了OkHttp。</li>
</ul>
<h1 id="Android5-0"><a href="#Android5-0" class="headerlink" title="Android5.0"></a>Android5.0</h1><ul>
<li><code>ART</code>成为默认虚拟机，完全代替Dalvik虚拟机。</li>
<li><code>Context.bindService()</code> 方法需要显式 Intent，如果提供隐式 intent，将引发异常。</li>
</ul>
<h1 id="Android6-0"><a href="#Android6-0" class="headerlink" title="Android6.0"></a>Android6.0</h1><ul>
<li>增加运行时权限限制</li>
</ul>
<p>如果你的应用使用到了危险权限，比如在运行时进行检查和请求权限。<code>checkSelfPermission()</code>方法用于检查权限，<code>requestPermissions()</code> 方法用于请求权限。</p>
<ul>
<li>取消支持Apache HTTP</li>
</ul>
<p>Android 6.0 版移除了对 <code>Apache HTTP</code>相关类库的支持。要继续使用 Apache HTTP API，您必须先在 build.gradle 文件中声明以下编译时依赖项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;useLibrary &apos;org.apache.http.legacy&apos;&#125;</span><br></pre></td></tr></table></figure>
<p>有的小伙伴可能不熟悉这是啥，简单说下：</p>
<blockquote>
<p>Apache HttpClient 是Apache开源组织提供的一个开源的项目,它是一个简单的HTTP客户端（并不是浏览器），可以发送HTTP请求，接受HTTP响应。</p>
</blockquote>
<p>所以说白了，其实就是一个请求网络的项目框架。</p>
<h1 id="Android-7-0"><a href="#Android-7-0" class="headerlink" title="Android 7.0"></a>Android 7.0</h1><ul>
<li>Android 7.0 引入一项新的应用签名方案 APK Signature Scheme v2</li>
<li>Toast导致的BadTokenException</li>
<li>在Android7.0系统上，Android 框架强制执行了 StrictMode API 政策禁止向你的应用外公开 file:// URI。如果一项包含文件 file:// URI类型 的 Intent 离开你的应用，应用失败，并出现 <code>FileUriExposedException</code> 异常，如调用系统相机拍照录制视频，或裁切照片。</li>
</ul>
<p>这一点其实就是限制了在应用间共享文件，如果需要在应用间共享，需要授予要访问的URI临时访问权限，我们要做的就是注册<code>FileProvider</code>：</p>
<p>1）声明FileProvider。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">"app的包名.fileProvider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:resource</span>=<span class="string">"@xml/file_paths"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--androidx版本类路径为：androidx.core.content.FileProvider--&gt;</span></span><br></pre></td></tr></table></figure>
<p>2）编写xml文件，确定可访问的目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"> //代表设备的根目录new File("/");</span><br><span class="line">    <span class="tag">&lt;<span class="name">root-path</span> <span class="attr">name</span>=<span class="string">"root"</span> <span class="attr">path</span>=<span class="string">"."</span> /&gt;</span> </span><br><span class="line">    //context.getFilesDir()</span><br><span class="line">    <span class="tag">&lt;<span class="name">files-path</span> <span class="attr">name</span>=<span class="string">"files"</span> <span class="attr">path</span>=<span class="string">"."</span> /&gt;</span> </span><br><span class="line">    //context.getCacheDir()</span><br><span class="line">    <span class="tag">&lt;<span class="name">cache-path</span> <span class="attr">name</span>=<span class="string">"cache"</span> <span class="attr">path</span>=<span class="string">"."</span> /&gt;</span> </span><br><span class="line">    //Environment.getExternalStorageDirectory()</span><br><span class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">"external"</span> <span class="attr">path</span>=<span class="string">"."</span> /&gt;</span></span><br><span class="line">    //context.getExternalFilesDirs()</span><br><span class="line">    <span class="tag">&lt;<span class="name">external-files-path</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">path</span>=<span class="string">"path"</span> /&gt;</span></span><br><span class="line">    //getExternalCacheDirs()</span><br><span class="line">     <span class="tag">&lt;<span class="name">external-cache-path</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">path</span>=<span class="string">"path"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3）使用FileProvider</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">    Uri uri = FileProvider.getUriForFile(CameraActivity.<span class="keyword">this</span>, <span class="string">"app的包名.fileProvider"</span>, photoFile);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Uri uri = Uri.fromFile(photoFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Android8-0"><a href="#Android8-0" class="headerlink" title="Android8.0"></a>Android8.0</h1><ul>
<li>修改运行时权限错误</li>
</ul>
<p>在 <code>Android 8.0</code> 之前，如果应用在运行时请求权限并且被授予该权限，系统会错误地将属于同一权限组并且在清单中注册的其他权限也一起授予应用。对于针对 Android 8.0 的应用，系统只会授予应用明确请求的权限。然而，一旦用户为应用授予某个权限，则所有后续对该权限组中权限的请求都将被自动批准。</p>
<p>也就是说，以前你申请了<code>READ_EXTERNAL_STORAGE</code>权限，应用会同时给你授予同权限组的<code>WRITE_EXTERNAL_STORAGE</code>权限。如果Android8.0以上，只会给你授予你请求的<code>READ_EXTERNAL_STORAGE</code>权限。如果需要<code>WRITE_EXTERNAL_STORAGE</code>权限，还要单独申请，不过系统会立即授予，不会提示。</p>
<ul>
<li>修改通知</li>
</ul>
<p>Android 8.0 对于通知修改了很多，比如通知渠道、通知标志、通知超时、背景颜色。其中比较重要的就是通知渠道，其允许您为要显示的每种通知类型创建用户可自定义的渠道。</p>
<p>这样的好处就是对于某个应用可以把权限分成很多类，用户来控制是否显示哪些类别的通知。而开发者要做的就是必须设置这个渠道id，否则通知可能会失效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createNotificationChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line"></span><br><span class="line">            NotificationManager notificationManager = (NotificationManager)</span><br><span class="line">                    getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//分组（可选）</span></span><br><span class="line">            <span class="comment">//groupId要唯一</span></span><br><span class="line">            String groupId = <span class="string">"group_001"</span>;</span><br><span class="line">            NotificationChannelGroup group = <span class="keyword">new</span> NotificationChannelGroup(groupId, <span class="string">"广告"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建group</span></span><br><span class="line">            notificationManager.createNotificationChannelGroup(group);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//channelId要唯一</span></span><br><span class="line">            String channelId = <span class="string">"channel_001"</span>;</span><br><span class="line"></span><br><span class="line">            NotificationChannel adChannel = <span class="keyword">new</span> NotificationChannel(channelId,</span><br><span class="line">                    <span class="string">"推广信息"</span>, NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">            <span class="comment">//补充channel的含义（可选）</span></span><br><span class="line">            adChannel.setDescription(<span class="string">"推广信息"</span>);</span><br><span class="line">            <span class="comment">//将渠道添加进组（先创建组才能添加）</span></span><br><span class="line">            adChannel.setGroup(groupId);</span><br><span class="line">            <span class="comment">//创建channel</span></span><br><span class="line">            notificationManager.createNotificationChannel(adChannel);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建通知时，标记你的渠道id</span></span><br><span class="line">            Notification notification = <span class="keyword">new</span> Notification.Builder(MainActivity.<span class="keyword">this</span>, channelId)</span><br><span class="line">                    .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))</span><br><span class="line">                    .setContentTitle(<span class="string">"一条新通知"</span>)</span><br><span class="line">                    .setContentText(<span class="string">"这是一条测试消息"</span>)</span><br><span class="line">                    .setAutoCancel(<span class="keyword">true</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            notificationManager.notify(<span class="number">1</span>, notification);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>悬浮窗</li>
</ul>
<p>Android8.0以上必须使用新的窗口类型(<code>TYPE_APPLICATION_OVERLAY</code>)才能显示提醒悬浮窗：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">    mWindowParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    mWindowParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ALERT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>不允许安装未知来源的应用</li>
</ul>
<p>Android 8.0去除了“允许未知来源”选项，所以如果我们的App有安装App的功能（检查更新之类的），那么会无法正常安装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installAPK</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> hasInstallPermission = getPackageManager().canRequestPackageInstalls();</span><br><span class="line">            <span class="keyword">if</span> (hasInstallPermission) &#123;</span><br><span class="line">                <span class="comment">//安装应用</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//跳转至“安装未知应用”权限界面，引导用户开启权限</span></span><br><span class="line">                Uri selfPackageUri = Uri.parse(<span class="string">"package:"</span> + <span class="keyword">this</span>.getPackageName());</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES, selfPackageUri);</span><br><span class="line">                startActivityForResult(intent, <span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//安装应用</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收“安装未知应用”权限的开启结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        <span class="keyword">if</span> (requestCode == <span class="number">100</span>) &#123;</span><br><span class="line">            installAPK();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Only fullscreen opaque activities can request orientation</li>
</ul>
<p>只有全屏不透明的<code>activity</code>才可以设置方向。这应该是个bug，在Android8.0中出现，8.1中被修复。</p>
<p>我们的处理办法就是要么去掉设置方向的代码，要么舍弃透明效果。</p>
<h1 id="Android9-0"><a href="#Android9-0" class="headerlink" title="Android9.0"></a>Android9.0</h1><ul>
<li>在9.0中默认情况下启用网络传输层安全协议 (TLS)，默认情况下已停用明文支持。也就是不允许使用http请求，要求使用<code>https</code>。解决办法就是添加网络安全配置：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:networkSecurityConfig</span>=<span class="string">"@xml/network_security_config"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--或者在AndroidManifest.xml中配置：</span></span><br><span class="line"><span class="comment">android:usesCleartextTraffic="true"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>移除Apache HTTP 客户端</li>
</ul>
<p>在6.0中取消了对<code>Apache HTTP</code> 客户端的支持，Android9.0中直接移除了该库，要使用的话需要添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-library</span> <span class="attr">android:name</span>=<span class="string">"org.apache.http.legacy"</span> <span class="attr">android:required</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>前台服务调用</li>
</ul>
<p>Android 9.0 要求创建一个前台服务需要请求 FOREGROUND_SERVICE 权限，否则系统会引发 SecurityException。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;uses-permission android:name="android.permission.FOREGROUND_SERVICE" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    startForegroundService(intentService);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    startService(intentService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>不能在非Acitivity环境中启动Activity</li>
</ul>
<p>在9.0 中，不能直接非 Activity 环境中（比如Service，Application）启动 Activity，否则会崩溃报错，解决办法就是加上<code>FLAG_ACTIVITY_NEW_TASK</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, TestActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>
<h1 id="Android10"><a href="#Android10" class="headerlink" title="Android10"></a>Android10</h1><ul>
<li>分区存储</li>
</ul>
<p>Android10中默认开启了分区存储，也就是沙盒模式。应用只能看到本应用专有的目录（通过 <code>Context.getExternalFilesDir()</code> 访问）以及特定类型的媒体。</p>
<p>如果需要关闭这个功能可以配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:requestLegacyExternalStorage="true"</span><br></pre></td></tr></table></figure>
<p>分区存储下，访问文件的方法：</p>
<p>1）应用专属目录</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分区存储空间</span></span><br><span class="line"><span class="keyword">val</span> file = File(context.filesDir, filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">//应用专属外部存储空间</span></span><br><span class="line"><span class="keyword">val</span> appSpecificExternalDir = File(context.getExternalFilesDir(), filename)</span><br></pre></td></tr></table></figure>
<p>2）访问公共媒体目录文件</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> cursor = contentResolver.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"<span class="subst">$&#123;MediaStore.MediaColumns.DATE_ADDED&#125;</span> desc"</span>)</span><br><span class="line"><span class="keyword">if</span> (cursor != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">        <span class="keyword">val</span> id = cursor.getLong(cursor.getColumnIndexOrThrow(MediaStore.MediaColumns._ID))</span><br><span class="line">        <span class="keyword">val</span> uri = ContentUris.withAppendedId(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, id)</span><br><span class="line">        println(<span class="string">"image uri is <span class="variable">$uri</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    cursor.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3）SAF(存储访问框架–Storage Access Framework)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(Intent.ACTION_OPEN_DOCUMENT)</span><br><span class="line">intent.addCategory(Intent.CATEGORY_OPENABLE)</span><br><span class="line">intent.type = <span class="string">"image/*"</span></span><br><span class="line">startActivityForResult(intent, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresApi(Build.VERSION_CODES.KITKAT)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, <span class="keyword">data</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">data</span> == <span class="literal">null</span> || resultCode != Activity.RESULT_OK) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (requestCode == <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> uri = <span class="keyword">data</span>.<span class="keyword">data</span></span><br><span class="line">        println(<span class="string">"image uri is <span class="variable">$uri</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>权限再次升级</li>
</ul>
<p>从Android10开始普通应用不再允许请求权限android.permission.READ_PHONE_STATE。而且，无论你的App是否适配过Android Q（既targetSdkVersion是否大于等于29），均无法再获取到设备IMEI等设备信息。</p>
<p>如果Android10以下设备获取设备IMEI等信息，可以配置最大sdk版本：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxSdkVersion</span>=<span class="string">"28"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Android-11"><a href="#Android-11" class="headerlink" title="Android 11"></a>Android 11</h1><ul>
<li>分区存储强制执行</li>
</ul>
<p>没错，Android11强制执行分区存储，也就是沙盒模式。这次真的没有关闭功能了，离Android11出来也有一段时间了，还是抓紧适配把。</p>
<ul>
<li>修改电话权限</li>
</ul>
<p>改动了两个API：getLine1Number()和 getMsisdn() ，需要加上READ_PHONE_NUMBERS权限</p>
<ul>
<li>不允许自定义toast从后台显示了</li>
<li>必须加上v2签名</li>
<li>增加5g相关API</li>
<li>后台位置访问权限再次限制</li>
</ul>
<p>你一定很奇怪，为什么<code>Android11</code>的适配就这么草草收尾了？这可是我们最需要的啊？</p>
<p>哈哈，因为改动还是挺多的，所以给你推荐文章—<code>Android11最全适配指南</code>，应该有很多朋友都看过了：<a href="https://juejin.cn/post/6860370635664261128，或者点击文末的“阅读原文”即可。" target="_blank" rel="noopener">https://juejin.cn/post/6860370635664261128，或者点击文末的“阅读原文”即可。</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.cn/post/6898176468661059597" target="_blank" rel="noopener">https://juejin.cn/post/6898176468661059597</a> <a href="https://blog.csdn.net/qq_17766199/article/details/80965631" target="_blank" rel="noopener">https://blog.csdn.net/qq_17766199/article/details/80965631</a> <a href="https://weilu.blog.csdn.net/article/details/98336225" target="_blank" rel="noopener">https://weilu.blog.csdn.net/article/details/98336225</a></p>
<h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="http://mp.weixin.qq.com/s?__biz=MzIxNzU1Nzk3OQ==&amp;mid=2247488324&amp;idx=1&amp;sn=617d63108f012d02d426817ee62978cd&amp;chksm=97f6adf0a08124e652c7c03bfb956c6a3823a1aab4d1ace50042a2db2c76cce2c903379355b4&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Android 适配之版本适配</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIxNzU1Nzk3OQ==&amp;mid=2247491967&amp;idx=1&amp;sn=631436731bd07a3f6b8dbb90ec513ce0&amp;chksm=97f55fcba082d6dd0e1180ab7d505ce4d5786d8acb4f81d44afc47360739f2e4d7d0705d1e7b&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">谷歌：未来 Android 手机将获得 4 年软件更新</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzIxNzU1Nzk3OQ==&amp;mid=2247487853&amp;idx=1&amp;sn=1ab4a680b0d9e76f2226311f1e2ae53f&amp;chksm=97f6afd9a08126cfef73a185fd984bf8cfda36c24573134fde196fb9ade4278f5a61f4a6a14e&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Android-图片的选择，裁剪，压缩，适配高版本</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程NSThread基础小记</title>
    <url>/2020/12/15/%E5%A4%9A%E7%BA%BF%E7%A8%8BNSThread%E5%9F%BA%E7%A1%80%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>NSThread 基于OC的API,使用其简单，面向对象操作。但线程周期由程序员管理。</p>
<p><strong>优点：</strong>轻量级<br><strong>缺点：</strong>需要自己管理线程的生命周期，线程同步。线程同步对数据的加锁会有一定的系统开销</p>
<p><strong>苹果推荐是用GCD 和 NSOperation</strong></p>
<a id="more"></a>
<blockquote>
<p>注意：<br> [NSThread currentThread]跟踪任务所在线程，适用于NSThread、NSOperation、GCD<br> 使用NSThread的线程，不会自动添加autoreleasepool<br> 线程中的自动释放池：<br> @autoreleasepool{}自动释放池。主线程中是有自动释放池，使用NSThread 和 NSObject 不会有。如果在后台线程中创建了autoreleasepool的对象，需要使用自动释放池，否则会出现内存泄漏。当自动释放池销毁时，对池中的所有对象发送release消息，清空自动释放池。当所有的autorelease对象，在出了作用域后，会自动添加到最近一次创建的自动释放池中。</p>
</blockquote>
<h1 id="NSThread-常用属性"><a href="#NSThread-常用属性" class="headerlink" title="NSThread 常用属性"></a>NSThread 常用属性</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name  <span class="comment">//线程名字</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSUInteger</span> stackSize  <span class="comment">//线程栈大小,默认主线程1m ,子线程512k,次属性可读写,但是写入大小必须为4k的倍数,最小为16k</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">BOOL</span> isMainThread <span class="comment">// 是否是主线程</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">getter</span>=isExecuting) <span class="built_in">BOOL</span> executing  <span class="comment">//是否正在执行</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">getter</span>=isFinished) <span class="built_in">BOOL</span> finished  <span class="comment">//是否已经完成</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">getter</span>=isCancelled) <span class="built_in">BOOL</span> cancelled  <span class="comment">//是否已经取消</span></span><br></pre></td></tr></table></figure>
<h1 id="NSThread类方法-作用于当前线程"><a href="#NSThread类方法-作用于当前线程" class="headerlink" title="NSThread类方法 作用于当前线程"></a>NSThread类方法 作用于当前线程</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)detachNewThreadSelector:(SEL)selector toTarget:(<span class="keyword">id</span>)target withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)argument; <span class="comment">//开辟一个新的线程</span></span><br><span class="line">+ (<span class="keyword">void</span>)sleepUntilDate:(<span class="built_in">NSDate</span> *)date;<span class="comment">//休眠到什么时候（具体日期）</span></span><br><span class="line">+ (<span class="keyword">void</span>)sleepForTimeInterval:(<span class="built_in">NSTimeInterval</span>)ti; <span class="comment">//休眠一段时间单位秒</span></span><br><span class="line">+ (<span class="keyword">void</span>)exit; <span class="comment">//结束当前线程</span></span><br><span class="line">+ (<span class="keyword">double</span>)threadPriority; <span class="comment">//返回当前线程优先级</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)setThreadPriority:(<span class="keyword">double</span>)p; <span class="comment">//设置当前线程优先级 0.0~1.0</span></span><br><span class="line">+ (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSNumber</span> *&gt; *)callStackReturnAddresses <span class="comment">//返回当前线程访问的堆栈信息</span></span><br><span class="line">+ (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)callStackSymbols <span class="comment">//返回一堆十六进制的地址</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)isMainThread <span class="comment">//返回当前线程是否是主线程</span></span><br><span class="line">+ (<span class="built_in">NSThread</span> *)mainThread <span class="comment">//返回主线程</span></span><br></pre></td></tr></table></figure>
<h1 id="NSThread实例方法"><a href="#NSThread实例方法" class="headerlink" title="NSThread实例方法"></a>NSThread实例方法</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithTarget:(<span class="keyword">id</span>)target selector:(SEL)selector object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)argument </span><br><span class="line">- (<span class="keyword">void</span>)main    <span class="comment">//主方法，用于子类继承重写</span></span><br><span class="line">- (<span class="keyword">void</span>)start   <span class="comment">//开始线程</span></span><br><span class="line">- (<span class="keyword">void</span>)cancel  <span class="comment">//取消线程</span></span><br></pre></td></tr></table></figure>
<h1 id="NSThread-详解"><a href="#NSThread-详解" class="headerlink" title="NSThread 详解"></a>NSThread 详解</h1><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><ul>
<li>创建线程的方法</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithTarget:(<span class="keyword">id</span>)target selector:(SEL)selector object:(<span class="keyword">id</span>)argument <span class="comment">//此方法创建的线程需要手动启动</span></span><br><span class="line">+ (<span class="keyword">void</span>)detachNewThreadSelector:(SEL)selector toTarget:(<span class="keyword">id</span>)target withObject:(<span class="keyword">id</span>)argument<span class="comment">//创建线程后自动启动</span></span><br><span class="line">- (<span class="keyword">void</span>)performSelectorInBackground:(SEL)aSelector withObject:(<span class="keyword">id</span>)arg<span class="comment">//隐式创建线程并启动</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置线程</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过name属性设置线程名字</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)setThreadPriority:(<span class="keyword">double</span>)p设置线程的优先级</span><br></pre></td></tr></table></figure>
<ul>
<li>启动线程</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)start</span><br></pre></td></tr></table></figure>
<ul>
<li>阻塞线程</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)sleepUntilDate:(<span class="built_in">NSDate</span> *)date</span><br><span class="line">+ (<span class="keyword">void</span>)sleepForTimeInterval:(<span class="built_in">NSTimeInterval</span>)time</span><br></pre></td></tr></table></figure>
<ul>
<li>取消线程</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)cancel <span class="comment">//当前正在执行的线程不会立刻停止</span></span><br></pre></td></tr></table></figure>
<ul>
<li>强制退出线程</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)exit</span><br></pre></td></tr></table></figure>
<h2 id="NSThread的其他操作"><a href="#NSThread的其他操作" class="headerlink" title="NSThread的其他操作"></a>NSThread的其他操作</h2><ul>
<li>与主线程相关</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSThread</span> *)mainThread <span class="comment">//获取主线程</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)isMainThread<span class="comment">//判断当前线程是不是主线程</span></span><br></pre></td></tr></table></figure>
<ul>
<li>与当前线程相关</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSThread</span> *)currentThread <span class="comment">//获取当前线程</span></span><br></pre></td></tr></table></figure>
<ul>
<li>判断线程的状态</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">* 通过executing属性判断线程是否正在执行</span><br><span class="line">* 通过finished属性判断线程是否执行完毕</span><br><span class="line">* 通过cancelled属性判断线程是否被取消</span><br></pre></td></tr></table></figure>
<ul>
<li>线程同步</li>
<li>原因：多个线程访问同一资源，很可能会引起数据错乱和数据安全问题</li>
<li>解决方案：使用互斥锁来解决互斥资源访问问题，iOS中通常使用@synchronized(锁){}对临界资源进行锁定，通常使用self作为锁</li>
<li>注意：由于线程同步会消耗大量的资源，应尽量避免多个线程访问同一资源，且通常将线程同步的逻辑交由服务器端实现</li>
</ul>
<h2 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h2><ul>
<li>从子线程回到主线程</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelectorOnMainThread:(SEL)aSelector withObject:(<span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait modes:(<span class="built_in">NSArray</span> *)array</span><br><span class="line"><span class="comment">//array指定runLoop的模式，若为空，则不执行aselector方法的调用者即为aselector的调用者</span></span><br><span class="line">- (<span class="keyword">void</span>)performSelectorOnMainThread:(SEL)aSelector withObject:(<span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait</span><br></pre></td></tr></table></figure>
<ul>
<li>从一个线程到另一个线程(包括主线程)</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector onThread:(<span class="built_in">NSThread</span> )thr withObject:(<span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait modes:(<span class="built_in">NSArray</span> )array</span><br><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector onThread:(<span class="built_in">NSThread</span> *)thr withObject:(<span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait</span><br></pre></td></tr></table></figure>
<p><strong>也可以通过NSPort对象实现通信</strong></p>
<h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><h2 id="资源共享"><a href="#资源共享" class="headerlink" title="资源共享"></a>资源共享</h2><ul>
<li>1块资源可能会被多个线程共享，也就是多个线程可能会访问同一块资源</li>
<li>当多个线程访问同一块资源时，很容易引发数据错乱和数据安全问题</li>
</ul>
<h2 id="解决办法互斥锁"><a href="#解决办法互斥锁" class="headerlink" title="解决办法互斥锁"></a>解决办法互斥锁</h2><ul>
<li>互斥锁使用格式</li>
</ul>
<blockquote>
<p>1.@synchronized(锁对象) { // 需要锁定的代码 }<br>2.只用一把锁,多锁是无效的</p>
</blockquote>
<ul>
<li>互斥锁的优缺点</li>
</ul>
<blockquote>
<p>优点：能有效防止因多线程抢夺资源造成的数据安全问题<br>缺点：需要消耗大量的CPU资源</p>
</blockquote>
<ul>
<li>互斥锁的使用前提：多条线程抢夺同一块资源</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>摘抄自 <a href="https://www.jianshu.com/p/8c7635428599" target="_blank" rel="noopener">https://www.jianshu.com/p/8c7635428599</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter解决 警告 Waiting for another flutter command to release the startup lock</title>
    <url>/2020/12/14/Flutter%E8%A7%A3%E5%86%B3-%E8%AD%A6%E5%91%8A-Waiting-for-another-flutter-command-to-release-the-startup-lock/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>运行flutter命令的时候显示出如下警告时</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Waiting <span class="keyword">for</span> another flutter <span class="built_in">command</span> to release the startup lock</span><br></pre></td></tr></table></figure>
<p>当项目异常关闭，或者<code>android studio</code>用任务管理器强制关闭，下次启动就会出现上面的一行话。</p>
<p>此时需要打开<code>${flutter的安装目录}/bin/cache/lockfile</code>，删除就行了。</p>
<p>或者直接用下面的命令：<code>rm -rf ${flutter的安装目录}/bin/cache/lockfile</code></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>package.json中的browser字段</title>
    <url>/2020/12/07/package-json%E4%B8%AD%E7%9A%84browser%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时候，我们想要写一个能够跑在浏览器上和node上的包，但是由于二者在执行环境上有微弱的区别，比如浏览器上请求数据是用XMLHttpRequest对象，但是node上用的确是http或者https，诸如此类的差异还有很多。这就导致了我们要为浏览器端和node端准备不同的源文件，那我们要怎么区分不同的环境呢？</p>
<a id="more"></a>
<h1 id="依赖打包器的process-browser"><a href="#依赖打包器的process-browser" class="headerlink" title="依赖打包器的process.browser"></a>依赖打包器的process.browser</h1><p>在此，以实现base64编码为例，在同一个入口文件，可以根据打包器提供的process.browser字段（在浏览器环境下为true，在node环境下为false）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.browser) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> btoa(string)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Buffer.from(string, <span class="string">'binary'</span>).toString(<span class="string">'base64'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这种方式有一个很大的问题，打包器会在执行上诉代码中会为包引入polyfill，在这个例子中就是在浏览器中的Buffer实现<a href="https://github.com/feross/buffer" target="_blank" rel="noopener">buffer</a>。这样打包出来的体积就会很大。</p>
<h1 id="使用package-json的browser字段"><a href="#使用package-json的browser字段" class="headerlink" title="使用package.json的browser字段"></a>使用package.json的browser字段</h1><p><a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">npm doc</a>上的解释如下</p>
<blockquote>
<p>If your module is meant to be used client-side the browser field should be used instead of the main field. This is helpful to hint users that it might rely on primitives that aren’t available in Node.js modules. (e.g. window)</p>
</blockquote>
<p>总而言之就是在浏览器环境下用来替换main字段，包的作者可以通过browser字段提示包中要替换掉哪些模块或者要替换掉哪些源文件的实现。</p>
<p>browser的用法有以下几种</p>
<h2 id="browser为某一个单个的字符串"><a href="#browser为某一个单个的字符串" class="headerlink" title="browser为某一个单个的字符串"></a>browser为某一个单个的字符串</h2><p>替换main成为浏览器环境的入口文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;browser&quot;: &quot;./lib/browser/main.js&quot;</span><br></pre></td></tr></table></figure>
<h2 id="browser为一个对象，声明要替换或者忽略的文件"><a href="#browser为一个对象，声明要替换或者忽略的文件" class="headerlink" title="browser为一个对象，声明要替换或者忽略的文件"></a>browser为一个对象，声明要替换或者忽略的文件</h2><p>这种形式比较适合替换部分文件，不需要创建新的入口。key是要替换的module或者文件名，右侧是替换的</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;browser&quot;: &#123;&quot;module-a&quot;: &quot;./browser/module-a.js&quot;,&quot;./server/module-b.js&quot;: &quot;./browser/module-b.js&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>打包器在打包到浏览器环境时，会将来自<code>module-a</code>的替换为<code>./browser/module-a.js</code>。将文件’./server/module-b.js’的引入替换为<code>./browser/module-b.js</code>。</p>
<p>还可以使用布尔值防止将module加载到包中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;browser&quot;: &#123;&quot;module-a&quot;:false,&quot;./server/only.js&quot;:&quot;./shims/server-only.js&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>这种写法<code>module-a</code>在浏览器环境中将不会被打包。</p>
<p>上面的所有写法的路径都是基于<code>package.json</code>文件地址。</p>
<p><strong>需要注意的是如果你的包能在浏览器和node上无差异化地实现，就不需要browser字段了。</strong></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/25215447" target="_blank" rel="noopener">[译] 怎样写一个能同时用于 Node 和浏览器的 JavaScript 包？</a></p>
<p><a href="https://juejin.im/post/5cfe6d3be51d454d544abf30" target="_blank" rel="noopener">package.json 中 你还不清楚的 browser，module，main 字段优先级</a></p>
<p><a href="https://www.helplib.com/GitHub/article_134305" target="_blank" rel="noopener">package-browser-field-spec, 在 package.json 中，’browser’字段的规范文档</a></p>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>Package.json</tag>
      </tags>
  </entry>
  <entry>
    <title>发布npm包填坑小记</title>
    <url>/2020/09/21/%E5%8F%91%E5%B8%83npm%E5%8C%85%E5%A1%AB%E5%9D%91%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>发布NPM包时遇到的一些问题记录</strong></p>
<h1 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm ERR! publish Failed PUT 403</span><br><span class="line">npm ERR! code E403</span><br><span class="line">npm ERR! you must verify your email before publishing a new package: https://www.npmjs.com/email-edit : your-package</span><br></pre></td></tr></table></figure>
<p>这是注册的npm账号邮箱未进行验证，先去验证。一开始出现这个原因我是邮箱填错一直没收到邮件。</p>
<a id="more"></a>
<h1 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h1><p>在发布<code>npm</code>包的时候可能会出现报错信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm ERR! 403 403 Forbidden - PUT https://registry.npm.taobao.org/@hackycy%2fegg-typeorm - [no_perms] Private mode <span class="built_in">enable</span>, only admin can publish this module</span><br><span class="line">npm ERR! 403 In most cases, you or one of your dependencies are requesting</span><br><span class="line">npm ERR! 403 a package version that is forbidden by your security policy.</span><br></pre></td></tr></table></figure>
<p>出现这个问题是因为当前设置的是<code>cnpm</code>登录到的是<code>cnpm</code>，所以需要切换回来。<br>之前登录的时候就提出登录的是<code>taobao</code>只不过那个时候没注意。</p>
<p>可以输入一下命令查看当前的登录源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm config get registry</span><br><span class="line">https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>可以看到返回的地址是淘宝源，需要切回到npmjs源，输入以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> registry=http://registry.npmjs.org</span><br></pre></td></tr></table></figure>
<p>设置完之后在查看当前登录的源地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm config get registry</span><br><span class="line">http://registry.npmjs.org/</span><br></pre></td></tr></table></figure>
<p>然后重新<code>npm login</code>再发布即可。</p>
<h1 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm ERR! publish Failed PUT 403</span><br><span class="line">npm ERR! code E403</span><br><span class="line">npm ERR! You <span class="keyword">do</span> not have permission to publish <span class="string">"your-package"</span>. Are you logged <span class="keyword">in</span> as the correct user? : your-package</span><br></pre></td></tr></table></figure>
<p>你的包和别人的包重名了，npm 里的包不允许重名，所以去 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.npmjs.com%2F" target="_blank" rel="noopener">npm</a> 搜一下，改个没人用的名字就可以了。或者用<code>@your-name/your-package</code>来命名。</p>
<h1 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h1><p>无法发布私有包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm ERR! publish Failed PUT 402</span><br><span class="line">npm ERR! code E402</span><br><span class="line">npm ERR! You must sign up <span class="keyword">for</span> private packages :</span><br></pre></td></tr></table></figure>
<p>大多数是因为当你的包名为<code>@your-name/your-package</code>时才会出现，原因是当包名以<code>@your-name</code>开头时，<code>npm publish</code>会默认发布为私有包，但是 npm 的私有包需要付费，所以需要添加如下参数进行发布：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish --access public</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/weixin_38080573/article/details/88080556" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38080573/article/details/88080556</a></p>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Element-UI el-tree有关子、父节点选中问题</title>
    <url>/2020/09/15/%E8%A7%A3%E5%86%B3Element-UI-el-tree%E6%9C%89%E5%85%B3%E5%AD%90%E3%80%81%E7%88%B6%E8%8A%82%E7%82%B9%E9%80%89%E4%B8%AD%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h1><p>在使用el-tree组件在获取完数据进行页面回显数据时，因为后端返回的数据中包含父节点的关系，但是子节点并没有全部选中，就把不该选中的子节点也全部勾上了。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li><p>isLeaf（判断节点是否为叶子节点）</p>
</li>
<li><p>getNode（获取tree中对应的节点）</p>
</li>
<li><p>setChecked （设置tree中对应的节点为选中状态）</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> res = [<span class="number">1</span>,<span class="number">11</span>,<span class="number">23</span>,<span class="number">25</span>,<span class="number">28</span>,<span class="number">37</span>];</span><br><span class="line">res.map(<span class="function">(<span class="params">i, n</span>) =&gt;</span> &#123;     </span><br><span class="line">     <span class="comment">//根据i获取tree中的节点     </span></span><br><span class="line">     <span class="keyword">const</span> node = that.$refs.menuListTree.getNode(i);     </span><br><span class="line">     <span class="keyword">if</span> (node &amp;&amp; node.isLeaf) &#123;          </span><br><span class="line">         <span class="comment">//设置某个节点的勾选状态          </span></span><br><span class="line">         that.$refs.menuListTree.setChecked(node, <span class="literal">true</span>);      </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>注意，手动更新节点后无需在用回显数据赋值给data中绑定的值，否则会无效</p>
</blockquote>
<h1 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h1><p>在获取选择的节点数据时，子节点未全部选中时，<code>getCheckedKeys</code>中没有包含父节点id。</p>
<h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h2><ul>
<li>halfCheckedKeys中为半选中的节点（具体可查看官方API）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getCheckedKeys() &#123;  </span><br><span class="line">	<span class="keyword">const</span> childKeys = <span class="keyword">this</span>.$refs.menuListTree.getCheckedKeys()</span><br><span class="line">  <span class="keyword">const</span> halfKeys = <span class="keyword">this</span>.$refs.menuListTree.getHalfCheckedKeys()</span><br><span class="line">  <span class="keyword">return</span> [...childKeys, ...halfKeys]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p><a href="https://element.eleme.cn/#/zh-CN/component/tree" target="_blank" rel="noopener">https://element.eleme.cn/#/zh-CN/component/tree</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Element-UI</tag>
      </tags>
  </entry>
  <entry>
    <title>egg-core源码分析</title>
    <url>/2020/08/26/egg-core%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在翻查<a href="https://www.npmjs.com/package/egg-cool-router" target="_blank" rel="noopener">egg-cool-router</a>源码查看如何使用装饰器来注册egg路由，看到了一些很牛逼的操作，想知道为什么就查了一下关于源码讲解的文章，解惑了所以摘抄了下来。</p>
<a id="more"></a>
<h1 id="egg-core是什么"><a href="#egg-core是什么" class="headerlink" title="egg-core是什么"></a>egg-core是什么</h1><h2 id="应用、框架、插件之间的关系"><a href="#应用、框架、插件之间的关系" class="headerlink" title="应用、框架、插件之间的关系"></a>应用、框架、插件之间的关系</h2><p>在学习egg-core是什么之前，我们先了解一下关于Egg框架中应用，框架，插件这三个概念及其之间的关系：</p>
<ul>
<li>一个应用必须指定一个框架才能运行起来，根据需要我们可以给一个应用配置多个不同的插件</li>
<li>插件只完成特定独立的功能，实现即插即拔的效果</li>
<li>框架是一个启动器，必须有它才能运行起来。框架还是一个封装器，它可以在已有框架的基础上进行封装，框架也可以配置插件，其中Egg，EggCore都是框架</li>
<li>在框架的基础上还可以扩展出新的框架，也就是说框架是可以无限级继承的，有点像类的继承</li>
<li>框架/应用/插件的关于service/controler/config/middleware的目录结构配置基本相同，称之为加载单元（loadUnit），包括后面源码分析中的getLoadUnits都是为了获取这个结构</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 加载单元的目录结构如下图，其中插件和框架没有controller和router.js</span><br><span class="line"># 这个目录结构很重要，后面所有的load方法都是针对这个目录结构进行的</span><br><span class="line">        loadUnit</span><br><span class="line">        ├── package.json</span><br><span class="line">        ├── app</span><br><span class="line">        │   ├── extend</span><br><span class="line">        │   |   ├── helper.js</span><br><span class="line">        │   |   ├── request.js</span><br><span class="line">        │   |   ├── response.js</span><br><span class="line">        │   |   ├── context.js</span><br><span class="line">        │   |   ├── application.js</span><br><span class="line">        │   |   └── agent.js</span><br><span class="line">        │   ├── service</span><br><span class="line">        |   ├── controller</span><br><span class="line">        │   ├── middleware</span><br><span class="line">        │   └── router.js</span><br><span class="line">        └── config</span><br><span class="line">            ├── config.default.js</span><br><span class="line">            ├── config.prod.js</span><br><span class="line">            ├── config.test.js</span><br><span class="line">            ├── config.local.js</span><br><span class="line">            └── config.unittest.js</span><br></pre></td></tr></table></figure>
<h2 id="eggCore的主要工作"><a href="#eggCore的主要工作" class="headerlink" title="eggCore的主要工作"></a>eggCore的主要工作</h2><p>egg.js的大部分核心代码实现都在<a href="https://github.com/eggjs/egg-core" target="_blank" rel="noopener">egg-core库</a>中，egg-core主要export四个对象:</p>
<ul>
<li>EggCore类：继承于Koa，做一些初始化工作，EggCore中最主要的一个属性是loader，也就是egg-core的导出的第二个类EggLoader的实例</li>
<li>EggLoader类：整个框架目录结构（controller，service，middleware，extend，route.js）的加载和初始化工作都在该类中实现的，主要提供了几个load函数(loadPlugin,loadConfig,loadMiddleware,loadService,loadController,loadRouter等)，这些函数会根据指定目录结构下文件输出形式不同进行适配，最终挂载输出内容。</li>
<li>BaseContextClass类：这个类主要是为了我们在使用框架开发时，在controller和service作为基类使用，只有继承了该类，我们才可以通过this.ctx获取到当前请求的上下文对象</li>
<li>utils对象：几个主要的函数，包括转换成中间件函数middleware，根据不同类型文件获取文件导出内容函数loadFile等</li>
</ul>
<p>所以egg-core做的主要事情就是根据loadUnit的目录结构规范，将目录结构中的config，controller，service，middleware，plugin，router等文件load到app或者context上，开发人员只要按照这套约定规范，就可以很方便进行开发，以下是EggCore的exports对象源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core源码 -&gt; index文件导出的数据结构</span></span><br><span class="line"><span class="keyword">const</span> EggCore = <span class="built_in">require</span>(<span class="string">'./lib/egg'</span>);</span><br><span class="line"><span class="keyword">const</span> EggLoader = <span class="built_in">require</span>(<span class="string">'./lib/loader/egg_loader'</span>);</span><br><span class="line"><span class="keyword">const</span> BaseContextClass = <span class="built_in">require</span>(<span class="string">'./lib/utils/base_context_class'</span>);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./lib/utils'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  EggCore,</span><br><span class="line">  EggLoader,</span><br><span class="line">  BaseContextClass,</span><br><span class="line">  utils,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="EggLoader的具体实现源码学习"><a href="#EggLoader的具体实现源码学习" class="headerlink" title="EggLoader的具体实现源码学习"></a>EggLoader的具体实现源码学习</h3><h4 id="EggCore类源码学习"><a href="#EggCore类源码学习" class="headerlink" title="EggCore类源码学习"></a>EggCore类源码学习</h4><p>EggCore类是算是上文提到的框架范畴，它从Koa类继承而来，并做了一些初始化工作，其中有三个主要属性是：</p>
<ul>
<li>loader：这个对象是EggLoader的实例，定义了多个load函数，用于对loadUnit目录下的文件进行加载，后面后专门讲这个类的是实现</li>
<li>router：是EggRouter类的实例，从<a href="https://github.com/alexmingoia/koa-router" target="_blank" rel="noopener">koa-router</a>继承而来，用于egg框架的路由管理和分发，这个类的实现在后面的loadRouter函数会有说明</li>
<li>lifecycle：这个属性用于app的生命周期管理，由于和整个文件加载逻辑关系不大，所以这里不作说明</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core源码 -&gt; EggCore类的部分实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> KoaApplication = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> EGG_LOADER = <span class="built_in">Symbol</span>.for(<span class="string">'egg#loader'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EggCore</span> <span class="keyword">extends</span> <span class="title">KoaApplication</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">const</span> Loader = <span class="keyword">this</span>[EGG_LOADER];</span><br><span class="line">        <span class="comment">//初始化loader对象</span></span><br><span class="line">        <span class="keyword">this</span>.loader = <span class="keyword">new</span> Loader(&#123;</span><br><span class="line">            baseDir: options.baseDir,          <span class="comment">//项目启动的根目录</span></span><br><span class="line">            app: <span class="keyword">this</span>,                         <span class="comment">//EggCore实例本身</span></span><br><span class="line">            plugins: options.plugins,          <span class="comment">//自定义插件配置信息，设置插件配置信息有多种方式，后面我们会讲</span></span><br><span class="line">            logger: <span class="keyword">this</span>.console,             </span><br><span class="line">            serverScope: options.serverScope, </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> [EGG_LOADER]() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'./loader/egg_loader'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//router对象</span></span><br><span class="line">    <span class="keyword">get</span> router() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>[ROUTER]) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>[ROUTER];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> router = <span class="keyword">this</span>[ROUTER] = <span class="keyword">new</span> Router(&#123; <span class="attr">sensitive</span>: <span class="literal">true</span> &#125;, <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// register router middleware</span></span><br><span class="line">        <span class="keyword">this</span>.beforeStart(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.use(router.middleware());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> router;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生命周期对象初始化</span></span><br><span class="line">    <span class="keyword">this</span>.lifecycle = <span class="keyword">new</span> Lifecycle(&#123;</span><br><span class="line">        baseDir: options.baseDir,</span><br><span class="line">        app: <span class="keyword">this</span>,</span><br><span class="line">        logger: <span class="keyword">this</span>.console,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="EggLoader类源码学习"><a href="#EggLoader类源码学习" class="headerlink" title="EggLoader类源码学习"></a>EggLoader类源码学习</h4><p>如果说eggCore是egg框架的精华所在，那么eggLoader可以说是eggCore的精华所在，下面我们主要从EggLoader的实现细节开始学习eggCore这个库：</p>
<p>EggLoader首先对app中的一些基本信息（pkg/eggPaths/serverEnv/appInfo/serverScope/baseDir等）进行整理，并且定义一些基础共用函数(getEggPaths/getTypeFiles/getLoadUnits/loadFile)，所有的这些基础准备都是为了后面介绍的几个load函数作准备，我们下面看一下其基础部分的实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core源码 -&gt; EggLoader中基本属性和基本函数的实现</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EggLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.options = options;</span><br><span class="line">        <span class="keyword">this</span>.app = <span class="keyword">this</span>.options.app;</span><br><span class="line">        <span class="comment">//pkg是根目录的package.json输出对象</span></span><br><span class="line">        <span class="keyword">this</span>.pkg = utility.readJSONSync(path.join(<span class="keyword">this</span>.options.baseDir, <span class="string">'package.json'</span>));</span><br><span class="line">        <span class="comment">//eggPaths是所有框架目录的集合体，虽然我们上面提到一个应用只有一个框架，但是框架可以在框架的基础上实现多级继承，所以是多个eggPath</span></span><br><span class="line">        <span class="comment">//在实现框架类的时候，必须指定属性Symbol.for('egg#eggPath')，这样才能找到框架的目录结构</span></span><br><span class="line">        <span class="comment">//下面有关于getEggPaths函数的实现分析</span></span><br><span class="line">        <span class="keyword">this</span>.eggPaths = <span class="keyword">this</span>.getEggPaths();</span><br><span class="line">        <span class="keyword">this</span>.serverEnv = <span class="keyword">this</span>.getServerEnv();</span><br><span class="line">        <span class="comment">//获取app的一些基本配置信息(name,baseDir,env,scope,pkg等)</span></span><br><span class="line">        <span class="keyword">this</span>.appInfo = <span class="keyword">this</span>.getAppInfo();</span><br><span class="line">        <span class="keyword">this</span>.serverScope = options.serverScope !== <span class="literal">undefined</span></span><br><span class="line">            ? options.serverScope</span><br><span class="line">            : <span class="keyword">this</span>.getServerScope();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归获取继承链上所有eggPath</span></span><br><span class="line">    getEggPaths() &#123;</span><br><span class="line">        <span class="keyword">const</span> EggCore = <span class="built_in">require</span>(<span class="string">'../egg'</span>);</span><br><span class="line">        <span class="keyword">const</span> eggPaths = [];</span><br><span class="line">        <span class="keyword">let</span> proto = <span class="keyword">this</span>.app;</span><br><span class="line">        <span class="comment">//循环递归的获取原型链上的框架Symbol.for('egg#eggPath')属性</span></span><br><span class="line">        <span class="keyword">while</span> (proto) &#123;</span><br><span class="line">            proto = <span class="built_in">Object</span>.getPrototypeOf(proto);</span><br><span class="line">            <span class="comment">//直到proto属性等于EggCore本身，说明到了最上层的框架类，停止循环</span></span><br><span class="line">            <span class="keyword">if</span> (proto === <span class="built_in">Object</span>.prototype || proto === EggCore.prototype) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> eggPath = proto[<span class="built_in">Symbol</span>.for(<span class="string">'egg#eggPath'</span>)];</span><br><span class="line">            <span class="keyword">const</span> realpath = fs.realpathSync(eggPath);</span><br><span class="line">            <span class="keyword">if</span> (!eggPaths.includes(realpath)) &#123;</span><br><span class="line">                eggPaths.unshift(realpath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> eggPaths;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//函数输入：config或者plugin；函数输出：当前环境下的所有配置文件</span></span><br><span class="line">    <span class="comment">//该函数会根据serverScope，serverEnv的配置信息，返回当前环境对应filename的所有配置文件</span></span><br><span class="line">    <span class="comment">//比如我们的serverEnv=prod，serverScope=online，那么返回的config配置文件是['config.default', 'config.prod', 'config.online_prod']</span></span><br><span class="line">    <span class="comment">//这几个文件加载顺序非常重要，因为最终获取到的config信息会进行深度的覆盖，后面的文件信息会覆盖前面的文件信息</span></span><br><span class="line">    getTypeFiles(filename) &#123;</span><br><span class="line">        <span class="keyword">const</span> files = [ <span class="string">`<span class="subst">$&#123;filename&#125;</span>.default`</span> ];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.serverScope) files.push(<span class="string">`<span class="subst">$&#123;filename&#125;</span>.<span class="subst">$&#123;<span class="keyword">this</span>.serverScope&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.serverEnv === <span class="string">'default'</span>) <span class="keyword">return</span> files;</span><br><span class="line"></span><br><span class="line">        files.push(<span class="string">`<span class="subst">$&#123;filename&#125;</span>.<span class="subst">$&#123;<span class="keyword">this</span>.serverEnv&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.serverScope) files.push(<span class="string">`<span class="subst">$&#123;filename&#125;</span>.<span class="subst">$&#123;<span class="keyword">this</span>.serverScope&#125;</span>_<span class="subst">$&#123;<span class="keyword">this</span>.serverEnv&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> files;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取框架、应用、插件的loadUnits目录集合，上文有关于loadUnits的说明</span></span><br><span class="line">    <span class="comment">//这个函数在下文中介绍的loadSerivce,loadMiddleware,loadConfig,loadExtend中都会用到，因为plugin，framework，app中都会有关系这些信息的配置</span></span><br><span class="line">    getLoadUnits() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dirs) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.dirs;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> dirs = <span class="keyword">this</span>.dirs = [];</span><br><span class="line">        <span class="comment">//插件目录，关于orderPlugins会在后面的loadPlugin函数中讲到</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.orderPlugins) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> <span class="keyword">this</span>.orderPlugins) &#123;</span><br><span class="line">                dirs.push(&#123;</span><br><span class="line">                    path: plugin.path,</span><br><span class="line">                    type: <span class="string">'plugin'</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//框架目录</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> eggPath <span class="keyword">of</span> <span class="keyword">this</span>.eggPaths) &#123;</span><br><span class="line">            dirs.push(&#123;</span><br><span class="line">                path: eggPath,</span><br><span class="line">                type: <span class="string">'framework'</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//应用目录</span></span><br><span class="line">        dirs.push(&#123;</span><br><span class="line">            path: <span class="keyword">this</span>.options.baseDir,</span><br><span class="line">            type: <span class="string">'app'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> dirs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个函数用于读取某个LoadUnit下的文件具体内容，包括js文件，json文件及其它普通文件</span></span><br><span class="line">    loadFile(filepath, ...inject) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!filepath || !fs.existsSync(filepath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inject.length === <span class="number">0</span>) inject = [ <span class="keyword">this</span>.app ];</span><br><span class="line">        <span class="keyword">let</span> ret = <span class="keyword">this</span>.requireFile(filepath);</span><br><span class="line">        <span class="comment">//这里要注意，如果某个js文件导出的是一个函数，且不是一个Class，那么Egg认为这个函数的格式是：app =&gt; &#123;&#125;,输入是EggCore实例，输出是真正需要的信息</span></span><br><span class="line">        <span class="keyword">if</span> (is<span class="function">.<span class="keyword">function</span>(<span class="params">ret</span>) &amp;&amp; !<span class="title">is</span>.<span class="title">class</span>(<span class="params">ret</span>)) </span>&#123;</span><br><span class="line">            ret = ret(...inject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="各种loader函数的实现源码分析"><a href="#各种loader函数的实现源码分析" class="headerlink" title="各种loader函数的实现源码分析"></a>各种loader函数的实现源码分析</h3><p>上文中只是介绍了EggLoader中的一些基本属性和函数，那么如何将LoadUnits中的不同类型的文件分别加载进来呢，egg-core中每一种类型（service/controller等）的文件加载都在一个独立的文件里实现。比如我们加载controller文件可以通过’./mixin/controller’目录下的loadController完成，加载service文件可以通过’./mixin/service’下的loadService函数完成，然后将这些方法挂载EggLoader的原型上，这样就可以直接在EggLoader的实例上使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core源码 -&gt; 混入不同目录文件的加载方法到EggLoader的原型上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loaders = [</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./mixin/plugin'</span>),            <span class="comment">//loadPlugin方法</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./mixin/config'</span>),            <span class="comment">//loadConfig方法</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./mixin/extend'</span>),            <span class="comment">//loadExtend方法</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./mixin/custom'</span>),            <span class="comment">//loadCustomApp和loadCustomAgent方法</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./mixin/service'</span>),           <span class="comment">//loadService方法</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./mixin/middleware'</span>),        <span class="comment">//loadMiddleware方法</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./mixin/controller'</span>),        <span class="comment">//loadController方法</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./mixin/router'</span>),            <span class="comment">//loadRouter方法</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> loader <span class="keyword">of</span> loaders) &#123;</span><br><span class="line">  <span class="built_in">Object</span>.assign(EggLoader.prototype, loader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们按照上述loaders中定义的元素顺序，对各个load函数的源码实现进行一一分析：</p>
<h4 id="loadPlugin函数"><a href="#loadPlugin函数" class="headerlink" title="loadPlugin函数"></a>loadPlugin函数</h4><p>插件是一个迷你的应用，没有包含router.js和controller文件夹，我们上文也提到，应用和框架里都可以包含插件，而且还可以通过环境变量和初始化参数传入，关于插件初始化的几个参数：</p>
<ul>
<li>enable： 是否开启插件</li>
<li>env： 选择插件在哪些环境运行</li>
<li>path： 插件的所在路径</li>
<li>package： 和path只能设置其中一个，根据package名称去node_modules里查询plugin，后面源码里有详细说明</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core源码 -&gt; loadPlugin函数部分源码</span></span><br><span class="line"></span><br><span class="line">loadPlugin() &#123;</span><br><span class="line">    <span class="comment">//加载应用目录下的plugins</span></span><br><span class="line">    <span class="comment">//readPluginConfigs这个函数会先调用我们上文提到的getTypeFiles获取到app目录下所有的plugin文件名，然后按照文件顺序进行加载并合并，并规范plugin的数据结构</span></span><br><span class="line">    <span class="keyword">const</span> appPlugins = <span class="keyword">this</span>.readPluginConfigs(path.join(<span class="keyword">this</span>.options.baseDir, <span class="string">'config/plugin.default'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载框架目录下的plugins</span></span><br><span class="line">    <span class="keyword">const</span> eggPluginConfigPaths = <span class="keyword">this</span>.eggPaths.map(<span class="function"><span class="params">eggPath</span> =&gt;</span> path.join(eggPath, <span class="string">'config/plugin.default'</span>));</span><br><span class="line">    <span class="keyword">const</span> eggPlugins = <span class="keyword">this</span>.readPluginConfigs(eggPluginConfigPaths);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以通过环境变量EGG_PLUGINS对配置plugins，从环境变量加载plugins</span></span><br><span class="line">    <span class="keyword">let</span> customPlugins;</span><br><span class="line">    <span class="keyword">if</span> (process.env.EGG_PLUGINS) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        customPlugins = <span class="built_in">JSON</span>.parse(process.env.EGG_PLUGINS);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        debug(<span class="string">'parse EGG_PLUGINS failed, %s'</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从启动参数options里加载plugins</span></span><br><span class="line">    <span class="comment">//启动参数的plugins和环境变量的plugins都是自定义的plugins，可以对默认的应用和框架plugin进行覆盖</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.plugins) &#123;</span><br><span class="line">      customPlugins = <span class="built_in">Object</span>.assign(&#123;&#125;, customPlugins, <span class="keyword">this</span>.options.plugins);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.allPlugins = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.appPlugins = appPlugins;</span><br><span class="line">    <span class="keyword">this</span>.customPlugins = customPlugins;</span><br><span class="line">    <span class="keyword">this</span>.eggPlugins = eggPlugins;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照顺序对plugin进行合并及覆盖</span></span><br><span class="line">    <span class="comment">//_extendPlugins在合并的过程中，对相同name的plugin中的属性进行覆盖，有一个特殊处理的地方，如果某个属性的值是空数组，那么不会覆盖前者</span></span><br><span class="line">    <span class="keyword">this</span>._extendPlugins(<span class="keyword">this</span>.allPlugins, eggPlugins);</span><br><span class="line">    <span class="keyword">this</span>._extendPlugins(<span class="keyword">this</span>.allPlugins, appPlugins);</span><br><span class="line">    <span class="keyword">this</span>._extendPlugins(<span class="keyword">this</span>.allPlugins, customPlugins);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> enabledPluginNames = []; <span class="comment">// enabled plugins that configured explicitly</span></span><br><span class="line">    <span class="keyword">const</span> plugins = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> env = <span class="keyword">this</span>.serverEnv;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">in</span> <span class="keyword">this</span>.allPlugins) &#123;</span><br><span class="line">      <span class="keyword">const</span> plugin = <span class="keyword">this</span>.allPlugins[name];</span><br><span class="line">      <span class="comment">//plugin的path可能是直接指定的，也有可能指定了一个package的name，然后从node_modules中查找</span></span><br><span class="line">      <span class="comment">//从node_modules中查找的顺序是：&#123;APP_PATH&#125;/node_modules -&gt; &#123;EGG_PATH&#125;/node_modules -&gt; $CWD/node_modules</span></span><br><span class="line">      plugin.path = <span class="keyword">this</span>.getPluginPath(plugin, <span class="keyword">this</span>.options.baseDir);</span><br><span class="line">      <span class="comment">//这个函数会读取每个plugin.path路径下的package.json,获取plugin的version，并会使用package.json中的dependencies，optionalDependencies, env变量作覆盖</span></span><br><span class="line">      <span class="keyword">this</span>.mergePluginConfig(plugin);</span><br><span class="line">      <span class="comment">// 有些plugin只有在某些环境（serverEnv）下才能使用，否则改成enable=false</span></span><br><span class="line">      <span class="keyword">if</span> (env &amp;&amp; plugin.env.length &amp;&amp; !plugin.env.includes(env)) &#123;</span><br><span class="line">        plugin.enable = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//获取enable=true的所有pluginnName</span></span><br><span class="line">      plugins[name] = plugin;</span><br><span class="line">      <span class="keyword">if</span> (plugin.enable) &#123;</span><br><span class="line">        enabledPluginNames.push(name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个函数会检查插件的依赖关系，插件的依赖关系在dependencies中定义，最后返回所有需要的插件</span></span><br><span class="line">    <span class="comment">//如果enable=true的插件依赖的插件不在已有的插件中，或者插件的依赖关系存在循环引用，则会抛出异常</span></span><br><span class="line">    <span class="comment">//如果enable=true的依赖插件为enable=false，那么该被依赖的插件会被改为enable=true</span></span><br><span class="line">    <span class="keyword">this</span>.orderPlugins = <span class="keyword">this</span>.getOrderPlugins(plugins, enabledPluginNames, appPlugins);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后我们以对象的方式将enable=true的插件挂载在this对象上</span></span><br><span class="line">    <span class="keyword">const</span> enablePlugins = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> <span class="keyword">this</span>.orderPlugins) &#123;</span><br><span class="line">      enablePlugins[plugin.name] = plugin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.plugins = enablePlugins;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="loadConfig函数"><a href="#loadConfig函数" class="headerlink" title="loadConfig函数"></a>loadConfig函数</h4><p>配置信息的管理对于一个应用来说非常重要，我们需要对不同的部署环境的配置进行管理，Egg就是针对环境加载不同的配置文件，然后将配置挂载在app上，</p>
<p>加载config的逻辑相对简单，就是按照顺序加载所有loadUnit目录下的config文件内容，进行合并，最后将config信息挂载在this对象上，整个加载函数请看下面源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core源码 -&gt; loadConfig函数分析</span></span><br><span class="line"></span><br><span class="line">loadConfig() &#123;</span><br><span class="line">    <span class="keyword">this</span>.configMeta = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line">    <span class="comment">//这里之所以先加载app相关的config，是因为在加载plugin和framework的config时会使用到app的config</span></span><br><span class="line">    <span class="keyword">const</span> appConfig = <span class="keyword">this</span>._preloadAppConfig();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//config的加载顺序为：plugin config.default -&gt; framework config.default -&gt; app config.default -&gt; plugin config.&#123;env&#125; -&gt; framework config.&#123;env&#125; -&gt; app config.&#123;env&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> filename <span class="keyword">of</span> <span class="keyword">this</span>.getTypeFiles(<span class="string">'config'</span>)) &#123;</span><br><span class="line">    <span class="comment">// getLoadUnits函数前面有介绍，获取loadUnit目录集合</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> unit <span class="keyword">of</span> <span class="keyword">this</span>.getLoadUnits()) &#123;</span><br><span class="line">        <span class="keyword">const</span> isApp = unit.type === <span class="string">'app'</span>;</span><br><span class="line">        <span class="comment">//如果是加载插件和框架下面的config，那么会将appConfig当作参数传入</span></span><br><span class="line">        <span class="comment">//这里appConfig已经加载了一遍了，又重复加载了，不知道处于什么原因，下面会有_loadConfig函数源码分析</span></span><br><span class="line">        <span class="keyword">const</span> config = <span class="keyword">this</span>._loadConfig(unit.path, filename, isApp ? <span class="literal">undefined</span> : appConfig, unit.type);</span><br><span class="line">        <span class="keyword">if</span> (!config) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//config进行覆盖</span></span><br><span class="line">        extend(<span class="literal">true</span>, target, config);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.config = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_loadConfig(dirpath, filename, extraInject, type) &#123;</span><br><span class="line">    <span class="keyword">const</span> isPlugin = type === <span class="string">'plugin'</span>;</span><br><span class="line">    <span class="keyword">const</span> isApp = type === <span class="string">'app'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> filepath = <span class="keyword">this</span>.resolveModule(path.join(dirpath, <span class="string">'config'</span>, filename));</span><br><span class="line">    <span class="comment">//如果没有config.default文件，则用config.js文件替代，隐藏逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (filename === <span class="string">'config.default'</span> &amp;&amp; !filepath) &#123;</span><br><span class="line">      filepath = <span class="keyword">this</span>.resolveModule(path.join(dirpath, <span class="string">'config/config'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//loadFile函数我们在EggLoader中讲到过，如果config导出的是一个函数会先执行这个函数，将函数的返回结果导出，函数的参数也就是[this.appInfo extraInject]</span></span><br><span class="line">    <span class="keyword">const</span> config = <span class="keyword">this</span>.loadFile(filepath, <span class="keyword">this</span>.appInfo, extraInject);</span><br><span class="line">    <span class="keyword">if</span> (!config) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//框架使用哪些中间件也是在config里作配置的，后面关于loadMiddleware函数实现中有说明</span></span><br><span class="line">    <span class="comment">//coreMiddleware只能在框架里使用</span></span><br><span class="line">    <span class="keyword">if</span> (isPlugin || isApp) &#123;</span><br><span class="line">      assert(!config.coreMiddleware, <span class="string">'Can not define coreMiddleware in app or plugin'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//middleware只能在应用里定义</span></span><br><span class="line">    <span class="keyword">if</span> (!isApp) &#123;</span><br><span class="line">      assert(!config.middleware, <span class="string">'Can not define middleware in '</span> + filepath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里是为了设置configMeta，表示每个配置项是从哪里来的</span></span><br><span class="line">    <span class="keyword">this</span>[SET_CONFIG_META](config, filepath);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="loadExtend相关函数"><a href="#loadExtend相关函数" class="headerlink" title="loadExtend相关函数"></a>loadExtend相关函数</h4><p>这里的loadExtend是一个笼统的概念，其实是针对koa中的app.response，app.respond，app.context以及app本身进行扩展，同样是根据所有loadUnits下的配置顺序进行加载</p>
<p>下面看一下loadExtend这个函数的实现，一个通用的加载函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core -&gt; loadExtend函数实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//name输入是"response"/"respond"/"context"/"app"中的一个，proto是被扩展的对象</span></span><br><span class="line">loadExtend(name, proto) &#123;</span><br><span class="line">    <span class="comment">//获取指定name所有loadUnits下的配置文件路径</span></span><br><span class="line">    <span class="keyword">const</span> filepaths = <span class="keyword">this</span>.getExtendFilePaths(name);</span><br><span class="line">    <span class="keyword">const</span> isAddUnittest = <span class="string">'EGG_MOCK_SERVER_ENV'</span> <span class="keyword">in</span> process.env &amp;&amp; <span class="keyword">this</span>.serverEnv !== <span class="string">'unittest'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = filepaths.length; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> filepath = filepaths[i];</span><br><span class="line">      filepaths.push(filepath + <span class="string">`.<span class="subst">$&#123;<span class="keyword">this</span>.serverEnv&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">if</span> (isAddUnittest) filepaths.push(filepath + <span class="string">'.unittest'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里并没有对属性的直接覆盖，而是对原先的PropertyDescriptor的get和set进行合并</span></span><br><span class="line">    <span class="keyword">const</span> mergeRecord = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> filepath <span class="keyword">of</span> filepaths) &#123;</span><br><span class="line">      filepath = <span class="keyword">this</span>.resolveModule(filepath);</span><br><span class="line">      <span class="keyword">const</span> ext = <span class="keyword">this</span>.requireFile(filepath);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> properties = <span class="built_in">Object</span>.getOwnPropertyNames(ext)</span><br><span class="line">        .concat(<span class="built_in">Object</span>.getOwnPropertySymbols(ext));</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> property <span class="keyword">of</span> properties) &#123;</span><br><span class="line">        <span class="keyword">let</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(ext, property);</span><br><span class="line">        <span class="keyword">let</span> originalDescriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(proto, property);</span><br><span class="line">        <span class="keyword">if</span> (!originalDescriptor) &#123;</span><br><span class="line">          <span class="keyword">const</span> originalProto = originalPrototypes[name];</span><br><span class="line">          <span class="keyword">if</span> (originalProto) &#123;</span><br><span class="line">            originalDescriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(originalProto, property);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果原始对象上已经存在相关属性的Descriptor，那么对其set和get方法进行合并</span></span><br><span class="line">        <span class="keyword">if</span> (originalDescriptor) &#123;</span><br><span class="line">          <span class="comment">// don't override descriptor</span></span><br><span class="line">          descriptor = <span class="built_in">Object</span>.assign(&#123;&#125;, descriptor);</span><br><span class="line">          <span class="keyword">if</span> (!descriptor.set &amp;&amp; originalDescriptor.set) &#123;</span><br><span class="line">            descriptor.set = originalDescriptor.set;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (!descriptor.get &amp;&amp; originalDescriptor.get) &#123;</span><br><span class="line">            descriptor.get = originalDescriptor.get;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则直接覆盖</span></span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(proto, property, descriptor);</span><br><span class="line">        mergeRecord.set(property, filepath);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="loadService函数"><a href="#loadService函数" class="headerlink" title="loadService函数"></a>loadService函数</h4><h5 id="如何在egg框架中使用service"><a href="#如何在egg框架中使用service" class="headerlink" title="如何在egg框架中使用service"></a>如何在egg框架中使用service</h5><p>loadService函数的实现是所有load函数中最复杂的一个，我们不着急看源码，先看一下service在egg框架中如何使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core源码 -&gt; 如何在egg框架中使用service</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1：app/service/user1.js</span></span><br><span class="line"><span class="comment">//这个是最标准的做法，导出一个class，这个class继承了require('egg').Service，其实也就是我们上文提到的eggCore导出的BaseContextClass</span></span><br><span class="line"><span class="comment">//最终我们在业务逻辑中获取到的是这个class的一个实例，在load的时候是将app.context当作新建实例的参数</span></span><br><span class="line"><span class="comment">//在controller中调用方式：this.ctx.service.user1.find(1)</span></span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> find(uid) &#123;</span><br><span class="line">    <span class="comment">//此时我们可以通过this.ctx,this.app,this.config,this.service获取到有用的信息，尤其是this.ctx非常重要，每个请求对应一个ctx，我们可以查询到当前请求的所有信息</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.db.query(<span class="string">'select * from user where uid = ?'</span>, uid);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：app/service/user2.js</span></span><br><span class="line"><span class="comment">//这个做法是我模拟了一个BaseContextClass，当然也就可以实现方法1的目的，但是不推荐</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(ctx) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx = ctx;</span><br><span class="line">    <span class="keyword">this</span>.app = ctx.app;</span><br><span class="line">    <span class="keyword">this</span>.config = ctx.app.config;</span><br><span class="line">    <span class="keyword">this</span>.service = ctx.service;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">async</span> find(uid) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.db.query(<span class="string">'select * from user where uid = ?'</span>, uid);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3：app/service/user3.js</span></span><br><span class="line"><span class="comment">//service中也可以export函数，在load的时候会主动调用这个函数，把appInfo参数传入，最终获取到的是函数返回结果</span></span><br><span class="line"><span class="comment">//在controller中调用方式：this.ctx.service.user3.getAppName(1)，这个时候在service中获取不到当前请求的上下文ctx</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">appInfo</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">async</span> getAppName(uid)&#123;</span><br><span class="line">            <span class="keyword">return</span> appInfo.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式4：app/service/user4.js</span></span><br><span class="line"><span class="comment">//service也可以直接export普通的原生对象，load的时候会将该普通对象返回，同样获取不到当前请求的上下文ctx</span></span><br><span class="line"><span class="comment">//在controller中调用方式：this.ctx.service.user4.getAppName(1)</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="keyword">async</span> getAppName(uid)&#123;</span><br><span class="line">        <span class="keyword">return</span> appInfo.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们上面列举了service下的js文件的四种写法，都是从每次请求的上下文this.ctx获取到service对象，然后就可以使用到每个service文件导出的对象了，这里主要有两个地方需要注意：</p>
<ol>
<li><p>为什么我们可以从每个请求的this.ctx上获取到service对象呢：</p>
<p>看过koa源码的同学知道，this.ctx其实是从app.context继承而来，所以我们只要把service绑定到app.context上，那么当前请求的上下文ctx自然可以拿到service对象，eggLoader也是这样做的</p>
</li>
<li><p>针对上述四种使用场景，具体导出实例是怎么处理的呢？</p>
<ul>
<li>如果导出的是一个类，EggLoader会主动以ctx对象去初始化这个实例并导出，所以我们就可以直接在该类中使用this.ctx获取当前请求的上下文了</li>
<li>如果导出的是一个函数，那么EggLoader会以app作为参数运行这个函数并将结果导出</li>
<li>如果是一个普通的对象，直接导出</li>
</ul>
</li>
</ol>
<h5 id="FileLoader类的实现分析"><a href="#FileLoader类的实现分析" class="headerlink" title="FileLoader类的实现分析"></a>FileLoader类的实现分析</h5><p>在实现loadService函数时，有一个基础类就是FileLoader，它同时也是loadMiddleware，loadController实现的基础，这个类提供一个load函数根据目录结构和文件内容进行解析，返回一个target对象，我们可以根据文件名以及子文件名以及函数名称获取到service里导出的内容，target结构类似这样：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"file1"</span>: &#123;</span><br><span class="line">        <span class="attr">"file11"</span>: &#123;</span><br><span class="line">            <span class="attr">"function1"</span>: a =&gt; a</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"file2"</span>: &#123;</span><br><span class="line">        <span class="attr">"function2"</span>: a =&gt; a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们先看一下fileLoader这个类的实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core源码 -&gt; FileLoader实现</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLoader</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">/*options里几个重要参数的含义:</span></span><br><span class="line"><span class="comment">    1.directory: 需要加载文件的所有目录</span></span><br><span class="line"><span class="comment">    2.target: 最终加载成功后的目标对象</span></span><br><span class="line"><span class="comment">    3.initializer：一个初始化函数，对文件导出内容进行初始化，这个在loadController实现时会用到</span></span><br><span class="line"><span class="comment">    4.inject：如果某个文件的导出对象是一个函数，那么将该值传入函数并执行导出，一般都是this.app</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">this</span>.options = <span class="built_in">Object</span>.assign(&#123;&#125;, defaults, options);</span><br><span class="line">  &#125;</span><br><span class="line">  load() &#123;</span><br><span class="line">    <span class="comment">//解析directory下的文件，下面有parse函数的部分实现</span></span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">this</span>.parse();</span><br><span class="line">    <span class="keyword">const</span> target = <span class="keyword">this</span>.options.target;</span><br><span class="line">    <span class="comment">//item1 = &#123; properties: [ 'a', 'b', 'c'], exports1 &#125;,item2 = &#123; properties: [ 'a', 'b', 'd'], exports2 &#125;</span></span><br><span class="line">    <span class="comment">// =&gt; target = &#123;a: &#123;b: &#123;c: exports1, d: exports2&#125;&#125;&#125;</span></span><br><span class="line">    <span class="comment">//根据文件路径名称递归生成一个大的对象target，我们通过target.file1.file2就可以获取到对应的导出内容</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> items) &#123;</span><br><span class="line">      item.properties.reduce(<span class="function">(<span class="params">target, property, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> obj;</span><br><span class="line">        <span class="keyword">const</span> properties = item.properties.slice(<span class="number">0</span>, index + <span class="number">1</span>).join(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">if</span> (index === item.properties.length - <span class="number">1</span>) &#123;</span><br><span class="line">          obj = item.exports;</span><br><span class="line">          <span class="keyword">if</span> (obj &amp;&amp; !is.primitive(obj)) &#123;</span><br><span class="line">            <span class="comment">//这步骤很重要，确定这个target是不是一个exports，有可能只是一个路径而已</span></span><br><span class="line">            obj[FULLPATH] = item.fullpath;</span><br><span class="line">            obj[EXPORTS] = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          obj = target[property] || &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        target[property] = obj;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">      &#125;, target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//最终生成[&#123; properties: [ 'a', 'b', 'c'], exports，fullpath&#125;]形式，properties文件路径名称的数组，exports是导出对象，fullpath是文件的绝对路径</span></span><br><span class="line">  parse() &#123;</span><br><span class="line">    <span class="comment">//文件目录转换为数组</span></span><br><span class="line">    <span class="keyword">let</span> directories = <span class="keyword">this</span>.options.directory;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(directories)) &#123;</span><br><span class="line">      directories = [ directories ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历所有文件路径</span></span><br><span class="line">    <span class="keyword">const</span> items = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> directory <span class="keyword">of</span> directories) &#123;</span><br><span class="line">      <span class="comment">//每个文件目录下面可能还会有子文件夹，所以globby.sync函数是获取所有文件包括子文件下的文件的路径</span></span><br><span class="line">      <span class="keyword">const</span> filepaths = globby.sync(files, &#123; <span class="attr">cwd</span>: directory &#125;);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> filepath <span class="keyword">of</span> filepaths) &#123;</span><br><span class="line">        <span class="keyword">const</span> fullpath = path.join(directory, filepath);</span><br><span class="line">        <span class="keyword">if</span> (!fs.statSync(fullpath).isFile()) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">//获取文件路径上的以"/"分割的所有文件名，foo/bar.js =&gt; [ 'foo', 'bar' ]，这个函数会对propertie同一格式，默认为驼峰</span></span><br><span class="line">        <span class="keyword">const</span> properties = getProperties(filepath, <span class="keyword">this</span>.options);</span><br><span class="line">        <span class="comment">//app/service/foo/bar.js =&gt; service.foo.bar</span></span><br><span class="line">        <span class="keyword">const</span> pathName = directory.split(<span class="regexp">/[/\\]/</span>).slice(<span class="number">-1</span>) + <span class="string">'.'</span> + properties.join(<span class="string">'.'</span>);</span><br><span class="line">        <span class="comment">//getExports函数获取文件内容，并将结果做一些处理，看下面实现</span></span><br><span class="line">        <span class="keyword">const</span> exports = getExports(fullpath, <span class="keyword">this</span>.options, pathName);</span><br><span class="line">        <span class="comment">//如果导出的是class，会设置一些属性，这个属性下文中对于class的特殊处理地方会用到</span></span><br><span class="line">        <span class="keyword">if</span> (is.class(exports)) &#123;</span><br><span class="line">          exports.prototype.pathName = pathName;</span><br><span class="line">          exports.prototype.fullPath = fullpath;</span><br><span class="line">        &#125;</span><br><span class="line">        items.push(&#123; fullpath, properties, exports &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> items;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据指定路径获取导出对象并作预处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExports</span>(<span class="params">fullpath, &#123; initializer, call, inject &#125;, pathName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> exports = utils.loadFile(fullpath);</span><br><span class="line">  <span class="comment">//用initializer函数对exports结果做预处理</span></span><br><span class="line">  <span class="keyword">if</span> (initializer) &#123;</span><br><span class="line">    exports = initializer(exports, &#123; <span class="attr">path</span>: fullpath, pathName &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果exports是class，generatorFunction，asyncFunction则直接返回    </span></span><br><span class="line">  <span class="keyword">if</span> (is.class(exports) || is.generatorFunction(exports) || is.asyncFunction(exports)) &#123;</span><br><span class="line">    <span class="keyword">return</span> exports;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果导出的是一个普通函数，并且设置了call=true，默认是true，会将inject传入并调用该函数，上文中提到过好几次，就是在这里实现的</span></span><br><span class="line">  <span class="keyword">if</span> (call &amp;&amp; is<span class="function">.<span class="keyword">function</span>(<span class="params">exports</span>)) </span>&#123;</span><br><span class="line">    exports = exports(inject);</span><br><span class="line">    <span class="keyword">if</span> (exports != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//其它情况直接返回</span></span><br><span class="line">  <span class="keyword">return</span> exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="ContextLoader类的实现分析"><a href="#ContextLoader类的实现分析" class="headerlink" title="ContextLoader类的实现分析"></a>ContextLoader类的实现分析</h5><p>上文中说道loadService函数其实最终把service对象挂载在了app.context上，所以为此提供了ContextLoader这个类，继承了FileLoader类，用于将FileLoader解析出来的target挂载在app.context上，下面是其实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core -&gt; ContextLoader类的源码实现</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextLoader</span> <span class="keyword">extends</span> <span class="title">FileLoader</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">const</span> target = options.target = &#123;&#125;;</span><br><span class="line">    <span class="keyword">super</span>(options);</span><br><span class="line">    <span class="comment">//FileLoader已经讲过inject就是app</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">this</span>.options.inject;</span><br><span class="line">    <span class="comment">//property就是要挂载的属性，比如"service"</span></span><br><span class="line">    <span class="keyword">const</span> property = options.property;</span><br><span class="line">    <span class="comment">//将service属性挂载在app.context上</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(app.context, property, &#123;</span><br><span class="line">      <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="comment">//做缓存，由于不同的请求ctx不一样，这里是针对同一个请求的内容进行缓存</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>[CLASSLOADER]) &#123;</span><br><span class="line">          <span class="keyword">this</span>[CLASSLOADER] = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> classLoader = <span class="keyword">this</span>[CLASSLOADER];</span><br><span class="line">        <span class="comment">//获取导出实例，这里就是上文用例中获取this.ctx.service.file1.fun1的实现，这里的实例就是this.ctx.service,实现逻辑请看下面的getInstance的实现</span></span><br><span class="line">        <span class="keyword">let</span> instance = classLoader.get(property);</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">          <span class="comment">//这里传入的this就是为了初始化require('egg').Service实例时当作参数传入</span></span><br><span class="line">          <span class="comment">//this会根据调用者的不同而改变，比如是app.context的实例调用那么就是app.context，如果是app.context子类的实例调用，那么就是其子类的实例</span></span><br><span class="line">          <span class="comment">//就是因为这个this，我们service里继承require('egg').Service，才可以通过this.ctx获取到当前请求的上下文</span></span><br><span class="line">          instance = getInstance(target, <span class="keyword">this</span>);</span><br><span class="line">          classLoader.set(property, instance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//values是FileLoader/load函数生成target对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params">values, ctx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//上文FileLoader里实现中我们讲过，target对象是一个由路径和exports组装成的一个大对象，这里Class是为了确定其是不是一个exports，有可能是一个路径名</span></span><br><span class="line">  <span class="keyword">const</span> Class = values[EXPORTS] ? values : <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> instance;</span><br><span class="line">  <span class="keyword">if</span> (Class) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is.class(Class)) &#123;</span><br><span class="line">        <span class="comment">//这一步很重要，如果是类，就用ctx进行初始化获取实例</span></span><br><span class="line">      instance = <span class="keyword">new</span> Class(ctx);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//普通对象直接导出，这里要注意的是如果是exports函数，在FileLoader实现中已经将其执行并转换为了对象</span></span><br><span class="line">      <span class="comment">//function和class分别在子类和父类的处理的原因是，function的处理逻辑loadMiddleware,loadService,loadController公用，而class的处理逻辑loadService使用</span></span><br><span class="line">      instance = Class;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is.primitive(values)) &#123;</span><br><span class="line">    <span class="comment">//原生类型直接导出</span></span><br><span class="line">    instance = values;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果目前的target部分是一个路径，那么会新建一个ClassLoader实例，这个ClassLoader中又会递归的调用getInstance</span></span><br><span class="line">    <span class="comment">//这里之所以新建一个类，一是为了做缓存，二是为了在每个节点获取到的都是一个类的实例</span></span><br><span class="line">    instance = <span class="keyword">new</span> ClassLoader(&#123; ctx, <span class="attr">properties</span>: values &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="loadService的实现"><a href="#loadService的实现" class="headerlink" title="loadService的实现"></a>loadService的实现</h5><p>有了ContextLoader类，那实现loadService函数就非常容易了，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core -&gt; loadService函数实现源码</span></span><br><span class="line"><span class="comment">//loadService函数调用loadToContext函数</span></span><br><span class="line">loadService(opt) &#123;</span><br><span class="line">    opt = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">      call: <span class="literal">true</span>,</span><br><span class="line">      caseStyle: <span class="string">'lower'</span>,</span><br><span class="line">      fieldClass: <span class="string">'serviceClasses'</span>,</span><br><span class="line">      directory: <span class="keyword">this</span>.getLoadUnits().map(<span class="function"><span class="params">unit</span> =&gt;</span> path.join(unit.path, <span class="string">'app/service'</span>)), <span class="comment">//所有加载单元目录下的service</span></span><br><span class="line">    &#125;, opt);</span><br><span class="line">    <span class="keyword">const</span> servicePaths = opt.directory;</span><br><span class="line">    <span class="keyword">this</span>.loadToContext(servicePaths, <span class="string">'service'</span>, opt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//loadToContext函数直接新建ContextLoader实例，调用load函数实现加载</span></span><br><span class="line">loadToContext(directory, property, opt) &#123;</span><br><span class="line">    opt = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</span><br><span class="line">      directory,</span><br><span class="line">      property,</span><br><span class="line">      inject: <span class="keyword">this</span>.app,</span><br><span class="line">    &#125;, opt);</span><br><span class="line">    <span class="keyword">new</span> ContextLoader(opt).load();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="loadMiddleware函数"><a href="#loadMiddleware函数" class="headerlink" title="loadMiddleware函数"></a>loadMiddleware函数</h4><p>中间件是koa框架中很重要的一个环节，通过app.use引入中间件，使用洋葱圈模型，所以中间件加载的顺序很重要。</p>
<ul>
<li>如果在上文中的config中配置的中间件，系统会自动用app.use函数使用该中间件</li>
<li>所有的中间件我们都可以在app.middleware中通过中间件name获取到，便于在业务中动态使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core -&gt; loadMiddleware函数实现源码</span></span><br><span class="line"></span><br><span class="line">loadMiddleware(opt) &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">this</span>.app;</span><br><span class="line">    <span class="comment">// load middleware to app.middleware</span></span><br><span class="line">    opt = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">      call: <span class="literal">false</span>,   <span class="comment">//call=false表示如果中间件导出是函数，不会主动调用函数做转换</span></span><br><span class="line">      override: <span class="literal">true</span>,</span><br><span class="line">      caseStyle: <span class="string">'lower'</span>,</span><br><span class="line">      directory: <span class="keyword">this</span>.getLoadUnits().map(<span class="function"><span class="params">unit</span> =&gt;</span> join(unit.path, <span class="string">'app/middleware'</span>)) <span class="comment">//所有加载单元目录下的middleware</span></span><br><span class="line">    &#125;, opt);</span><br><span class="line">    <span class="keyword">const</span> middlewarePaths = opt.directory;</span><br><span class="line">    <span class="comment">//将所有中间件middlewares挂载在app上，这个函数在loadController实现中也用到了，看下文的实现</span></span><br><span class="line">    <span class="keyword">this</span>.loadToApp(middlewarePaths, <span class="string">'middlewares'</span>, opt);</span><br><span class="line">    <span class="comment">//将app.middlewares中的每个中间件重新绑定在app.middleware上，每个中间件的属性不可配置，不可枚举</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">in</span> app.middlewares) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(app.middleware, name, &#123;</span><br><span class="line">        <span class="keyword">get</span>() &#123;</span><br><span class="line">          <span class="keyword">return</span> app.middlewares[name];</span><br><span class="line">        &#125;,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        configurable: <span class="literal">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只有在config中配置了appMiddleware和coreMiddleware才会直接在app.use中使用，其它中间件只是挂载在app上，开发人员可以动态使用</span></span><br><span class="line">    <span class="keyword">const</span> middlewareNames = <span class="keyword">this</span>.config.coreMiddleware.concat(<span class="keyword">this</span>.config.appMiddleware);</span><br><span class="line">    <span class="keyword">const</span> middlewaresMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">of</span> middlewareNames) &#123;</span><br><span class="line">      <span class="comment">//如果config中定义middleware在app.middlewares中找不到或者重复定义，都会报错</span></span><br><span class="line">      <span class="keyword">if</span> (!app.middlewares[name]) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`Middleware <span class="subst">$&#123;name&#125;</span> not found`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (middlewaresMap.has(name)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`Middleware <span class="subst">$&#123;name&#125;</span> redefined`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      middlewaresMap.set(name, <span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">const</span> options = <span class="keyword">this</span>.config[name] || &#123;&#125;;</span><br><span class="line">      <span class="keyword">let</span> mw = app.middlewares[name];</span><br><span class="line">      <span class="comment">//中间件的文件定义必须exports一个普通function，并且接受两个参数：</span></span><br><span class="line">      <span class="comment">//options: 中间件的配置项，框架会将 app.config[$&#123;middlewareName&#125;] 传递进来, app: 当前应用 Application 的实例</span></span><br><span class="line">      <span class="comment">//执行exports的函数，生成最终要的中间件</span></span><br><span class="line">      mw = mw(options, app);</span><br><span class="line">      mw._name = name;</span><br><span class="line">      <span class="comment">//包装中间件，最终转换成async function(ctx, next)形式</span></span><br><span class="line">      mw = wrapMiddleware(mw, options);</span><br><span class="line">      <span class="keyword">if</span> (mw) &#123;</span><br><span class="line">        app.use(mw);</span><br><span class="line">        <span class="keyword">this</span>.options.logger.info(<span class="string">'[egg:loader] Use middleware: %s'</span>, name);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.options.logger.info(<span class="string">'[egg:loader] Disable middleware: %s'</span>, name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过FileLoader实例加载指定属性的所有文件并导出，然后将该属性挂载在app上</span></span><br><span class="line">loadToApp(directory, property, opt) &#123;</span><br><span class="line">    <span class="keyword">const</span> target = <span class="keyword">this</span>.app[property] = &#123;&#125;;</span><br><span class="line">    opt = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</span><br><span class="line">      directory,</span><br><span class="line">      target,</span><br><span class="line">      inject: <span class="keyword">this</span>.app,</span><br><span class="line">    &#125;, opt);</span><br><span class="line">    <span class="keyword">new</span> FileLoader(opt).load();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="loadController函数"><a href="#loadController函数" class="headerlink" title="loadController函数"></a>loadController函数</h4><p>controller中生成的函数最终还是在router.js中当作一个中间件使用，所以我们需要将controller中内容转换为中间件形式async function(ctx, next)，其中initializer这个函数就是用来针对不同的情况将controller中的内容转换为中间件的，下面是loadController的实现逻辑：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core源码 -&gt; loadController函数实现源码</span></span><br><span class="line"></span><br><span class="line">loadController(opt) &#123;</span><br><span class="line">    opt = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">      caseStyle: <span class="string">'lower'</span>,</span><br><span class="line">      directory: path.join(<span class="keyword">this</span>.options.baseDir, <span class="string">'app/controller'</span>),</span><br><span class="line">      <span class="comment">//这个配置，上文有提到，是为了对导出对象做预处理的函数</span></span><br><span class="line">      initializer: <span class="function">(<span class="params">obj, opt</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//如果是普通函数，依然直接调用它生成新的对象</span></span><br><span class="line">        <span class="keyword">if</span> (is<span class="function">.<span class="keyword">function</span>(<span class="params">obj</span>) &amp;&amp; !<span class="title">is</span>.<span class="title">generatorFunction</span>(<span class="params">obj</span>) &amp;&amp; !<span class="title">is</span>.<span class="title">class</span>(<span class="params">obj</span>) &amp;&amp; !<span class="title">is</span>.<span class="title">asyncFunction</span>(<span class="params">obj</span>)) </span>&#123;</span><br><span class="line">          obj = obj(<span class="keyword">this</span>.app);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is.class(obj)) &#123;</span><br><span class="line">          obj.prototype.pathName = opt.pathName;</span><br><span class="line">          obj.prototype.fullPath = opt.path;</span><br><span class="line">          <span class="comment">//如果是一个class，class中的函数转换成async function(ctx, next)中间件形式，并用ctx去初始化该class，所以在controller里我们也可以使用this.ctx.xxx形式</span></span><br><span class="line">          <span class="keyword">return</span> wrapClass(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is.object(obj)) &#123;</span><br><span class="line">          <span class="comment">//如果是一个Object，会递归的将该Object中每个属性对应的函数转换成async function(ctx, next)中间件形式形式</span></span><br><span class="line">          <span class="keyword">return</span> wrapObject(obj, opt.path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// support generatorFunction for forward compatbility</span></span><br><span class="line">        <span class="keyword">if</span> (is.generatorFunction(obj) || is.asyncFunction(obj)) &#123;</span><br><span class="line">          <span class="keyword">return</span> wrapObject(&#123; <span class="string">'module.exports'</span>: obj &#125;, opt.path)[<span class="string">'module.exports'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;, opt);</span><br><span class="line">    <span class="comment">//loadController函数同样是通过loadToApp函数将其导出对象挂载在app下，controller里的内容在loadRouter时会将其载入</span></span><br><span class="line">    <span class="keyword">const</span> controllerBase = opt.directory;</span><br><span class="line">    <span class="keyword">this</span>.loadToApp(controllerBase, <span class="string">'controller'</span>, opt);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h4 id="loadRouter函数"><a href="#loadRouter函数" class="headerlink" title="loadRouter函数"></a>loadRouter函数</h4><p>loadRouter函数特别简单，只是require加载一下app/router目录下的文件而已，而所有的事情都交给了EggCore类上的router属性去实现</p>
<p>而router又是Router类的实例，Router类是基于koa-router实现的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core源码 -&gt; loadRouter函数源码实现</span></span><br><span class="line"></span><br><span class="line">loadRouter() &#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFile(<span class="keyword">this</span>.resolveModule(path.join(<span class="keyword">this</span>.options.baseDir, <span class="string">'app/router'</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置router属性的get方法</span></span><br><span class="line"><span class="keyword">get</span> router() &#123;</span><br><span class="line">    <span class="comment">//缓存设置</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>[ROUTER]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>[ROUTER];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新建Router实例，其中Router类是继承koa-router实现的</span></span><br><span class="line">    <span class="keyword">const</span> router = <span class="keyword">this</span>[ROUTER] = <span class="keyword">new</span> Router(&#123; <span class="attr">sensitive</span>: <span class="literal">true</span> &#125;, <span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//在启动前将router中间件载入引用</span></span><br><span class="line">    <span class="keyword">this</span>.beforeStart(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.use(router.middleware());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> router;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//将router上所有的method函数代理到EggCore上，这样我们就可以通过app.get('/async', ...asyncMiddlewares, 'subController.subHome.async1')的方式配置路由</span></span><br><span class="line">utils.methods.concat([ <span class="string">'all'</span>, <span class="string">'resources'</span>, <span class="string">'register'</span>, <span class="string">'redirect'</span> ]).forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">  EggCore.prototype[method] = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.router[method](...args);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Router类继承了KoaRouter类，并对其的method相关函数做了扩展，解析controller的写法，同时提供了resources方法，为了兼容restAPI的方式</p>
<p>关于restAPI的使用方式和实现源码我们这里就不介绍了，可以看官方文档，有具体的格式要求，下面看一下Router类的部分实现逻辑：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//egg-core源码 -&gt; Router类实现源码</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> <span class="keyword">extends</span> <span class="title">KoaRouter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(opts, app) &#123;</span><br><span class="line">    <span class="keyword">super</span>(opts);</span><br><span class="line">    <span class="keyword">this</span>.app = app;</span><br><span class="line">    <span class="comment">//对method方法进行扩展</span></span><br><span class="line">    <span class="keyword">this</span>.patchRouterMethod();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  patchRouterMethod() &#123;</span><br><span class="line">    <span class="comment">//为了支持generator函数类型，以及获取controller类中导出的中间件</span></span><br><span class="line">    methods.concat([ <span class="string">'all'</span> ]).forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>[method] = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//spliteAndResolveRouterParams主要是为了拆分router.js中的路由规则，将其拆分成普通中间件和controller生成的中间件部分，请看下文源码</span></span><br><span class="line">        <span class="keyword">const</span> splited = spliteAndResolveRouterParams(&#123; args, <span class="attr">app</span>: <span class="keyword">this</span>.app &#125;);</span><br><span class="line">        args = splited.prefix.concat(splited.middlewares);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>[method](...args);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//返回router里每个路由规则的前缀和中间件部分</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">spliteAndResolveRouterParams</span>(<span class="params">&#123; args, app &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> prefix;</span><br><span class="line">    <span class="keyword">let</span> middlewares;</span><br><span class="line">    <span class="keyword">if</span> (args.length &gt;= <span class="number">3</span> &amp;&amp; (is.string(args[<span class="number">1</span>]) || is.regExp(args[<span class="number">1</span>]))) &#123;</span><br><span class="line">        <span class="comment">// app.get(name, url, [...middleware], controller)的形式</span></span><br><span class="line">        prefix = args.slice(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        middlewares = args.slice(<span class="number">2</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// app.get(url, [...middleware], controller)的形式</span></span><br><span class="line">        prefix = args.slice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        middlewares = args.slice(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//controller部分肯定是最后一个</span></span><br><span class="line">      <span class="keyword">const</span> controller = middlewares.pop();</span><br><span class="line">      <span class="comment">//resolveController函数主要是为了处理router.js中关于controller的两种写法：</span></span><br><span class="line">      <span class="comment">//写法1：app.get('/async', ...asyncMiddlewares, 'subController.subHome.async1')</span></span><br><span class="line">      <span class="comment">//写法2：app.get('/async', ...asyncMiddlewares, subController.subHome.async1)</span></span><br><span class="line">      <span class="comment">//最终从app.controller上获取到真正的controller中间件，resolveController具体函数实现就不介绍了</span></span><br><span class="line">      middlewares.push(resolveController(controller, app));</span><br><span class="line">      <span class="keyword">return</span> &#123; prefix, middlewares &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上便是对EggCore的大部分源码的实现的学习总结，其中关于源码中一些debug代码以及timing运行时间记录的代码都删掉了，关于app的生命周期管理的那部分代码和loadUnits加载逻辑关系不大，所以没有讲到。EggCore的核心在于EggLoader，也就是plugin，config, extend, service, middleware, controller, router的加载函数，而这几个内容加载必须按照顺序进行加载，存在依赖关系，比如：</p>
<ul>
<li>加载middleware时会用到config关于应用中间件的配置</li>
<li>加载router时会用到关于controller的配置</li>
<li>而config，extend，service，middleware，controller的加载都必须依赖于plugin，通过plugin配置获取插件目录</li>
<li>service，middleware，controller，router的加载又必须依赖于extend（对app进行扩展），因为如果exports是函数的情况下，会将app作为参数执行函数</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.npmjs.com/package/egg-cool-router" target="_blank" rel="noopener">https://www.npmjs.com/package/egg-cool-router</a></li>
<li>摘抄自：<a href="https://cnodejs.org/topic/5bc933129545eaf107b9cc84" target="_blank" rel="noopener">https://cnodejs.org/topic/5bc933129545eaf107b9cc84</a></li>
</ul>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>Egg</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript装饰器讲解</title>
    <url>/2020/08/25/Typescript%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>装饰器（Decorators）为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式。 Javascript里的装饰器目前处在 <a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noopener">建议征集的第二阶段</a>，但在TypeScript里已做为一项实验性特性予以支持。</p>
<blockquote>
<p>注意  装饰器是一项实验性特性，在未来的版本中可能会发生改变。</p>
</blockquote>
<a id="more"></a>
<p>若要启用实验性的装饰器特性，你必须在命令行或<code>tsconfig.json</code>里启用<code>experimentalDecorators</code>编译器选项：</p>
<p><strong>命令行</strong>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tsc --target ES5 --experimentalDecorators</span><br></pre></td></tr></table></figure>
<p><strong>tsconfig.json</strong>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"target"</span>: <span class="string">"ES5"</span>,</span><br><span class="line">    		<span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    		<span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上，可以修改类的行为。 装饰器使用 <code>@expression</code>这种形式，<code>expression</code>求值后必须为一个函数，它会在运行时被调用，被装饰的声明信息做为参数传入。</p>
<p>例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Path</span>(<span class="string">'/hello'</span>)</span><br><span class="line"><span class="keyword">class</span> HelloService &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何定义装饰器"><a href="#如何定义装饰器" class="headerlink" title="如何定义装饰器"></a>如何定义装饰器</h2><p>装饰器本身其实就是一个函数，理论上忽略参数的话，任何函数都可以当做装饰器使用。例：</p>
<p>demo.ts</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Path</span>(<span class="params">target:<span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I am decorator."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Path</span></span><br><span class="line"><span class="keyword">class</span> HelloService &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>tsc</code>编译后,执行命令<code>node demo.js</code>，输出结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I am decorator.</span><br></pre></td></tr></table></figure>
<h2 id="装饰器执行时机"><a href="#装饰器执行时机" class="headerlink" title="装饰器执行时机"></a>装饰器执行时机</h2><p>修饰器对类的行为的改变，是代码编译时发生的（不是TypeScript编译，而是js在执行机中编译阶段），而不是在运行时。这意味着，修饰器能在编译阶段运行代码。也就是说，修饰器本质就是编译时执行的函数。<br>在Node.js环境中模块一加载时就会执行</p>
<h2 id="函数柯里化解决参数问题"><a href="#函数柯里化解决参数问题" class="headerlink" title="函数柯里化解决参数问题"></a>函数柯里化解决参数问题</h2><p>但是实际场景中，有时希望向装饰器传入一些参数, 如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Path</span>(<span class="string">"/hello"</span>, <span class="string">"world"</span>)</span><br><span class="line"><span class="keyword">class</span> HelloService &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>此时上面装饰器方法就不满足了（VSCode编译报错），这是我们可以借助JavaScript中函数柯里化特性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Path</span>(<span class="params">p1: <span class="built_in">string</span>, p2: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123; <span class="comment">//  这才是真正装饰器</span></span><br><span class="line">        <span class="comment">// do something </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五种装饰器"><a href="#五种装饰器" class="headerlink" title="五种装饰器"></a>五种装饰器</h2><p>在TypeScript中装饰器可以修饰四种语句：类，属性，访问器，方法以及方法参数。</p>
<h3 id="1-类装饰器"><a href="#1-类装饰器" class="headerlink" title="1 类装饰器"></a>1 类装饰器</h3><p>应用于类构造函数，其参数是类的构造函数。<br>注意<code>class</code>并不是像Java那种强类型语言中的类，而是JavaScript构造函数的语法糖。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Path</span>(<span class="params">path: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">        !target.prototype.$Meta &amp;&amp; (target.prototype.$Meta = &#123;&#125;)</span><br><span class="line">        target.prototype.$Meta.baseUrl = path;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">'/hello'</span>)</span><br><span class="line"><span class="keyword">class</span> HelloService &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(HelloService.prototype.$Meta);<span class="comment">// 输出：&#123; baseUrl: '/hello' &#125;</span></span><br><span class="line"><span class="keyword">let</span> hello = <span class="keyword">new</span> HelloService();</span><br><span class="line"><span class="built_in">console</span>.log(hello.$Meta) <span class="comment">// 输出：&#123; baseUrl: '/hello' &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-方法装饰器"><a href="#2-方法装饰器" class="headerlink" title="2 方法装饰器"></a>2 方法装饰器</h3><p>它会被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义。<br>方法装饰会在运行时传入下列3个参数：</p>
<ul>
<li>1、对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>2、成员的名字。</li>
<li>3、成员的属性描述符。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GET</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, methodName: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        !target.$Meta &amp;&amp; (target.$Meta = &#123;&#125;);</span><br><span class="line">        target.$Meta[methodName] = url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HelloService &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"xx"</span>)</span><br><span class="line">    getUser() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log((&lt;<span class="built_in">any</span>&gt;HelloService).$Meta);</span><br></pre></td></tr></table></figure>
<p>注意：在vscode编辑时有时会报<code>作为表达式调用时，无法解析方法修饰器的签名。</code>错误，此时需要在tsconfig.json中增加target配置项：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="string">"target"</span>: <span class="string">"es6"</span>,</span><br><span class="line">        <span class="string">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-方法参数装饰器"><a href="#3-方法参数装饰器" class="headerlink" title="3 方法参数装饰器"></a>3 方法参数装饰器</h3><p>参数装饰器表达式会在运行时当作函数被调用，传入下列3个参数：</p>
<ul>
<li>1、对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>2、参数的名字。</li>
<li>3、参数在函数参数列表中的索引。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathParam</span>(<span class="params">paramName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, methodName: <span class="built_in">string</span>, paramIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">        !target.$Meta &amp;&amp; (target.$Meta = &#123;&#125;);</span><br><span class="line">        target.$Meta[paramIndex] = paramName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> HelloService &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    getUser( <span class="meta">@PathParam</span>(<span class="string">"userId"</span>) userId: <span class="built_in">string</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log((&lt;<span class="built_in">any</span>&gt;HelloService).prototype.$Meta); <span class="comment">// &#123;'0':'userId'&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-属性装饰器"><a href="#4-属性装饰器" class="headerlink" title="4 属性装饰器"></a>4 属性装饰器</h3><p>属性装饰器表达式会在运行时当作函数被调用，传入下列2个参数：</p>
<ul>
<li>1、对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li>
<li>2、成员的名字。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DefaultValue</span>(<span class="params">value: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">        target[propertyName] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Hello &#123;</span><br><span class="line">    <span class="meta">@DefaultValue</span>(<span class="string">"world"</span>) greeting: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Hello().greeting);<span class="comment">// 输出: world</span></span><br></pre></td></tr></table></figure>
<h3 id="装饰器加载顺序"><a href="#装饰器加载顺序" class="headerlink" title="装饰器加载顺序"></a>装饰器加载顺序</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassDecorator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I am class decorator"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MethodDecorator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, methodName: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I am method decorator"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Param1Decorator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, methodName: <span class="built_in">string</span>, paramIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I am parameter1 decorator"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Param2Decorator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, methodName: <span class="built_in">string</span>, paramIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I am parameter2 decorator"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PropertyDecorator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target, propertyName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"I am property decorator"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ClassDecorator</span>()</span><br><span class="line"><span class="keyword">class</span> Hello &#123;</span><br><span class="line">    <span class="meta">@PropertyDecorator</span>()</span><br><span class="line">    greeting: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@MethodDecorator</span>()</span><br><span class="line">    greet( <span class="meta">@Param1Decorator</span>() p1: <span class="built_in">string</span>, <span class="meta">@Param2Decorator</span>() p2: <span class="built_in">string</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">I am property decorator</span><br><span class="line">I am parameter2 decorator</span><br><span class="line">I am parameter1 decorator</span><br><span class="line">I am method decorator</span><br><span class="line">I am class decorator</span><br></pre></td></tr></table></figure>
<p>从上述例子得出如下结论：</p>
<p>1、有多个参数装饰器时：从最后一个参数依次向前执行</p>
<p>2、方法和方法参数中参数装饰器先执行。</p>
<p>3、类装饰器总是最后执行。</p>
<p>4、方法和属性装饰器，谁在前面谁先执行。因为参数属于方法一部分，所以参数会一直紧紧挨着方法执行。上述例子中属性和方法调换位置，输出如下结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I am parameter2 decorator</span><br><span class="line">I am parameter1 decorator</span><br><span class="line">I am method decorator</span><br><span class="line">I am property decorator</span><br><span class="line">I am class decorator</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><p>摘抄自 - <a href="https://www.cnblogs.com/winfred/p/8216650.html" target="_blank" rel="noopener">https://www.cnblogs.com/winfred/p/8216650.html</a></p>
</li>
<li><p><a href="https://github.com/hackycy/practice-examples/tree/master/typescript/DecoratorDemo" target="_blank" rel="noopener">Github Sample</a></p>
</li>
<li><p><a href="https://www.tslang.cn/docs/handbook/decorators.html" target="_blank" rel="noopener">https://www.tslang.cn/docs/handbook/decorators.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>重学Android之FileProvider</title>
    <url>/2020/08/19/%E9%87%8D%E5%AD%A6Android%E4%B9%8BFileProvider/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>项目之前使用了第三方库的时候，对于<code>FileProvider</code>的适配还不是很了解，因为使用时第三方库已经进行了适配。但是自己去覆写别人的第三方库的时候了解到了<code>FileProvider</code>的适配。</p>
<p>对于Android 7.0，提供了非常多的变化，详细的可以阅读官方文档<a href="https://developer.android.com/about/versions/nougat/android-7.0-changes.html" target="_blank" rel="noopener">Android 7.0 行为变更</a>，但是该文章主要叙述关于<code>FileProvider</code>的适配。</p>
<blockquote>
<p> 在官方7.0的以上的系统中，尝试传递 <code>file://URI</code>可能会触发<code>FileUriExposedException</code>。</p>
</blockquote>
<a id="more"></a>
<h1 id="出错案例"><a href="#出错案例" class="headerlink" title="出错案例"></a>出错案例</h1><p>先来一个常用的例子，大家应该对于手机拍照一定都不陌生，在希望得到一张高清拍照图的时候，我们通过Intent会传递一个File的Uri给相机应用。</p>
<p>大致代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE_TAKE_PHOTO = <span class="number">0x110</span>;</span><br><span class="line">    <span class="keyword">private</span> String mCurrentPhotoPath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhotoNoCompress</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Intent takePictureIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">        <span class="keyword">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            String filename = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd-HHmmss"</span>, Locale.CHINA)</span><br><span class="line">                    .format(<span class="keyword">new</span> Date()) + <span class="string">".png"</span>;</span><br><span class="line">            File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), filename);</span><br><span class="line">            mCurrentPhotoPath = file.getAbsolutePath();</span><br><span class="line">						<span class="comment">// File -&gt; Uri </span></span><br><span class="line">            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));</span><br><span class="line">            startActivityForResult(takePictureIntent, REQUEST_CODE_TAKE_PHOTO);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        <span class="keyword">if</span> (resultCode == RESULT_OK &amp;&amp; requestCode == REQUEST_CODE_TAKE_PHOTO) &#123;</span><br><span class="line">            mIvPhoto.setImageBitmap(BitmapFactory.decodeFile(mCurrentPhotoPath));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// else tip?</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>未处理6.0权限，有需要的自行处理下，nexus系列如果未处理，需要手动在设置页开启存储权限。</p>
</blockquote>
<p>此时如果我们使用Android 7.0或者以上的原生系统，再次运行一下，你会发现应用直接停止运行，抛出了<code>android.os.FileUriExposedException</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Caused by: android.os.FileUriExposedException: </span><br><span class="line">    file:///storage/emulated/0/20170601-030254.png </span><br><span class="line">        exposed beyond app through ClipData.Item.getUri()</span><br><span class="line">    at android.os.StrictMode.onFileUriExposed(StrictMode.java:1932)</span><br><span class="line">    at android.net.Uri.checkFileUriExposed(Uri.java:2348)</span><br></pre></td></tr></table></figure>
<p>原因在官网已经给了解释：</p>
<blockquote>
<p>对于面向 Android 7.0 的应用，Android 框架执行的 StrictMode API 政策禁止在您的应用外部公开 file:// URI。如果一项包含文件 URI 的 intent 离开您的应用，则应用出现故障，并出现 FileUriExposedException 异常。</p>
</blockquote>
<p>同样的，官网也给出了解决方案：</p>
<blockquote>
<p>要在应用间共享文件，您应发送一项 content:// URI，并授予 URI 临时访问权限。进行此授权的最简单方式是使用 FileProvider 类。如需了解有关权限和共享文件的详细信息，请参阅共享文件。<br><a href="https://developer.android.com/about/versions/nougat/android-7.0-changes.html#accessibility" target="_blank" rel="noopener">https://developer.android.com/about/versions/nougat/android-7.0-changes.html#accessibility</a></p>
</blockquote>
<h1 id="使用FileProvider"><a href="#使用FileProvider" class="headerlink" title="使用FileProvider"></a>使用FileProvider</h1><p><code>FileProvider</code>属于Android 7.0新增的一个类，该类位于v4或者androidx包下，详情可见<code>android.support.v4.content.FileProvider</code>或者<code>androidx.core.content.FileProvider</code>，使用方法类似与<code>ContentProvider</code>，简单概括为三个步骤，这里先以调用系统相机拍照并保存<strong>sdcard</strong>公共目录为例，演示使用过程：</p>
<ul>
<li>在资源文件夹<code>res/xml</code>下新建<code>file_paths.xml</code>文件，文件声明权限请求的路径，代码如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--3、对应外部内存卡根目录：Environment.getExternalStorageDirectory()--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">"external"</span> <span class="attr">path</span>=<span class="string">"/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>要使用<code>content://uri</code>替代<code>file://uri</code>，需要一个虚拟的路径对文件路径进行映射，所以需要编写个xml文件，通过path以及xml节点确定可访问的目录，通过name属性来映射真实的文件路径。</p>
</blockquote>
<ul>
<li>在<code>AndroidManifest.xml</code>添加组件<code>provider</code>相关信息，类似组件<code>activity</code>，指定<code>resource</code>属性引用上一步创建的xml文件（后面会详细介绍各个属性的用法），代码如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义FileProvider --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:name</span>=<span class="string">"androidx.core.content.FileProvider"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:authorities</span>=<span class="string">"com.siyee.android7.fileprovider"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:exported</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:resource</span>=<span class="string">"@xml/file_paths"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>最后一步，Java代码申请权限，使用新增的方法<code>getUriForFile()</code>和<code>grantUriPermission()</code>，代码如下（后面会详细介绍方法对应参数的使用）：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhotoNoCompress</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Intent takePictureIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">        <span class="keyword">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            String filename = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd-HHmmss"</span>, Locale.CHINA)</span><br><span class="line">                    .format(<span class="keyword">new</span> Date()) + <span class="string">".png"</span>;</span><br><span class="line">            File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), filename);</span><br><span class="line">            mCurrentPhotoPath = file.getAbsolutePath();</span><br><span class="line">          </span><br><span class="line">						<span class="comment">// 核心就是这一行代码</span></span><br><span class="line">            Uri fileUri = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">"com.siyee.android7.fileprovider"</span>, file);</span><br><span class="line">            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, fileUri);</span><br><span class="line">            startActivityForResult(takePictureIntent, REQUEST_CODE_TAKE_PHOTO);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过FileProvider把<code>file</code>转化为<code>content://uri</code>了</p>
</blockquote>
<p>核心代码就这一行了~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FileProvider.getUriForFile(this, &quot;com.siyee.android7.fileprovider&quot;, file);</span><br></pre></td></tr></table></figure>
<p>第二个参数就是我们配置的<code>authorities</code>，这个很正常了，总得映射到确定的ContentProvider吧~所以需要这个参数。</p>
<p>然后再看一眼我们生成的uri：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">content:<span class="comment">//com.siyee.android7.fileprovider/external/20200819-041411.png</span></span><br></pre></td></tr></table></figure>
<p>可以看到格式为：<code>content://authorities/定义的name属性/文件的相对路径</code>，即<code>name</code>隐藏了可存储的文件夹路径。</p>
<h1 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h1><p>如果使用以上代码跑在7.0以上系统的手机没有问题，但是拿回到低版本的手机又会出现崩溃：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.SecurityException: Permission Denial: opening provider androidx.core.content.FileProvider from ProcessRecord&#123;52b029b8 1670:com.android.camera/u0a36&#125; (pid=1670, uid=10036) that is not exported from uid 10052</span><br><span class="line">at android.os.Parcel.readException(Parcel.java:1465)</span><br><span class="line">at android.os.Parcel.readException(Parcel.java:1419)</span><br><span class="line">at android.app.ActivityManagerProxy.getContentProvider(ActivityManagerNative.java:2848)</span><br><span class="line">at android.app.ActivityThread.acquireProvider(ActivityThread.java:4399)</span><br></pre></td></tr></table></figure>
<p>因为低版本的系统，仅仅是把这个当成一个普通的Provider在使用，而我们没有授权，<code>contentprovider</code>的export设置的也是false；导致<code>Permission Denial</code>。</p>
<p>而解决的办法就是授权了。通过<code>grantUriPermission(String toPackage, Uri uri,
int modeFlags)</code>和<code>revokeUriPermission(Uri uri, int modeFlags)</code>方法。</p>
<p>可以看到<code>grantUriPermission</code>需要传递一个包名，就是你给哪个应用授权，但是很多时候，比如分享，我们并不知道最终用户会选择哪个app，所以我们可以这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;ResolveInfo&gt; resInfoList = context.getPackageManager()</span><br><span class="line">            .queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class="line"><span class="keyword">for</span> (ResolveInfo resolveInfo : resInfoList) &#123;</span><br><span class="line">    String packageName = resolveInfo.activityInfo.packageName;</span><br><span class="line">    context.grantUriPermission(packageName, uri, flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据Intent查询出的所以符合的应用，都给他们授权~~</p>
<p>恩，你可以在不需要的时候通过<code>revokeUriPermission</code>移除权限~</p>
<p>那么增加了授权后的代码是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePhotoNoCompress</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    Intent takePictureIntent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">    <span class="keyword">if</span> (takePictureIntent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        String filename = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd-HHmmss"</span>, Locale.CHINA)</span><br><span class="line">                .format(<span class="keyword">new</span> Date()) + <span class="string">".png"</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), filename);</span><br><span class="line">        mCurrentPhotoPath = file.getAbsolutePath();</span><br><span class="line"></span><br><span class="line">        Uri fileUri = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">"com.siyee.android7.fileprovider"</span>, file);</span><br><span class="line"></span><br><span class="line">        List&lt;ResolveInfo&gt; resInfoList = getPackageManager()</span><br><span class="line">                .queryIntentActivities(takePictureIntent, PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class="line">        <span class="keyword">for</span> (ResolveInfo resolveInfo : resInfoList) &#123;</span><br><span class="line">            String packageName = resolveInfo.activityInfo.packageName;</span><br><span class="line">            grantUriPermission(packageName, fileUri, Intent.FLAG_GRANT_READ_URI_PERMISSION</span><br><span class="line">                    | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, fileUri);</span><br><span class="line">        startActivityForResult(takePictureIntent, REQUEST_CODE_TAKE_PHOTO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这样的做法相对麻烦，我们可以对系统版本进行判断高版本用<code>FileProvider.getUriForFile</code>，低版本继续使用<code>Uri.fromFile</code>即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Uri fileUri = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">24</span>) &#123;</span><br><span class="line">    fileUri = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">"com.siyee.android7.fileprovider"</span>, file);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fileUri = Uri.fromFile(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="理解FileProvider"><a href="#理解FileProvider" class="headerlink" title="理解FileProvider"></a>理解FileProvider</h1><h2 id="定义FileProvider"><a href="#定义FileProvider" class="headerlink" title="定义FileProvider"></a>定义FileProvider</h2><p>直接使用<code>FileProvider</code>本身或者它的子类，需要在<code>AndroidManifest.xml</code>文件中声明组件的相关属性，包括：</p>
<ul>
<li><code>android:name</code>，对应属性值：<code>android.support.v4.content.FileProvider</code>或者子类完整路径</li>
<li><code>android:authorities</code>，对应属性值是一个常量，通常定义的方式<code>packagename.fileprovider</code>，例如：<code>cn.teachcourse.fileprovider</code></li>
<li><code>android:exported</code>，对应属性值是一个boolean变量，设置为<code>false</code></li>
<li><code>android:grantUriPermissions</code>，对应属性值也是一个boolean变量，设置为<code>true</code>，允许获得文件临时的访问权限</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">					<span class="attr">android:name</span>=<span class="string">"androidx.core.content.FileProvider"</span></span></span><br><span class="line"><span class="tag">					<span class="attr">android:authorities</span>=<span class="string">"com.siyee.android7.fileprovider"</span></span></span><br><span class="line"><span class="tag">					<span class="attr">android:exported</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">					<span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">						<span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></span></span><br><span class="line"><span class="tag">						<span class="attr">android:resource</span>=<span class="string">"@xml/file_paths"</span>/&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="指定授予临时访问权限的文件目录"><a href="#指定授予临时访问权限的文件目录" class="headerlink" title="指定授予临时访问权限的文件目录"></a>指定授予临时访问权限的文件目录</h2><p>想要关联<code>res/xml</code>文件夹下创建的<code>file_paths.xml</code>文件，需要在<code>&lt;provider&gt;</code>标签内，添加<code>&lt;meta-data&gt;</code>子标签，设置<code>&lt;meta-data&gt;</code>标签的属性值，包括：</p>
<ul>
<li><code>android:name</code>，对应属性值是一个固定的系统常量<code>android.support.FILE_PROVIDER_PATHS</code></li>
<li><code>android:resource</code>，对应属性值指向我们的xml文件<code>@xml/file_paths</code></li>
</ul>
<p>在xml文件中指定文件存储的区块和区块的相对路径，在<code>&lt;paths&gt;</code>根标签中添加<code>&lt;files-path&gt;</code>子标签（稍后详细列出所有子标签），设置子标签的属性值，包括：</p>
<ul>
<li><code>name</code>，是一个虚设的文件名（可以自由命名），对外可见路径的一部分，隐藏真实文件目录</li>
<li><code>path</code>，是一个相对目录，相对于当前的子标签<code>&lt;files-path&gt;</code>根目录</li>
<li><code>&lt;files-path&gt;</code>，表示内部内存卡根目录，对应根目录等价于<code>Context.getFilesDir()</code>，查看完整路径：<br><code>/data/user/0/com.siyee.demos/files</code></li>
<li>代码如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">files-path</span> <span class="attr">name</span>=<span class="string">"my_images"</span> <span class="attr">path</span>=<span class="string">"images/"</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;paths&gt;</code>根标签下可以添加的子标签也是有限的，参考官网的开发文档，除了上述的提到的<code>&lt;files-path&gt;</code>这个子标签外，还包括下面几个：</p>
<ol>
<li><code>&lt;cache-path&gt;</code>，表示应用默认缓存根目录，对应根目录等价于<code>getCacheDir()</code>，查看完整路径：<code>/data/user/0/com.siyee.demos/cache</code></li>
<li><code>&lt;external-path&gt;</code>，表示外部内存卡根目录，对应根目录等价于<br><code>Environment.getExternalStorageDirectory()</code>，<br>查看完整路径：<code>/storage/emulated/0</code></li>
<li><code>&lt;external-files-path&gt;</code>，表示外部内存卡根目录下的APP公共目录，对应根目录等价于<br><code>Context#getExternalFilesDir(String) Context.getExternalFilesDir(null)</code>，<br>查看完整路径：<br><code>/storage/emulated/0/Android/data/com.siyee.demos/files/Download</code></li>
<li><code>&lt;external-cache-path&gt;</code>，表示外部内存卡根目录下的APP缓存目录，对应根目录等价于<code>Context.getExternalCacheDir()</code>，查看完整路径：<br><code>/storage/emulated/0/Android/data/com.siyee.demos/cache</code></li>
</ol>
<p>最终，在<code>file_provider.xml</code>文件中，添加上述5种类型的临时访问权限的文件目录，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1、name对应的属性值，开发者可以自由定义；</span></span><br><span class="line"><span class="comment">    2、path对应的属性值，当前external-path标签下的相对路径</span></span><br><span class="line"><span class="comment">    比如：/storage/emulated/0/92Recycle-release.apk</span></span><br><span class="line"><span class="comment">    sdcard路径：/storage/emulated/0(WriteToReadActivity.java:176)</span></span><br><span class="line"><span class="comment">                      at cn.teachcourse.nougat.WriteToReadActivity.onClick(WriteToReadActivity.java:97)</span></span><br><span class="line"><span class="comment">                      at android.view.View.performClick(View.java:5610)</span></span><br><span class="line"><span class="comment">                      at android.view.View$PerformClick.run(View.java:22265)</span></span><br><span class="line"><span class="comment">    相对路径：/</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1、对应内部内存卡根目录：Context.getFileDir()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">files-path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"int_root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path</span>=<span class="string">"/"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2、对应应用默认缓存根目录：Context.getCacheDir()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache-path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"app_cache"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path</span>=<span class="string">"/"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--3、对应外部内存卡根目录：Environment.getExternalStorageDirectory()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"ext_root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path</span>=<span class="string">"pictures/"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--4、对应外部内存卡根目录下的APP公共目录：Context.getExternalFileDir(String)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-files-path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"ext_pub"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path</span>=<span class="string">"/"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--5、对应外部内存卡根目录下的APP缓存目录：Context.getExternalCacheDir()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-cache-path</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"ext_cache"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">path</span>=<span class="string">"/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="生成指定文件的Content-URI"><a href="#生成指定文件的Content-URI" class="headerlink" title="生成指定文件的Content URI"></a>生成指定文件的Content URI</h2><p>Content URI方便与另一个APP应用程序共享同一个文件，共享的方式通过<code>ContentResolver.openFileDescriptor</code>获得一个<code>ParcelFileDescriptor</code>对象，读取文件内容。那么，如何生成一条完整的Content URI呢？TeachCourse总结后，概括为三个步骤，<strong>第一步：</strong>明确上述5种类型中的哪一种，<strong>第二步：</strong>明确指定文件的完整路径（包括目录、文件名），<strong>第三步：</strong>调用<code>getUriForFile()</code>方法生成URI</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File imagePath = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"download"</span>);</span><br><span class="line">File newFile = <span class="keyword">new</span> File(imagePath, <span class="string">"default_image.jpg"</span>);</span><br><span class="line">Uri contentUri = getUriForFile(getContext(), <span class="string">"com.siyee.android7.fileprovider"</span>, newFile);</span><br></pre></td></tr></table></figure>
<h2 id="授予Content-URI临时访问权限"><a href="#授予Content-URI临时访问权限" class="headerlink" title="授予Content URI临时访问权限"></a>授予Content URI临时访问权限</h2><p>上一步获得的Content URI，并没有获得指定文件的读写权限，想要获得文件的读写权限需要调用<code>Context.grantUriPermission(package, Uri, mode_flags)</code>方法，该方法向指定包名的应用程序申请获得读取或者写入文件的权限，参数说明如下：</p>
<ul>
<li><code>package</code>，指定应用程序的包名，Android Studio真正的包名指<code>build.gradle</code>声明的<em>applicationId</em>属性值；<code>getPackageName()</code>指<code>AndroidManifest.xml</code>文件声明的<em>package</em>属性值，如果两者不一致，就不能提供<code>getPackageName()</code>获取包名，否则报错！</li>
<li><code>Uri</code>，指定请求授予临时权限的URI，例如：<code>contentUri</code></li>
<li><code>mode_flags</code>，指定授予临时权限的类型，选择其中一个常量或两个：<code>Intent.FLAG_GRANT_READ_URI_PERMISSION</code>，<code>Intent.FLAG_GRANT_WRITE_URI_PERMISSION</code></li>
</ul>
<p>授予文件的临时读取或写入权限，如果不再需要了，TeachCourse该如何撤销授予呢？撤销权限有两种方式：<strong>第一种：</strong>通过调用<code>revokeUriPermission()</code>撤销，<strong>第二种：</strong>重启系统后自动撤销</p>
<h1 id="使用FileProvider兼容安装apk"><a href="#使用FileProvider兼容安装apk" class="headerlink" title="使用FileProvider兼容安装apk"></a><a href="https://blog.csdn.net/lmj623565791/article/details/72859156" target="_blank" rel="noopener">使用FileProvider兼容安装apk</a></h1><p>正常我们在编写安装apk的时候，是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">installApk</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(), <span class="string">"testandroid7-debug.apk"</span>);</span><br><span class="line"></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">    intent.setDataAndType(Uri.fromFile(file),</span><br><span class="line">            <span class="string">"application/vnd.android.package-archive"</span>);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拿个7.0的原生手机跑一下，<code>android.os.FileUriExposedException</code>又来了~~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android.os.FileUriExposedException: file:///storage/emulated/0/testandroid7-debug.apk exposed beyond app through Intent.getData()</span><br></pre></td></tr></table></figure>
<p>好在有经验了，简单修改下uri的获取方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">24</span>) &#123;</span><br><span class="line">    fileUri = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">"com.zhy.android7.fileprovider"</span>, file);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fileUri = Uri.fromFile(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再跑一次，没想到还是抛出了异常（警告，没有Crash）:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.SecurityException: Permission Denial: </span><br><span class="line">opening provider android.support.v4.content.FileProvider </span><br><span class="line">        from ProcessRecord&#123;18570a 27107:com.google.android.packageinstaller/u0a26&#125; (pid=27107, uid=10026) that is not exported from UID 10004123</span><br></pre></td></tr></table></figure>
<p>可以看到是权限问题，对于权限我们刚说了一种方式为<code>grantUriPermission</code>，这种方式当然是没问题的啦~</p>
<p>加上后运行即可。</p>
<p>其实对于权限，还提供了一种方式，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</span><br></pre></td></tr></table></figure>
<p>我们可以在安装包之前加上上述代码，再次运行正常啦~</p>
<p>现在我有两个非常疑惑的问题：</p>
<ul>
<li>问题1：为什么刚才拍照的时候，Android 7的设备并没有遇到<code>Permission Denial</code>的问题？</li>
</ul>
<p>恩，之所以不需要权限，主要是因为Intent的action为<code>ACTION_IMAGE_CAPTURE</code>，当我们<code>startActivity</code>后，会辗转调用<code>Instrumentation的execStartActivity</code>方法，在该方法内部，会调用<code>intent.migrateExtraStreamToClipData();</code>方法。</p>
<p>该方法中包含：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MediaStore.ACTION_IMAGE_CAPTURE.equals(action)</span><br><span class="line">        || MediaStore.ACTION_IMAGE_CAPTURE_SECURE.equals(action)</span><br><span class="line">        || MediaStore.ACTION_VIDEO_CAPTURE.equals(action)) &#123;</span><br><span class="line">    <span class="keyword">final</span> Uri output;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        output = getParcelableExtra(MediaStore.EXTRA_OUTPUT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (output != <span class="keyword">null</span>) &#123;</span><br><span class="line">        setClipData(ClipData.newRawUri(<span class="string">""</span>, output));</span><br><span class="line">        addFlags(FLAG_GRANT_WRITE_URI_PERMISSION|FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到将我们的<code>EXTRA_OUTPUT</code>，转为了<code>setClipData</code>，并直接给我们添加了<code>WRITE</code>和<code>READ</code>权限。</p>
<blockquote>
<p>注：该部分逻辑应该是21之后添加的。</p>
</blockquote>
<ul>
<li>问题2：为什么刚才拍照案例的时候，Android 4.4设备遇到权限问题，不通过addFlags这种方式解决？</li>
</ul>
<p>因为addFlags主要用于<code>setData</code>，<code>setDataAndType</code>以及<code>setClipData</code>（注意：4.4时，并没有将<code>ACTION_IMAGE_CAPTURE</code>转为<code>setClipData</code>实现）这种方式。</p>
<p>所以<code>addFlags</code>方式对于<code>ACTION_IMAGE_CAPTURE</code>在5.0以下是无效的，所以需要使用<code>grantUriPermission</code>，如果是正常的通过setData分享的uri，使用<code>addFlags</code>是没有问题的（可以写个简单的例子测试下，两个app交互，通过<code>content://</code>）。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>使用<code>content://</code>替代<code>file://</code>，主要需要<code>FileProvider</code>的支持，而因为<code>FileProvider</code>是<code>ContentProvider</code>的子类，所以需要在<code>AndroidManifest.xml</code>中注册；而又因为需要对真实的<code>filepath</code>进行映射，所以需要编写一个<code>xml</code>文档，用于描述可使用的文件夹目录，以及通过<code>name</code>去映射该文件夹目录。</p>
<p>对于权限，有两种方式：</p>
<ul>
<li>方式一为<code>Intent.addFlags</code>，该方式主要用于针对<code>intent.setData</code>，<code>setDataAndType</code>以及<code>setClipData</code>相关方式传递<code>uri</code>的。</li>
<li>方式二为<code>grantUriPermission</code>来进行授权</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/lmj623565791/article/details/72859156" target="_blank" rel="noopener">https://blog.csdn.net/lmj623565791/article/details/72859156</a></p>
<p><a href="https://www.cnblogs.com/dazhao/p/6547811.html" target="_blank" rel="noopener">https://www.cnblogs.com/dazhao/p/6547811.html</a></p>
<p><a href="https://www.jianshu.com/p/bce6a4c779dd" target="_blank" rel="noopener">https://www.jianshu.com/p/bce6a4c779dd</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Shadowsocks科学上网搭建</title>
    <url>/2020/07/28/Shadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近某灯挂的厉害，导致访问Github等网站实在是太慢了。同事给了一些SSR的搭建方法。以此记录了下来。</p>
<a id="more"></a>
<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><strong>选服务器</strong></p>
<p>我是使用<a href="https://www.vultr.com/" target="_blank" rel="noopener">vultr</a>，新建主机这里就不多详细叙述了。选择CentOS 7的即可。</p>
<p>新建主机后拿到IP地址查看下是否能够Ping通，Ping不同也无法使用SSH连接的。</p>
<p><strong>SSH连接后敲命令搭建好SSR的服务器环境：</strong></p>
<p><strong>CentOS:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class="line">$ pip install shadowsocks</span><br></pre></td></tr></table></figure>
<p><strong>Debian / Ubuntu:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>
<p><strong>Windows:</strong></p>
<p>See <a href="https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows" target="_blank" rel="noopener">Install Server on Windows</a></p>
<p><strong>简单用法</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssserver -p 443 -k password -m aes-256-cfb</span><br></pre></td></tr></table></figure>
<p><strong>后台运行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>-p</code>指定端口，<code>-k</code>指定密码，<code>-m</code>指定加密方式，客户端连接时都需要对应上</p>
</blockquote>
<p><strong>停止</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ssserver -d stop</span><br></pre></td></tr></table></figure>
<p><strong>检查日志</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo less /var/<span class="built_in">log</span>/shadowsocks.log</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过检查所有选项-h。您也可以使用配置文件。</p>
</blockquote>
<p><strong>docker</strong></p>
<p>使用<a href="https://hub.docker.com/r/shadowsocks/shadowsocks-libev" target="_blank" rel="noopener">shadowsocks-libev</a>方式部署：</p>
<p>安装<code>yum-utils</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>
<p>添加<code>docker yum</code>包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<p>安装最新版本的 <code>Docker Engine</code> 和<code>containerd</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
<p>启动 Docker。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p>开机自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>
<p>通过运行<code>hello-world</code> 映像验证 Docker Engine 是否已正确安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<p>启动<code>ss-server</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull shadowsocks/shadowsocks-libev</span><br><span class="line">docker run -e PASSWORD=password -p 8388:8388 -p 8388:8388/udp -d shadowsocks/shadowsocks-libev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>环境指定：</p>
<p>PASSWORD指定密码，METHOD指定加密方式，默认为<strong>aes-256-gcm</strong>，SERVER_PORT内置服务端口，默认为8388，请将主机端口映射至该端口即可。</p>
</blockquote>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p><a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">Windows</a> | <a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="noopener">OS X</a></p>
<p>打开小飞机，点击服务器，增加配置，根据服务器配置的填写即可。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/shadowsocksr-backup/shadowsocksr" target="_blank" rel="noopener">https://github.com/shadowsocksr-backup/shadowsocksr</a></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
  </entry>
  <entry>
    <title>深入理解Java泛型</title>
    <url>/2020/07/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="泛型的定义"><a href="#泛型的定义" class="headerlink" title="泛型的定义"></a>泛型的定义</h1><p><strong>泛型</strong>，即<code>参数化类型</code>。就是将类型由原来的具体的类型参数化，类似于方法中的变量参数，此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。<br>例如：<code>GenericClass**&lt;T&gt;**{}</code></p>
<a id="more"></a>
<blockquote>
<p>一些常用的泛型类型变量：<br>E：元素（Element），多用于java集合框架<br>K：关键字（Key）<br>N：数字（Number）<br>T：类型（Type）<br>V：值（Value）</p>
</blockquote>
<p>先来看个简单的例子，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">"1"</span>);</span><br><span class="line">list.add(<span class="string">"2"</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>运行后会发现报了一个错误</p>
<p><img src="https://github.static.si-yee.com/posts/generic/1.png" alt></p>
<p>这里可以看出来在代码编写阶段就已经报错了，不能往string类型的集合中添加int类型的数据。</p>
<p>那可不可以往List集合中添加多个类型的数据呢，答案是可以的，其实我们可以把list集合当成普通的类也是没问题的，那么就有下面的代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">"1"</span>);</span><br><span class="line">list.add(<span class="string">"2"</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">	System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从这里可以看出来，不定义泛型也是可以往集合中添加数据的，<strong>所以说泛型只是一种类型的规范，在代码编写阶段起一种限制。</strong></p>
<p>下面我们通过例子来介绍泛型背后数据是什么类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BaseBean&lt;String&gt; bean = <span class="keyword">new</span> BaseBean&lt;&gt;();</span><br><span class="line">        bean.setValue(<span class="string">"China"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field value = bean.getClass().getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">            Class&lt;?&gt; type = value.getType();</span><br><span class="line">            String name = type.getName();</span><br><span class="line">            System.out.println(<span class="string">"type: "</span> + name);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取方法上的泛型类型</span></span><br><span class="line">            Method getValue = bean.getClass().getDeclaredMethod(<span class="string">"getValue"</span>);</span><br><span class="line">            Object invoke = getValue.invoke(bean);</span><br><span class="line">            String methodName = invoke.getClass().getName();</span><br><span class="line">            System.out.println(<span class="string">"methodName: "</span> + methodName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Task :Demo01.main()</span><br><span class="line"><span class="built_in">type</span>: java.lang.Object</span><br><span class="line">methodName: java.lang.String</span><br></pre></td></tr></table></figure>
<p>从日志上看到通过反射获取到的属性是<code>Object</code>类型的，在方法中返回的是<code>String</code>类型，因此可以思考在<code>getValue</code>方法里面实际是做了个强转的动作，将<code>Object</code>类型的value强转成<code>String</code>类型。</p>
<p>因为泛型只是为了约束我们规范代码，而对于编译完之后的class交给虚拟机后，对于虚拟机它是没有泛型的说法的，所有的泛型在它看来都是<code>Object</code>类型，因此<strong>泛型擦除</strong>是对于虚拟机而言的。</p>
<p>下面我们再来看一种泛型结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean2</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将泛型加了个关键字<code>extends</code>，对于泛型写得多的伙伴们来说，<code>extends</code>是约束了泛型是向下继承的，最后我们通过反射获取value的类型是String类型的，因此这里也不难看出，加<code>extends</code>关键字其实最终目的是约束泛型是属于哪一类的。所以我们在编写代码的时候如果没有向下兼容类型，会警告错误的：</p>
<p><img src="https://github.static.si-yee.com/posts/generic/2.png" alt></p>
<p>既然说了泛型其实对于jvm来说都是Object类型的，那咱们直接将类型定义成<code>Object</code>不就是的了，这种做法是可以，但是在拿到<code>Object</code>类型值之后，自己还得强转，因此泛型减少了代码的强转工作，而将这些工作交给了虚拟机。</p>
<p>比如下面我们没有定义泛型的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean3</span> </span>&#123;</span><br><span class="line">    Object value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>势必在getValue的时候代码有个强转的过程，因此在能用泛型的时候，尽量用泛型来写，而且我认为一个好的架构师，业务的抽取是离不开泛型的定义。</p>
<blockquote>
<p>常见的泛型主要有作用在普通类上面，作用在抽象类、接口、静态或非静态方法上。</p>
</blockquote>
<h1 id="类上面的泛型"><a href="#类上面的泛型" class="headerlink" title="类上面的泛型"></a><strong>类上面的泛型</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String errMsg;</span><br><span class="line">    <span class="keyword">public</span> T data;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="抽象类或接口上的泛型"><a href="#抽象类或接口上的泛型" class="headerlink" title="抽象类或接口上的泛型"></a><strong>抽象类或接口上的泛型</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAdapter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    List&lt;T&gt; DATAS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="多元泛型"><a href="#多元泛型" class="headerlink" title="多元泛型"></a><strong>多元泛型</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Base</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setKey</span><span class="params">(K k)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">V <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="多种泛型约束"><a href="#多种泛型约束" class="headerlink" title="多种泛型约束"></a>多种泛型约束</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt; &amp; Supplier&lt;R&gt;, R extends Number&gt; &#123;</span><br><span class="line">  <span class="function">R <span class="title">callMax</span><span class="params">(T a, R b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.compareTo(b) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a.get();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> b.get();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="泛型二级抽象类或接口"><a href="#泛型二级抽象类或接口" class="headerlink" title="泛型二级抽象类或接口"></a><strong>泛型二级抽象类或接口</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseCommon</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Common1</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Base</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseCommon</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Common1</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Base</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="抽象里面包含抽象"><a href="#抽象里面包含抽象" class="headerlink" title="抽象里面包含抽象"></a><strong>抽象里面包含抽象</strong></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Base</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Map&lt;K, V&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">Map&lt;K, V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseCommon</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Base</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">   </span><br><span class="line">   LinkedList&lt;Map&lt;K, V&gt;&gt; DATAS = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(Map&lt;K, V&gt; map)</span> </span>&#123;</span><br><span class="line">       DATAS.addLast(map);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map&lt;K, V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> DATAS.get(index);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="lt-gt-通配符"><a href="#lt-gt-通配符" class="headerlink" title="&lt;?&gt;通配符"></a><strong>&lt;?&gt;通配符</strong></h1><p><code>&lt;?&gt;通配符</code>和 <code>&lt;T&gt;</code> 区别是<code>&lt;?&gt;</code>在你不知道泛型类型的时候，可以用<code>&lt;?&gt;</code>通配符来定义，下面通过一个例子来看看<code>&lt;?&gt;</code>的用处：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common1</span> <span class="keyword">extends</span> <span class="title">Common</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://github.static.si-yee.com/posts/generic/3.png" alt></p>
<p>在定义的时候将<code>Common</code>的泛型指向<code>Common1</code>的泛型，可以看到直接提示有问题，这里可以想，虽然<code>Common1</code>是继承自<code>Common</code>的，但是并不代表<code>BaseBean</code>之间是等量的，在开篇也讲过，如果泛型传入的是什么类型，那么在<code>BaseBean</code>中的<code>getValue</code>返回的类型就是什么，因此可以想两个不同的泛型类肯定是不等价的，但是如果我这里写呢：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BaseBean&lt;Common&gt; commonBaseBean = <span class="keyword">new</span> BaseBean&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    BaseBean&lt;?&gt; common1BaseBean = commonBaseBean;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">        Method setValue = common1BaseBean.getClass().getDeclaredMethod(<span class="string">"setValue"</span>, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        setValue.invoke(common1BaseBean, <span class="string">"123"</span>);</span><br><span class="line">        Object value = common1BaseBean.getValue();</span><br><span class="line">        System.out.println(<span class="string">"result:"</span> + value);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面如果定义的泛型是通配符是可以等价的，因为此时的setValue的参数是Object类型，所以能直接将上面定义的泛型赋给通配符的BaseBean。</p>
<p><strong>通配符不能定义在类上面、接口或方法上，只能作用在方法的参数上</strong></p>
<p><img src="https://github.static.si-yee.com/posts/generic/4.png" alt></p>
<p>其他的几种情况自己去尝试，正确的使用通配符:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClass</span><span class="params">(Class&lt;?&gt; class)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="上限以及下限泛型"><a href="#上限以及下限泛型" class="headerlink" title="上限以及下限泛型"></a>上限以及下限泛型</h1><p><strong><code>&lt;T extends &gt;</code>、<code>&lt;T super &gt;</code>、<code>&lt;? extends &gt;</code>、<code>&lt;? super &gt;</code></strong></p>
<p><code>&lt;T extends **&gt;</code>表示上限泛型、<code>&lt;T super **&gt;</code>表示下限泛型<br>为了演示这两个通配符的作用，增加了一个类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BaseBean&lt;Common&gt; beanCommon = <span class="keyword">new</span> BaseBean();</span><br><span class="line">        BaseBean&lt;BaseCommon&gt; baseCommonBaseBean = beanCommon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Common</span>&gt; </span>&#123;</span><br><span class="line">    T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseCommon</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common</span> <span class="keyword">extends</span> <span class="title">BaseCommon</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>会看到出现以下错误</p>
<p><code>Type parameter &#39;BaseCommon&#39; is not within its bound; should extend &#39;Common&#39;</code></p>
<p>第二个定义的泛型是不合法的，因为<code>BaseCommon</code>是<code>Common</code>的父类，超出了<code>Common</code>的类型范围。</p>
<p><strong><code>&lt;T super &gt;</code>不能作用在类、接口、方法上，只能通过方法传参来定义泛型</strong><br>在BaseBean里面定义了个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BaseBean&lt;Common&gt; beanCommon = <span class="keyword">new</span> BaseBean();</span><br><span class="line">        beanCommon.add(Common<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beanCommon.add(Common1<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">//出现报错</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseBean</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Common</span>&gt; </span>&#123;</span><br><span class="line">    T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Class&lt;? <span class="keyword">super</span> Common&gt; clazz)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 增加的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseCommon</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common</span> <span class="keyword">extends</span> <span class="title">BaseCommon</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Common1</span> <span class="keyword">extends</span>  <span class="title">Common</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到当传进去的是<code>Common1.class</code>的时候是不合法的，因为在<code>add</code>方法中需要传入<code>Common</code>父类的字节码对象，而<code>Common1</code>是继承自<code>Common</code>，所以直接不合法。</p>
<blockquote>
<p>在实际开发中其实知道什么时候定义什么类型的泛型就ok，在mvp实际案例中泛型用得比较广泛，大家可以根据实际项目来找找泛型的感觉，只是面试的时候需要理解类型擦除是针对谁而言的。</p>
</blockquote>
<h1 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h1><p>其实在开篇的时候已经通过例子说明了，通过反射绕开泛型的定义，也说明了类中定义的泛型最终是以Object被jvm执行。</p>
<p>所有的泛型在jvm中执行的时候，都是以<code>Object</code>对象存在的，加泛型只是为了一种代码的规范，避免了开发过程中再次强转。<br><strong>泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。</strong></p>
<p><strong>摘录自</strong>：</p>
<p><a href="http://www.jianshu.com/p/dd34211f2565" target="_blank" rel="noopener">www.jianshu.com/p/dd34211f2565</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter引入第三方Icon图标</title>
    <url>/2020/07/02/Flutter%E5%BC%95%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9Icon%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Flutter虽然内置了很多Icon图标，但是还是需要引入自己或第三方图标库提供的Icon。下面是解决办法。本文以<a href="http://iconfont.cn/" target="_blank" rel="noopener">阿里巴巴图标库</a>为例。</strong></p>
<a id="more"></a>
<p>1、在阿里图标库选好需要用的图标，添加进购物车将选好的图标打包下载到本地（下载代码），复制<code>iconfont.ttf</code>文件到项目中。</p>
<p>2、将该文件放置于你的flutter项目下的<code>assets/fonts/</code>下。</p>
<p>3、打开项目根目录中的pubspec.yaml文件，在flutter中增加配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The following section is specific to Flutter.</span></span><br><span class="line"><span class="attr">flutter:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The following line ensures that the Material Icons font is</span></span><br><span class="line">  <span class="comment"># included with your application, so that you can use the icons in</span></span><br><span class="line">  <span class="comment"># the material Icons class.</span></span><br><span class="line">  <span class="attr">uses-material-design:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># An image asset can refer to one or more resolution-specific "variants", see</span></span><br><span class="line">  <span class="comment"># https://flutter.dev/assets-and-images/#resolution-aware.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># For details regarding adding assets from package dependencies, see</span></span><br><span class="line">  <span class="comment"># https://flutter.dev/assets-and-images/#from-packages</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># To add custom fonts to your application, add a fonts section here,</span></span><br><span class="line">  <span class="comment"># in this "flutter" section. Each entry in this list should have a</span></span><br><span class="line">  <span class="comment"># "family" key with the font family name, and a "fonts" key with a</span></span><br><span class="line">  <span class="comment"># list giving the asset and other descriptors for the font. For</span></span><br><span class="line">  <span class="comment"># example:</span></span><br><span class="line">  <span class="attr">fonts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">family:</span> <span class="string">Iconfont</span></span><br><span class="line">      <span class="attr">fonts:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="attr">asset:</span> <span class="string">assets/fonts/iconfont.ttf</span></span><br></pre></td></tr></table></figure>
<p><code>Iconfont</code>为自定义名称，可自己定义。</p>
<p>4、在项目中使用：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Icon(IconData(<span class="number">0xe621</span>, fontFamily: <span class="string">'iconfont'</span>));</span><br></pre></td></tr></table></figure>
<p>其中：<code>IconData()</code>里面，第一个参数为codePoint，代表图标字体存储的<code>Unicode</code>，这个可以在打开阿里巴巴库标题的下载文件中的HTML文件查看，<strong>将 &amp;# 字符替换为 0 即可，fontFamily：后面跟自定义的字体图标名称，我这里是Iconfont</strong></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/shuaizi96/article/details/88550217" target="_blank" rel="noopener">https://blog.csdn.net/shuaizi96/article/details/88550217</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Mac flutter run报错：FileSystemException</title>
    <url>/2020/06/05/%E8%A7%A3%E5%86%B3Mac-flutter-run%E6%8A%A5%E9%94%99%EF%BC%9AFileSystemException/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在正式学习完Dart的路程下，兴奋的配置完成Flutter的环境后，想要跑一个demo的时候坑又来了一个。</p>
<a id="more"></a>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p><strong>flutter doctor</strong>无问题</p>
<p><img src="https://github.static.si-yee.com/posts/flutterrunFileSystemExceptionError/20200605104644.png" alt></p>
<p>但是在<strong>flutter run</strong>后出现了该错误：</p>
<p><img src="https://github.static.si-yee.com/posts/flutterrunFileSystemExceptionError/20200605104915.png" alt></p>
<p>出现这些问题，查看了Flutter的很多issues，有的说权限，有的说配置国内源。的确如此，但是先确认好步骤。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>如果安装好了SDK先删除重新配置吧。环境配置的变量可以不用删除。重复安装sdk的步骤就可以了。<strong>记得先配好环境变量再运行Flutter的相关命令</strong>。特别是配置国内源。<a href="https://flutter.dev/docs/get-started/install/macos" target="_blank" rel="noopener">官方教程</a></p>
<p>配置<code>.bash_profile</code>，如果是使用<code>zsh</code>下，每次都需要打开终端后输入<code>source ~/.bash_profile</code>，解决方法就是在<code>.zshrc</code>文件配置<code>source ~/.bash_profile</code>命令即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://mirrors.tuna.tsinghua.edu.cn/dart-pub</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://mirrors.tuna.tsinghua.edu.cn/flutter</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/Users/zjyzy/Library/Flutter/bin"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果你有科学上网，可以配置代理：</p>
<p><code>export http_proxy=http://127.0.0.1:1087</code>和<code>export https_proxy=http://127.0.0.1:1087</code></p>
</blockquote>
<p>重新配置好SDK后，配置好<code>flutter precache</code>和<code>flutter doctor</code>无误后，配置Flutter SDK的目录权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo chmod -R 777 /Users/zjyzy/Library/Flutter/bin</span><br></pre></td></tr></table></figure>
<p>使用<code>flutter create</code>命令创建项目，<strong>这里要记住，一定不要使用sudo创建项目</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flutter create flutterdemo</span><br><span class="line">Creating project flutterdemo...</span><br><span class="line">  flutterdemo/ios/Runner.xcworkspace/contents.xcworkspacedata (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings (created)</span><br><span class="line">  flutterdemo/ios/Runner/Info.plist (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage@3x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/LaunchImage.imageset/LaunchImage.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@1x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@1x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@1x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-1024x1024@1x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-83.5x83.5@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@3x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-20x20@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@3x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@3x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-60x60@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-76x76@1x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-40x40@3x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Assets.xcassets/AppIcon.appiconset/Icon-App-29x29@2x.png (created)</span><br><span class="line">  flutterdemo/ios/Runner/Base.lproj/LaunchScreen.storyboard (created)</span><br><span class="line">  flutterdemo/ios/Runner/Base.lproj/Main.storyboard (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme (created)</span><br><span class="line">  flutterdemo/ios/Flutter/Debug.xcconfig (created)</span><br><span class="line">  flutterdemo/ios/Flutter/Release.xcconfig (created)</span><br><span class="line">  flutterdemo/ios/Flutter/AppFrameworkInfo.plist (created)</span><br><span class="line">  flutterdemo/ios/.gitignore (created)</span><br><span class="line">  flutterdemo/<span class="built_in">test</span>/widget_test.dart (created)</span><br><span class="line">  flutterdemo/flutterdemo.iml (created)</span><br><span class="line">  flutterdemo/.gitignore (created)</span><br><span class="line">  flutterdemo/.metadata (created)</span><br><span class="line">  flutterdemo/android/app/src/profile/AndroidManifest.xml (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/mipmap-mdpi/ic_launcher.png (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/mipmap-hdpi/ic_launcher.png (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/drawable/launch_background.xml (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/values/styles.xml (created)</span><br><span class="line">  flutterdemo/android/app/src/main/res/mipmap-xhdpi/ic_launcher.png (created)</span><br><span class="line">  flutterdemo/android/app/src/main/AndroidManifest.xml (created)</span><br><span class="line">  flutterdemo/android/app/src/debug/AndroidManifest.xml (created)</span><br><span class="line">  flutterdemo/android/gradle/wrapper/gradle-wrapper.properties (created)</span><br><span class="line">  flutterdemo/android/gradle.properties (created)</span><br><span class="line">  flutterdemo/android/.gitignore (created)</span><br><span class="line">  flutterdemo/android/settings.gradle (created)</span><br><span class="line">  flutterdemo/android/app/build.gradle (created)</span><br><span class="line">  flutterdemo/android/app/src/main/kotlin/com/example/flutterdemo/MainActivity.kt (created)</span><br><span class="line">  flutterdemo/android/build.gradle (created)</span><br><span class="line">  flutterdemo/android/flutterdemo_android.iml (created)</span><br><span class="line">  flutterdemo/pubspec.yaml (created)</span><br><span class="line">  flutterdemo/README.md (created)</span><br><span class="line">  flutterdemo/ios/Runner/Runner-Bridging-Header.h (created)</span><br><span class="line">  flutterdemo/ios/Runner/AppDelegate.swift (created)</span><br><span class="line">  flutterdemo/ios/Runner.xcodeproj/project.pbxproj (created)</span><br><span class="line">  flutterdemo/lib/main.dart (created)</span><br><span class="line">  flutterdemo/.idea/runConfigurations/main_dart.xml (created)</span><br><span class="line">  flutterdemo/.idea/libraries/Flutter_for_Android.xml (created)</span><br><span class="line">  flutterdemo/.idea/libraries/Dart_SDK.xml (created)</span><br><span class="line">  flutterdemo/.idea/libraries/KotlinJavaRuntime.xml (created)</span><br><span class="line">  flutterdemo/.idea/modules.xml (created)</span><br><span class="line">  flutterdemo/.idea/workspace.xml (created)</span><br><span class="line">Running <span class="string">"flutter pub get"</span> <span class="keyword">in</span> flutterdemo...                         3.0s</span><br><span class="line">Wrote 72 files.</span><br><span class="line"></span><br><span class="line">All <span class="keyword">done</span>!</span><br><span class="line"></span><br><span class="line">[✓] Flutter: is fully installed. (Channel stable, v1.17.3, on Mac OS X 10.15.4 19E287, locale zh-Hans-CN)</span><br><span class="line">[✓] Android toolchain - develop <span class="keyword">for</span> Android devices: is fully installed. (Android SDK version 29.0.3)</span><br><span class="line">[✓] Xcode - develop <span class="keyword">for</span> iOS and macOS: is fully installed. (Xcode 11.4.1)</span><br><span class="line">[✓] Android Studio: is fully installed. (version 3.2)</span><br><span class="line">[!] Android Studio: is partially installed; more components are available. (version 3.0)</span><br><span class="line">[!] Android Studio: is partially installed; more components are available. (version 3.6)</span><br><span class="line">[!] IntelliJ IDEA Community Edition: is partially installed; more components are available. (version 2019.3.1)</span><br><span class="line">[✓] VS Code: is fully installed. (version 1.45.1)</span><br><span class="line">[✓] Connected device: is fully installed. (1 available)</span><br><span class="line"></span><br><span class="line">Run <span class="string">"flutter doctor"</span> <span class="keyword">for</span> information about installing additional components.</span><br><span class="line"></span><br><span class="line">In order to run your application, <span class="built_in">type</span>:</span><br><span class="line"></span><br><span class="line">  $ <span class="built_in">cd</span> flutterdemo</span><br><span class="line">  $ flutter run</span><br><span class="line"></span><br><span class="line">Your application code is <span class="keyword">in</span> flutterdemo/lib/main.dart.</span><br></pre></td></tr></table></figure>
<p>随后连接上模拟器，使用<code>flutter run</code>运行项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ flutter run</span><br><span class="line">Launching lib/main.dart on iPhone SE (2nd generation) <span class="keyword">in</span> debug mode...</span><br><span class="line">Running Xcode build...                                                  </span><br><span class="line">                                                   </span><br><span class="line"> └─Compiling, linking and signing...                         5.8s</span><br><span class="line">Xcode build <span class="keyword">done</span>.                                           17.3s</span><br><span class="line">Syncing files to device iPhone SE (2nd generation)...              135ms</span><br><span class="line"></span><br><span class="line">Flutter run key commands.</span><br><span class="line">r Hot reload. 🔥🔥🔥</span><br><span class="line">R Hot restart.</span><br><span class="line">h Repeat this <span class="built_in">help</span> message.</span><br><span class="line">d Detach (terminate <span class="string">"flutter run"</span> but leave application running).</span><br><span class="line">c Clear the screen</span><br><span class="line">q Quit (terminate the application on the device).</span><br><span class="line">An Observatory debugger and profiler on iPhone SE (2nd generation) is available at:</span><br><span class="line">http://127.0.0.1:50997/0_E-14-WAWg=/</span><br></pre></td></tr></table></figure>
<p>运行就完成啦！</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://book.flutterchina.club/chapter1/install_flutter.html" target="_blank" rel="noopener">https://book.flutterchina.club/chapter1/install_flutter.html</a></p>
<p><a href="https://blog.csdn.net/MugWorld/article/details/100033262" target="_blank" rel="noopener">https://blog.csdn.net/MugWorld/article/details/100033262</a></p>
<p><a href="https://github.com/flutter/flutter/issues/57744" target="_blank" rel="noopener">https://github.com/flutter/flutter/issues/57744</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Mac通过Brew安装Dart报错：Failed to download resource dart</title>
    <url>/2020/06/03/%E8%A7%A3%E5%86%B3Mac%E9%80%9A%E8%BF%87Brew%E5%AE%89%E8%A3%85Dart%E6%8A%A5%E9%94%99%EF%BC%9AFailed-to-download-resource-dart/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在学习Flutter的第一步从安装就开始踩坑了。安装Dart硬是安装不上。科学上网也有就是安不上。找了些资料，记录了一下解决方案。</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先是dart官网推荐使用brew命令安装dart，如下图：</p>
<p><img src="https://github.static.si-yee.com/posts/fixmacinstalldart/20200604141048.png" alt></p>
<p>但是出现了以下的错误：</p>
<p><img src="https://github.static.si-yee.com/posts/fixmacinstalldart/20200604141008.png" alt></p>
<p>详细报错如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install dart</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Installing dart from dart-lang/dart</span><br><span class="line">==&gt; Downloading https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-=O=-               <span class="comment">#    #     #     #                                        </span></span><br><span class="line">curl: (7) Failed to connect to storage.googleapis.com port 443: Operation timed out</span><br><span class="line">Error: An exception occurred within a child process:</span><br><span class="line">  DownloadError: Failed to download resource <span class="string">"dart"</span></span><br><span class="line">Download failed: https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br></pre></td></tr></table></figure>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>报错中有回显资源的地址链接，这时候我们可以通过自己浏览器或者迅雷去下载到本地。</p>
<p>然后使用终端查看Homebrew的缓存地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew --cache</span><br><span class="line">/Users/zjyzy/Library/Caches/Homebrew</span><br></pre></td></tr></table></figure>
<p>最后将下载下来的文件 拷贝到 上面缓存地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp ~/Downloads/dartsdk-macos-x64-release.zip /Users/zjyzy/Library/Caches/Homebrew</span><br></pre></td></tr></table></figure>
<p>接着再执行命令就可以正常安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install dart</span><br></pre></td></tr></table></figure>
<p>如果没有意外，那么就可以直接解决问题了。但是不幸，我还是不能解决问题。继续查找了一些资料：</p>
<p>安装时给命令加个 <code>-v</code> 打印命令的详细日志看看:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install dart -v</span><br><span class="line">==&gt; Installing dart from dart-lang/dart</span><br><span class="line">/usr/bin/sandbox-exec -f /private/tmp/homebrew20200603-12459-1ulm7yo.sb nice ruby -W0 -I <span class="variable">$LOAD_PATH</span> -- /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/build.rb /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/dart-lang/homebrew-dart/dart.rb --verbose</span><br><span class="line">==&gt; Downloading https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br><span class="line">/usr/bin/curl -q --globoff --show-error --user-agent Homebrew/2.2.2\ \(Macintosh\;\ Intel\ Mac\ OS\ X\ 10.15.4\)\ curl/7.64.1 --fail --location --remote-time --<span class="built_in">continue</span>-at 0 --output /Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip.incomplete https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:--  0:01:15 --:--:--     0</span><br><span class="line">curl: (7) Failed to connect to storage.googleapis.com port 443: Operation timed out</span><br><span class="line">Error: An exception occurred within a child process:</span><br><span class="line">  DownloadError: Failed to download resource <span class="string">"dart"</span></span><br><span class="line">Download failed: https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br></pre></td></tr></table></figure>
<p><strong>注意看这条信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/curl -q --globoff --show-error --user-agent Homebrew/2.2.2\ \(Macintosh\;\ Intel\ Mac\ OS\ X\ 10.15.4\)\ curl/7.64.1 --fail --location --remote-time --<span class="built_in">continue</span>-at 0 --output /Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip.incomplete https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br></pre></td></tr></table></figure>
<p>我们看到 Homebrew 下载 dart 的缓存地址为:<code>/Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip.incomplete</code></p>
<p><code>XXX.incomplete</code> 表示下载未完成，但这是 Homebrew 期望的下载文件路径。那么我们将从浏览器下载好的包放到该目录下，并去除<code>.incomplete</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp ~/Downloads/dartsdk-macos-x64-release.zip /Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip</span><br></pre></td></tr></table></figure>
<p><strong>先去下载文件路径删除掉未下载好的包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/zjyzy/Library/Caches/Homebrew/downloads</span><br><span class="line">$ rm -rf a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip.incomplete</span><br></pre></td></tr></table></figure>
<p>此时在安装查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install dart -v</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Installing dart from dart-lang/dart</span><br><span class="line">/usr/bin/sandbox-exec -f /private/tmp/homebrew20200603-14161-iaxt0b.sb nice ruby -W0 -I <span class="variable">$LOAD_PATH</span> -- /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/build.rb /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/dart-lang/homebrew-dart/dart.rb --verbose</span><br><span class="line">==&gt; Downloading https://storage.googleapis.com/dart-archive/channels/stable/release/2.8.3/sdk/dartsdk-macos-x64-release.zip</span><br><span class="line">Already downloaded: /Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip</span><br><span class="line">==&gt; Verifying a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip checksum</span><br><span class="line">unzip -o /Users/zjyzy/Library/Caches/Homebrew/downloads/a21b0f967308afab39b415842adf710f903b479ccb472feb7f13960160733911--dartsdk-macos-x64-release.zip -d /private/tmp/d20200603-14162-sr2oas</span><br><span class="line">cp -pR /private/tmp/d20200603-14162-sr2oas/dart-sdk/. /private/tmp/dart-20200603-14162-bg4o22/dart-sdk</span><br><span class="line">chmod -Rf +w /private/tmp/d20200603-14162-sr2oas</span><br><span class="line">==&gt; Cleaning</span><br><span class="line">==&gt; Finishing up</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dart dart</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dart2js dart2js</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dart2native dart2native</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dartanalyzer dartanalyzer</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dartaotruntime dartaotruntime</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dartdevc dartdevc</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dartdoc dartdoc</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/dartfmt dartfmt</span><br><span class="line">ln -s ../Cellar/dart/2.8.3/bin/pub pub</span><br><span class="line">/usr/bin/sandbox-exec -f /private/tmp/homebrew20200603-14268-12qkciz.sb nice ruby -W0 -I <span class="variable">$LOAD_PATH</span> -- /usr/<span class="built_in">local</span>/Homebrew/Library/Homebrew/postinstall.rb /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/dart-lang/homebrew-dart/dart.rb -v</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Please note the path to the Dart SDK:</span><br><span class="line">  /usr/<span class="built_in">local</span>/opt/dart/libexec</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/<span class="built_in">local</span>/Cellar/dart/2.8.3: 502 files, 486MB, built <span class="keyword">in</span> 7 seconds</span><br><span class="line">==&gt; `brew cleanup` has not been run <span class="keyword">in</span> 30 days, running now...</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/openssl@1.1--1.1.1d.mojave.bottle.tar.gz... (5.2MB)</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/python--3.7.4_1.mojave.bottle.tar.gz... (14.6MB)</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/readline--8.0.1.mojave.bottle.tar.gz... (517.9KB)</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/sqlite--3.29.0.mojave.bottle.tar.gz... (1.9MB)</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/watchman--4.9.0_3.mojave.bottle.tar.gz... (536.8KB)</span><br><span class="line">Removing: /Users/zjyzy/Library/Caches/Homebrew/Cask/motrix--1.4.1.dmg... (63MB)</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/npm-folders.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/npm-global.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/npm-json.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/npm-package-locks.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/npm-shrinkwrap.json.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/package-lock.json.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man5/package.json.5</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-coding-style.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-config.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-developers.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-disputes.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-index.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-orgs.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-registry.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-scope.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/npm-scripts.7</span><br><span class="line">rm /usr/<span class="built_in">local</span>/share/man/man7/removing-npm.7</span><br><span class="line">rmdir /usr/<span class="built_in">local</span>/lib/node_modules/@vue/cli/node_modules/@apollo/protobufjs/cli/node_modules</span><br><span class="line">Pruned 17 symbolic links and 1 directories from /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
<p>命令验证dart安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew info dart</span><br><span class="line">dart-lang/dart/dart: stable 2.8.3, devel 2.9.0-13.0.dev</span><br><span class="line">The Dart SDK</span><br><span class="line">https://dart.dev</span><br><span class="line">Conflicts with:</span><br><span class="line">  dart-beta (because dart-beta ships the same binaries)</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/dart/2.8.3 (502 files, 486MB) *</span><br><span class="line">  Built from <span class="built_in">source</span> on 2020-06-03 at 13:04:47</span><br><span class="line">From: https://github.com/dart-lang/homebrew-dart/blob/master/dart.rb</span><br><span class="line">==&gt; Options</span><br><span class="line">--devel</span><br><span class="line">	Install development version 2.9.0-13.0.dev</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Please note the path to the Dart SDK:</span><br><span class="line">  /usr/<span class="built_in">local</span>/opt/dart/libexec</span><br></pre></td></tr></table></figure>
<p>至此，dartSDK已经安装成功。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://shockerli.net/post/homebrew-install-download-error/" target="_blank" rel="noopener">https://shockerli.net/post/homebrew-install-download-error/</a></p>
<p><a href="https://www.cnblogs.com/lmyupupblogs/p/12785753.html" target="_blank" rel="noopener">https://www.cnblogs.com/lmyupupblogs/p/12785753.html</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Dart</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript工具函数大全</title>
    <url>/2020/06/01/JavaScript%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>抄录一些JavaScript工具函数大全<br><a id="more"></a></p>
<h1 id="检测数据是不是除了symbol外的原始数据"><a href="#检测数据是不是除了symbol外的原始数据" class="headerlink" title="检测数据是不是除了symbol外的原始数据"></a>检测数据是不是除了symbol外的原始数据</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isStatic</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'string'</span> ||</span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'number'</span> ||</span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'boolean'</span> ||</span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">'undefined'</span> ||</span><br><span class="line">        value === <span class="literal">null</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="检测数据是不是原始数据"><a href="#检测数据是不是原始数据" class="headerlink" title="检测数据是不是原始数据"></a>检测数据是不是原始数据</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrimitive</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isStatic(value) || <span class="keyword">typeof</span> value === <span class="string">'symbol'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断数据是不是引用类型的数据-例如：-arrays-functions-objects-regexes-new-Number-0-以及-new-String-‘’"><a href="#判断数据是不是引用类型的数据-例如：-arrays-functions-objects-regexes-new-Number-0-以及-new-String-‘’" class="headerlink" title="判断数据是不是引用类型的数据 (例如： arrays, functions, objects, regexes, new Number(0),以及 new String(‘’))"></a>判断数据是不是引用类型的数据 (例如： arrays, functions, objects, regexes, new Number(0),以及 new String(‘’))</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> type = <span class="keyword">typeof</span> value;</span><br><span class="line">      <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; (type == <span class="string">'object'</span> || type == <span class="string">'function'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="检查-value-是否是-类对象。-如果一个值是类对象，那么它不应该是-null，而且-typeof-后的结果是-“object”"><a href="#检查-value-是否是-类对象。-如果一个值是类对象，那么它不应该是-null，而且-typeof-后的结果是-“object”" class="headerlink" title="检查 value 是否是 类对象。 如果一个值是类对象，那么它不应该是 null，而且 typeof 后的结果是 “object”"></a>检查 value 是否是 类对象。 如果一个值是类对象，那么它不应该是 null，而且 typeof 后的结果是 “object”</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObjectLike</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> value == <span class="string">'object'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取数据类型，返回结果为-Number、String、Object、Array等"><a href="#获取数据类型，返回结果为-Number、String、Object、Array等" class="headerlink" title="获取数据类型，返回结果为 Number、String、Object、Array等"></a>获取数据类型，返回结果为 Number、String、Object、Array等</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRawType</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value).slice(<span class="number">8</span>, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getoRawType([]) ==&gt; Array</span></span><br></pre></td></tr></table></figure>
<h1 id="判断数据是不是Object类型的数据"><a href="#判断数据是不是Object类型的数据" class="headerlink" title="判断数据是不是Object类型的数据"></a>判断数据是不是Object类型的数据</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Object]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断-value-是不是浏览器内置函数"><a href="#判断-value-是不是浏览器内置函数" class="headerlink" title="判断 value 是不是浏览器内置函数"></a>判断 value 是不是浏览器内置函数</h1><p>内置函数toString后的主体代码块为 [native code] ，而非内置函数则为相关代码，所以非内置函数可以进行拷贝(toString后掐头去尾再由Function转)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNative</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">'function'</span> &amp;&amp; <span class="regexp">/native code/</span>.test(value.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="检查-value-是否为有效的类数组长度"><a href="#检查-value-是否为有效的类数组长度" class="headerlink" title="检查 value 是否为有效的类数组长度"></a>检查 value 是否为有效的类数组长度</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLength</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> value == <span class="string">'number'</span> &amp;&amp; value &gt; <span class="number">-1</span> &amp;&amp; value % <span class="number">1</span> == <span class="number">0</span> &amp;&amp; value &lt;= <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="检查-value-是否是类数组"><a href="#检查-value-是否是类数组" class="headerlink" title="检查 value 是否是类数组"></a>检查 value 是否是类数组</h1><p>如果一个值被认为是类数组，那么它不是一个函数，并且value.length是个整数，大于等于 0，小于或等于 Number.MAX_SAFE_INTEGER。这里字符串也将被当作类数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; isLength(value.length) &amp;&amp; !isFunction(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="检查-value-是否为空"><a href="#检查-value-是否为空" class="headerlink" title="检查 value 是否为空"></a>检查 value 是否为空</h1><p>如果是null，直接返回true；如果是类数组，判断数据长度；如果是Object对象，判断是否具有属性；如果是其他数据，直接返回false(也可改为返回true)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isArrayLike(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> !value.length;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isPlainObject(value))&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasOwnProperty.call(value, key)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="记忆函数：缓存函数的运算结果"><a href="#记忆函数：缓存函数的运算结果" class="headerlink" title="记忆函数：缓存函数的运算结果"></a>记忆函数：缓存函数的运算结果</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cached</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cachedFn</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> hit = cache[str];</span><br><span class="line">        <span class="keyword">return</span> hit || (cache[str] = fn(str))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="横线转驼峰命名"><a href="#横线转驼峰命名" class="headerlink" title="横线转驼峰命名"></a>横线转驼峰命名</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> camelizeRE = <span class="regexp">/-(\w)/g</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(camelizeRE, <span class="function"><span class="keyword">function</span>(<span class="params">_, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c ? c.toUpperCase() : <span class="string">''</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ab-cd-ef ==&gt; abCdEf</span></span><br><span class="line"><span class="comment">//使用记忆函数</span></span><br><span class="line"><span class="keyword">let</span> _camelize = cached(camelize)</span><br></pre></td></tr></table></figure>
<h1 id="驼峰命名转横线命名：拆分字符串，使用-相连，并且转换为小写"><a href="#驼峰命名转横线命名：拆分字符串，使用-相连，并且转换为小写" class="headerlink" title="驼峰命名转横线命名：拆分字符串，使用 - 相连，并且转换为小写"></a>驼峰命名转横线命名：拆分字符串，使用 - 相连，并且转换为小写</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hyphenateRE = <span class="regexp">/\B([A-Z])/g</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hyphenate</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(hyphenateRE, <span class="string">'-$1'</span>).toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//abCd ==&gt; ab-cd</span></span><br><span class="line"><span class="comment">//使用记忆函数</span></span><br><span class="line"><span class="keyword">let</span> _hyphenate = cached(hyphenate);</span><br></pre></td></tr></table></figure>
<h1 id="字符串首位大写"><a href="#字符串首位大写" class="headerlink" title="字符串首位大写"></a>字符串首位大写</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc ==&gt; Abc</span></span><br><span class="line"><span class="comment">//使用记忆函数</span></span><br><span class="line"><span class="keyword">let</span> _capitalize = cached(capitalize)</span><br></pre></td></tr></table></figure>
<h1 id="将属性混合到目标对象中"><a href="#将属性混合到目标对象中" class="headerlink" title="将属性混合到目标对象中"></a>将属性混合到目标对象中</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">to, _from</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> _from) &#123;</span><br><span class="line">        to[key] = _from[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="对象属性复制，浅拷贝"><a href="#对象属性复制，浅拷贝" class="headerlink" title="对象属性复制，浅拷贝"></a>对象属性复制，浅拷贝</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign = <span class="built_in">Object</span>.assign || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Cannot convert undefined or null to object'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>],</span><br><span class="line">        args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>),</span><br><span class="line">        key</span><br><span class="line">    args.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(key <span class="keyword">in</span> item)&#123;</span><br><span class="line">            item.hasOwnProperty(key) &amp;&amp; ( target[key] = item[key] )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>Object.assign</code>可以浅克隆一个对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> clone = <span class="built_in">Object</span>.assign(&#123;&#125;, target)</span><br></pre></td></tr></table></figure>
<p>简单的深克隆可以使用<code>JSON.parse()</code>和<code>JSON.stringify()</code>，这两个api是解析json数据的，所以只能解析除symbol外的原始类型及数组和对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> clone = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify(target) )</span><br></pre></td></tr></table></figure>
<h1 id="克隆数据，可深度克隆"><a href="#克隆数据，可深度克隆" class="headerlink" title="克隆数据，可深度克隆"></a>克隆数据，可深度克隆</h1><p>这里列出了原始类型，时间、正则、错误、数组、对象的克隆规则，其他的可自行补充</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">value, deep</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isPrimitive(value))&#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isArrayLike(value)) &#123; <span class="comment">//是类数组</span></span><br><span class="line">        value = <span class="built_in">Array</span>.prototype.slice.call(value)</span><br><span class="line">        <span class="keyword">return</span> value.map(<span class="function"><span class="params">item</span> =&gt;</span> deep ? clone(item, deep) : item)</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isPlainObject(value))&#123; <span class="comment">//是对象</span></span><br><span class="line">           <span class="keyword">let</span> target = &#123;&#125;, key;</span><br><span class="line">          <span class="keyword">for</span> (key <span class="keyword">in</span> value) &#123;</span><br><span class="line">            value.hasOwnProperty(key) &amp;&amp; ( target[key] = deep ? clone(value[key], deep) : value[key] )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> type = getRawType(value)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Date'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'RegExp'</span>: </span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Error'</span>: value = <span class="keyword">new</span> <span class="built_in">window</span>[type](value); <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="识别各种浏览器及平台"><a href="#识别各种浏览器及平台" class="headerlink" title="识别各种浏览器及平台"></a>识别各种浏览器及平台</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//运行环境是浏览器</span></span><br><span class="line"><span class="keyword">let</span> inBrowser = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>;</span><br><span class="line"><span class="comment">//运行环境是微信</span></span><br><span class="line"><span class="keyword">let</span> inWeex = <span class="keyword">typeof</span> WXEnvironment !== <span class="string">'undefined'</span> &amp;&amp; !!WXEnvironment.platform;</span><br><span class="line"><span class="keyword">let</span> weexPlatform = inWeex &amp;&amp; WXEnvironment.platform.toLowerCase();</span><br><span class="line"><span class="comment">//浏览器 UA 判断</span></span><br><span class="line"><span class="keyword">let</span> UA = inBrowser &amp;&amp; <span class="built_in">window</span>.navigator.userAgent.toLowerCase();</span><br><span class="line"><span class="keyword">let</span> isIE = UA &amp;&amp; <span class="regexp">/msie|trident/</span>.test(UA);</span><br><span class="line"><span class="keyword">let</span> isIE9 = UA &amp;&amp; UA.indexOf(<span class="string">'msie 9.0'</span>) &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> isEdge = UA &amp;&amp; UA.indexOf(<span class="string">'edge/'</span>) &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> isAndroid = (UA &amp;&amp; UA.indexOf(<span class="string">'android'</span>) &gt; <span class="number">0</span>) || (weexPlatform === <span class="string">'android'</span>);</span><br><span class="line"><span class="keyword">let</span> isIOS = (UA &amp;&amp; <span class="regexp">/iphone|ipad|ipod|ios/</span>.test(UA)) || (weexPlatform === <span class="string">'ios'</span>);</span><br><span class="line"><span class="keyword">let</span> isChrome = UA &amp;&amp; <span class="regexp">/chrome\/\d+/</span>.test(UA) &amp;&amp; !isEdge;</span><br></pre></td></tr></table></figure>
<h1 id="获取浏览器信息"><a href="#获取浏览器信息" class="headerlink" title="获取浏览器信息"></a>获取浏览器信息</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExplorerInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> &lt;= t.indexOf(<span class="string">"msie"</span>) ? &#123; <span class="comment">//ie &lt; 11</span></span><br><span class="line">        type: <span class="string">"IE"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/msie ([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : !!t.match(<span class="regexp">/trident\/.+?rv:(([\d.]+))/</span>) ? &#123; <span class="comment">// ie 11</span></span><br><span class="line">        type: <span class="string">"IE"</span>,</span><br><span class="line">        version: <span class="number">11</span></span><br><span class="line">    &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"edge"</span>) ? &#123;</span><br><span class="line">        type: <span class="string">"Edge"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/edge\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"firefox"</span>) ? &#123;</span><br><span class="line">        type: <span class="string">"Firefox"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/firefox\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"chrome"</span>) ? &#123;</span><br><span class="line">        type: <span class="string">"Chrome"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/chrome\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"opera"</span>) ? &#123;</span><br><span class="line">        type: <span class="string">"Opera"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/opera.([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : <span class="number">0</span> &lt;= t.indexOf(<span class="string">"Safari"</span>) ? &#123;</span><br><span class="line">        type: <span class="string">"Safari"</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/version\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">    &#125; : &#123;</span><br><span class="line">        type: t,</span><br><span class="line">        version: <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="检测是否为PC端浏览器模式"><a href="#检测是否为PC端浏览器模式" class="headerlink" title="检测是否为PC端浏览器模式"></a>检测是否为PC端浏览器模式</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPCBroswer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> e = navigator.userAgent.toLowerCase()</span><br><span class="line">        , t = <span class="string">"ipad"</span> == e.match(<span class="regexp">/ipad/i</span>)</span><br><span class="line">        , i = <span class="string">"iphone"</span> == e.match(<span class="regexp">/iphone/i</span>)</span><br><span class="line">        , r = <span class="string">"midp"</span> == e.match(<span class="regexp">/midp/i</span>)</span><br><span class="line">        , n = <span class="string">"rv:1.2.3.4"</span> == e.match(<span class="regexp">/rv:1.2.3.4/i</span>)</span><br><span class="line">        , a = <span class="string">"ucweb"</span> == e.match(<span class="regexp">/ucweb/i</span>)</span><br><span class="line">        , o = <span class="string">"android"</span> == e.match(<span class="regexp">/android/i</span>)</span><br><span class="line">        , s = <span class="string">"windows ce"</span> == e.match(<span class="regexp">/windows ce/i</span>)</span><br><span class="line">        , l = <span class="string">"windows mobile"</span> == e.match(<span class="regexp">/windows mobile/i</span>);</span><br><span class="line">    <span class="keyword">return</span> !(t || i || r || n || a || o || s || l)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="数组去重，返回一个新数组"><a href="#数组去重，返回一个新数组" class="headerlink" title="数组去重，返回一个新数组"></a>数组去重，返回一个新数组</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isArrayLink(arr))&#123; <span class="comment">//不是类数组对象</span></span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">let</span> objarr = []</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    </span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isStatic(item))&#123;<span class="comment">//是除了symbol外的原始数据</span></span><br><span class="line">            <span class="keyword">let</span> key = item + <span class="string">'_'</span> + getRawType(item);</span><br><span class="line">            <span class="keyword">if</span>(!obj[key])&#123;</span><br><span class="line">                obj[key] = <span class="literal">true</span></span><br><span class="line">                result.push(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//引用类型及symbol</span></span><br><span class="line">            <span class="keyword">if</span>(!objarr.includes(item))&#123;</span><br><span class="line">                objarr.push(item)</span><br><span class="line">                result.push(item)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> resulte</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="生成一个重复的字符串，有n个str组成，可修改为填充为数组等"><a href="#生成一个重复的字符串，有n个str组成，可修改为填充为数组等" class="headerlink" title="生成一个重复的字符串，有n个str组成，可修改为填充为数组等"></a>生成一个重复的字符串，有n个str组成，可修改为填充为数组等</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            res += str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            str += str;</span><br><span class="line">        &#125;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//repeat('123',3) ==&gt; 123123123</span></span><br></pre></td></tr></table></figure>
<h1 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFormater</span>(<span class="params">formater, t</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> date = t ? <span class="keyword">new</span> <span class="built_in">Date</span>(t) : <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">        Y = date.getFullYear() + <span class="string">''</span>,</span><br><span class="line">        M = date.getMonth() + <span class="number">1</span>,</span><br><span class="line">        D = date.getDate(),</span><br><span class="line">        H = date.getHours(),</span><br><span class="line">        m = date.getMinutes(),</span><br><span class="line">        s = date.getSeconds();</span><br><span class="line">    <span class="keyword">return</span> formater.replace(<span class="regexp">/YYYY|yyyy/g</span>,Y)</span><br><span class="line">        .replace(<span class="regexp">/YY|yy/g</span>,Y.substr(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">        .replace(<span class="regexp">/MM/g</span>,(M&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + M)</span><br><span class="line">        .replace(<span class="regexp">/DD/g</span>,(D&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + D)</span><br><span class="line">        .replace(<span class="regexp">/HH|hh/g</span>,(H&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + H)</span><br><span class="line">        .replace(<span class="regexp">/mm/g</span>,(m&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + m)</span><br><span class="line">        .replace(<span class="regexp">/ss/g</span>,(s&lt;<span class="number">10</span>?<span class="string">'0'</span>:<span class="string">''</span>) + s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dateFormater('YYYY-MM-DD HH:mm', t) ==&gt; 2019-06-26 18:30</span></span><br><span class="line"><span class="comment">// dateFormater('YYYYMMDDHHmm', t) ==&gt; 201906261830</span></span><br></pre></td></tr></table></figure>
<h1 id="dateStrForma：将指定字符串由一种时间格式转化为另一种"><a href="#dateStrForma：将指定字符串由一种时间格式转化为另一种" class="headerlink" title="dateStrForma：将指定字符串由一种时间格式转化为另一种"></a>dateStrForma：将指定字符串由一种时间格式转化为另一种</h1><p>from的格式应对应str的位置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateStrForma</span>(<span class="params">str, from, to</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//'20190626' 'YYYYMMDD' 'YYYY年MM月DD日'</span></span><br><span class="line">    str += <span class="string">''</span></span><br><span class="line">    <span class="keyword">let</span> Y = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span>(~(Y = <span class="keyword">from</span>.indexOf(<span class="string">'YYYY'</span>)))&#123;</span><br><span class="line">        Y = str.substr(Y, <span class="number">4</span>)</span><br><span class="line">        to = to.replace(<span class="regexp">/YYYY|yyyy/g</span>,Y)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(~(Y = <span class="keyword">from</span>.indexOf(<span class="string">'YY'</span>)))&#123;</span><br><span class="line">        Y = str.substr(Y, <span class="number">2</span>)</span><br><span class="line">        to = to.replace(<span class="regexp">/YY|yy/g</span>,Y)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> k,i</span><br><span class="line">    [<span class="string">'M'</span>,<span class="string">'D'</span>,<span class="string">'H'</span>,<span class="string">'h'</span>,<span class="string">'m'</span>,<span class="string">'s'</span>].forEach(<span class="function"><span class="params">s</span> =&gt;</span>&#123;</span><br><span class="line">        i = <span class="keyword">from</span>.indexOf(s+s)</span><br><span class="line">        k = ~i ? str.substr(i, <span class="number">2</span>) : <span class="string">''</span></span><br><span class="line">        to = to.replace(s+s, k)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dateStrForma('20190626', 'YYYYMMDD', 'YYYY年MM月DD日') ==&gt; 2019年06月26日</span></span><br><span class="line"><span class="comment">// dateStrForma('121220190626', '----YYYYMMDD', 'YYYY年MM月DD日') ==&gt; 2019年06月26日</span></span><br><span class="line"><span class="comment">// dateStrForma('2019年06月26日', 'YYYY年MM月DD日', 'YYYYMMDD') ==&gt; 20190626</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般的也可以使用正则来实现</span></span><br><span class="line"><span class="comment">//'2019年06月26日'.replace(/(\d&#123;4&#125;)年(\d&#123;2&#125;)月(\d&#123;2&#125;)日/, '$1-$2-$3') ==&gt; 2019-06-26</span></span><br></pre></td></tr></table></figure>
<h1 id="根据字符串路径获取对象属性-‘obj-0-count’"><a href="#根据字符串路径获取对象属性-‘obj-0-count’" class="headerlink" title="根据字符串路径获取对象属性 : ‘obj[0].count’"></a>根据字符串路径获取对象属性 : ‘obj[0].count’</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPropByPath</span>(<span class="params">obj, path, strict</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> tempObj = obj;</span><br><span class="line">      path = path.replace(<span class="regexp">/\[(\w+)\]/g</span>, <span class="string">'.$1'</span>); <span class="comment">//将[0]转化为.0</span></span><br><span class="line">      path = path.replace(<span class="regexp">/^\./</span>, <span class="string">''</span>); <span class="comment">//去除开头的.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> keyArr = path.split(<span class="string">'.'</span>); <span class="comment">//根据.切割</span></span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> len = keyArr.length; i &lt; len - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!tempObj &amp;&amp; !strict) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">let</span> key = keyArr[i];</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> tempObj) &#123;</span><br><span class="line">            tempObj = tempObj[key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (strict) &#123;<span class="comment">//开启严格模式，没找到对应key值，抛出错误</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'please transfer a valid prop path to form item!'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        o: tempObj, <span class="comment">//原始数据</span></span><br><span class="line">        k: keyArr[i], <span class="comment">//key值</span></span><br><span class="line">        v: tempObj ? tempObj[keyArr[i]] : <span class="literal">null</span> <span class="comment">// key值对应的值</span></span><br><span class="line">      &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="获取Url参数，返回一个对象"><a href="#获取Url参数，返回一个对象" class="headerlink" title="获取Url参数，返回一个对象"></a>获取Url参数，返回一个对象</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetUrlParam</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="built_in">document</span>.location.toString();</span><br><span class="line">    <span class="keyword">let</span> arrObj = url.split(<span class="string">"?"</span>);</span><br><span class="line">    <span class="keyword">let</span> params = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">if</span> (arrObj.length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        arrObj = arrObj[<span class="number">1</span>].split(<span class="string">"&amp;"</span>);</span><br><span class="line">        arrObj.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            item = item.split(<span class="string">"="</span>);</span><br><span class="line">            params[item[<span class="number">0</span>]] = item[<span class="number">1</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ?a=1&amp;b=2&amp;c=3 ==&gt; &#123;a: "1", b: "2", c: "3"&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="base64数据导出文件，文件下载"><a href="#base64数据导出文件，文件下载" class="headerlink" title="base64数据导出文件，文件下载"></a>base64数据导出文件，文件下载</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">filename, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> DownloadLink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( DownloadLink )&#123;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(DownloadLink);</span><br><span class="line">        DownloadLink.style = <span class="string">'display: none'</span>;</span><br><span class="line">        DownloadLink.download = filename;</span><br><span class="line">        DownloadLink.href = data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">document</span>.createEvent )&#123;</span><br><span class="line">            <span class="keyword">let</span> DownloadEvt = <span class="built_in">document</span>.createEvent(<span class="string">'MouseEvents'</span>);</span><br><span class="line"></span><br><span class="line">            DownloadEvt.initEvent(<span class="string">'click'</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">            DownloadLink.dispatchEvent(DownloadEvt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">document</span>.createEventObject )</span><br><span class="line">            DownloadLink.fireEvent(<span class="string">'onclick'</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> DownloadLink.onclick == <span class="string">'function'</span> )</span><br><span class="line">            DownloadLink.onclick();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(DownloadLink);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toFullScreen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> elem = <span class="built_in">document</span>.body;</span><br><span class="line">    elem.webkitRequestFullScreen</span><br><span class="line">    ? elem.webkitRequestFullScreen()</span><br><span class="line">    : elem.mozRequestFullScreen</span><br><span class="line">    ? elem.mozRequestFullScreen()</span><br><span class="line">    : elem.msRequestFullscreen</span><br><span class="line">    ? elem.msRequestFullscreen()</span><br><span class="line">    : elem.requestFullScreen</span><br><span class="line">    ? elem.requestFullScreen()</span><br><span class="line">    : alert(<span class="string">"浏览器不支持全屏"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="退出全屏"><a href="#退出全屏" class="headerlink" title="退出全屏"></a>退出全屏</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> elem = parent.document;</span><br><span class="line">    elem.webkitCancelFullScreen</span><br><span class="line">    ? elem.webkitCancelFullScreen()</span><br><span class="line">    : elem.mozCancelFullScreen</span><br><span class="line">    ? elem.mozCancelFullScreen()</span><br><span class="line">    : elem.cancelFullScreen</span><br><span class="line">    ? elem.cancelFullScreen()</span><br><span class="line">    : elem.msExitFullscreen</span><br><span class="line">    ? elem.msExitFullscreen()</span><br><span class="line">    : elem.exitFullscreen</span><br><span class="line">    ? elem.exitFullscreen()</span><br><span class="line">    : alert(<span class="string">"切换失败,可尝试Esc退出"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="window动画"><a href="#window动画" class="headerlink" title="window动画"></a>window动画</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//为了使setTimteout的尽可能的接近每秒60帧的效果</span></span><br><span class="line">        <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    Window.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oCancelAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//为了使setTimteout的尽可能的接近每秒60帧的效果</span></span><br><span class="line">        <span class="built_in">window</span>.clearTimeout(id);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="检查数据是否是非数字值"><a href="#检查数据是否是非数字值" class="headerlink" title="检查数据是否是非数字值"></a>检查数据是否是非数字值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_isNaN</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(<span class="keyword">typeof</span> v === <span class="string">'string'</span> || <span class="keyword">typeof</span> v === <span class="string">'number'</span>) || <span class="built_in">isNaN</span>(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="返回一个lower-upper之间的随机数"><a href="#返回一个lower-upper之间的随机数" class="headerlink" title="返回一个lower - upper之间的随机数"></a>返回一个lower - upper之间的随机数</h1><p>lower、upper无论正负与大小，但必须是非NaN的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">lower, upper</span>)</span>&#123;</span><br><span class="line">    lower = +lower || <span class="number">0</span></span><br><span class="line">    upper = +upper || <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (upper - lower) + lower;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//random(0, 0.5) ==&gt; 0.3567039135734613</span></span><br><span class="line"><span class="comment">//random(2, 1) ===&gt; 1.6718418553475423</span></span><br><span class="line"><span class="comment">//random(-2, -1) ==&gt; -1.4474325452361945</span></span><br></pre></td></tr></table></figure>
<h1 id="利用performance-timing进行性能分析"><a href="#利用performance-timing进行性能分析" class="headerlink" title="利用performance.timing进行性能分析"></a>利用performance.timing进行性能分析</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> t = performance.timing</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'DNS查询耗时 ：'</span> + (t.domainLookupEnd - t.domainLookupStart).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'TCP链接耗时 ：'</span> + (t.connectEnd - t.connectStart).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'request请求耗时 ：'</span> + (t.responseEnd - t.responseStart).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'解析dom树耗时 ：'</span> + (t.domComplete - t.domInteractive).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'白屏时间 ：'</span> + (t.responseStart - t.navigationStart).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'domready时间 ：'</span> + (t.domContentLoadedEventEnd - t.navigationStart).toFixed(<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onload时间 ：'</span> + (t.loadEventEnd - t.navigationStart).toFixed(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t = performance.memory)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'js内存使用占比 ：'</span> + (t.usedJSHeapSize / t.totalJSHeapSize * <span class="number">100</span>).toFixed(<span class="number">2</span>) + <span class="string">'%'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="禁止某些键盘事件"><a href="#禁止某些键盘事件" class="headerlink" title="禁止某些键盘事件"></a>禁止某些键盘事件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(</span><br><span class="line">        <span class="number">112</span> == event.keyCode || <span class="comment">//F1</span></span><br><span class="line">        <span class="number">123</span> == event.keyCode || <span class="comment">//F12</span></span><br><span class="line">        event.ctrlKey &amp;&amp; <span class="number">82</span> == event.keyCode || <span class="comment">//ctrl + R</span></span><br><span class="line">        event.ctrlKey &amp;&amp; <span class="number">78</span> == event.keyCode || <span class="comment">//ctrl + N</span></span><br><span class="line">        event.shiftKey &amp;&amp; <span class="number">121</span> == event.keyCode || <span class="comment">//shift + F10</span></span><br><span class="line">        event.altKey &amp;&amp; <span class="number">115</span> == event.keyCode || <span class="comment">//alt + F4</span></span><br><span class="line">        <span class="string">"A"</span> == event.srcElement.tagName &amp;&amp; event.shiftKey <span class="comment">//shift + 点击a标签</span></span><br><span class="line">    ) || (event.returnValue = <span class="literal">false</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="禁止右键、选择、复制"><a href="#禁止右键、选择、复制" class="headerlink" title="禁止右键、选择、复制"></a>禁止右键、选择、复制</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">'contextmenu'</span>, <span class="string">'selectstart'</span>, <span class="string">'copy'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(ev, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event.returnValue = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flattenDepth</span>(<span class="params">array, depth = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> result = []</span><br><span class="line">   array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">let</span> d = depth</span><br><span class="line">     <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item) &amp;&amp; d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       result.push(...(flattenDepth(item, --d)))</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       result.push(item)</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(flattenDepth([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]])) <span class="comment">// [ 1, 2, [ 3, [ 4 ] ], 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(flattenDepth([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]], <span class="number">2</span>)) <span class="comment">// [ 1, 2, 3, [ 4 ], 5 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(flattenDepth([<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]], <span class="number">5</span>]], <span class="number">3</span>)) <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>
<h1 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h1><p>一句话解释就是<strong>参数够了就执行，参数不够就返回一个函数，之前的参数存起来，直到够了为止</strong> 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> l = func.length</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curried</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">     <span class="keyword">if</span>(args.length &lt; l) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> argsInner = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">         <span class="keyword">return</span> curried.apply(<span class="keyword">this</span>, args.concat(argsInner))</span><br><span class="line">       &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log([a, b, c])</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> curried = curry(f)</span><br><span class="line">curried(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>) <span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line">curried(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>) <span class="comment">// =&gt; [1, 2, 3]</span></span><br><span class="line">curried(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// =&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<h1 id="为元素添加on方法"><a href="#为元素添加on方法" class="headerlink" title="为元素添加on方法"></a>为元素添加on方法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Element.prototype.on = Element.prototype.addEventListener;</span><br><span class="line"></span><br><span class="line">NodeList.prototype.on = <span class="function"><span class="keyword">function</span> (<span class="params">event, fn</span>) </span>&#123;、</span><br><span class="line">    [][<span class="string">'forEach'</span>].call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">        el.on(event, fn);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="为元素添加trigger方法"><a href="#为元素添加trigger方法" class="headerlink" title="为元素添加trigger方法"></a>为元素添加trigger方法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Element.prototype.trigger = <span class="function"><span class="keyword">function</span>(<span class="params">type, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">"HTMLEvents"</span>);</span><br><span class="line">  event.initEvent(type, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">  event.data = data || &#123;&#125;;</span><br><span class="line">  event.eventName = type;</span><br><span class="line">  event.target = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.dispatchEvent(event);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">NodeList.prototype.trigger = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  [][<span class="string">"forEach"</span>].call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    el[<span class="string">"trigger"</span>](event);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="转义html标签"><a href="#转义html标签" class="headerlink" title="转义html标签"></a>转义html标签</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HtmlEncode</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> text</span><br><span class="line">    .replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;"</span>)</span><br><span class="line">    .replace(<span class="regexp">/\"/g</span>, <span class="string">'"'</span>)</span><br><span class="line">    .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&lt;"</span>)</span><br><span class="line">    .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="HTML标签转义"><a href="#HTML标签转义" class="headerlink" title="HTML标签转义"></a>HTML标签转义</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HTML 标签转义</span></span><br><span class="line"><span class="comment">// @param &#123;Array.&lt;DOMString&gt;&#125; templateData 字符串类型的tokens</span></span><br><span class="line"><span class="comment">// @param &#123;...&#125; ..vals 表达式占位符的运算结果tokens</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SaferHTML</span>(<span class="params">templateData</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = templateData[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> arg = <span class="built_in">String</span>(<span class="built_in">arguments</span>[i]);</span><br><span class="line">    <span class="comment">// Escape special characters in the substitution.</span></span><br><span class="line">    s += arg</span><br><span class="line">      .replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>)</span><br><span class="line">      .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</span><br><span class="line">      .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line">    <span class="comment">// Don't escape special characters in the template.</span></span><br><span class="line">    s += templateData[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">var</span> html = SaferHTML<span class="string">`&lt;p&gt;这是关于字符串模板的介绍&lt;/p&gt;`</span>;</span><br></pre></td></tr></table></figure>
<h1 id="跨浏览器绑定事件"><a href="#跨浏览器绑定事件" class="headerlink" title="跨浏览器绑定事件"></a>跨浏览器绑定事件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventSamp</span>(<span class="params">obj, evt, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!oTarget) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj.addEventListener) &#123;</span><br><span class="line">    obj.addEventListener(evt, fn, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj.attachEvent) &#123;</span><br><span class="line">    obj.attachEvent(<span class="string">"on"</span> + evt, fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    oTarget[<span class="string">"on"</span> + sEvtType] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="加入收藏夹"><a href="#加入收藏夹" class="headerlink" title="加入收藏夹"></a>加入收藏夹</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFavorite</span>(<span class="params">sURL, sTitle</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.external.addFavorite(sURL, sTitle);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.sidebar.addPanel(sTitle, sURL, <span class="string">""</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      alert(<span class="string">"加入收藏失败，请使用Ctrl+D进行添加"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="提取页面代码中所有网址"><a href="#提取页面代码中所有网址" class="headerlink" title="提取页面代码中所有网址"></a>提取页面代码中所有网址</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aa = <span class="built_in">document</span>.documentElement.outerHTML</span><br><span class="line">  .match(</span><br><span class="line">    /(url\(|src=|href=)[\<span class="string">"\']*([^\"\'\(\)\&lt;\&gt;\[\] ]+)[\"\'\)]*|(http:\/\/[\w\-\.]+[^\"\'\(\)\&lt;\&gt;\[\] ]+)/gi</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string">  .join("</span>\r\n<span class="string">")</span></span><br><span class="line"><span class="string">  .replace(/^(src=|href=|url\()[\"\']*|[\"\'\&gt;\) ]*$/gim, "</span><span class="string">");</span></span><br><span class="line"><span class="string">alert(aa);</span></span><br></pre></td></tr></table></figure>
<h1 id="动态加载脚本文件"><a href="#动态加载脚本文件" class="headerlink" title="动态加载脚本文件"></a>动态加载脚本文件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendscript</span>(<span class="params">src, text, reload, charset</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = hash(src + text);</span><br><span class="line">  <span class="keyword">if</span> (!reload &amp;&amp; in_array(id, evalscripts)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (reload &amp;&amp; $(id)) &#123;</span><br><span class="line">    $(id).parentNode.removeChild($(id));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  evalscripts.push(id);</span><br><span class="line">  <span class="keyword">var</span> scriptNode = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  scriptNode.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">  scriptNode.id = id;</span><br><span class="line">  scriptNode.charset = charset</span><br><span class="line">    ? charset</span><br><span class="line">    : BROWSER.firefox</span><br><span class="line">    ? <span class="built_in">document</span>.characterSet</span><br><span class="line">    : <span class="built_in">document</span>.charset;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (src) &#123;</span><br><span class="line">      scriptNode.src = src;</span><br><span class="line">      scriptNode.onloadDone = <span class="literal">false</span>;</span><br><span class="line">      scriptNode.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        scriptNode.onloadDone = <span class="literal">true</span>;</span><br><span class="line">        JSLOADED[src] = <span class="number">1</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">      scriptNode.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          (scriptNode.readyState == <span class="string">"loaded"</span> ||</span><br><span class="line">            scriptNode.readyState == <span class="string">"complete"</span>) &amp;&amp;</span><br><span class="line">          !scriptNode.onloadDone</span><br><span class="line">        ) &#123;</span><br><span class="line">          scriptNode.onloadDone = <span class="literal">true</span>;</span><br><span class="line">          JSLOADED[src] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (text) &#123;</span><br><span class="line">      scriptNode.text = text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(scriptNode);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="返回顶部的通用方法"><a href="#返回顶部的通用方法" class="headerlink" title="返回顶部的通用方法"></a>返回顶部的通用方法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backTop</span>(<span class="params">btnId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(btnId);</span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">document</span>.documentElement;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">document</span>.body;</span><br><span class="line">  <span class="built_in">window</span>.onscroll = <span class="keyword">set</span>;</span><br><span class="line">  btn.style.display = "none";</span><br><span class="line">  btn.onclick = function() &#123;</span><br><span class="line">    btn.style.display = <span class="string">"none"</span>;</span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      d.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class="number">0.1</span>);</span><br><span class="line">      b.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class="number">0.1</span>);</span><br><span class="line">      <span class="keyword">if</span> (d.scrollTop + b.scrollTop == <span class="number">0</span>)</span><br><span class="line">        clearInterval(btn.timer, (<span class="built_in">window</span>.onscroll = <span class="keyword">set</span>));</span><br><span class="line">    &#125;, 10);</span><br><span class="line">  &#125;;</span><br><span class="line">  function <span class="keyword">set</span>() &#123;</span><br><span class="line">    btn.style.display = d.scrollTop + b.scrollTop &gt; <span class="number">100</span> ? <span class="string">"block"</span> : <span class="string">"none"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">backTop(<span class="string">"goTop"</span>);</span><br></pre></td></tr></table></figure>
<h1 id="实现base64解码"><a href="#实现base64解码" class="headerlink" title="实现base64解码"></a>实现base64解码</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64_decode</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b64 = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span>;</span><br><span class="line">  <span class="keyword">var</span> o1,</span><br><span class="line">    o2,</span><br><span class="line">    o3,</span><br><span class="line">    h1,</span><br><span class="line">    h2,</span><br><span class="line">    h3,</span><br><span class="line">    h4,</span><br><span class="line">    bits,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    ac = <span class="number">0</span>,</span><br><span class="line">    dec = <span class="string">""</span>,</span><br><span class="line">    tmp_arr = [];</span><br><span class="line">  <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">  data += <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    h1 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h2 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h3 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h4 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    bits = (h1 &lt;&lt; <span class="number">18</span>) | (h2 &lt;&lt; <span class="number">12</span>) | (h3 &lt;&lt; <span class="number">6</span>) | h4;</span><br><span class="line">    o1 = (bits &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    o2 = (bits &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    o3 = bits &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">if</span> (h3 == <span class="number">64</span>) &#123;</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (h4 == <span class="number">64</span>) &#123;</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2, o3);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (i &lt; data.length);</span><br><span class="line">  dec = tmp_arr.join(<span class="string">""</span>);</span><br><span class="line">  dec = utf8_decode(dec);</span><br><span class="line">  <span class="keyword">return</span> dec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="确认是否是键盘有效输入值"><a href="#确认是否是键盘有效输入值" class="headerlink" title="确认是否是键盘有效输入值"></a>确认是否是键盘有效输入值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkKey</span>(<span class="params">iKey</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (iKey == <span class="number">32</span> || iKey == <span class="number">229</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*空格和异常*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">47</span> &amp;&amp; iKey &lt; <span class="number">58</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*数字*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">64</span> &amp;&amp; iKey &lt; <span class="number">91</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*字母*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">95</span> &amp;&amp; iKey &lt; <span class="number">108</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*数字键盘1*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">108</span> &amp;&amp; iKey &lt; <span class="number">112</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*数字键盘2*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">185</span> &amp;&amp; iKey &lt; <span class="number">193</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*符号1*/</span></span><br><span class="line">  <span class="keyword">if</span> (iKey &gt; <span class="number">218</span> &amp;&amp; iKey &lt; <span class="number">223</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="comment">/*符号2*/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="全角半角转换"><a href="#全角半角转换" class="headerlink" title="全角半角转换"></a>全角半角转换</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//iCase: 0全到半，1半到全，其他不转化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chgCase</span>(<span class="params">sStr, iCase</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> sStr != <span class="string">"string"</span> ||</span><br><span class="line">    sStr.length &lt;= <span class="number">0</span> ||</span><br><span class="line">    !(iCase === <span class="number">0</span> || iCase == <span class="number">1</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> sStr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> i,</span><br><span class="line">    oRs = [],</span><br><span class="line">    iCode;</span><br><span class="line">  <span class="keyword">if</span> (iCase) &#123;</span><br><span class="line">    <span class="comment">/*半-&gt;全*/</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sStr.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">      iCode = sStr.charCodeAt(i);</span><br><span class="line">      <span class="keyword">if</span> (iCode == <span class="number">32</span>) &#123;</span><br><span class="line">        iCode = <span class="number">12288</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iCode &lt; <span class="number">127</span>) &#123;</span><br><span class="line">        iCode += <span class="number">65248</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      oRs.push(<span class="built_in">String</span>.fromCharCode(iCode));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/*全-&gt;半*/</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sStr.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">      iCode = sStr.charCodeAt(i);</span><br><span class="line">      <span class="keyword">if</span> (iCode == <span class="number">12288</span>) &#123;</span><br><span class="line">        iCode = <span class="number">32</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iCode &gt; <span class="number">65280</span> &amp;&amp; iCode &lt; <span class="number">65375</span>) &#123;</span><br><span class="line">        iCode -= <span class="number">65248</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      oRs.push(<span class="built_in">String</span>.fromCharCode(iCode));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> oRs.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="版本对比"><a href="#版本对比" class="headerlink" title="版本对比"></a>版本对比</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareVersion</span>(<span class="params">v1, v2</span>) </span>&#123;</span><br><span class="line">  v1 = v1.split(<span class="string">"."</span>);</span><br><span class="line">  v2 = v2.split(<span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = <span class="built_in">Math</span>.max(v1.length, v2.length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (v1.length &lt; len) &#123;</span><br><span class="line">    v1.push(<span class="string">"0"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (v2.length &lt; len) &#123;</span><br><span class="line">    v2.push(<span class="string">"0"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(v1[i]);</span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(v2[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="压缩CSS样式代码"><a href="#压缩CSS样式代码" class="headerlink" title="压缩CSS样式代码"></a>压缩CSS样式代码</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compressCss</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//压缩代码</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\/\*(.|\n)*?\*\//g</span>, <span class="string">""</span>); <span class="comment">//删除注释</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\s*([\&#123;\&#125;\:\;\,])\s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/\,[\s\.\#\d]*\&#123;/g</span>, <span class="string">"&#123;"</span>); <span class="comment">//容错处理</span></span><br><span class="line">  s = s.replace(<span class="regexp">/;\s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line">  s = s.match(<span class="regexp">/^\s*(\S+(\s+\S+)*)\s*$/</span>); <span class="comment">//去掉首尾空白</span></span><br><span class="line">  <span class="keyword">return</span> s == <span class="literal">null</span> ? <span class="string">""</span> : s[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取当前路径"><a href="#获取当前路径" class="headerlink" title="获取当前路径"></a>获取当前路径</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> currentPageUrl = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.href === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">  currentPageUrl = <span class="built_in">document</span>.location.toString().toLowerCase();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  currentPageUrl = <span class="keyword">this</span>.href.toString().toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="字符串长度截取"><a href="#字符串长度截取" class="headerlink" title="字符串长度截取"></a>字符串长度截取</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cutstr</span>(<span class="params">str, len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp,</span><br><span class="line">        icount = <span class="number">0</span>,</span><br><span class="line">        patrn = <span class="regexp">/[^\x00-\xff]/</span>，</span><br><span class="line">        strre = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (icount &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">            temp = str.substr(i, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (patrn.exec(temp) == <span class="literal">null</span>) &#123;</span><br><span class="line">                   icount = icount + <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                icount = icount + <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">            strre += temp</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strre + <span class="string">"..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="时间日期格式转换"><a href="#时间日期格式转换" class="headerlink" title="时间日期格式转换"></a>时间日期格式转换</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">formatStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = formatStr;</span><br><span class="line">  <span class="keyword">var</span> Week = [<span class="string">"日"</span>, <span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="string">"五"</span>, <span class="string">"六"</span>];</span><br><span class="line">  str = str.replace(<span class="regexp">/yyyy|YYYY/</span>, <span class="keyword">this</span>.getFullYear());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /yy|YY/,</span><br><span class="line">    <span class="keyword">this</span>.getYear() % <span class="number">100</span> &gt; <span class="number">9</span></span><br><span class="line">      ? (<span class="keyword">this</span>.getYear() % <span class="number">100</span>).toString()</span><br><span class="line">      : <span class="string">"0"</span> + (<span class="keyword">this</span>.getYear() % <span class="number">100</span>)</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /MM/,</span><br><span class="line">    <span class="keyword">this</span>.getMonth() + <span class="number">1</span> &gt; <span class="number">9</span></span><br><span class="line">      ? (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>).toString()</span><br><span class="line">      : <span class="string">"0"</span> + (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>)</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(<span class="regexp">/M/g</span>, <span class="keyword">this</span>.getMonth() + <span class="number">1</span>);</span><br><span class="line">  str = str.replace(<span class="regexp">/w|W/g</span>, Week[<span class="keyword">this</span>.getDay()]);</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /dd|DD/,</span><br><span class="line">    <span class="keyword">this</span>.getDate() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getDate().toString() : <span class="string">"0"</span> + <span class="keyword">this</span>.getDate()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(<span class="regexp">/d|D/g</span>, <span class="keyword">this</span>.getDate());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /hh|HH/,</span><br><span class="line">    <span class="keyword">this</span>.getHours() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getHours().toString() : <span class="string">"0"</span> + <span class="keyword">this</span>.getHours()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(<span class="regexp">/h|H/g</span>, <span class="keyword">this</span>.getHours());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /mm/,</span><br><span class="line">    <span class="keyword">this</span>.getMinutes() &gt; <span class="number">9</span></span><br><span class="line">      ? <span class="keyword">this</span>.getMinutes().toString()</span><br><span class="line">      : <span class="string">"0"</span> + <span class="keyword">this</span>.getMinutes()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(<span class="regexp">/m/g</span>, <span class="keyword">this</span>.getMinutes());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /ss|SS/,</span><br><span class="line">    <span class="keyword">this</span>.getSeconds() &gt; <span class="number">9</span></span><br><span class="line">      ? <span class="keyword">this</span>.getSeconds().toString()</span><br><span class="line">      : <span class="string">"0"</span> + <span class="keyword">this</span>.getSeconds()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(<span class="regexp">/s|S/g</span>, <span class="keyword">this</span>.getSeconds());</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">//month</span></span><br><span class="line">    <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(), <span class="comment">//day</span></span><br><span class="line">    <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(), <span class="comment">//hour</span></span><br><span class="line">    <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">//minute</span></span><br><span class="line">    <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">//second</span></span><br><span class="line">    <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//quarter</span></span><br><span class="line">    S: <span class="keyword">this</span>.getMilliseconds() <span class="comment">//millisecond</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(format))</span><br><span class="line">    format = format.replace(</span><br><span class="line">      <span class="built_in">RegExp</span>.$<span class="number">1</span>,</span><br><span class="line">      (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length)</span><br><span class="line">    );</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(format))</span><br><span class="line">      format = format.replace(</span><br><span class="line">        <span class="built_in">RegExp</span>.$<span class="number">1</span>,</span><br><span class="line">        <span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span> ? o[k] : (<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> format;</span><br><span class="line">&#125;;</span><br><span class="line">alert(<span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>));</span><br></pre></td></tr></table></figure>
<h1 id="跨浏览器删除事件"><a href="#跨浏览器删除事件" class="headerlink" title="跨浏览器删除事件"></a>跨浏览器删除事件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delEvt</span>(<span class="params">obj, evt, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (obj.addEventListener) &#123;</span><br><span class="line">    obj.addEventListener(evt, fn, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oTarget.attachEvent) &#123;</span><br><span class="line">    obj.attachEvent(<span class="string">"on"</span> + evt, fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj[<span class="string">"on"</span> + evt] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断是否以某个字符串结束"><a href="#判断是否以某个字符串结束" class="headerlink" title="判断是否以某个字符串结束"></a>判断是否以某个字符串结束</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.endWith = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">this</span>.length - s.length;</span><br><span class="line">  <span class="keyword">return</span> d &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.lastIndexOf(s) == d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="返回脚本内容"><a href="#返回脚本内容" class="headerlink" title="返回脚本内容"></a>返回脚本内容</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evalscript</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (s.indexOf(<span class="string">"&lt;script"</span>) == <span class="number">-1</span>) <span class="keyword">return</span> s;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="regexp">/&lt;script[^\&gt;]*?&gt;([^\x00]*?)&lt;\/script&gt;/gi</span>;</span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line">  <span class="keyword">while</span> ((arr = p.exec(s))) &#123;</span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="regexp">/&lt;script[^\&gt;]*?src=\"([^\&gt;]*?)\"[^\&gt;]*?(reload=\"1\")?(?:charset=\"([\w\-]+?)\")?&gt;&lt;\/script&gt;/i</span>;</span><br><span class="line">    <span class="keyword">var</span> arr1 = [];</span><br><span class="line">    arr1 = p1.exec(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (arr1) &#123;</span><br><span class="line">      appendscript(arr1[<span class="number">1</span>], <span class="string">""</span>, arr1[<span class="number">2</span>], arr1[<span class="number">3</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      p1 = <span class="regexp">/&lt;script(.*?)&gt;([^\x00]+?)&lt;\/script&gt;/i</span>;</span><br><span class="line">      arr1 = p1.exec(arr[<span class="number">0</span>]);</span><br><span class="line">      appendscript(<span class="string">""</span>, arr1[<span class="number">2</span>], arr1[<span class="number">1</span>].indexOf(<span class="string">"reload="</span>) != <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="格式化CSS样式代码"><a href="#格式化CSS样式代码" class="headerlink" title="格式化CSS样式代码"></a>格式化CSS样式代码</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCss</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//格式化代码</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\s*([\&#123;\&#125;\:\;\,])\s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/;\s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line">  s = s.replace(<span class="regexp">/\,[\s\.\#\d]*&#123;/g</span>, <span class="string">"&#123;"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/([^\s])\&#123;([^\s])/g</span>, <span class="string">"$1 &#123;\n\t$2"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/([^\s])\&#125;([^\n]*)/g</span>, <span class="string">"$1\n&#125;\n$2"</span>);</span><br><span class="line">  s = s.replace(<span class="regexp">/([^\s]);([^\s\&#125;])/g</span>, <span class="string">"$1;\n\t$2"</span>);</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取cookie值"><a href="#获取cookie值" class="headerlink" title="获取cookie值"></a>获取cookie值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">document</span>.cookie.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| )"</span> + name + <span class="string">"=([^;]*)(;|$)"</span>));</span><br><span class="line">  <span class="keyword">if</span> (arr != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(arr[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获得URL中GET参数值"><a href="#获得URL中GET参数值" class="headerlink" title="获得URL中GET参数值"></a>获得URL中GET参数值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用法：如果地址是 test.htm?t1=1&amp;t2=2&amp;t3=3, 那么能取得：GET["t1"], GET["t2"], GET["t3"]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  querystr = <span class="built_in">window</span>.location.href.split(<span class="string">"?"</span>);</span><br><span class="line">  <span class="keyword">if</span> (querystr[<span class="number">1</span>]) &#123;</span><br><span class="line">    GETs = querystr[<span class="number">1</span>].split(<span class="string">"&amp;"</span>);</span><br><span class="line">    GET = [];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; GETs.length; i++) &#123;</span><br><span class="line">      tmp_arr = GETs.split(<span class="string">"="</span>);</span><br><span class="line">      key = tmp_arr[<span class="number">0</span>];</span><br><span class="line">      GET[key] = tmp_arr[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> querystr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取移动设备初始化大小"><a href="#获取移动设备初始化大小" class="headerlink" title="获取移动设备初始化大小"></a>获取移动设备初始化大小</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInitZoom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>._initZoom) &#123;</span><br><span class="line">    <span class="keyword">var</span> screenWidth = <span class="built_in">Math</span>.min(screen.height, screen.width);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid()) &#123;</span><br><span class="line">      screenWidth = screenWidth / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._initZoom = screenWidth / <span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._initZoom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取页面高度"><a href="#获取页面高度" class="headerlink" title="获取页面高度"></a>获取页面高度</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="built_in">document</span>,</span><br><span class="line">    a = g.body,</span><br><span class="line">    f = g.documentElement,</span><br><span class="line">    d = g.compatMode == <span class="string">"BackCompat"</span> ? a : g.documentElement;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(f.scrollHeight, a.scrollHeight, d.clientHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取页面scrollLeft"><a href="#获取页面scrollLeft" class="headerlink" title="获取页面scrollLeft"></a>获取页面scrollLeft</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageScrollLeft</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>;</span><br><span class="line">  <span class="keyword">return</span> a.documentElement.scrollLeft || a.body.scrollLeft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取页面scrollTop"><a href="#获取页面scrollTop" class="headerlink" title="获取页面scrollTop"></a>获取页面scrollTop</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageScrollTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>;</span><br><span class="line">  <span class="keyword">return</span> a.documentElement.scrollTop || a.body.scrollTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取页面可视高度"><a href="#获取页面可视高度" class="headerlink" title="获取页面可视高度"></a>获取页面可视高度</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageViewHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">document</span>,</span><br><span class="line">    a = d.compatMode == <span class="string">"BackCompat"</span> ? d.body : d.documentElement;</span><br><span class="line">  <span class="keyword">return</span> a.clientHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取页面可视宽度"><a href="#获取页面可视宽度" class="headerlink" title="获取页面可视宽度"></a>获取页面可视宽度</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageViewWidth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="built_in">document</span>,</span><br><span class="line">    a = d.compatMode == <span class="string">"BackCompat"</span> ? d.body : d.documentElement;</span><br><span class="line">  <span class="keyword">return</span> a.clientWidth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取页面宽度"><a href="#获取页面宽度" class="headerlink" title="获取页面宽度"></a>获取页面宽度</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageWidth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="built_in">document</span>,</span><br><span class="line">    a = g.body,</span><br><span class="line">    f = g.documentElement,</span><br><span class="line">    d = g.compatMode == <span class="string">"BackCompat"</span> ? a : g.documentElement;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(f.scrollWidth, a.scrollWidth, d.clientWidth);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取移动设备屏幕宽度"><a href="#获取移动设备屏幕宽度" class="headerlink" title="获取移动设备屏幕宽度"></a>获取移动设备屏幕宽度</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScreenWidth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> smallerSide = <span class="built_in">Math</span>.min(screen.width, screen.height);</span><br><span class="line">  <span class="keyword">var</span> fixViewPortsExperiment =</span><br><span class="line">    rendererModel.runningExperiments.FixViewport ||</span><br><span class="line">    rendererModel.runningExperiments.fixviewport;</span><br><span class="line">  <span class="keyword">var</span> fixViewPortsExperimentRunning =</span><br><span class="line">    fixViewPortsExperiment &amp;&amp; fixViewPortsExperiment.toLowerCase() === <span class="string">"new"</span>;</span><br><span class="line">  <span class="keyword">if</span> (fixViewPortsExperiment) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid()) &#123;</span><br><span class="line">      smallerSide = smallerSide / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> smallerSide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取网页被卷去的位置"><a href="#获取网页被卷去的位置" class="headerlink" title="获取网页被卷去的位置"></a>获取网页被卷去的位置</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollXY</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">    ? &#123;</span><br><span class="line">        x: <span class="built_in">document</span>.body.scrollLeft,</span><br><span class="line">        y: <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">      &#125;</span><br><span class="line">    : &#123;</span><br><span class="line">        x: <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">        y: <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取URL上的参数"><a href="#获取URL上的参数" class="headerlink" title="获取URL上的参数"></a>获取URL上的参数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取URL中的某参数值,不区分大小写</span></span><br><span class="line"><span class="comment">// 获取URL中的某参数值,不区分大小写,</span></span><br><span class="line"><span class="comment">// 默认是取'hash'里的参数，</span></span><br><span class="line"><span class="comment">// 如果传其他参数支持取‘search’中的参数</span></span><br><span class="line"><span class="comment">// @param &#123;String&#125; name 参数名称</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlParam</span>(<span class="params">name, type = <span class="string">"hash"</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newName = name,</span><br><span class="line">    reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + newName + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>),</span><br><span class="line">    paramHash = <span class="built_in">window</span>.location.hash.split(<span class="string">"?"</span>)[<span class="number">1</span>] || <span class="string">""</span>,</span><br><span class="line">    paramSearch = <span class="built_in">window</span>.location.search.split(<span class="string">"?"</span>)[<span class="number">1</span>] || <span class="string">""</span>,</span><br><span class="line">    param;</span><br><span class="line"></span><br><span class="line">  type === <span class="string">"hash"</span> ? (param = paramHash) : (param = paramSearch);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result = param.match(reg);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">2</span>].split(<span class="string">"/"</span>)[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="检验URL链接是否有效"><a href="#检验URL链接是否有效" class="headerlink" title="检验URL链接是否有效"></a>检验URL链接是否有效</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlState</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"microsoft.xmlhttp"</span>);</span><br><span class="line">  xmlhttp.Open(<span class="string">"GET"</span>, URL, <span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    xmlhttp.Send();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result = xmlhttp.responseText;</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xmlhttp.Status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取窗体可见范围的宽与高"><a href="#获取窗体可见范围的宽与高" class="headerlink" title="获取窗体可见范围的宽与高"></a>获取窗体可见范围的宽与高</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> de = <span class="built_in">document</span>.documentElement;</span><br><span class="line">  <span class="keyword">var</span> db = <span class="built_in">document</span>.body;</span><br><span class="line">  <span class="keyword">var</span> viewW = de.clientWidth == <span class="number">0</span> ? db.clientWidth : de.clientWidth;</span><br><span class="line">  <span class="keyword">var</span> viewH = de.clientHeight == <span class="number">0</span> ? db.clientHeight : de.clientHeight;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>(viewW, viewH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取移动设备最大化大小"><a href="#获取移动设备最大化大小" class="headerlink" title="获取移动设备最大化大小"></a>获取移动设备最大化大小</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getZoom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> screenWidth =</span><br><span class="line">    <span class="built_in">Math</span>.abs(<span class="built_in">window</span>.orientation) === <span class="number">90</span></span><br><span class="line">      ? <span class="built_in">Math</span>.max(screen.height, screen.width)</span><br><span class="line">      : <span class="built_in">Math</span>.min(screen.height, screen.width);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid()) &#123;</span><br><span class="line">    screenWidth = screenWidth / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> FixViewPortsExperiment =</span><br><span class="line">    rendererModel.runningExperiments.FixViewport ||</span><br><span class="line">    rendererModel.runningExperiments.fixviewport;</span><br><span class="line">  <span class="keyword">var</span> FixViewPortsExperimentRunning =</span><br><span class="line">    FixViewPortsExperiment &amp;&amp;</span><br><span class="line">    (FixViewPortsExperiment === <span class="string">"New"</span> || FixViewPortsExperiment === <span class="string">"new"</span>);</span><br><span class="line">  <span class="keyword">if</span> (FixViewPortsExperimentRunning) &#123;</span><br><span class="line">    <span class="keyword">return</span> screenWidth / <span class="built_in">window</span>.innerWidth;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> screenWidth / <span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断是否安卓移动设备访问"><a href="#判断是否安卓移动设备访问" class="headerlink" title="判断是否安卓移动设备访问"></a>判断是否安卓移动设备访问</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAndroidMobileDevice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/android/i</span>.test(navigator.userAgent.toLowerCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断是否苹果移动设备访问"><a href="#判断是否苹果移动设备访问" class="headerlink" title="判断是否苹果移动设备访问"></a>判断是否苹果移动设备访问</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAppleMobileDevice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/iphone|ipod|ipad|Macintosh/i</span>.test(navigator.userAgent.toLowerCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断是否为数字类型"><a href="#判断是否为数字类型" class="headerlink" title="判断是否为数字类型"></a>判断是否为数字类型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDigit</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> patrn = <span class="regexp">/^[0-9]*$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (patrn.exec(value) == <span class="literal">null</span> || value == <span class="string">""</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="是否是某类手机型号"><a href="#是否是某类手机型号" class="headerlink" title="是否是某类手机型号"></a>是否是某类手机型号</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用devicePixelRatio和分辨率判断</span></span><br><span class="line"><span class="keyword">const</span> isIphonex = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// X XS, XS Max, XR</span></span><br><span class="line">  <span class="keyword">const</span> xSeriesConfig = [</span><br><span class="line">    &#123;</span><br><span class="line">      devicePixelRatio: <span class="number">3</span>,</span><br><span class="line">      width: <span class="number">375</span>,</span><br><span class="line">      height: <span class="number">812</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      devicePixelRatio: <span class="number">3</span>,</span><br><span class="line">      width: <span class="number">414</span>,</span><br><span class="line">      height: <span class="number">896</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      devicePixelRatio: <span class="number">2</span>,</span><br><span class="line">      width: <span class="number">414</span>,</span><br><span class="line">      height: <span class="number">896</span></span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="comment">// h5</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isIOS = <span class="regexp">/iphone/gi</span>.test(<span class="built_in">window</span>.navigator.userAgent);</span><br><span class="line">    <span class="keyword">if</span> (!isIOS) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; devicePixelRatio, screen &#125; = <span class="built_in">window</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; width, height &#125; = screen;</span><br><span class="line">    <span class="keyword">return</span> xSeriesConfig.some(</span><br><span class="line">      item =&gt;</span><br><span class="line">        item.devicePixelRatio === devicePixelRatio &amp;&amp;</span><br><span class="line">        item.width === width &amp;&amp;</span><br><span class="line">        item.height === height</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="判断是否移动设备"><a href="#判断是否移动设备" class="headerlink" title="判断是否移动设备"></a>判断是否移动设备</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>._isMobile === <span class="string">"boolean"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> screenWidth = <span class="keyword">this</span>.getScreenWidth();</span><br><span class="line">  <span class="keyword">var</span> fixViewPortsExperiment =</span><br><span class="line">    rendererModel.runningExperiments.FixViewport ||</span><br><span class="line">    rendererModel.runningExperiments.fixviewport;</span><br><span class="line">  <span class="keyword">var</span> fixViewPortsExperimentRunning =</span><br><span class="line">    fixViewPortsExperiment &amp;&amp; fixViewPortsExperiment.toLowerCase() === <span class="string">"new"</span>;</span><br><span class="line">  <span class="keyword">if</span> (!fixViewPortsExperiment) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isAppleMobileDevice()) &#123;</span><br><span class="line">      screenWidth = screenWidth / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> isMobileScreenSize = screenWidth &lt; <span class="number">600</span>;</span><br><span class="line">  <span class="keyword">var</span> isMobileUserAgent = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>._isMobile = isMobileScreenSize &amp;&amp; <span class="keyword">this</span>.isTouchScreen();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断吗是否手机号码"><a href="#判断吗是否手机号码" class="headerlink" title="判断吗是否手机号码"></a>判断吗是否手机号码</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobileNumber</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i =</span><br><span class="line">      <span class="string">"134,135,136,137,138,139,150,151,152,157,158,159,187,188,147,182,183,184,178"</span>,</span><br><span class="line">    n = <span class="string">"130,131,132,155,156,185,186,145,176"</span>,</span><br><span class="line">    a = <span class="string">"133,153,180,181,189,177,173,170"</span>,</span><br><span class="line">    o = e || <span class="string">""</span>,</span><br><span class="line">    r = o.substring(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">    d = o.substring(<span class="number">0</span>, <span class="number">4</span>),</span><br><span class="line">    s =</span><br><span class="line">      !!<span class="regexp">/^1\d&#123;10&#125;$/</span>.test(o) &amp;&amp;</span><br><span class="line">      (n.indexOf(r) &gt;= <span class="number">0</span></span><br><span class="line">        ? <span class="string">"联通"</span></span><br><span class="line">        : a.indexOf(r) &gt;= <span class="number">0</span></span><br><span class="line">        ? <span class="string">"电信"</span></span><br><span class="line">        : <span class="string">"1349"</span> == d</span><br><span class="line">        ? <span class="string">"电信"</span></span><br><span class="line">        : i.indexOf(r) &gt;= <span class="number">0</span></span><br><span class="line">        ? <span class="string">"移动"</span></span><br><span class="line">        : <span class="string">"未知"</span>);</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断是否是移动设备访问"><a href="#判断是否是移动设备访问" class="headerlink" title="判断是否是移动设备访问"></a>判断是否是移动设备访问</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobileUserAgent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/iphone|ipod|android.*mobile|windows.*phone|blackberry.*mobile/i</span>.test(</span><br><span class="line">    <span class="built_in">window</span>.navigator.userAgent.toLowerCase()</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断鼠标是否移出事件"><a href="#判断鼠标是否移出事件" class="headerlink" title="判断鼠标是否移出事件"></a>判断鼠标是否移出事件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMouseOut</span>(<span class="params">e, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.type !== <span class="string">"mouseout"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> reltg = e.relatedTarget</span><br><span class="line">    ? e.relatedTarget</span><br><span class="line">    : e.type === <span class="string">"mouseout"</span></span><br><span class="line">    ? e.toElement</span><br><span class="line">    : e.fromElement;</span><br><span class="line">  <span class="keyword">while</span> (reltg &amp;&amp; reltg !== handler) &#123;</span><br><span class="line">    reltg = reltg.parentNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> reltg !== handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断是否Touch屏幕"><a href="#判断是否Touch屏幕" class="headerlink" title="判断是否Touch屏幕"></a>判断是否Touch屏幕</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTouchScreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="string">"ontouchstart"</span> <span class="keyword">in</span> <span class="built_in">window</span> ||</span><br><span class="line">    (<span class="built_in">window</span>.DocumentTouch &amp;&amp; <span class="built_in">document</span> <span class="keyword">instanceof</span> DocumentTouch)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断是否为网址"><a href="#判断是否为网址" class="headerlink" title="判断是否为网址"></a>判断是否为网址</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isURL</span>(<span class="params">strUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> regular = <span class="regexp">/^\b(((https?|ftp):\/\/)?[-a-z0-9]+(\.[-a-z0-9]+)*\.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d))\b(\/[-a-z0-9_:\@&amp;?=+,.!\/~%\$]*)?)$/i</span>;</span><br><span class="line">  <span class="keyword">if</span> (regular.test(strUrl)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="判断是否打开视窗"><a href="#判断是否打开视窗" class="headerlink" title="判断是否打开视窗"></a>判断是否打开视窗</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isViewportOpen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !!<span class="built_in">document</span>.getElementById(<span class="string">"wixMobileViewport"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="加载样式文件"><a href="#加载样式文件" class="headerlink" title="加载样式文件"></a>加载样式文件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyle</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.createStyleSheet(url);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">var</span> cssLink = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</span><br><span class="line">    cssLink.rel = <span class="string">"stylesheet"</span>;</span><br><span class="line">    cssLink.type = <span class="string">"text/css"</span>;</span><br><span class="line">    cssLink.href = url;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</span><br><span class="line">    head.appendChild(cssLink);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="替换地址栏"><a href="#替换地址栏" class="headerlink" title="替换地址栏"></a>替换地址栏</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">locationReplace</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (history.replaceState) &#123;</span><br><span class="line">    history.replaceState(<span class="literal">null</span>, <span class="built_in">document</span>.title, url);</span><br><span class="line">    history.go(<span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    location.replace(url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="解决offsetX兼容性问题"><a href="#解决offsetX兼容性问题" class="headerlink" title="解决offsetX兼容性问题"></a>解决offsetX兼容性问题</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 针对火狐不支持offsetX/Y</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOffset</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target = e.target, <span class="comment">// 当前触发的目标对象</span></span><br><span class="line">    eventCoord,</span><br><span class="line">    pageCoord,</span><br><span class="line">    offsetCoord;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算当前触发元素到文档的距离</span></span><br><span class="line">  pageCoord = getPageCoord(target);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算光标到文档的距离</span></span><br><span class="line">  eventCoord = &#123;</span><br><span class="line">    X: <span class="built_in">window</span>.pageXOffset + e.clientX,</span><br><span class="line">    Y: <span class="built_in">window</span>.pageYOffset + e.clientY</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相减获取光标到第一个定位的父元素的坐标</span></span><br><span class="line">  offsetCoord = &#123;</span><br><span class="line">    X: eventCoord.X - pageCoord.X,</span><br><span class="line">    Y: eventCoord.Y - pageCoord.Y</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> offsetCoord;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageCoord</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> coord = &#123; <span class="attr">X</span>: <span class="number">0</span>, <span class="attr">Y</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="comment">// 计算从当前触发元素到根节点为止，</span></span><br><span class="line">  <span class="comment">// 各级 offsetParent 元素的 offsetLeft 或 offsetTop 值之和</span></span><br><span class="line">  <span class="keyword">while</span> (element) &#123;</span><br><span class="line">    coord.X += element.offsetLeft;</span><br><span class="line">    coord.Y += element.offsetTop;</span><br><span class="line">    element = element.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> coord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="打开一个窗体通用方法"><a href="#打开一个窗体通用方法" class="headerlink" title="打开一个窗体通用方法"></a>打开一个窗体通用方法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openWindow</span>(<span class="params">url, windowName, width, height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">parseInt</span>(screen.width / <span class="number">2.0</span>) - width / <span class="number">2.0</span>;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">parseInt</span>(screen.height / <span class="number">2.0</span>) - height / <span class="number">2.0</span>;</span><br><span class="line">  <span class="keyword">var</span> isMSIE = navigator.appName == <span class="string">"Microsoft Internet Explorer"</span>;</span><br><span class="line">  <span class="keyword">if</span> (isMSIE) &#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="string">"resizable=1,location=no,scrollbars=no,width="</span>;</span><br><span class="line">    p = p + width;</span><br><span class="line">    p = p + <span class="string">",height="</span>;</span><br><span class="line">    p = p + height;</span><br><span class="line">    p = p + <span class="string">",left="</span>;</span><br><span class="line">    p = p + x;</span><br><span class="line">    p = p + <span class="string">",top="</span>;</span><br><span class="line">    p = p + y;</span><br><span class="line">    retval = <span class="built_in">window</span>.open(url, windowName, p);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> win = <span class="built_in">window</span>.open(</span><br><span class="line">      url,</span><br><span class="line">      <span class="string">"ZyiisPopup"</span>,</span><br><span class="line">      <span class="string">"top="</span> +</span><br><span class="line">        y +</span><br><span class="line">        <span class="string">",left="</span> +</span><br><span class="line">        x +</span><br><span class="line">        <span class="string">",scrollbars="</span> +</span><br><span class="line">        scrollbars +</span><br><span class="line">        <span class="string">",dialog=yes,modal=yes,width="</span> +</span><br><span class="line">        width +</span><br><span class="line">        <span class="string">",height="</span> +</span><br><span class="line">        height +</span><br><span class="line">        <span class="string">",resizable=no"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"try &#123; win.resizeTo(width, height); &#125; catch(e) &#123; &#125;"</span>);</span><br><span class="line">    win.focus();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="将键值对拼接成URL带参数"><a href="#将键值对拼接成URL带参数" class="headerlink" title="将键值对拼接成URL带参数"></a>将键值对拼接成URL带参数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">const</span> fnParams2Url = <span class="function"><span class="params">obj</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> aUrl = []</span><br><span class="line">      <span class="keyword">let</span> fnAdd = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key + <span class="string">'='</span> + value</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        aUrl.push(fnAdd(k, obj[k]))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(aUrl.join(<span class="string">'&amp;'</span>))</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="去掉url前缀"><a href="#去掉url前缀" class="headerlink" title="去掉url前缀"></a>去掉url前缀</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeUrlPrefix</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  a = a</span><br><span class="line">    .replace(<span class="regexp">/：/g</span>, <span class="string">":"</span>)</span><br><span class="line">    .replace(<span class="regexp">/．/g</span>, <span class="string">"."</span>)</span><br><span class="line">    .replace(<span class="regexp">/／/g</span>, <span class="string">"/"</span>);</span><br><span class="line">  <span class="keyword">while</span> (</span><br><span class="line">    trim(a)</span><br><span class="line">      .toLowerCase()</span><br><span class="line">      .indexOf(<span class="string">"http://"</span>) == <span class="number">0</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    a = trim(a.replace(<span class="regexp">/http:\/\//i</span>, <span class="string">""</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="替换全部"><a href="#替换全部" class="headerlink" title="替换全部"></a>替换全部</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.replaceAll = <span class="function"><span class="keyword">function</span>(<span class="params">s1, s2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(s1, <span class="string">"gm"</span>), s2);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="resize的操作"><a href="#resize的操作" class="headerlink" title="resize的操作"></a>resize的操作</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">document</span>.documentElement</span><br><span class="line">        ? <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">        : <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">      r = <span class="number">1255</span>,</span><br><span class="line">      b = Element.extend(<span class="built_in">document</span>.body),</span><br><span class="line">      classname = b.className;</span><br><span class="line">    <span class="keyword">if</span> (w &lt; r) &#123;</span><br><span class="line">      <span class="comment">//当窗体的宽度小于1255的时候执行相应的操作</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//当窗体的宽度大于1255的时候执行相应的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span><br><span class="line">    <span class="built_in">window</span>.attachEvent(<span class="string">"onresize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  fn();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h1 id="滚动到顶部"><a href="#滚动到顶部" class="headerlink" title="滚动到顶部"></a>滚动到顶部</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用document.documentElement.scrollTop 或 document.body.scrollTop 获取到顶部的距离，从顶部</span></span><br><span class="line"><span class="comment">// 滚动一小部分距离。使用window.requestAnimationFrame()来滚动。</span></span><br><span class="line"><span class="comment">// @example</span></span><br><span class="line"><span class="comment">// scrollToTop();</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollToTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(scrollToTop);</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, c - c / <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="设置cookie值"><a href="#设置cookie值" class="headerlink" title="设置cookie值"></a>设置cookie值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, Hours</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> offset = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">var</span> utc = d.getTime() + d.getTimezoneOffset() * <span class="number">60000</span>;</span><br><span class="line">  <span class="keyword">var</span> nd = utc + <span class="number">3600000</span> * offset;</span><br><span class="line">  <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>(nd);</span><br><span class="line">  exp.setTime(exp.getTime() + Hours * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">document</span>.cookie =</span><br><span class="line">    name +</span><br><span class="line">    <span class="string">"="</span> +</span><br><span class="line">    <span class="built_in">escape</span>(value) +</span><br><span class="line">    <span class="string">";path=/;expires="</span> +</span><br><span class="line">    exp.toGMTString() +</span><br><span class="line">    <span class="string">";domain=360doc.com;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="设为首页"><a href="#设为首页" class="headerlink" title="设为首页"></a>设为首页</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setHomepage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.behavior = <span class="string">"url(#default#homepage)"</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.setHomePage(<span class="string">"http://w3cboy.com"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.sidebar) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.netscape) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        netscape.security.PrivilegeManager.enablePrivilege(</span><br><span class="line">          <span class="string">"UniversalXPConnect"</span></span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        alert(</span><br><span class="line">          <span class="string">"该操作被浏览器拒绝，如果想启用该功能，请在地址栏内输入 about:config,然后将项 signed.applets.codebase_principal_support 值该为true"</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> prefs = Components.classes[</span><br><span class="line">      <span class="string">"@mozilla.org/preferences-service;1"</span></span><br><span class="line">    ].getService(Components.interfaces.nsIPrefBranch);</span><br><span class="line">    prefs.setCharPref(<span class="string">"browser.startup.homepage"</span>, <span class="string">"http://w3cboy.com"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="按字母排序，对每行进行数组排序"><a href="#按字母排序，对每行进行数组排序" class="headerlink" title="按字母排序，对每行进行数组排序"></a>按字母排序，对每行进行数组排序</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> text = K1.value</span><br><span class="line">    .split(<span class="regexp">/[\r\n]/</span>)</span><br><span class="line">    .sort()</span><br><span class="line">    .join(<span class="string">"\r\n"</span>); <span class="comment">//顺序</span></span><br><span class="line">  <span class="keyword">var</span> test = K1.value</span><br><span class="line">    .split(<span class="regexp">/[\r\n]/</span>)</span><br><span class="line">    .sort()</span><br><span class="line">    .reverse()</span><br><span class="line">    .join(<span class="string">"\r\n"</span>); <span class="comment">//反序</span></span><br><span class="line">  K1.value = K1.value != text ? text : test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="延时执行"><a href="#延时执行" class="headerlink" title="延时执行"></a>延时执行</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比如 sleep(1000) 意味着等待1000毫秒，还可从 Promise、Generator、Async/Await 等角度实现。</span></span><br><span class="line"><span class="comment">// Promise</span></span><br><span class="line"><span class="keyword">const</span> sleep = <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, time));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1000</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Generator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">sleepGenerator</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(resolve, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleepGenerator(<span class="number">1000</span>)</span><br><span class="line">  .next()</span><br><span class="line">  .value.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//async</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, time));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> out = <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">callback, time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">"function"</span>) &#123;</span><br><span class="line">    setTimeout(callback, time);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep(output, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h1 id="判断是否以某个字符串开头"><a href="#判断是否以某个字符串开头" class="headerlink" title="判断是否以某个字符串开头"></a>判断是否以某个字符串开头</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.startWith = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.indexOf(s) == <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="清除脚本内容"><a href="#清除脚本内容" class="headerlink" title="清除脚本内容"></a>清除脚本内容</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripscript</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.replace(<span class="regexp">/&lt;script.*?&gt;.*?&lt;\/script&gt;/gi</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="时间个性化输出功能"><a href="#时间个性化输出功能" class="headerlink" title="时间个性化输出功能"></a>时间个性化输出功能</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、&lt; 60s, 显示为“刚刚”</span></span><br><span class="line"><span class="comment">2、&gt;= 1min &amp;&amp; &lt; 60 min, 显示与当前时间差“XX分钟前”</span></span><br><span class="line"><span class="comment">3、&gt;= 60min &amp;&amp; &lt; 1day, 显示与当前时间差“今天 XX:XX”</span></span><br><span class="line"><span class="comment">4、&gt;= 1day &amp;&amp; &lt; 1year, 显示日期“XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment">5、&gt;= 1year, 显示具体日期“XXXX年XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeFormat</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time),</span><br><span class="line">    curDate = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    year = date.getFullYear(),</span><br><span class="line">    month = date.getMonth() + <span class="number">10</span>,</span><br><span class="line">    day = date.getDate(),</span><br><span class="line">    hour = date.getHours(),</span><br><span class="line">    minute = date.getMinutes(),</span><br><span class="line">    curYear = curDate.getFullYear(),</span><br><span class="line">    curHour = curDate.getHours(),</span><br><span class="line">    timeStr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (year &lt; curYear) &#123;</span><br><span class="line">    timeStr = year + <span class="string">"年"</span> + month + <span class="string">"月"</span> + day + <span class="string">"日 "</span> + hour + <span class="string">":"</span> + minute;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> pastTime = curDate - date,</span><br><span class="line">      pastH = pastTime / <span class="number">3600000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pastH &gt; curHour) &#123;</span><br><span class="line">      timeStr = month + <span class="string">"月"</span> + day + <span class="string">"日 "</span> + hour + <span class="string">":"</span> + minute;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pastH &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      timeStr = <span class="string">"今天 "</span> + hour + <span class="string">":"</span> + minute + <span class="string">"分"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> pastM = curDate.getMinutes() - minute;</span><br><span class="line">      <span class="keyword">if</span> (pastM &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        timeStr = pastM + <span class="string">"分钟前"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        timeStr = <span class="string">"刚刚"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> timeStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="全角转换为半角函数"><a href="#全角转换为半角函数" class="headerlink" title="全角转换为半角函数"></a>全角转换为半角函数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toCDB</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    code = str.charCodeAt(i);</span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">65281</span> &amp;&amp; code &lt;= <span class="number">65374</span>) &#123;</span><br><span class="line">      result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">65248</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">12288</span>) &#123;</span><br><span class="line">      result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">12288</span> + <span class="number">32</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result += str.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="半角转换为全角函数"><a href="#半角转换为全角函数" class="headerlink" title="半角转换为全角函数"></a>半角转换为全角函数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toDBC</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    code = str.charCodeAt(i);</span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">33</span> &amp;&amp; code &lt;= <span class="number">126</span>) &#123;</span><br><span class="line">      result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">65248</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">32</span>) &#123;</span><br><span class="line">      result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">12288</span> - <span class="number">32</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result += str.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="金额大写转换函数"><a href="#金额大写转换函数" class="headerlink" title="金额大写转换函数"></a>金额大写转换函数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params">tranvalue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> dw2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">""</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>); <span class="comment">//大单位</span></span><br><span class="line">    <span class="keyword">var</span> dw1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>); <span class="comment">//小单位</span></span><br><span class="line">    <span class="keyword">var</span> dw = <span class="keyword">new</span> <span class="built_in">Array</span>(</span><br><span class="line">      <span class="string">"零"</span>,</span><br><span class="line">      <span class="string">"壹"</span>,</span><br><span class="line">      <span class="string">"贰"</span>,</span><br><span class="line">      <span class="string">"叁"</span>,</span><br><span class="line">      <span class="string">"肆"</span>,</span><br><span class="line">      <span class="string">"伍"</span>,</span><br><span class="line">      <span class="string">"陆"</span>,</span><br><span class="line">      <span class="string">"柒"</span>,</span><br><span class="line">      <span class="string">"捌"</span>,</span><br><span class="line">      <span class="string">"玖"</span></span><br><span class="line">    ); </span><br><span class="line">    <span class="comment">//整数部分用</span></span><br><span class="line">    <span class="comment">//以下是小写转换成大写显示在合计大写的文本框中</span></span><br><span class="line">    <span class="comment">//分离整数与小数</span></span><br><span class="line">    <span class="keyword">var</span> source = splits(tranvalue);</span><br><span class="line">    <span class="keyword">var</span> num = source[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> dig = source[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//转换整数部分</span></span><br><span class="line">    <span class="keyword">var</span> k1 = <span class="number">0</span>; <span class="comment">//计小单位</span></span><br><span class="line">    <span class="keyword">var</span> k2 = <span class="number">0</span>; <span class="comment">//计大单位</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> len = source[<span class="number">0</span>].length; <span class="comment">//整数的长度</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> n = source[<span class="number">0</span>].charAt(len - i); <span class="comment">//取得某个位数上的数字</span></span><br><span class="line">      <span class="keyword">var</span> bn = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        bn = source[<span class="number">0</span>].charAt(len - i - <span class="number">1</span>); <span class="comment">//取得某个位数前一位上的数字</span></span><br><span class="line">      &#125;</span><br><span class="line">      sum = sum + <span class="built_in">Number</span>(n);</span><br><span class="line">      <span class="keyword">if</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">        str = dw[<span class="built_in">Number</span>(n)].concat(str); <span class="comment">//取得该数字对应的大写数字，并插入到str字符串的前面</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="string">"0"</span>) sum = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//在数字范围内</span></span><br><span class="line">        <span class="keyword">if</span> (k1 != <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="comment">//加小单位</span></span><br><span class="line">          <span class="keyword">if</span> (bn != <span class="number">0</span>) &#123;</span><br><span class="line">            str = dw1[k1].concat(str);</span><br><span class="line">          &#125;</span><br><span class="line">          k1++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//不加小单位，加大单位</span></span><br><span class="line">          k1 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">var</span> temp = str.charAt(<span class="number">0</span>);</span><br><span class="line">          <span class="keyword">if</span> (temp == <span class="string">"万"</span> || temp == <span class="string">"亿"</span>)</span><br><span class="line">            <span class="comment">//若大单位前没有数字则舍去大单位</span></span><br><span class="line">            str = str.substr(<span class="number">1</span>, str.length - <span class="number">1</span>);</span><br><span class="line">          str = dw2[k2].concat(str);</span><br><span class="line">          sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (k1 == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">//小单位到千则大单位进一</span></span><br><span class="line">        k2++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转换小数部分</span></span><br><span class="line">    <span class="keyword">var</span> strdig = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (dig != <span class="string">""</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> n = dig.charAt(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"角"</span>; <span class="comment">//加数字</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> n = dig.charAt(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"分"</span>; <span class="comment">//加数字</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">"元"</span> + strdig;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"0元"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拆分整数与小数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splits</span>(<span class="params">tranvalue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">  temp = tranvalue.split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">    value = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="清除空格"><a href="#清除空格" class="headerlink" title="清除空格"></a>清除空格</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reExtraSpace = <span class="regexp">/^\s*(.*?)\s+$/</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.replace(reExtraSpace, <span class="string">"$1"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除左空格</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ltrim</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.replace(<span class="regexp">/^(\s*|　*)/</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除右空格</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rtrim</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.replace(<span class="regexp">/(\s*|　*)$/</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="随机数时间戳"><a href="#随机数时间戳" class="headerlink" title="随机数时间戳"></a>随机数时间戳</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">Math</span>.random,</span><br><span class="line">    b = <span class="built_in">parseInt</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()).toString() + b(<span class="number">10</span> * a()) + b(<span class="number">10</span> * a()) + b(<span class="number">10</span> * a())</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="实现utf8解码"><a href="#实现utf8解码" class="headerlink" title="实现utf8解码"></a>实现utf8解码</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_decode</span>(<span class="params">str_data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp_arr = [],</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    ac = <span class="number">0</span>,</span><br><span class="line">    c1 = <span class="number">0</span>,</span><br><span class="line">    c2 = <span class="number">0</span>,</span><br><span class="line">    c3 = <span class="number">0</span>;</span><br><span class="line">  str_data += <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; str_data.length) &#123;</span><br><span class="line">    c1 = str_data.charCodeAt(i);</span><br><span class="line">    <span class="keyword">if</span> (c1 &lt; <span class="number">128</span>) &#123;</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(c1);</span><br><span class="line">      i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c1 &gt; <span class="number">191</span> &amp;&amp; c1 &lt; <span class="number">224</span>) &#123;</span><br><span class="line">      c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(((c1 &amp; <span class="number">31</span>) &lt;&lt; <span class="number">6</span>) | (c2 &amp; <span class="number">63</span>));</span><br><span class="line">      i += <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line">      c3 = str_data.charCodeAt(i + <span class="number">2</span>);</span><br><span class="line">      tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(</span><br><span class="line">        ((c1 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">12</span>) | ((c2 &amp; <span class="number">63</span>) &lt;&lt; <span class="number">6</span>) | (c3 &amp; <span class="number">63</span>)</span><br><span class="line">      );</span><br><span class="line">      i += <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmp_arr.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzUzOTM0MTE4OQ==&amp;mid=2247485899&amp;idx=1&amp;sn=de526f7f1d2ff1b42b90acc196937845&amp;chksm=fac8b121cdbf3837823eb0be690995448c15712144784a13c08c2eca04a35bc74145d4e51563&amp;mpshare=1&amp;scene=1&amp;srcid=0702WArToY4Zf2DneCeKOUoB&amp;sharer_sharetime=1590937398297&amp;sharer_shareid=3513f92f23030a0a67fb38005d1b6a29&amp;key=5a8ad89db03556ba46925cff95d066a2df5a1d5e094bc547591a271e87a02b52912188eb823da168e5f8a53a67a9ebec0966381c3f733daff7ddbe868b913ff526fb7116394abe7ebaebfe29d620fc81&amp;ascene=1&amp;uin=MjU3MDI1Njk0MA%3D%3D&amp;devicetype=Windows+10+x64&amp;version=62090070&amp;lang=zh_CN&amp;exportkey=AYuk7Hyn2g9m%2F3%2FguTy9qU4%3D&amp;pass_ticket=tlYkCwsVMifHd%2B0aIDak4asRIQAnO44krb6gL09ZBy8PXxCTYCFw6N1GoCZ9j5uG" target="_blank" rel="noopener">JS常用开发工具函数</a></p>
<p><a href="https://github.com/Wscats/CV/issues/27" target="_blank" rel="noopener">https://github.com/Wscats/CV/issues/27</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI0MjU2NDAzNg==&amp;mid=2247484824&amp;idx=1&amp;sn=1c9fc5b3310966fdcbadd436420a9005&amp;chksm=e97b2b33de0ca2255fab8c88eeb41fc582a27792fa5d83ee9613d6538700138b401bffa6f553&amp;mpshare=1&amp;scene=1&amp;srcid=0607D41r6HIeKvnND5wOXbN7&amp;sharer_sharetime=1591532631985&amp;sharer_shareid=3513f92f23030a0a67fb38005d1b6a29&amp;key=aa494bdf4b4d432b93b7314bb1484e169b6fcf79fb08fb265c503ba4735e1c12be235689a04bac70f76f1608ca506093645d25faed1268fe800e71f9c37c49a9119773966e748e0eb19f4fb595d126dc&amp;ascene=1&amp;uin=MjU3MDI1Njk0MA%3D%3D&amp;devicetype=Windows+10+x64&amp;version=62090070&amp;lang=zh_CN&amp;exportkey=AYnr%2BjV5F8NJ%2Bw3wVg6O5oY%3D&amp;pass_ticket=4ivJL1%2BM8e0a98rw%2FTvUhJUE7jMnZAFS%2FmdjHYPo6UGmzIk2G49W6HxA5pv94EBm" target="_blank" rel="noopener">常见函数</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MzUxNTgyMg==&amp;mid=2455602711&amp;idx=1&amp;sn=71532346e04a9894a566188d3e85daea&amp;chksm=b13cf656864b7f40174e4a827b1c5dfb5ebb542837e5cde067350bc61c6b1428c1298c6c8195&amp;mpshare=1&amp;scene=1&amp;srcid=0607LJZiEWYJWZdqO8E1JC7I&amp;sharer_sharetime=1591532869066&amp;sharer_shareid=3513f92f23030a0a67fb38005d1b6a29&amp;key=e6152aaf211ea82497530d90078e6191de13d495e1d3394958d2eb78cc41dbcb89cb81c696531e31add258def72727a991d5a9ab331e0110f787f90a65a6420e55fdfade59b7542eabed3f7792dc5417&amp;ascene=1&amp;uin=MjU3MDI1Njk0MA%3D%3D&amp;devicetype=Windows+10+x64&amp;version=62090070&amp;lang=zh_CN&amp;exportkey=AfUjrsawVfc6J%2FnX1gThuLM%3D&amp;pass_ticket=4ivJL1%2BM8e0a98rw%2FTvUhJUE7jMnZAFS%2FmdjHYPo6UGmzIk2G49W6HxA5pv94EBm" target="_blank" rel="noopener">防抖</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Github网页上图片显示失败问题</title>
    <url>/2020/05/29/%E8%A7%A3%E5%86%B3Github%E7%BD%91%E9%A1%B5%E4%B8%8A%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近科学上网失效的有些频繁，上Github的时候图片总是加载不出来，之前没有在意，但是自己博客中的图片也是依赖Github的时候就留意到了这个问题。<strong>（如果有科学上网请随意）</strong></p>
<a id="more"></a>
<p><img src="https://github.static.si-yee.com/posts/SolvetheproblemofimagedisplayfailureonGitHubwebpage/20200604140631.png" alt></p>
<p>主要报错是<code>Failed to load resource: net::ERR_CERT_COMMON_NAME_INVALID</code>以及<code>Failed to load resource: net::ERR_CONNECTION_RESET</code></p>
<p><strong>来自网友的解释：</strong></p>
<p>实际上，可以认为，<code>ERR_CERT_COMMON_NAME_INVALID</code>就是用一个错误的域名访问了某个节点的<code>https</code>资源。导致这个错误的原因，基本是：</p>
<ol>
<li>dns污染</li>
<li>host设置错误</li>
<li>官方更新了dns，但是dns缓存没有被更新，导致错误解析。</li>
</ol>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>打开<code>github</code>任意未显示图片的网页，使用元素选择器（<code>Ctrl+Shift+C</code>）放在显示不了的图片上，或者在无法显示的图片上右键-检查元素，定位到该图片的标签，那么你得到了它的URL，叫做<code>src</code>属性。</p>
<p><img src="https://github.static.si-yee.com/posts/SolvetheproblemofimagedisplayfailureonGitHubwebpage/20200604140727.png" alt></p>
<p>将URL复制出来后，打开<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">IPAddress.com</a>这个网站，搜索它的域名:<code>avatars2.githubusercontent.com</code></p>
<p><img src="https://github.static.si-yee.com/posts/SolvetheproblemofimagedisplayfailureonGitHubwebpage/20200604140757.png" alt></p>
<p>搜索后会看到该域名的信息和<code>IP</code>地址：</p>
<p><img src="https://github.static.si-yee.com/posts/SolvetheproblemofimagedisplayfailureonGitHubwebpage/20200604140836.png" alt></p>
<p>当前该域名的IP是：199.232.68.133，那么我们就可以使这个<strong>IP</strong>和<strong>域名</strong>映射起来。</p>
<p><strong>修改hosts</strong></p>
<p>Window下路径<code>C:\Windows\System32\drivers\etc\hosts</code></p>
<p>Mac、Linux下路径<code>/etc/hosts</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># GitHub Start </span><br><span class="line">140.82.113.3      github.com</span><br><span class="line">140.82.114.20     gist.github.com</span><br><span class="line"></span><br><span class="line">151.101.184.133    assets-cdn.github.com</span><br><span class="line">151.101.184.133    raw.githubusercontent.com</span><br><span class="line">151.101.184.133    gist.githubusercontent.com</span><br><span class="line">151.101.184.133    cloud.githubusercontent.com</span><br><span class="line">151.101.184.133    camo.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars0.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars0.githubusercontent.com</span><br><span class="line">199.232.28.133     avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars2.githubusercontent.com</span><br><span class="line">199.232.28.133     avatars2.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars3.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars3.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars4.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars4.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars5.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars5.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars6.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars6.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars7.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars7.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars8.githubusercontent.com</span><br><span class="line">199.232.68.133     avatars8.githubusercontent.com</span><br><span class="line"></span><br><span class="line"># GitHub End</span><br></pre></td></tr></table></figure>
<p>保存即可，<strong>该文件随时可能变更，请随时自行更新，可以在该项目中查看最新Hosts：<a href="https://github.com/521xueweihan/GitHub520" target="_blank" rel="noopener">Github520</a></strong></p>
<blockquote>
<p>window下无法保存，没有修改权限，鼠标右键-属性-安全-修改权限；或将<code>hosts</code>文件复制一份，修改之后，复制到原文件夹替换！</p>
</blockquote>
<h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p><strong>Window系统下</strong></p>
<p>还可以使用<code>ipconfig/flush</code>对本地DNS缓存进行一次刷新，如果遇到网络异常，可能是DNS缓存的问题，刷新一下，步骤。</p>
<p>windows开始→运行→输入：CMD 按回车键，打开命令提示符窗口。<br>再输入： <code>ipconfig /flushdns</code> 回车，执行命令，可以重建本地DNS缓存。</p>
<p><strong>Mac系统下</strong></p>
<p>OS X Mountain Lion or Lion</p>
<p>Use the following Terminal command to reset the DNS cache:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure>
<p>Mac OS X v10.6</p>
<p>Use the following Terminal command to reset the DNS cache:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dscacheutil -flushcache</span><br></pre></td></tr></table></figure>
<p>mac Mojave</p>
<p>搬运from：<a href="https://link.zhihu.com/?target=https%3A//www.hongkiat.com/blog/how-to-clear-dns-cache-in-macos-mojave/" target="_blank" rel="noopener">https://www.hongkiat.com/blog/how-to-clear-dns-cache-in-macos-mojave/</a></p>
<ol>
<li>打开终端：launchpad里面的“终端”</li>
<li>输入：sudo killall -HUP mDNSResponder; sleep 2; 然后敲回车；</li>
<li>输入密码；然后敲回车</li>
<li>command+Q退出，就好啦</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.zhihu.com/question/19679715" target="_blank" rel="noopener">https://www.zhihu.com/question/19679715</a></p>
<p><a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a></p>
<p><a href="https://www.jianshu.com/p/30e2703a5647" target="_blank" rel="noopener">https://www.jianshu.com/p/30e2703a5647</a></p>
<p><a href="https://blog.csdn.net/qq_38232598/article/details/91346392" target="_blank" rel="noopener">https://blog.csdn.net/qq_38232598/article/details/91346392</a></p>
<p><a href="https://juejin.im/post/5f18683af265da22f84d7602?utm_source=gold_browser_extension" target="_blank" rel="noopener">https://juejin.im/post/5f18683af265da22f84d7602?utm_source=gold_browser_extension</a></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Eggjs实现文件下载</title>
    <url>/2020/05/28/Eggjs%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在最近的编写的一个个人的工具站点中想实现一个网站提交数据后把特定文件压缩打包后浏览器出现下载的功能。找的资料实现也残缺不全。所以记录一下目前能实现的方案。</p>
<a id="more"></a>
<p>使用到的框架：<a href="https://stuk.github.io/jszip/" target="_blank" rel="noopener">EggJS</a>、<a href="https://eggjs.org/zh-cn/" target="_blank" rel="noopener">JSZip</a>。</p>
<h1 id="编写路由"><a href="#编写路由" class="headerlink" title="编写路由"></a>编写路由</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;Egg.Application&#125; app - egg application</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</span><br><span class="line">  router.get(<span class="string">'/'</span>, controller.home.index);</span><br><span class="line">  router.get(<span class="string">'/download'</span>, controller.home.deal);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> jszip = <span class="built_in">require</span>(<span class="string">'jszip'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">'egg'</span>).Controller;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 首页</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> index() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    ctx.response.type = <span class="string">'html'</span>;</span><br><span class="line">    ctx.body = fs.readFileSync(path.resolve(__dirname, <span class="string">'../view/home.html'</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> deal() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 处理public Path</span></span><br><span class="line">    <span class="keyword">const</span> dirPath = path.resolve(__dirname, <span class="string">`../public`</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fs.existsSync(dirPath)) &#123;</span><br><span class="line">      fs.mkdirSync(dirPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打包到egg-static的目录下，也可以是其他目录，有写入权限文件目录即可，后续读取</span></span><br><span class="line">    <span class="keyword">const</span> zip = <span class="keyword">new</span> jszip();</span><br><span class="line">    zip.file(<span class="string">'test.txt'</span>, <span class="string">'detail'</span>);</span><br><span class="line">    zip.folder(<span class="string">'img'</span>);</span><br><span class="line">    <span class="keyword">const</span> content = <span class="keyword">await</span> zip.generateAsync(&#123; <span class="attr">type</span>: <span class="string">'nodebuffer'</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> zipPath = <span class="string">`<span class="subst">$&#123;dirPath&#125;</span>/download.zip`</span>;</span><br><span class="line">    fs.writeFileSync(zipPath, content);</span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">const</span> stats = fs.statSync(zipPath, &#123;</span><br><span class="line">      encoding: <span class="string">'utf8'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    ctx.response.set(&#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/octet-stream'</span>,</span><br><span class="line">      <span class="string">'Content-Disposition'</span>: <span class="string">`attachment; filename=download.zip`</span>,</span><br><span class="line">      <span class="string">'Content-Length'</span>: stats.size,</span><br><span class="line">    &#125;);</span><br><span class="line">    ctx.body = fs.createReadStream(zipPath);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HomeController;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>首页直接使用文件流来渲染一个网页。不使用nunjucks等模板渲染方式。</p>
<p>deal方法中才是处理下载文件的重点。</p>
<p>跳转到/download路径时会自动下载download.zip的压缩包。解压后会有一个test.txt文件和一个img的目录。</p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/eggjs/egg/issues/948" target="_blank" rel="noopener">https://github.com/eggjs/egg/issues/948</a></p>
<p><a href="https://www.jianshu.com/p/2689a38cf643" target="_blank" rel="noopener">https://www.jianshu.com/p/2689a38cf643</a></p>
]]></content>
      <categories>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>NodeJS</tag>
        <tag>Egg</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Action 自动化部署Hexo</title>
    <url>/2020/05/26/Github-Action-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Hexo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是Github-Action"><a href="#什么是Github-Action" class="headerlink" title="什么是Github Action"></a>什么是Github Action</h1><p><code>Github Actions</code>是<code>Github</code>推出的一个新的功能，可以为我们的项目自动化地构建工作流，例如代码检查，自动化打包，测试，发布版本等等。入口在项目<code>pull request</code>的旁边。</p>
<p>一次无意中查看到阮一峰大神博客中提到的Github Action，平常一般玩过的是Jenkins。看到可以将React项目自动部署到Github Page时，灵感就想到了自己的基于Hexo搭建的博客来实现一下自动部署。查了一下资料，的确可以实现的。</p>
<a id="more"></a>
<blockquote>
<p>该文章不涉及Github Action以及Hexo的教学。请自行查阅</p>
</blockquote>
<h1 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h1><p>先准备两个仓库，一个是部署博客所产出静态页面（github page）的仓库，一个是博客所有源文件的仓库</p>
<p>在本地生成一个 key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your email"</span> -f ~/.ssh/github-actions-deploy</span><br></pre></td></tr></table></figure>
<blockquote>
<p>（也可以生成其他种类的 key，如果用上面的命令，需要修改一下用户名） 回车完成即可</p>
</blockquote>
<p>查看私钥和公钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ cat github-actions-deploy</span><br><span class="line">$ cat github-actions-deploy.pub</span><br></pre></td></tr></table></figure>
<p>在博客所有源文件的仓库<strong>Settings -&gt; Secrets</strong> 里添加刚刚生成的私钥，名称为 <code>ACTION_DEPLOY_KEY</code>。</p>
<p>然后在 Github Pages 的仓库，<strong>Settings -&gt; Deploy keys</strong> 添加刚刚生成的公钥，名称随意，但要勾选 <strong>Allow write access</strong>。</p>
<p><img src="https://github.static.si-yee.com/posts/Github Action 自动化部署Hexo-20200604134453.png" alt></p>
<h1 id="添加Github-Action"><a href="#添加Github-Action" class="headerlink" title="添加Github Action"></a>添加Github Action</h1><p>可以在网页上 <strong>Actions</strong> 里编辑配置文件，也可以直接在源文件的仓库的本地目录添加直接 commit。</p>
<p>本文直接在源文件的仓库的本地目录提交配置文件，将配置文件存至原文件仓库目录下的 <code>.github/workflows/*随便起名*.yml</code>。</p>
<p>脚本配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span>    </span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node</span> </span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">'10.x'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">prepare</span> <span class="string">build</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTION_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="comment"># set up private key for deploy</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"$ACTION_DEPLOY_KEY"</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">'\r'</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="comment"># set git infomation</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">'hackycy'</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">'qa894178522@qq.com'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">clone</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/hackycy/hackycy.github.io.git</span> <span class="string">.deploy_git</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NPM</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clean</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./node_modules/.bin/hexo</span> <span class="string">clean</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./node_modules/.bin/hexo</span> <span class="string">generate</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">./node_modules/.bin/hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>
<div class="note info"><p><strong>对这个配置文件做几点说明：</strong></p><ol><li>Actions 在早期测试时用的是 HCL 格式，而现在使用 YAML 配置，HCL 格式配置文件已被废弃。YAML 格式需要严格按照缩进。</li><li><code>on</code> 标注什么事件会触发这个 workflow，可以指定 branches，详情参考<a href="https://help.github.com/en/articles/events-that-trigger-workflows" target="_blank" rel="noopener">文档</a>。</li><li><code>runs-on</code> 设置运行平台，目前有 Windows、Ubuntu、macOS，见<a href="https://help.github.com/en/articles/virtual-environments-for-github-actions" target="_blank" rel="noopener">文档</a>。</li><li><code>uses</code> 是使用打包好的 action，可以通过 <code>with</code> 传参数。官方提供了一些 Git 基本操作和环境安装的包，也可以使用 Docker。</li><li><code>env</code> 可以设置这一步的环境变量，这一步设置的变量不会继承到下一步。刚才设置的私钥可以通过 <code>$</code> 获取到，具体见<a href="https://help.github.com/en/articles/virtual-environments-for-github-actions" target="_blank" rel="noopener">文档</a>。另外直接将密钥 echo 出来会被打码 :)</li><li>在网页上保存私钥很可能会把 key 存成 CR-LF 换行模式的，而私钥文件要求 LF 模式，要用 <code>tr -d &#39;\r&#39;</code> 去掉回车符。</li><li>Git 配置请更改为自己的。</li><li>由于我的博客源仓库配置了Submodule，如果没有配置的请直接删除step name为clone的步骤</li></ol></div>
<h1 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h1><p>每当你写完博客是直接提交到源仓库即可自动触发构建。会配合Action自动发布到Github Page仓库。</p>
<p><img src="https://github.static.si-yee.com/posts/Github Action 自动化部署Hexo-20200604134653.png" alt></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>如果博客中配置了主题，请注释掉主题下的.gitignore的一些配置，例如本人使用的Next主题</p>
<p><img src="https://github.static.si-yee.com/posts/Github Action 自动化部署Hexo-20200604134730.png" alt></p>
<p>以及配合主题安装的第三方插件，有一些插件通过Git clone安装时不会上传到源文件仓库，需要手动删除掉插件目录下的.git文件夹。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html</a></p>
<p><a href="https://xiaopc.org/2019/08/29/github-actions-测试-自动部署-hexo/" target="_blank" rel="noopener">https://xiaopc.org/2019/08/29/github-actions-%E6%B5%8B%E8%AF%95-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-hexo/</a></p>
<p><a href="https://hateonion.me/posts/20feb22/" target="_blank" rel="noopener">https://hateonion.me/posts/20feb22/</a></p>
]]></content>
      <categories>
        <category>Github Action</category>
      </categories>
      <tags>
        <tag>Github Action</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox中解决安装CentOS7后无法上网问题</title>
    <url>/2020/05/22/VirtualBox%E4%B8%AD%E8%A7%A3%E5%86%B3%E5%AE%89%E8%A3%85CentOS7%E5%90%8E%E6%97%A0%E6%B3%95%E4%B8%8A%E7%BD%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶尔需要搭建一些测试用的环境时使用虚拟机无疑是一个很好的方法。但是在安装玩Centos 7系统后网络的问题是一直困扰的。以防忘记先记录下来。</p>
<a id="more"></a>
<p>环境：Mac + VirtualBox</p>
<h1 id="配置虚拟机的网卡"><a href="#配置虚拟机的网卡" class="headerlink" title="配置虚拟机的网卡"></a>配置虚拟机的网卡</h1><p>按照下图配置虚拟机的网络</p>
<p><img src="https://github.static.si-yee.com/posts/VirtualBox中解决安装CentOS7后无法上网问题-20200604134142.png" alt></p>
<p>其中，连接方式选择桥接网卡、界面名称选择你主机上网用的无线网卡、控制芯片选择桌面、混杂模式选择拒绝、勾选接入网络。</p>
<blockquote>
<p>配置前请先停止虚拟机</p>
</blockquote>
<h1 id="配置CentOS7的网络"><a href="#配置CentOS7的网络" class="headerlink" title="配置CentOS7的网络"></a>配置CentOS7的网络</h1><p>修改网卡对应的配置文件，设置<code>BOOTPROTO</code>为<code>dhcp</code>，<code>ONBOOT</code>为<code>yes</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br></pre></td></tr></table></figure>
<p><img src="https://github.static.si-yee.com/posts/VirtualBox中解决安装CentOS7后无法上网问题-20200604134232.png" alt></p>
<h1 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service network restart</span><br></pre></td></tr></table></figure>
<p>配置完成后重启网络，测试ping通即可。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/scaleqiao/article/details/44206825" target="_blank" rel="noopener">https://blog.csdn.net/scaleqiao/article/details/44206825</a></p>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS之日志打印优化</title>
    <url>/2020/05/21/iOS%E4%B9%8B%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在日常工作当中，Debug模式的打印调试是基操了。而唯一的一招不是<code>NSLog</code>就是<code>print</code>。但项目开发中使用Swift后<code>NSLog</code>已经不常用了。</p>
<a id="more"></a>
<p>而在日常工作当中使用Swift的<code>debugPrint</code>来进行对一些网络请求的输出等的调试已经习以为常。但是Swift编译器并不会将<code>print</code>和<code>debugPrint</code>删除。在最终发布的App会把内容输出到终端。造成了性能的损失。</p>
<p>但是你也不可能随时都能在上线前把这些打印语句都删去。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>但是更好的方法是通过添加条件编译来将这些语句排除在 Release 版本外。在 Xcode 的 Build Setting 中，在 <strong>Other Swift flags</strong> 的 Debug 栏中加入 <code>-D DEBUG</code> 即可加入一个编译标识。</p>
<p><img src="https://github.static.si-yee.com/posts/iOS之日志打印优化-20200604133855.png" alt></p>
<p>之后我们就可以通过将 <code>print</code> 或者 <code>debugPrint</code> 包装一下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dPrint</span><span class="params">(item: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">    #endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，在 Release 版本中，<code>dPrint</code> 将会是一个空方法，所有对这个方法的调用都会被编译器剔除掉。需要注意的是，在这种封装下，如果你传入的 <code>items</code> 是一个表达式而不是直接的变量的话，这个表达式还是会被先执行求值的。如果这对性能也产生了可测的影响的话，我们最好用 <code>@autoclosure</code> 修饰参数来重新包装 <code>print</code>。这可以将求值运行推迟到方法内部，这样在 Release 时这个求值也会被一并去掉：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dPrint</span><span class="params">(item: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">Any</span>) &#123;</span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line">    <span class="built_in">print</span>(item())</span><br><span class="line">    #endif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dPrint(resultFromHeavyWork())</span><br><span class="line"><span class="comment">// Release 版本中 resultFromHeavyWork() 不会被执行</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用Time Profiler + 真机测试可以验证</p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://onevcat.com/2016/02/swift-performance/" target="_blank" rel="noopener">https://onevcat.com/2016/02/swift-performance/</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS客户端与服务端时间同步方案</title>
    <url>/2020/05/12/IOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近项目的编写中，接口需要提交精确到秒级的时间戳用作校验。但是仅靠<code>new Date().timeIntervalSince1970</code>会面临着本地的时间与服务器时间不一致的问题。那么本文方案能让本地应用时间与服务器时间存在误差范围内保持同步，减少应用出错率。</p>
<a id="more"></a>
<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><ul>
<li>获取设备当前时间 <code>Now</code>，该值受系统时间影响，用户如果修改时间，值也会随着变化；</li>
<li>获取设备上次重启的时间 <code>BootTime</code>，该值受系统时间影响，用户如果修改时间，值也会随着变化；</li>
<li>由上面 <code>iOS</code> 提供的两个接口，我们可以获取到<strong>设备自上次重启后运行的时间</strong>（<code>BootTime - Now</code>），该值与系统时间无关；<span class="label danger">`-`这个不是减，指的是区间，下面同理</span> </li>
<li>在必要的时刻获取一下服务器时间，然后记录这个时刻的<strong>设备自上次重启后运行的时间</strong>（<code>BootTime - Now</code>）</li>
<li>后续时间获取：<strong>现在服务器时间 = 以前服务器时间 + 现在设备自上次重启后运行的时间 - 以前服务器时间的获取时刻的设备自上次重启后运行的时间</strong></li>
<li>利用AFNetworking自动同步时间</li>
</ul>
<h1 id="时间的获取"><a href="#时间的获取" class="headerlink" title="时间的获取"></a>时间的获取</h1><p><strong>获取now的Unix Time</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">now</span>() -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> now = timeval()</span><br><span class="line">	<span class="keyword">var</span> tz = timezone()</span><br><span class="line">	gettimeofday(&amp;now, &amp;tz)</span><br><span class="line">	<span class="keyword">return</span> now.tv_sec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>获取设备上次重启的 Unix Time</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">boottime</span>() -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> mid = [<span class="type">CTL_KERN</span>, <span class="type">KERN_BOOTTIME</span>]</span><br><span class="line">	<span class="keyword">var</span> boottime = timeval()</span><br><span class="line">	<span class="keyword">var</span> size = <span class="type">MemoryLayout</span>.size(ofValue: boottime)</span><br><span class="line">  <span class="keyword">if</span> sysctl(&amp;mid, <span class="number">2</span>, &amp;boottime, &amp;size, <span class="literal">nil</span>, <span class="number">0</span>) != -<span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> boottime.tv_sec</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>获取设备自上次重启后运行的时间</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">now() - boottime()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>oc获取方式</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">//get system uptime since last boot</span></span><br><span class="line">&gt; - (<span class="built_in">NSTimeInterval</span>)uptime</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt; 	<span class="keyword">struct</span> timeval boottime;</span><br><span class="line">&gt; 	<span class="keyword">int</span> mib[<span class="number">2</span>] = &#123;<span class="built_in">CTL_KERN</span>, KERN_BOOTTIME&#125;;</span><br><span class="line">&gt; 	size_t size = <span class="keyword">sizeof</span>(boottime);</span><br><span class="line">&gt; </span><br><span class="line">&gt; 	<span class="keyword">struct</span> timeval now;</span><br><span class="line">&gt; 	<span class="keyword">struct</span> timezone tz;</span><br><span class="line">&gt; 	gettimeofday(&amp;now, &amp;tz);</span><br><span class="line">&gt; </span><br><span class="line">&gt; 	<span class="keyword">double</span> uptime = <span class="number">-1</span>;</span><br><span class="line">&gt; </span><br><span class="line">&gt; 	<span class="keyword">if</span> (sysctl(mib, <span class="number">2</span>, &amp;boottime, &amp;size, <span class="literal">NULL</span>, <span class="number">0</span>) != <span class="number">-1</span> &amp;&amp; boottime.tv_sec != <span class="number">0</span>)</span><br><span class="line">&gt; 	&#123;</span><br><span class="line">&gt; 		uptime = now.tv_sec - boottime.tv_sec;</span><br><span class="line">&gt; 		uptime += (<span class="keyword">double</span>)(now.tv_usec - boottime.tv_usec) / <span class="number">1000000.0</span>;</span><br><span class="line">&gt; 	&#125;</span><br><span class="line">&gt; 	<span class="keyword">return</span> uptime;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="TimeUtils编写"><a href="#TimeUtils编写" class="headerlink" title="TimeUtils编写"></a>TimeUtils编写</h1><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeUtils</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> isServerTime: <span class="type">Bool</span> = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">var</span> diffTime: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">/// 项目中所有获取时间的方法</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">getServerTime</span>() -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line">        objc_sync_enter(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">defer</span> &#123;</span><br><span class="line">            objc_sync_exit(<span class="keyword">self</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !isServerTime &#123;</span><br><span class="line">            <span class="keyword">let</span> t = <span class="type">Date</span>().timestamp</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> t = diffTime + (now() - boottime())</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 用于计算时间</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">calibrationTime</span>(<span class="title">lastServerTime</span>: <span class="title">Int</span>) -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line">        objc_sync_enter(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">defer</span> &#123;</span><br><span class="line">            objc_sync_exit(<span class="keyword">self</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        diffTime = lastServerTime - (now() - boottime())</span><br><span class="line">        isServerTime = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> lastServerTime</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 获取当前 Unix Time</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">now</span>() -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = timeval()</span><br><span class="line">        <span class="keyword">var</span> tz = timezone()</span><br><span class="line">        gettimeofday(&amp;now, &amp;tz)</span><br><span class="line">        <span class="keyword">return</span> now.tv_sec</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  	<span class="comment">/// 获取设备上次重启的 Unix Time</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">boottime</span>() -&gt; <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> mid = [<span class="type">CTL_KERN</span>, <span class="type">KERN_BOOTTIME</span>]</span><br><span class="line">        <span class="keyword">var</span> boottime = timeval()</span><br><span class="line">        <span class="keyword">var</span> size = <span class="type">MemoryLayout</span>.size(ofValue: boottime)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> sysctl(&amp;mid, <span class="number">2</span>, &amp;boottime, &amp;size, <span class="literal">nil</span>, <span class="number">0</span>) != -<span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> boottime.tv_sec</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Date</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> timestamp: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> timeInterval: <span class="type">TimeInterval</span> = <span class="keyword">self</span>.timeIntervalSince1970</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Int</span>(timeInterval)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="利用AFNetworking同步时间"><a href="#利用AFNetworking同步时间" class="headerlink" title="利用AFNetworking同步时间"></a>利用AFNetworking同步时间</h1><p>利用AFN发起请求返回时通过HTTP Header来获取服务器时间，时间格式以<a href="https://link.jianshu.com/?t=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc7231%23section-7.1.1.1" target="_blank" rel="noopener">RFC-7231</a>中定义的”HTTP日期”格式来发送，解析该时间需要用到以下的OC代码，Swift项目请自行用<code>Bridging-Header</code></p>
<p><strong>NSDate+InternetDateTime.h</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  NSDate+InternetDateTime.h</span></span><br><span class="line"><span class="comment">//  MWFeedParser</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Michael Waterfall on 07/10/2010.</span></span><br><span class="line"><span class="comment">//  Copyright 2010 Michael Waterfall. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Formatting hints</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line">    DateFormatHintNone, </span><br><span class="line">    DateFormatHintRFC822, </span><br><span class="line">    DateFormatHintRFC3339</span><br><span class="line">&#125; DateFormatHint;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A category to parse internet date &amp; time strings</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSDate</span> (<span class="title">InternetDateTime</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Get date from RFC3339 or RFC822 string</span></span><br><span class="line"><span class="comment">// - A format/specification hint can be used to speed up, </span></span><br><span class="line"><span class="comment">//   otherwise both will be attempted in order to get a date</span></span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromInternetDateTimeString:(<span class="built_in">NSString</span> *)dateString </span><br><span class="line">                                formatHint:(DateFormatHint)hint;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get date from a string using a specific date specification</span></span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromRFC3339String:(<span class="built_in">NSString</span> *)dateString;</span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromRFC822String:(<span class="built_in">NSString</span> *)dateString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><strong>NSDate+InternetDateTime.m</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  NSDate+InternetDateTime.m</span></span><br><span class="line"><span class="comment">//  MWFeedParser</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Michael Waterfall on 07/10/2010.</span></span><br><span class="line"><span class="comment">//  Copyright 2010 Michael Waterfall. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"NSDate+InternetDateTime.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Always keep the formatter around as they're expensive to instantiate</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSDateFormatter</span> *_internetDateTimeFormatter = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good info on internet dates here:</span></span><br><span class="line"><span class="comment">// http://developer.apple.com/iphone/library/qa/qa2010/qa1480.html</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSDate</span> (<span class="title">InternetDateTime</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate single date formatter</span></span><br><span class="line">+ (<span class="built_in">NSDateFormatter</span> *)internetDateTimeFormatter &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_internetDateTimeFormatter) &#123;</span><br><span class="line">            <span class="built_in">NSLocale</span> *en_US_POSIX = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            _internetDateTimeFormatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            [_internetDateTimeFormatter setLocale:en_US_POSIX];</span><br><span class="line">            [_internetDateTimeFormatter setTimeZone:[<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _internetDateTimeFormatter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get a date from a string - hint can be used to speed up</span></span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromInternetDateTimeString:(<span class="built_in">NSString</span> *)dateString formatHint:(DateFormatHint)hint &#123;</span><br><span class="line">     <span class="comment">// Keep dateString around a while (for thread-safety)</span></span><br><span class="line">	<span class="built_in">NSDate</span> *date = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (dateString) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hint != DateFormatHintRFC3339) &#123;</span><br><span class="line">            <span class="comment">// Try RFC822 first</span></span><br><span class="line">            date = [<span class="built_in">NSDate</span> dateFromRFC822String:dateString];</span><br><span class="line">            <span class="keyword">if</span> (!date) date = [<span class="built_in">NSDate</span> dateFromRFC3339String:dateString];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Try RFC3339 first</span></span><br><span class="line">            date = [<span class="built_in">NSDate</span> dateFromRFC3339String:dateString];</span><br><span class="line">            <span class="keyword">if</span> (!date) date = [<span class="built_in">NSDate</span> dateFromRFC822String:dateString];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// Finished with date string</span></span><br><span class="line">	<span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// See http://www.faqs.org/rfcs/rfc822.html</span></span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromRFC822String:(<span class="built_in">NSString</span> *)dateString &#123;</span><br><span class="line">     <span class="comment">// Keep dateString around a while (for thread-safety)</span></span><br><span class="line">    <span class="built_in">NSDate</span> *date = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (dateString) &#123;</span><br><span class="line">        <span class="built_in">NSDateFormatter</span> *dateFormatter = [<span class="built_in">NSDate</span> internetDateTimeFormatter];</span><br><span class="line">        <span class="keyword">@synchronized</span>(dateFormatter) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process</span></span><br><span class="line">            <span class="built_in">NSString</span> *RFC822String = [[<span class="built_in">NSString</span> stringWithString:dateString] uppercaseString];</span><br><span class="line">            <span class="keyword">if</span> ([RFC822String rangeOfString:<span class="string">@","</span>].location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// Sun, 19 May 2002 15:21:36 GMT</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"EEE, d MMM yyyy HH:mm:ss zzz"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// Sun, 19 May 2002 15:21 GMT</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"EEE, d MMM yyyy HH:mm zzz"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// Sun, 19 May 2002 15:21:36</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"EEE, d MMM yyyy HH:mm:ss"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// Sun, 19 May 2002 15:21</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"EEE, d MMM yyyy HH:mm"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// 19 May 2002 15:21:36 GMT</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"d MMM yyyy HH:mm:ss zzz"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// 19 May 2002 15:21 GMT</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"d MMM yyyy HH:mm zzz"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// 19 May 2002 15:21:36</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"d MMM yyyy HH:mm:ss"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!date) &#123; <span class="comment">// 19 May 2002 15:21</span></span><br><span class="line">                    [dateFormatter setDateFormat:<span class="string">@"d MMM yyyy HH:mm"</span>]; </span><br><span class="line">                    date = [dateFormatter dateFromString:RFC822String];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!date) <span class="built_in">NSLog</span>(<span class="string">@"Could not parse RFC822 date: \"%@\" Possible invalid format."</span>, dateString);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// Finished with date string</span></span><br><span class="line">    <span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// See http://www.faqs.org/rfcs/rfc3339.html</span></span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromRFC3339String:(<span class="built_in">NSString</span> *)dateString &#123;</span><br><span class="line">     <span class="comment">// Keep dateString around a while (for thread-safety)</span></span><br><span class="line">    <span class="built_in">NSDate</span> *date = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (dateString) &#123;</span><br><span class="line">        <span class="built_in">NSDateFormatter</span> *dateFormatter = [<span class="built_in">NSDate</span> internetDateTimeFormatter];</span><br><span class="line">        <span class="keyword">@synchronized</span>(dateFormatter) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Process date</span></span><br><span class="line">            <span class="built_in">NSString</span> *RFC3339String = [[<span class="built_in">NSString</span> stringWithString:dateString] uppercaseString];</span><br><span class="line">            RFC3339String = [RFC3339String stringByReplacingOccurrencesOfString:<span class="string">@"Z"</span> withString:<span class="string">@"-0000"</span>];</span><br><span class="line">            <span class="comment">// Remove colon in timezone as it breaks NSDateFormatter in iOS 4+.</span></span><br><span class="line">            <span class="comment">// - see https://devforums.apple.com/thread/45837</span></span><br><span class="line">            <span class="keyword">if</span> (RFC3339String.length &gt; <span class="number">20</span>) &#123;</span><br><span class="line">                RFC3339String = [RFC3339String stringByReplacingOccurrencesOfString:<span class="string">@":"</span> </span><br><span class="line">                                                                         withString:<span class="string">@""</span> </span><br><span class="line">                                                                            options:<span class="number">0</span></span><br><span class="line">                                                                              range:<span class="built_in">NSMakeRange</span>(<span class="number">20</span>, RFC3339String.length<span class="number">-20</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!date) &#123; <span class="comment">// 1996-12-19T16:39:57-0800</span></span><br><span class="line">                [dateFormatter setDateFormat:<span class="string">@"yyyy'-'MM'-'dd'T'HH':'mm':'ssZZZ"</span>]; </span><br><span class="line">                date = [dateFormatter dateFromString:RFC3339String];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!date) &#123; <span class="comment">// 1937-01-01T12:00:27.87+0020</span></span><br><span class="line">                [dateFormatter setDateFormat:<span class="string">@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.SSSZZZ"</span>]; </span><br><span class="line">                date = [dateFormatter dateFromString:RFC3339String];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!date) &#123; <span class="comment">// 1937-01-01T12:00:27</span></span><br><span class="line">                [dateFormatter setDateFormat:<span class="string">@"yyyy'-'MM'-'dd'T'HH':'mm':'ss"</span>]; </span><br><span class="line">                date = [dateFormatter dateFromString:RFC3339String];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!date) <span class="built_in">NSLog</span>(<span class="string">@"Could not parse RFC3339 date: \"%@\" Possible invalid format."</span>, dateString);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// Finished with date string</span></span><br><span class="line">	<span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>来源：<a href="https://github.com/mwaterfall/MWFeedParser/blob/master/Classes/NSDate+InternetDateTime.m（ARC）" target="_blank" rel="noopener">https://github.com/mwaterfall/MWFeedParser/blob/master/Classes/NSDate+InternetDateTime.m（ARC）</a></p>
</blockquote>
<p>在项目中封装一个AFN的请求基类</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> AFNetworking</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">HttpMethod</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">GET</span> = <span class="string">"GET"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">POST</span> = <span class="string">"POST"</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> baseURLString = <span class="string">"http://base.url/"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> minResponseTime = <span class="type">Int</span>.<span class="built_in">max</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> sharedClient: <span class="type">AFHTTPSessionManager</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> baseUrl = <span class="type">URL</span>(string: baseURLString)</span><br><span class="line">        <span class="keyword">let</span> client = <span class="type">AFHTTPSessionManager</span>(baseURL: baseUrl!)</span><br><span class="line">        <span class="comment">// 设置请求格式</span></span><br><span class="line">        client.requestSerializer = <span class="type">AFJSONRequestSerializer</span>()</span><br><span class="line">        <span class="comment">// 设置返回格式</span></span><br><span class="line">        client.responseSerializer = <span class="type">AFJSONResponseSerializer</span>()</span><br><span class="line">        <span class="comment">// 设置禁止缓存</span></span><br><span class="line">        client.requestSerializer.cachePolicy = .reloadIgnoringLocalCacheData</span><br><span class="line">        <span class="comment">// 设置超时</span></span><br><span class="line">        client.requestSerializer.timeoutInterval = <span class="number">10</span></span><br><span class="line">        <span class="comment">// 以防解析格式不支持</span></span><br><span class="line">        client.responseSerializer.acceptableContentTypes?.insert(<span class="string">"text/html"</span>)</span><br><span class="line">        client.responseSerializer.acceptableContentTypes?.insert(<span class="string">"text/plain"</span>)</span><br><span class="line">        <span class="keyword">return</span> client</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: 请求方式</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 项目公共请求类</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - httpMethod: httpMethod</span></span><br><span class="line">    <span class="comment">///   - URLString: URLString</span></span><br><span class="line">    <span class="comment">///   - parameters: 参数</span></span><br><span class="line">    <span class="comment">///   - headers: 请求头</span></span><br><span class="line">    <span class="comment">///   - progress: 进度</span></span><br><span class="line">    <span class="comment">///   - success: 成功回调</span></span><br><span class="line">    <span class="comment">///   - failure: 失败回调</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">request</span>(<span class="title">httpMethod</span>: <span class="title">HttpMethod</span>, <span class="title">URLString</span>: <span class="title">String</span>, <span class="title">parameters</span>: [<span class="title">String</span> : <span class="title">Any</span>]?,</span></span><br><span class="line"><span class="class">                       <span class="title">headers</span>: [<span class="title">String</span> : <span class="title">String</span>]?, <span class="title">progress</span>: ((<span class="title">Progress</span>) -&gt; <span class="title">Void</span>)?,</span></span><br><span class="line"><span class="class">                       <span class="title">success</span>: ((<span class="title">URLSessionDataTask</span>, <span class="title">Any</span>?) -&gt; <span class="title">Void</span>)?, <span class="title">failure</span>: ((<span class="title">URLSessionDataTask</span>?, <span class="title">Error</span>) -&gt; <span class="title">Void</span>)?) </span>&#123;</span><br><span class="line">        <span class="comment">// 记录当前请求开始时间</span></span><br><span class="line">        <span class="keyword">let</span> startTime = <span class="type">Date</span>().timestamp</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义通用成功回调</span></span><br><span class="line">        <span class="keyword">let</span> successCallback = &#123; (task: <span class="type">URLSessionDataTask</span>, result: <span class="type">Any?</span>) -&gt; () <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// 当前请求响应的时间间隔</span></span><br><span class="line">            <span class="keyword">let</span> responseTime = <span class="type">Date</span>().timestamp - startTime</span><br><span class="line">            <span class="comment">//如果这一次的请求响应时间小于上一次，则更新本地维护的时间</span></span><br><span class="line">            <span class="keyword">if</span> responseTime &lt;= minResponseTime &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> response = task.response <span class="keyword">as</span>? <span class="type">HTTPURLResponse</span> &#123;</span><br><span class="line">                    <span class="comment">// 网络响应头包含Date字段（世界时间）</span></span><br><span class="line">                    <span class="keyword">if</span> response.allHeaderFields[<span class="string">"Date"</span>] <span class="keyword">is</span> <span class="type">String</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> dateString = response.allHeaderFields[<span class="string">"Date"</span>]! <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> date = <span class="type">NSDate</span>(fromInternetDateTime: dateString, formatHint: <span class="type">DateFormatHintRFC822</span>) &#123;</span><br><span class="line">                            <span class="keyword">let</span> <span class="number">_</span> = <span class="type">TimeUtils</span>.calibrationTime(lastServerTime: <span class="type">Int</span>(date.timeIntervalSince1970))</span><br><span class="line">                            minResponseTime = responseTime</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            success?(task, result)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> httpMethod == .<span class="type">GET</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.sharedClient.<span class="keyword">get</span>(<span class="type">URLString</span>, parameters: parameters, headers: safeHeaders, progress: progress, success: successCallback, failure: failure)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> httpMethod == .<span class="type">POST</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.sharedClient.post(<span class="type">URLString</span>, parameters: parameters, headers: safeHeaders, progress: progress, success: successCallback, failure: failure)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note warning"><p>该方案下前提必须禁止AFN自带的缓存策略<code>client.requestSerializer.cachePolicy = .reloadIgnoringLocalCacheData</code>。不禁止会出现时间异常的现象，如项目中是使用AFN自带的缓存策略则需要更换项目中的缓存方案。</p></div>
<blockquote>
<p>该方案都仅到秒级，如需到毫秒级请做*1000处理</p>
<p>不足：连接服务器的过程是需要时间的，服务器收到请求时刻的时间与应用收到响应存在一定的时间差，导致误差的存在（误差=服务器发出响应-&gt;到本机收到响应这个时间）。</p>
<p>但是通过上面的AFN每次判断，可以使得误差逐渐降低</p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/48ac0bb1392e" target="_blank" rel="noopener">https://www.jianshu.com/p/48ac0bb1392e</a></p>
<p><a href="https://www.jianshu.com/p/bb2cbfad3e77" target="_blank" rel="noopener">https://www.jianshu.com/p/bb2cbfad3e77</a></p>
<p><a href="https://www.jianshu.com/p/df41659b06a9" target="_blank" rel="noopener">https://www.jianshu.com/p/df41659b06a9</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS填坑之URL编码问题</title>
    <url>/2020/05/08/IOS%E5%A1%AB%E5%9D%91%E4%B9%8BURL%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用WKWebview的时候，通常都离不开URL，一般的符合网络标准的URL没有什么问题，但是在公司开发的时候遇到了一些特殊URL的时候就踩到了URL编码的坑。</p>
<p>在1994年订制的RFC1738文档中，对字符串中的除了<code>- _ .</code>之外的所有非字母数字字符都替换成百分号(%)后跟两位十六进制数，十六进制数中字母必须为大写。</p>
<p>在2005年定义的RFC3986中，将针对<code>- _.~</code>四个字符之外的所有非字母数字字符进行百分号编码。当然 根据URL的类型不同，有也一部分预留字符不需要进行编码，例如查询的<code>URL</code>中可以包含<code>? /</code>字符，不需要转义。更详细文档的可以查看<a href="http://www.ietf.org/rfc/rfc3986.txt" target="_blank" rel="noopener">RFC 3986</a>。</p>
<a id="more"></a>
<h1 id="Swift-URL-Encode"><a href="#Swift-URL-Encode" class="headerlink" title="Swift URL Encode"></a>Swift URL Encode</h1><p><code>addingPercentEncoding(withAllowedCharacters:</code>是iOS7之后出现的新API用于<code>url encode</code>。</p>
<p>官方对该方法的解释：</p>
<blockquote>
<p>// Returns a new string made from the receiver by replacing all characters not in the allowedCharacters set with percent encoded characters. UTF-8 encoding is used to determine the correct percent encoded characters. Entire URL strings cannot be percent-encoded. This method is intended to percent-encode an URL component or subcomponent string, NOT the entire URL string. Any characters in allowedCharacters outside of the 7-bit ASCII range are ignored.  </p>
</blockquote>
<p>最后一句Any characters in allowedCharacters outside of the 7-bit ASCII range are ignored.，意思就是说，任何非7-bit ASCII字符搁到allowedCharacters里面也将被忽略，也就是<code>allowedCharacters</code>里面的字符跟7-bit ASCII字符不会被编码。</p>
<p>换句话说，上面方法在处理的时候会编码url的中的非7-bit ASCII字符，如这些【`#%^{}”[]|\&lt;&gt;】，如果需要忽略之，需要通过.allowedCharacters这个参数指定。</p>
<p>然而并不是，我们来看一下案例：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url1 = <span class="string">"http://github.com#aaa?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]"</span></span><br><span class="line"><span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: <span class="type">CharacterSet</span>(charactersIn: <span class="string">"#%^&#123;&#125;\"[]|\\&lt;&gt;"</span>))!)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%68%74%74%70%3A%2F%2F%67%69%74%68%75%62%2E%63%6F%6D<span class="comment">#%61%61%61%3F%6E%61%6D%65%3D%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%26%6B%65%79%3D%21%2A%27%28%29%3B%3A%40%26%3D%2B%24%2C%2F%3F%#[]</span></span><br><span class="line">Program ended with <span class="built_in">exit</span> code: 0</span><br></pre></td></tr></table></figure>
<p>可以看到只有后面的%#[]没有被编码，其余都被编码了，<strong>不是我们之前所理解的“allowedCharacters里面的字符跟7-bit ASCII字符不会被编码”，而是只有allowedCharacters里的字符才不会被编码</strong></p>
<p>正确的方法：使用<code>inverted</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url1 = <span class="string">"http://github.com#aaa?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]"</span></span><br><span class="line"><span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: <span class="type">CharacterSet</span>(charactersIn: <span class="string">"#%^&#123;&#125;\"[]|\\&lt;&gt;"</span>).inverted)!)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> url1 = <span class="string">"http://github.com#aaa?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]"</span></span><br><span class="line"><span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: CharacterSet(charactersIn: <span class="string">"#%^&#123;&#125;\"[]|\\&lt;&gt;"</span>).inverted)!)</span><br></pre></td></tr></table></figure>
<p>可以看到，通过集合反转之后得到的结果才是我们想要的，但是此处的意思是反的，就是<strong>对集合进行inverted，表示集合内的字符和非7-bit ASCII字符是需要转码</strong>的，所以我们以后使用这个方法进行转码的时候要从反面进行转码，把想要进行转码的特殊字符写在集合里就好了，注意这里说的是想要转码的特殊字符（<strong>!*‘();:@&amp;=+$,/?%#[]</strong>），中文会被认为是非7-bit ASCII字符会自动转码的。</p>
<h2 id="CharacterSet"><a href="#CharacterSet" class="headerlink" title="CharacterSet"></a>CharacterSet</h2><p><code>CharacterSet</code>是一个结构体，<code>CharacterSet.urlHostAllowed</code>等预制类型包含了所有不需要被转码的字符，<strong>反过来说就是指明了需要被转码的字符</strong>。<code>CharacterSet</code>类中提供了一些常用的URL转码的类型:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">CharacterSet</span>.urlHostAllowed: 被转义的字符有  <span class="string">"#%/&lt;&gt;?@\^`&#123;|&#125;</span></span><br><span class="line"><span class="string">CharacterSet.urlPathAllowed: 被转义的字符有  "</span>#%;&lt;&gt;?[\]^`&#123;|&#125;</span><br><span class="line"><span class="type">CharacterSet</span>.urlUserAllowed: 被转义的字符有   <span class="string">"#%/:&lt;&gt;?@[\]^`</span></span><br><span class="line"><span class="string">CharacterSet.urlQueryAllowed: 被转义的字符有  "</span>#%&lt;&gt;[\]^`&#123;|&#125;</span><br><span class="line"><span class="type">CharacterSet</span>.urlPasswordAllowed 被转义的字符有 <span class="string">"#%/:&lt;&gt;?@[\]^`&#123;|&#125;</span></span><br><span class="line"><span class="string">CharacterSet.urlFragmentAllowed 被转义的字符有 "</span>#%&lt;&gt;[\]^`&#123;|&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url1 = <span class="string">"http://github.com?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]"</span></span><br><span class="line"><span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://github.com?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*<span class="string">'();:@&amp;=+$,/?%25%23%5B%5D</span></span><br><span class="line"><span class="string">Program ended with exit code: 0</span></span><br></pre></td></tr></table></figure>
<h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> encodeUrl1 = <span class="string">"http://github.com%23aaa?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*'();:@&amp;=+$,/?%25%23%5B%5D"</span></span><br><span class="line"><span class="built_in">print</span>(encodeUrl1.removingPercentEncoding!)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://github.com<span class="comment">#aaa?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]</span></span><br><span class="line">Program ended with <span class="built_in">exit</span> code: 0</span><br></pre></td></tr></table></figure>
<h1 id="URL带有-符号的问题"><a href="#URL带有-符号的问题" class="headerlink" title="URL带有#符号的问题"></a>URL带有#符号的问题</h1><p>#是url中的一个重要组成部分，是跟在url参数之后的的最后一部分，作为一个url的锚点，用于浏览器的定位。</p>
<p>但是在项目中使用的时候发现#号被转义掉了，前端那边就没有办法正常显示。所以需要其他特殊字符正常转义，除去#号。</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>沿用预制类型，采用insert方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> urlStr = <span class="string">"http://test.com/中文/main.html#/help"</span></span><br><span class="line"><span class="keyword">var</span> charSet = <span class="type">CharacterSet</span>.urlQueryAllowed</span><br><span class="line">charSet.insert(charactersIn: <span class="string">"#"</span>)</span><br><span class="line"><span class="keyword">let</span> encodingURL = urlStr.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed)!</span><br><span class="line"><span class="built_in">print</span>(encodingURL)</span><br></pre></td></tr></table></figure>
<p>这里采用了预制的，insert会反过来被删除掉</p>
<blockquote>
<p>至于insert的原因，可以查看一下以下代码</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">let</span> url1 = <span class="string">"http://github.com#aaa?name=中文字符&amp;key=!*'();:@&amp;=+$,/?%#[]"</span></span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">"-----------------未反转情况-------------------------"</span>)</span><br><span class="line">&gt; <span class="keyword">var</span> s1 = <span class="type">CharacterSet</span>(charactersIn: #<span class="string">"[]"</span>#)</span><br><span class="line">&gt; <span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: s1.inverted)!)</span><br><span class="line">&gt; s1.insert(charactersIn: <span class="string">"["</span>)</span><br><span class="line">&gt; <span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: s1.inverted)!)</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="string">"-----------------反转情况-------------------------"</span>)</span><br><span class="line">&gt; <span class="keyword">var</span> s2 = <span class="type">CharacterSet</span>(charactersIn: #<span class="string">"[]"</span>#).inverted</span><br><span class="line">&gt; <span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: s2)!)</span><br><span class="line">&gt; s2.insert(charactersIn: <span class="string">"["</span>)</span><br><span class="line">&gt; <span class="built_in">print</span>(url1.addingPercentEncoding(withAllowedCharacters: s2)!)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>输出结果，留意最后的[]符号是否被转义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; -----------------未反转情况-------------------------</span><br><span class="line">&gt; http://github.com<span class="comment">#aaa?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*'();:@&amp;=+$,/?%#%5B%5D</span></span><br><span class="line">&gt; http://github.com<span class="comment">#aaa?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*'();:@&amp;=+$,/?%#%5B%5D</span></span><br><span class="line">&gt; -----------------反转情况-------------------------</span><br><span class="line">&gt; http://github.com<span class="comment">#aaa?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*'();:@&amp;=+$,/?%#%5B%5D</span></span><br><span class="line">&gt; http://github.com<span class="comment">#aaa?name=%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6&amp;key=!*'();:@&amp;=+$,/?%#[%5D</span></span><br><span class="line">&gt; Program ended with <span class="built_in">exit</span> code: 0</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>还未找到解释理由</p>
</blockquote>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>自定义</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> urlStr = <span class="string">"http://test.com/中文/main.html#/help"</span></span><br><span class="line"><span class="keyword">let</span> encodingURL = urlStr.addingPercentEncoding(withAllowedCharacters: <span class="type">CharacterSet</span>(charactersIn: #<span class="string">""</span>%&lt;&gt;[\]^`&#123;|&#125;<span class="string">"#).inverted)!</span></span><br><span class="line"><span class="string">print(encodingURL)</span></span><br></pre></td></tr></table></figure>
<h1 id="Json的URL编码"><a href="#Json的URL编码" class="headerlink" title="Json的URL编码"></a>Json的URL编码</h1><p>我公司有的链接需要拼接上一大段的json，里面json还有复杂的&amp;等符号，预制的肯定不够用，只能采用自定义方法：</p>
<p>所以封装了方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">urlEncoding</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> toSearchword = (<span class="keyword">self</span> <span class="keyword">as</span> <span class="type">NSString</span>).addingPercentEncoding(withAllowedCharacters: <span class="type">CharacterSet</span>(charactersIn: #<span class="string">"?!@#$^&amp;%*+,:;='"</span>`&lt;&gt;()[]&#123;&#125;/\|<span class="string">"#).inverted)</span></span><br><span class="line"><span class="string">        return toSearchword as String? ?? "</span><span class="string">"</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>直接使用即可</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> urlStr = <span class="string">"http://test.com/中文/main.html#/help"</span></span><br><span class="line"><span class="built_in">print</span>(urlStr.urlEncoding())</span><br></pre></td></tr></table></figure>
<h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><h2 id="Swift-5-字符串转义字符处理"><a href="#Swift-5-字符串转义字符处理" class="headerlink" title="Swift 5 字符串转义字符处理"></a>Swift 5 字符串转义字符处理</h2><p>增加了 # 符号，使得写字符串更加简单。</p>
<p><strong>在字符串中包含 “ 时不必再加 \ </strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//before</span><br><span class="line">let rain = &quot;The is\&quot;new\&quot;string&quot; </span><br><span class="line">//after</span><br><span class="line">let rain = #&quot;The is&quot;new&quot;string&quot;#</span><br></pre></td></tr></table></figure>
<p><strong>包含 \ 反斜杠也不需要再加转义符</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//before</span></span><br><span class="line"><span class="keyword">let</span> rain = <span class="string">"The is\\new string"</span> </span><br><span class="line"><span class="comment">//after</span></span><br><span class="line"><span class="keyword">let</span> rain = <span class="meta">#"The is \new string"#</span></span><br></pre></td></tr></table></figure>
<p><strong>由于反斜杠作为字符串中的字符，所以在插入值的时候需要在后面再加个 #</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//before</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span></span><br><span class="line"><span class="keyword">let</span> dontpanic = <span class="string">"myAge is \(age)"</span></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="keyword">let</span> answer = <span class="number">26</span></span><br><span class="line"><span class="keyword">let</span> dontpanic = <span class="meta">#"myAge is \#(age)"#</span></span><br></pre></td></tr></table></figure>
<p><strong>当字符串包含 # 时， 前后应用 ## 包裹字符串</strong></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">str</span> = ##<span class="string">"this is "</span>a<span class="string">"#good ideal"</span>##</span><br></pre></td></tr></table></figure>
<p><strong>用 #””” 开头 “””#结尾 来表示多行字符串</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> multiline = <span class="comment">#"""</span></span><br><span class="line">The answer to life,</span><br><span class="line">the universe,</span><br><span class="line">and everything is \<span class="comment">#(answer).</span></span><br><span class="line"><span class="string">""</span><span class="string">"#</span></span><br></pre></td></tr></table></figure>
<p><strong>由于不用反斜杠转义 使得正则表达式更加简洁明了</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//before</span></span><br><span class="line"><span class="keyword">let</span> regex1 = <span class="string">"\\\\[A-Z]+[A-Za-z]+\\.[a-z]+"</span></span><br><span class="line"><span class="comment">//after</span></span><br><span class="line"><span class="keyword">let</span> regex2 = <span class="meta">#"\\[A-Z]+[A-Za-z]+\.[a-z]+"#</span></span><br></pre></td></tr></table></figure>
<h2 id="Objective-C-url-encode"><a href="#Objective-C-url-encode" class="headerlink" title="Objective-C url encode"></a>Objective-C url encode</h2><p>API调用都是一样的,不过网上流传的比较多的是用的<code>C API</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSString *ciphertext = @&quot;saf#*&amp;&quot;;        </span><br><span class="line">NSCharacterSet *set = [[NSCharacterSet characterSetWithCharactersInString:@&quot;!*&apos;();:@&amp;=+$,/?%#[]&quot;] invertedSet];</span><br><span class="line">NSString *resultString = [ciphertext stringByAddingPercentEncodingWithAllowedCharacters: set];</span><br></pre></td></tr></table></figure>
<p>C API</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NSString *ciphertext = @<span class="string">"saf#*&amp;"</span>;</span><br><span class="line">NSString *encodedStr = (NSString *)CFBridgingRelease(CFURLCreateStringByAddingPercentEscapes</span><br><span class="line">                                                     (kCFAllocatorDefault,</span><br><span class="line">                                                      (CFStringRef)ciphertext,</span><br><span class="line">                                                      <span class="literal">NULL</span>,</span><br><span class="line">                                                      CFSTR(<span class="string">"!*'();:@&amp;=+$,/?%#[]"</span>),</span><br><span class="line">                                                      kCFStringEncodingUTF8));</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/c135127a3df2" target="_blank" rel="noopener">https://www.jianshu.com/p/c135127a3df2</a></p>
<p><a href="https://www.jianshu.com/p/74f7c5bbca50" target="_blank" rel="noopener">https://www.jianshu.com/p/74f7c5bbca50</a></p>
<p><a href="https://www.hangge.com/blog/cache/detail_1583.html" target="_blank" rel="noopener">https://www.hangge.com/blog/cache/detail_1583.html</a></p>
<p><a href="https://www.cnblogs.com/luoxiaofu/p/7110011.html" target="_blank" rel="noopener">https://www.cnblogs.com/luoxiaofu/p/7110011.html</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次 Vivo Y91 调试APK的坑</title>
    <url>/2020/04/14/%E8%AE%B0%E4%B8%80%E6%AC%A1-Vivo-Y91-%E8%B0%83%E8%AF%95APK%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>在项目工作测试途中，发现Vivo Y91的机型却一直出现debug安装运行问题</p>
<a id="more"></a>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>1.设置Android Studio，关闭<code>Instant Run</code>。<code>File</code>-&gt;<code>Settings</code>-&gt;<code>BUild,Execution…</code>-&gt;<code>Instant Run</code> , 关闭勾选<code>Enable Instant Run</code><br>2.在你的gradle.properties文件添加一句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android.injected.testOnly = false</span><br></pre></td></tr></table></figure>
<h2 id="其他解决方法（未测试）"><a href="#其他解决方法（未测试）" class="headerlink" title="其他解决方法（未测试）"></a>其他解决方法（未测试）</h2><p>根据每个手机不同，未知也不太一样，比如 vivo x21 是在：设置 -&gt; 更多设置 -&gt; 未知xx管理（记不太清楚了）。</p>
<p>一加3T前段时间更新了 Android 8.0 ，它的位置在： 设置 -&gt; 应用程序 -&gt; 特殊访问权限 -&gt; 安装未知应用。如下图，打开对应的软件即可。</p>
<h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><p>关于开发过程中是否开启 Instant Run，我个人建议还是关闭它，我在开发过程中一直都是关闭着的，因为之前开启它，出现了一些莫名其妙的问题，目前我们的神器 Android Studio 已经优化的很好了，即使重新打包，也浪费不了多少时间。</p>
<p>关于<code>android.injected.testOnly = false</code>的设置，那是因为我们跑的 run apk都是 debug 版本，也就是测试版本，而 vivo 的一些就不支持这个测试apk（网上有人这样说，经过验证，不假，在找答案的过程中，看到过很多吐槽：vivo x21、Y91不适合做测试机，因为它只认正式包）</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android客户端与服务端时间同步方案</title>
    <url>/2020/03/20/Android%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近项目的编写中，接口需要提交精确到秒级的时间戳用作校验。但是仅仅使用<code>System.currentTimeMillis()</code>会面临着本地的时间与服务器时间不一致的问题。那么本文方案能让本地应用时间与服务器时间存在误差范围内保持同步，减少应用出错率。</p>
<a id="more"></a>
<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><ul>
<li><code>SystemClock.elapsedRealtime()</code> ：手机系统开机时间（包含睡眠时间），用户无法在设置里面修改。</li>
<li>在必要的时刻获取一下服务器时间，然后记录这个时刻的手机开机时间（elapsedRealtime）</li>
<li>后续时间获取：<strong>现在服务器时间 = 以前服务器时间 + 现在手机开机时间 - 以前服务器时间的获取时刻的手机开机时间</strong></li>
<li>利用OkHttp的Interceptor自动同步时间</li>
</ul>
<h1 id="TimeUtils编写"><a href="#TimeUtils编写" class="headerlink" title="TimeUtils编写"></a>TimeUtils编写</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.SystemClock;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.blankj.utilcode.util.LogUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.Headers;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Interceptor;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Response;</span><br><span class="line"><span class="keyword">import</span> okhttp3.internal.http.HttpDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以前服务器时间 - 以前服务器时间的获取时刻的系统启动时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> diffTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否是服务器时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isServerTime = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getServerTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isServerTime) &#123;</span><br><span class="line">            <span class="keyword">return</span> System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (diffTime + SystemClock.elapsedRealtime()) / <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">calibrationTime</span><span class="params">(<span class="keyword">long</span> lastServerTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 记录时间差</span></span><br><span class="line">        diffTime = lastServerTime - SystemClock.elapsedRealtime();</span><br><span class="line">        isServerTime = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> lastServerTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">/**</span></span><br><span class="line"><span class="comment">  	* 利用OkHttp的Interceptor自动同步时间</span></span><br><span class="line"><span class="comment">  	*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeSyncInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> minResponseTime = Long.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            Request request = chain.request();</span><br><span class="line">            <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">            Response proceed = chain.proceed(request);</span><br><span class="line">            <span class="keyword">long</span> lastTime = System.nanoTime() - startTime;</span><br><span class="line"></span><br><span class="line">            Headers headers = proceed.headers();</span><br><span class="line">            calibration(lastTime, headers);</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calibration</span><span class="params">(<span class="keyword">long</span> responseTime, Headers headers)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (headers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果这一次的请求响应时间小于上一次，则更新本地维护的时间</span></span><br><span class="line">            <span class="keyword">if</span> (responseTime &gt;= minResponseTime) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          	<span class="comment">// 网络响应头包含Date字段（世界时间）</span></span><br><span class="line">          	<span class="comment">// 利用Interceptor记录每次请求响应时间，如果本次网络操作的时间小于上一次网络操作的时间，则获取Date字段，转换时区后更新本地TimeUtils。</span></span><br><span class="line">            String standardTime = headers.get(<span class="string">"Date"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(standardTime)) &#123;</span><br><span class="line"></span><br><span class="line">                Date parse = HttpDate.parse(standardTime);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (parse != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 客户端请求过程一般大于比收到响应时间耗时，所以没有简单的除2 加上去，而是直接用该时间</span></span><br><span class="line">                    TimeUtils.calibrationTime(parse.getTime());</span><br><span class="line">                    minResponseTime = responseTime;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原理就是通过HTTP Header来获取服务器时间（注：时间格式以<a href="https://link.jianshu.com/?t=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc7231%23section-7.1.1.1" target="_blank" rel="noopener">RFC-7231</a>中定义的”HTTP日期”格式来发送）</p>
<p>在OkHttpClient增加该Utils下的拦截器即可。</p>
<p>由于项目中只需要精确到秒，而获取的都是精确到毫秒级别，所以TimeUtils下获取的时候做了除以1000处理。可能会存在点误差吧。但是在项目中误差范围不大，还在可接受范围内。</p>
<p>不足：连接服务器的过程是需要时间的，服务器收到请求时刻的时间与应用收到响应存在一定的时间差，导致误差的存在（误差=服务器发出响应-&gt;到本机收到响应这个时间）。</p>
<p>但是通过上面的TimeSyncInterceptor每次判断，可以使得误差逐渐降低</p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/qinci/article/details/70666631" target="_blank" rel="noopener">https://blog.csdn.net/qinci/article/details/70666631</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android TextView富文本之Html标签</title>
    <url>/2020/03/19/Android-TextView%E5%AF%8C%E6%96%87%E6%9C%AC%E4%B9%8BHtml%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>TextView作为一个我们经常使用到的控件，但是在写一些UI的时候会遇到一些特别的情况，来看一下示例图：</p>
<a id="more"></a>
<p><img src="anli.png" alt></p>
<p>券的价格是需要突出显示的，还有原价也需要显示一个删除线。</p>
<h1 id="TextView的多样化显示"><a href="#TextView的多样化显示" class="headerlink" title="TextView的多样化显示"></a>TextView的多样化显示</h1><p>如果是显示不同样的大小文本字体颜色可以直接使用SpannableString实现。但是这里使用HTML标签来实现效果。</p>
<p>例如图上的券后文本，可以使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mTextView.setText(Html.fromHtml(<span class="string">"&lt;small&gt;券后仅&lt;/small&gt;&lt;big&gt; 20 &lt;/big&gt;&lt;small&gt;元&lt;/small&gt;"</span>));</span><br></pre></td></tr></table></figure>
<p>如果在strings.xml中定义时候需要注意，需要转义HTML标签，不然的话 经过Android处理后 所有的HTML标签都给过滤掉了。需要把所有的“&lt;”用“&lt;”替换，例如： </p>
<p><code>&lt;string name=&quot;htmlText&quot;&gt;&amp;lt;strong&gt;粗体&amp;lt;/strong&gt;&lt;/string&gt;</code></p>
<p>如果文本内容比较长， 则转义起来比较麻烦，并且阅读也不太方便，这种情况下可以使用XML的CDATA标记， 如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"discount_price2"</span>&gt;</span>&lt;![CDATA[&lt;small&gt;券后仅&lt;/small&gt;&lt;big&gt; %1$s &lt;/big&gt;&lt;small&gt;元&lt;/small&gt;]]&gt;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>strings.xml中节点是支持占位符的，如下所示：</p>
<p><code>&lt;string name=&quot;data&quot;&gt;整数型:%1$d，浮点型：%2$.2f，字符串:%3$s&lt;/string&gt;</code></p>
<p>其中%后面是占位符的位置，从1开始，</p>
<p><strong>$ 后面是填充数据的类型</strong></p>
<ul>
<li>$d：表示整数型；</li>
<li>$f ：表示浮点型，其中f前面的.2表示小数的位数</li>
<li>$s：表示字符串</li>
</ul>
<p>然后使用<code>Context.getResources().getString(data, ...format)</code>即可</p>
</blockquote>
<p>下面是一些常用的HTML标签。</p>
<table>
<thead>
<tr>
<th style="text-align:left">Tags</th>
<th style="text-align:left">Format</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">b, strong</td>
<td style="text-align:left">Bold</td>
</tr>
<tr>
<td style="text-align:left">i, em, cite, dfn</td>
<td style="text-align:left">Italics</td>
</tr>
<tr>
<td style="text-align:left">u</td>
<td style="text-align:left">Underline</td>
</tr>
<tr>
<td style="text-align:left">sub</td>
<td style="text-align:left">Subtext</td>
</tr>
<tr>
<td style="text-align:left">sup</td>
<td style="text-align:left">Supertext</td>
</tr>
<tr>
<td style="text-align:left">big</td>
<td style="text-align:left">Big</td>
</tr>
<tr>
<td style="text-align:left">small</td>
<td style="text-align:left">Small</td>
</tr>
<tr>
<td style="text-align:left">tt</td>
<td style="text-align:left">Monospace</td>
</tr>
<tr>
<td style="text-align:left">h1 … h6</td>
<td style="text-align:left">Headlines</td>
</tr>
<tr>
<td style="text-align:left">img</td>
<td style="text-align:left">Image</td>
</tr>
<tr>
<td style="text-align:left">font</td>
<td style="text-align:left">Font face and color</td>
</tr>
<tr>
<td style="text-align:left">blockquote</td>
<td style="text-align:left">For longer quotes</td>
</tr>
<tr>
<td style="text-align:left">a</td>
<td style="text-align:left">Link</td>
</tr>
<tr>
<td style="text-align:left">div, p</td>
<td style="text-align:left">Paragraph</td>
</tr>
<tr>
<td style="text-align:left">br</td>
<td style="text-align:left">Linefeed</td>
</tr>
</tbody>
</table>
<p>中文版：</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;br&gt;</code></td>
<td>插入一个换行符，标签是空标签</td>
</tr>
<tr>
<td><code>&lt;p&gt;</code></td>
<td>定义段落，标签会自动在其前后各添加一个空行</td>
</tr>
<tr>
<td><code>&lt;h1&gt;</code></td>
<td>h1标题</td>
</tr>
<tr>
<td><code>&lt;h2&gt;</code></td>
<td>h2标题</td>
</tr>
<tr>
<td><code>&lt;h3&gt;</code></td>
<td>h3标题</td>
</tr>
<tr>
<td><code>&lt;h4&gt;</code></td>
<td>h4标题</td>
</tr>
<tr>
<td><code>&lt;h5&gt;</code></td>
<td>h5标题</td>
</tr>
<tr>
<td><code>&lt;h6&gt;</code></td>
<td>h6标题</td>
</tr>
<tr>
<td><code>&lt;div&gt;</code></td>
<td>文档分节</td>
</tr>
<tr>
<td><code>&lt;strong&gt;</code></td>
<td>把文本定义为语气更强的强调的内容。TextView中表现为文本加粗</td>
</tr>
<tr>
<td><code>&lt;b&gt;</code></td>
<td>文本加粗</td>
</tr>
<tr>
<td><code>&lt;em&gt;</code></td>
<td>把文本定义为强调的内容。TextView中表现为斜体文本效果。</td>
</tr>
<tr>
<td><code>&lt;cite&gt;</code></td>
<td>定义引用，TextView中表现为斜体文本效果</td>
</tr>
<tr>
<td><code>&lt;dfn&gt;</code></td>
<td>标记那些对特殊术语或短语的定义。TextView中表现为斜体文本效果。</td>
</tr>
<tr>
<td><code>&lt;i&gt;</code></td>
<td>显示斜体文本效果</td>
</tr>
<tr>
<td><code>&lt;big&gt;</code></td>
<td>呈现大号字体效果</td>
</tr>
<tr>
<td><code>&lt;small&gt;</code></td>
<td>呈现小号字体效果</td>
</tr>
<tr>
<td><code>&lt;strike&gt;</code></td>
<td>定义删除线样式的文字</td>
</tr>
<tr>
<td><code>&lt;font size=&quot;...&quot; color=&quot;...&quot; face=&quot;...&quot;&gt;</code></td>
<td>规定文本的字体、字体尺寸、字体颜色   color：文本颜色；size：文本大小；face：文本字体</td>
</tr>
<tr>
<td><code>&lt;blockquote&gt;</code></td>
<td>将<code>&lt;blockquote&gt;</code> 与 <code>&lt;/blockquote&gt;</code>之间的文本从常规文本中分离出来,通常在左、右两边进行缩进，有时使用斜体</td>
</tr>
<tr>
<td><code>&lt;tt&gt;</code></td>
<td>呈现类似打字机或者等宽的文本效果</td>
</tr>
<tr>
<td><code>&lt;a&gt;</code></td>
<td>定义超链接。最重要的属性是 href 属性，它指示链接的目标。 href：指示链接的目标</td>
</tr>
<tr>
<td><code>&lt;u&gt;</code></td>
<td>为文本添加下划线</td>
</tr>
<tr>
<td><code>&lt;sup&gt;</code></td>
<td>定义上标文本</td>
</tr>
<tr>
<td><code>&lt;sub&gt;</code></td>
<td>定义下标文本</td>
</tr>
<tr>
<td><code>&lt;img src=&quot;...&quot;&gt;</code></td>
<td>向网页中嵌入一幅图像。<code>&lt;img&gt;</code>标签并不会在网页中插入图像，而是从网页上链接图像。<code>&lt;img&gt;</code> 标签创建的是被引用图像的占位空间。   src：图像的url；alt：图像的替代文本</td>
</tr>
</tbody>
</table>
<h1 id="strike标签使用注意"><a href="#strike标签使用注意" class="headerlink" title="strike标签使用注意"></a>strike标签使用注意</h1><p>在使用<code>&lt;strike&gt;</code>时，6.0系统可能会不显示。则需要在代码中使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加删除线      </span></span><br><span class="line">tv.getPaint().setFlags(Paint.STRIKE_THRU_TEXT_FLAG);  </span><br><span class="line"><span class="comment">//在代码中设置加粗            </span></span><br><span class="line">tv.getPaint().setFlags(Paint.FAKE_BOLD_TEXT_FLAG);  </span><br><span class="line"><span class="comment">//添加下划线        </span></span><br><span class="line">tv.getPaint().setFlags(Paint.UNDERLINE_TEXT_FLAG);</span><br></pre></td></tr></table></figure>
<p>要什么效果可以自己在代码中设置，选择不同的 Flags 就行了。</p>
<h1 id="a标签使用注意"><a href="#a标签使用注意" class="headerlink" title="a标签使用注意"></a>a标签使用注意</h1><p>使用a标签后设置了href属性后，不做任何设置是无法进行点击跳转的，需要TextView解析设置一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tv.setText(Html.fromHtml(url));<span class="comment">//解析html</span></span><br><span class="line">tv.setMovementMethod(LinkMovementMethod.getInstance());<span class="comment">//设置可点击</span></span><br></pre></td></tr></table></figure>
<p>或着xml中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:autoLink="web"</span><br></pre></td></tr></table></figure>
<p>这样默认是用浏览器打开a标签里面的链接。</p>
<p><strong>但是如果要获取到a标签的点击事件和链接的话，那么就要换一个方法：</strong></p>
<blockquote>
<p>其他方法基本都要涉及到SpannableString的设置；或是自定义UrlSpan，重写它的onClick方法；有些还要遍历文本寻找以http开头的字符串。但是想要找一个比较简单些的方法，所以用了一下方法实现</p>
</blockquote>
<p>而该方法使用参考了LinkMovementMethod来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.text.Layout;</span><br><span class="line"><span class="keyword">import</span> android.text.Selection;</span><br><span class="line"><span class="keyword">import</span> android.text.Spannable;</span><br><span class="line"><span class="keyword">import</span> android.text.method.LinkMovementMethod;</span><br><span class="line"><span class="keyword">import</span> android.text.method.MovementMethod;</span><br><span class="line"><span class="keyword">import</span> android.text.style.URLSpan;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tv.xianqi.test190629.view.activity.WebViewActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLinkMethod</span> <span class="keyword">extends</span> <span class="title">LinkMovementMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WebLinkMethod instance;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WebLinkMethod</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MovementMethod <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> WebLinkMethod(context);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(TextView widget, Spannable buffer, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> action = event.getAction();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP ||</span><br><span class="line">                action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">            <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">            x -= widget.getTotalPaddingLeft();</span><br><span class="line">            y -= widget.getTotalPaddingTop();</span><br><span class="line"></span><br><span class="line">            x += widget.getScrollX();</span><br><span class="line">            y += widget.getScrollY();</span><br><span class="line"></span><br><span class="line">            Layout layout = widget.getLayout();</span><br><span class="line">            <span class="keyword">int</span> line = layout.getLineForVertical(y);</span><br><span class="line">            <span class="keyword">int</span> off = layout.getOffsetForHorizontal(line, x);</span><br><span class="line"><span class="comment">//          ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);</span></span><br><span class="line">            URLSpan[] link = buffer.getSpans(off, off, URLSpan<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (link.length != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</span><br><span class="line"><span class="comment">//                  link[0].onClick(widget);</span></span><br><span class="line"><span class="comment">//                  这里改为我们需要做的动作</span></span><br><span class="line">                    WebViewActivity.startWebViewActivity(context, link[<span class="number">0</span>].getURL());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">                    Selection.setSelection(buffer,</span><br><span class="line">                            buffer.getSpanStart(link[<span class="number">0</span>]),</span><br><span class="line">                            buffer.getSpanEnd(link[<span class="number">0</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Selection.removeSelection(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(widget, buffer, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用时则改用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">textView.setMovementMethodCompat(WebLinkMethod.getInstance(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure>
<p>由于页面跳转我们需要用到原页面的上下文，于是修改了构造函数，加入了Context；</p>
<p>URLSpan是ClickableSpan的子类，实现了getURL()的方法，所以这里要换成它我们才能取到链接地址，link[0]就是我们点击到的超链接字符串，通过link[0].getURL()我们可以获得它的链接地址。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/github_37847975/article/details/75425633" target="_blank" rel="noopener">https://blog.csdn.net/github_37847975/article/details/75425633</a></p>
<p><a href="https://blog.csdn.net/bhadx520/article/details/47433203?depth_1-utm_source=distribute.pc_relevant_right.none-task&amp;utm_source=distribute.pc_relevant_right.none-task" target="_blank" rel="noopener">https://blog.csdn.net/bhadx520/article/details/47433203?depth_1-utm_source=distribute.pc_relevant_right.none-task&amp;utm_source=distribute.pc_relevant_right.none-task</a></p>
<p><a href="https://blog.csdn.net/ganggang1st/article/details/6804086" target="_blank" rel="noopener">https://blog.csdn.net/ganggang1st/article/details/6804086</a></p>
<p><a href="https://blog.csdn.net/yulyu/article/details/52244925" target="_blank" rel="noopener">https://blog.csdn.net/yulyu/article/details/52244925</a></p>
<p><a href="https://www.jianshu.com/p/c4e1aacb9685" target="_blank" rel="noopener">https://www.jianshu.com/p/c4e1aacb9685</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Android Studio——Received close_notify during handshake</title>
    <url>/2020/02/18/%E8%A7%A3%E5%86%B3Android-Studio%E2%80%94%E2%80%94Received-close-notify-during-handshake/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>问题ERROR ： Received close_notify during handshake</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring root project &apos;NotificationDemo&apos;.</span><br><span class="line">&gt; Could not resolve all artifacts for configuration &apos;:classpath&apos;.</span><br><span class="line">   &gt; Could not download guava.jar (com.google.guava:guava:23.0)</span><br><span class="line">      &gt; Could not get resource &apos;https://jcenter.bintray.com/com/google/guava/guava/23.0/guava-23.0.jar&apos;.</span><br><span class="line">         &gt; Could not GET &apos;https://jcenter.bintray.com/com/google/guava/guava/23.0/guava-23.0.jar&apos;.</span><br><span class="line">            &gt; Received close_notify during handshake</span><br><span class="line">   &gt; Could not download kotlin-reflect.jar (org.jetbrains.kotlin:kotlin-reflect:1.2.0)</span><br><span class="line">      &gt; Could not get resource &apos;https://jcenter.bintray.com/org/jetbrains/kotlin/kotlin-reflect/1.2.0/kotlin-reflect-1.2.0.jar&apos;.</span><br><span class="line">         &gt; Could not GET &apos;https://jcenter.bintray.com/org/jetbrains/kotlin/kotlin-reflect/1.2.0/kotlin-reflect-1.2.0.jar&apos;.</span><br><span class="line">            &gt; Received close_notify during handshake</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>可能是Jcenter一直连接超时了吧，请求不了，所以查了一下资料，暂时使用国内源即可。</p>
<blockquote>
<p>有翻墙应该不会出现该问题，但是最近蓝灯好像又连不上了，真是麻鬼烦的玩意。</p>
</blockquote>
<p><strong>解决方法</strong></p>
<p>在项目的 Gradle 文件里，配置国内源（将 <code>Jcenter()</code>注掉或者删掉，替换成下图两行<code>maven</code>配置）</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">maven&#123;url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span>&#125;</span><br><span class="line">maven&#123;url <span class="string">"https://jitpack.io"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>重新 <code>Sync</code> 或者 <code>Rebuild</code>即可</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/w13576267399/article/details/82019359" target="_blank" rel="noopener">https://blog.csdn.net/w13576267399/article/details/82019359</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>重学Android之Notification</title>
    <url>/2020/02/11/%E9%87%8D%E5%AD%A6Android%E4%B9%8BNotification/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是通知"><a href="#什么是通知" class="headerlink" title="什么是通知"></a>什么是通知</h1><p>通知是一个可以在应用程序正常的用户界面之外显示给用户的消息。<br>通知发出时，它首先出现在状态栏的通知区域中，用户打开通知抽屉可查看通知详情。通知区域和通知抽屉都是用户可以随时查看的系统控制区域。</p>
<a id="more"></a>
<p>各种通知的展现形式如图：</p>
<p><img src="notificationshow.png" alt></p>
<h1 id="通知的基础用法"><a href="#通知的基础用法" class="headerlink" title="通知的基础用法"></a>通知的基础用法</h1><h2 id="通知创建方式区别"><a href="#通知创建方式区别" class="headerlink" title="通知创建方式区别"></a>通知创建方式区别</h2><p>随着Android系统不断升级，Notification的创建方式也随之变化，主要变化如下:</p>
<p><strong>Android 3.0之前</strong></p>
<p>Android 3.0 (API level 11)之前，使用<code>new Notification()</code>方式创建通知:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NotificationManager mNotifyMgr = </span><br><span class="line">      (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">PendingIntent contentIntent = PendingIntent.getActivity(</span><br><span class="line">      <span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ResultActivity<span class="class">.<span class="keyword">class</span>), 0)</span>;</span><br><span class="line"></span><br><span class="line">Notification notification = <span class="keyword">new</span> Notification(icon, tickerText, when);</span><br><span class="line">notification.setLatestEventInfo(<span class="keyword">this</span>, title, content, contentIntent);</span><br><span class="line"></span><br><span class="line">mNotifyMgr.notify(NOTIFICATIONS_ID, notification);</span><br></pre></td></tr></table></figure>
<p><strong>Android 3.0 (API level 11)及更高版本</strong></p>
<p>Android 3.0开始弃用<code>new Notification()</code>方式，改用<code>Notification.Builder()</code>来创建通知:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NotificationManager mNotifyMgr = </span><br><span class="line">      (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">PendingIntent contentIntent = PendingIntent.getActivity(</span><br><span class="line">      <span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ResultActivity<span class="class">.<span class="keyword">class</span>), 0)</span>;</span><br><span class="line"></span><br><span class="line">Notification notification = <span class="keyword">new</span> Notification.Builder(<span class="keyword">this</span>)</span><br><span class="line">            .setSmallIcon(R.drawable.notification_icon)</span><br><span class="line">            .setContentTitle(<span class="string">"My notification"</span>)</span><br><span class="line">            .setContentText(<span class="string">"Hello World!"</span>)</span><br><span class="line">            .setContentIntent(contentIntent)</span><br><span class="line">            .build();<span class="comment">// getNotification()</span></span><br><span class="line"></span><br><span class="line">mNotifyMgr.notify(NOTIFICATIONS_ID, notification);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里需要注意: <code>build()</code> 是Androdi 4.1(API level 16)加入的，用以替代<code>getNotification()</code>。API level 16开始弃用<code>getNotification()</code></p>
</blockquote>
<p><strong>兼容Android 3.0之前的版本</strong></p>
<p>为了兼容<code>API level 11</code>之前的版本，<code>v4 Support Library</code>中提供了<br> <code>NotificationCompat.Builder()</code>这个替代方法。它与<code>Notification.Builder()</code>类似，二者没有太大区别。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">NotificationManager mNotifyMgr = </span><br><span class="line">      (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">PendingIntent contentIntent = PendingIntent.getActivity(</span><br><span class="line">      <span class="keyword">this</span>, <span class="number">0</span>, new Intent(<span class="keyword">this</span>, ResultActivity<span class="class">.<span class="keyword">class</span>), <span class="type">0);</span></span></span><br><span class="line"></span><br><span class="line">NotificationCompat.Builder mBuilder = </span><br><span class="line">      new NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">            .setSmallIcon(R.drawable.notification_icon)</span><br><span class="line">            .setContentTitle(<span class="string">"My notification"</span>)</span><br><span class="line">            .setContentText(<span class="string">"Hello World!"</span>)</span><br><span class="line">            .setContentIntent(contentIntent);</span><br><span class="line"></span><br><span class="line">mNotifyMgr.notify(NOTIFICATIONS_ID, mBuilder.build());</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注：除特别说明外，本文将根据 <code>NotificationCompat.Builder()</code> 展开解析，<br><code>Notification.Builder()</code>类似。</strong></p>
</blockquote>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="通知的必要属性"><a href="#通知的必要属性" class="headerlink" title="通知的必要属性"></a>通知的必要属性</h3><p>一个通知必须包含以下三项属性:</p>
<ul>
<li>小图标，对应 setSmallIcon()</li>
<li>通知标题，对应 setContentTitle()</li>
<li>详细信息，对应 setContentText()</li>
</ul>
<p>其他属性均为可选项，更多属性方法请参考<a href="https://link.jianshu.com?t=http://developer.android.com/reference/android/support/v4/app/NotificationCompat.Builder.html" target="_blank" rel="noopener">NotificationCompat.Builder</a>。</p>
<p>尽管其他都是可选的，但一般都会为通知添加至少一个动作(Action)，这个动作可以是跳转到Activity、启动一个Service或发送一个Broadcas等。 通过以下方式为通知添加动作:</p>
<ul>
<li>使用PendingIntent</li>
<li>通过大视图通知的 <code>Action Button</code>，仅支持Android 4.1 (API level 16)及更高版本</li>
</ul>
<h3 id="创建一个通知"><a href="#创建一个通知" class="headerlink" title="创建一个通知"></a>创建一个通知</h3><p>1、实例化一个NotificationCompat.Builder对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NotificationCompat.Builder builderNormal = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">                        .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                        .setContentTitle(<span class="string">"普通的通知标题"</span>)</span><br><span class="line">                        .setContentText(<span class="string">"普通的通知内容"</span>);</span><br></pre></td></tr></table></figure>
<p>NotificationCompat.Builder自动设置的默认值:</p>
<ul>
<li><strong>priority:</strong> PRIORITY_DEFAULT</li>
<li><strong>when: </strong>System.currentTimeMillis()</li>
<li><strong>audio stream: </strong>STREAM_DEFAULT</li>
</ul>
<p>2、定义并设置一个通知动作(Action)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent secIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">PendingIntent secPendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>,</span><br><span class="line">        secIntent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">builder.setContentIntent(secPendingIntent);</span><br></pre></td></tr></table></figure>
<p>PendingIntent 是一种特殊的 Intent ，字面意思可以解释为延迟的 Intent ，用于在某个事件结束后执行特定的 Action 。从上面带 Action 的通知也能验证这一点，当用户点击通知时，才会执行。<br>PendingIntent 是 Android 系统管理并持有的用于描述和获取原始数据的对象的标志(引用)。也就是说，<strong>即便创建该PendingIntent对象的进程被杀死了，这个PendingItent对象在其他进程中还是可用的</strong>。<br>日常使用中的短信、闹钟等都用到了 PendingIntent。</p>
<p>PendingIntent 主要可以通过以下三种方式获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取一个用于启动 Activity 的 PendingIntent 对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PendingIntent <span class="title">getActivity</span><span class="params">(Context context, <span class="keyword">int</span> requestCode, Intent intent, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个用于启动 Service 的 PendingIntent 对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PendingIntent <span class="title">getService</span><span class="params">(Context context, <span class="keyword">int</span> requestCode, Intent intent, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个用于向 BroadcastReceiver 广播的 PendingIntent 对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PendingIntent <span class="title">getBroadcast</span><span class="params">(Context context, <span class="keyword">int</span> requestCode, Intent intent, <span class="keyword">int</span> flags)</span></span></span><br></pre></td></tr></table></figure>
<p>PendingIntent 具有以下几种 flag：</p>
<ul>
<li><strong>FLAG_CANCEL_CURRENT:</strong>如果当前系统中已经存在一个相同的 PendingIntent 对象，那么就将先将已有的 PendingIntent 取消，然后重新生成一个 PendingIntent 对象。</li>
<li><strong>FLAG_NO_CREATE:</strong>如果当前系统中不存在相同的 PendingIntent 对象，系统将不会创建该 PendingIntent 对象而是直接返回 null 。</li>
<li><strong>FLAG_ONE_SHOT:</strong>该 PendingIntent 只作用一次。</li>
<li><strong>FLAG_UPDATE_CURRENT:</strong>如果系统中已存在该 PendingIntent 对象，那么系统将保留该 PendingIntent 对象，但是会使用新的 Intent 来更新之前 PendingIntent 中的 Intent 对象数据，例如更新 Intent 中的 Extras。</li>
</ul>
<p>3、生成<code>Notification</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Notification notificationNormal = builderNormal.build();</span><br></pre></td></tr></table></figure>
<p>4、使用<code>NotificationManager</code>发送通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NotificationManager mNotificationManager;</span><br><span class="line">mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line"><span class="comment">// 第一个参数为ID，后续更新通知会使用到</span></span><br><span class="line">mNotificationManager.notify(<span class="number">0</span>, notificationNormal);</span><br></pre></td></tr></table></figure>
<h3 id="更新通知"><a href="#更新通知" class="headerlink" title="更新通知"></a>更新通知</h3><p>更新通知很简单，只需再次发送相同ID的通知即可，如果之前的通知依然存在则会更新通知属性，如果之前通知不存在则重新创建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">        .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">        .setContentTitle(<span class="string">"更新的通知标题"</span>)</span><br><span class="line">        .setContentText(<span class="string">"更新的通知内容"</span>);</span><br><span class="line"></span><br><span class="line">builder.setContentIntent(secPendingIntent);</span><br><span class="line"></span><br><span class="line">Notification notificationUpdate = builder.build();</span><br><span class="line"><span class="comment">// 保证与上述创建的相同ID即可。</span></span><br><span class="line">mNotificationManager.notify(<span class="number">0</span>, notificationUpdate);</span><br></pre></td></tr></table></figure>
<h3 id="取消通知"><a href="#取消通知" class="headerlink" title="取消通知"></a>取消通知</h3><p>取消通知有如下几种方式:</p>
<ul>
<li>点击通知栏的清除按钮，会清除所有可清除的通知</li>
<li>设置了 setAutoCancel() 或 FLAG_AUTO_CANCEL 的通知，点击该通知时会清除它</li>
<li>通过 NotificationManager 调用 cancel(int id) 方法清除指定 ID 的通知</li>
<li>通过 NotificationManager 调用 cancel(String tag, int id) 方法清除指定 TAG 和 ID 的通知</li>
<li>通过 NotificationManager 调用 cancelAll() 方法清除所有该应用之前发送的通知</li>
</ul>
<p>添加<code>setAutoCancel</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NotificationCompat.Builder builderNormal = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">        .setAutoCancel(<span class="keyword">true</span>)</span><br><span class="line">        .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">        .setContentTitle(<span class="string">"普通的通知标题"</span>)</span><br><span class="line">        .setContentText(<span class="string">"普通的通知内容"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h2><h3 id="大视图通知"><a href="#大视图通知" class="headerlink" title="大视图通知"></a>大视图通知</h3><p>通知有两种视图：普通视图和大视图。</p>
<p>普通视图：</p>
<p><img src="normalview.png" alt></p>
<p>大视图（BigText为例）：</p>
<p><img src="bigtextview.png" alt></p>
<p>默认情况下为普通视图，可通过<code>NotificationCompat.Builder.setStyle()</code>设置大视图。</p>
<blockquote>
<p>注: 大视图(Big Views)由Android 4.1(API level 16)开始引入，且仅支持Android 4.1及更高版本。</p>
</blockquote>
<p>以上图为例:<br>1、构建Action Button的PendingIntent</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent dismissIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, PingService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                dismissIntent.setAction(<span class="string">"dismiss"</span>);</span><br><span class="line">                PendingIntent p1 = PendingIntent.getService(<span class="keyword">this</span>, <span class="number">0</span>, dismissIntent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line"></span><br><span class="line">                Intent snoozeIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, PingService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                snoozeIntent.setAction(<span class="string">"snooze"</span>);</span><br><span class="line">                PendingIntent p2 = PendingIntent.getService(<span class="keyword">this</span>, <span class="number">0</span>, snoozeIntent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br></pre></td></tr></table></figure>
<p>2、构建NotificatonCompat.Builder对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NotificationCompat.Builder builderBig = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>)</span><br><span class="line">                        .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                        .setContentTitle(getString(R.string.title))</span><br><span class="line">                        .setContentText(<span class="string">"简要"</span>)</span><br><span class="line">                        .setDefaults(Notification.DEFAULT_ALL)</span><br><span class="line">  											<span class="comment">// 注意该步骤</span></span><br><span class="line">                        .setStyle(<span class="keyword">new</span> NotificationCompat.BigTextStyle().bigText(getString(R.string.content)))</span><br><span class="line">                        .addAction(android.R.drawable.ic_input_delete, <span class="string">"dimiss"</span>, p1)</span><br><span class="line">                        .addAction(android.R.drawable.ic_input_add, <span class="string">"snooze"</span>, p2);</span><br></pre></td></tr></table></figure>
<p>3、其他步骤与普通视图相同</p>
<h3 id="进度条通知"><a href="#进度条通知" class="headerlink" title="进度条通知"></a>进度条通知</h3><p><strong>明确进度的进度条</strong></p>
<p>使用<code>setProgress(max, progress, false)</code>来更新进度。</p>
<ul>
<li>max: 最大进度值</li>
<li>progress: 当前进度</li>
<li>false: 是否是不明确的进度条</li>
</ul>
<h2 id="通知常见属性"><a href="#通知常见属性" class="headerlink" title="通知常见属性"></a>通知常见属性</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.android.com/guide/topics/ui/notifiers/notifications.html" target="_blank" rel="noopener">https://developer.android.com/guide/topics/ui/notifiers/notifications.html</a></p>
<p><a href="https://developer.android.com/reference/android/app/Notification.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/app/Notification.html</a></p>
<p><a href="https://www.cnblogs.com/travellife/p/Android-Notification-xiang-jie-yiji-ben-cao-zuo.html" target="_blank" rel="noopener">https://www.cnblogs.com/travellife/p/Android-Notification-xiang-jie-yiji-ben-cao-zuo.html</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Notification</tag>
      </tags>
  </entry>
  <entry>
    <title>Android进程保活探讨</title>
    <url>/2020/02/04/Android%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB%E6%8E%A2%E8%AE%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Android 系统为了保持系统运行流畅，在内存吃紧的情况下，会将一些进程 kill ，以释放一部分内存。然而，对于一些（如：IM-QQ 、微信，支付-支付宝等）比较重要、我们希望能及时收到消息的 APP，需要保持进程持续活跃，那么就需要实施一些保活措施来保证进程能够持续存活，即 <strong>Android 进程保活</strong>。</p>
<a id="more"></a>
<p><strong>Android 进程拉活包括两个层面：</strong></p>
<ul>
<li><p>提供进程优先级，降低进程被杀死的概率</p>
</li>
<li><p>在进程被杀死后，进行拉活</p>
</li>
</ul>
<p>在此之前，先来了解下 Android 进程的一些相关概念。</p>
<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>默认情况下，同一 APP 的所有组件均运行在相同的进程中，但是也可以根据需要，通过在清单文件中配置来控制某些组件的所属进程。</p>
<p>内存不足的情况下，Android 系统会选择 kill 某一进程来释放该进程占用的内存，供其它为用户提供更为紧急服务的进程使用。在被关闭的进程中运行的组件也会随着进程的关闭而销毁。</p>
<p>决定 kill 哪个进程时，Android 系统将权衡所有进程对用户的相对重要程度。例如：相对于托管可见 Activity 的进程而言，更有可能 kill 托管不可见 Activity 的进程。因此，是否终止 kill 某个进程取决于该进程中所运行组件的状态。</p>
<h1 id="进程的优先级"><a href="#进程的优先级" class="headerlink" title="进程的优先级"></a>进程的优先级</h1><p>Android 系统将尽量长时间地保持应用进程，但为了新建进程或运行更重要的进程，最终需要清除旧进程来回收内存。 为了确定保留或终止哪些进程，系统会根据进程中正在运行的组件以及这些组件的状态，将每个进程放入“重要性层次结构”中。 必要时，系统会首先消除重要性最低的进程，然后是清除重要性稍低一级的进程，依此类推，以回收系统资源。</p>
<p>进程的重要性，划分5级：</p>
<ol>
<li>前台进程 (Foreground process)</li>
<li>可见进程 (Visible process)</li>
<li>服务进程 (Service process)</li>
<li>后台进程 (Background process)</li>
<li>空进程 (Empty process)</li>
</ol>
<p><img src="jinchengyouxianji.jpeg" alt></p>
<p>前台进程的重要性最高，依次递减，空进程的重要性最低，下面分别来阐述每种级别的进程</p>
<h2 id="前台进程"><a href="#前台进程" class="headerlink" title="前台进程"></a>前台进程</h2><p>用户当前操作的进程。一个进程满足以下任一条件 ，即视为前台进程：</p>
<ul>
<li>托管用户正在交互的 Activity（已调用 onResume() 方法）。</li>
<li>托管某个 Service ，且 Service 绑定到用户正在交互的 Activity。</li>
<li>托管正在“前台”运行的 Service（服务已调用startForeground()）。</li>
<li>托管正在执行生命周期回调的 Service（ onCreate() 、 onStart() 或 onDestory() ）。</li>
<li>托管正在执行 onReceive() 方法的 BroadcastReceiver。</li>
</ul>
<blockquote>
<p>通常，任意时间的前台进程数据都不多。只有在内存不足以支持它们同时继续运行这一万不得已的情况下，系统才会 kill 它们。</p>
</blockquote>
<h2 id="可见进程"><a href="#可见进程" class="headerlink" title="可见进程"></a>可见进程</h2><p>没有任何前台组件、但仍会影响用户在屏幕上所见内容的进程。 如果一个进程满足以下任一条件，即视为可见进程：</p>
<ul>
<li>托管不在前台、但仍对用户可见的 Activity（已调用 onPause() 方法）。如：前台 Activity 启动了一个对话框，允许在其后面显示上一个 Activity。</li>
<li>托管绑定到可见（或前台）的 Activity 的 Service。</li>
</ul>
<blockquote>
<p>可见进程被视为及其重要的进程，除非为了维持所有前台进程同时运行而必须终止，否则系统不会kill这些进程。</p>
</blockquote>
<h2 id="服务进程"><a href="#服务进程" class="headerlink" title="服务进程"></a>服务进程</h2><p>正在运行已使用 startService() 方法启动的 Service 且不属于上述两个更高类别进程的进程。</p>
<blockquote>
<p>尽管服务进程与用户可见内容没有直接关联，但是它们通常在执行一些用户比较关心的操作（如：在后台播放音乐或从网络下载数据等），因此，除非内部不足以维持所有前台进程和可见进程同时运行，否则系统不会 kill 这些进程。</p>
</blockquote>
<h2 id="后台进程"><a href="#后台进程" class="headerlink" title="后台进程"></a>后台进程</h2><p>托管目前对用户不可见的 Activity 的进程（已调用 Activity 的 onStop() 方法）。</p>
<blockquote>
<p>后台进程对用户体验没有直接影响，系统可能随时会 kill 它们，以回收内存提供给前台进程、可见进程、服务进程使用。通常会有很多后台进程同时运行，系统将它们保存在 LRU（最近最少使用）列表中，以确保包含用户最近查看的 Activity 的进程最后一个被终止。</p>
</blockquote>
<h2 id="空进程"><a href="#空进程" class="headerlink" title="空进程"></a>空进程</h2><p>不包含任何活动组件的进程。</p>
<blockquote>
<p>保留这种进程的唯一目的是缓存，以缩短下次在其中运行的组件的启动时间。为使系统总体资源在进程缓存和底层内核缓存之间保持平衡，系统往往会kill这些进程。</p>
</blockquote>
<p>根据进程中当前活动的组件的重要程度，Android 系统会将进程评定为可能达到的最高级别。比如，托管服务和可见 Activity 的进程，系统会将其评定为可见进程，而不是服务进程。</p>
<p>此外，一个进程的级别可能会因为其他进程对其依赖而有所提高，即服务于另一进程的进程其级别不会低于其服务的进程。例如，进程 A 中的 Service 绑定到进程 B 中的组件，则进程 A 始终被视为至少和进程 B 同等级别。</p>
<p>由于运行 Service 的进程其级别高于托管后台 Activity 的进程，因此在要做长时间后台操作的 Activity 中最好为该操作启动 Service，而不是简单的创建子线程，当操作有可能比 Activity 更持久时更需如此。例如，需要上传较大图片或较大文件的 Activity，应该启动 Service 来执行上传操作，这样，即使 Activity 被销毁，Service 仍能在后台继续执行上传操作。使用 Service 执行较长耗时操作，可以保证不管 Activity 发生什么情况，该操作至少有服务进程的优先级。同理，使用广播接收器时，也当如此。</p>
<blockquote>
<p><a href="https://developer.android.com/guide/components/processes-and-threads.html" target="_blank" rel="noopener">https://developer.android.com/guide/components/processes-and-threads.html</a></p>
</blockquote>
<h1 id="进程回收策略"><a href="#进程回收策略" class="headerlink" title="进程回收策略"></a>进程回收策略</h1><p>Android 系统回收进程内存的机制叫<code>Low Memory Killer</code>机制，是一种根据 <code>oom_adj</code>阈值级别触发相应力度的内存回收的机制。<code>oom_adj</code> 代表进程的优先级，数值越高，优先级越低，越容易被杀死。</p>
<p><strong>Andorid的 Low Memory Killer 是在标准的linux lernel的 OOM 基础上修改而来的一种内存管理机制。当系统内存不足时，杀死不必要的进程释放其内存。不必要的进程的选择根据有2个：oom_adj和占用的内存的大小。oom_adj 代表进程的优先级，数值越高，优先级越低，越容易被杀死；对应每个oom_adj都可以有一个空闲进程的阀值。</strong></p>
<p><strong>Android Kernel每隔一段时间会检测当前空闲内存是否低于某个阀值。假如是，则杀死oom_adj最大的不必要的进程，如果有多个，就根据 oom_score_adj 去杀死进程，直到内存恢复低于阀值的状态。</strong></p>
<p>关于 oom_adj 的说明如下：</p>
<p><img src="oomadj.jpeg" alt></p>
<blockquote>
<p>其中红色部分代表比较容易被杀死的 Android 进程（OOM_ADJ&gt;=4）,绿色部分表示不容易被杀死的 Android 进程，其他表示非 Android 进程（纯 Linux 进程）。</p>
<p>在 Lowmemorykiller 回收内存时会根据进程的级别优先杀死 OOM_ADJ 比较大的进程，对于优先级相同的进程则进一步受到进程所占内存和进程存活时间的影响。</p>
<p><strong>普通app进程的oom_adj&gt;=0,系统进程的oom_adj才可能&lt;0</strong></p>
<p>查看当前应用进程adj值命令为：<code>cat /proc/进程id/oom_adj</code></p>
<p>查看当前进程id：<code>ps | grep PackageName</code></p>
</blockquote>
<p><strong>LowMemoryKiller 的阈值的设定，主要保存在2个文件之中，分别是:</strong></p>
<ul>
<li><code>/sys/module/lowmemorykiller/parameters/adj</code></li>
<li><code>/sys/module/lowmemorykiller/parameters/minfree</code></li>
</ul>
<p>adj保存着当前系统杀进程的等级，minfree则是保存着对应的内存阀值。</p>
<p>在API为26的Nexus模拟器下打印输出的值为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">generic_x86:/ <span class="comment"># cat /sys/module/lowmemorykiller/parameters/minfree                                                                                                                                        </span></span><br><span class="line">18432,23040,27648,32256,36864,46080</span><br><span class="line">generic_x86:/ <span class="comment"># cat /sys/module/lowmemorykiller/parameters/adj                                                                                                                                            </span></span><br><span class="line">0,100,200,300,900,906</span><br></pre></td></tr></table></figure>
<p>内存阀值在不同手机上不一样，一旦低于该值，Android便会杀死对应优先级的进程。<strong>例如上述手机中，当可用内存小于72MB（18432）时，就杀死前台进程；当可用内存小于180MB（46080）时，则杀死空进程。即跟照上述打印顺序依次杀死为<code>前台进程 -&gt; 可见进程 -&gt; 服务进程 -&gt; 后台进程 -&gt; Content Provider -&gt; 空进程</code>。</strong></p>
<blockquote>
<p>阀值单位为page，即4kb。</p>
</blockquote>
<p><strong>Android 手机中进程被杀死可能有如下情况：</strong></p>
<p><img src="killevent.jpg" alt></p>
<p>综上，可以得出减少进程被杀死概率无非就是想办法提高进程优先级，减少进程在内存不足等情况下被杀死的概率。</p>
<h1 id="提升进程优先级的方案"><a href="#提升进程优先级的方案" class="headerlink" title="提升进程优先级的方案"></a>提升进程优先级的方案</h1><h2 id="利用-Activity-提升权限"><a href="#利用-Activity-提升权限" class="headerlink" title="利用 Activity 提升权限"></a>利用 Activity 提升权限</h2><p>通过监控手机锁屏，在屏幕锁屏时启动1个像素的Activity，在用户解锁时将Activity销毁掉。</p>
<p>进程的优先级在屏幕锁屏时间由4提升为最高优先级0。</p>
<p>主要解决第三方应用及系统管理工具在检测到锁屏事件后一段时间（一般为5分钟以内）内会杀死后台进程，已达到省电的目的问题。<strong>但是在Android P之后后台都作了限制后该方案无效。测试7.0前的版本稳定。但是不建议使用。没有销毁掉1像素Activity时候会产生严重的体验问题。</strong></p>
<h3 id="具体方案实现"><a href="#具体方案实现" class="headerlink" title="具体方案实现"></a>具体方案实现</h3><p>自定义Activity，并且设置Activity大小为1像素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglePixelActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = SinglePixelActivity<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        Window window = getWindow();</span><br><span class="line">        window.setGravity(Gravity.LEFT | Gravity.TOP);</span><br><span class="line">        WindowManager.LayoutParams layoutParams = window.getAttributes();</span><br><span class="line">        layoutParams.x = <span class="number">0</span>;</span><br><span class="line">        layoutParams.y = <span class="number">0</span>;</span><br><span class="line">        layoutParams.width = <span class="number">1</span>;</span><br><span class="line">        layoutParams.height = <span class="number">1</span>;</span><br><span class="line">        window.setAttributes(layoutParams);</span><br><span class="line">        <span class="comment">//setting</span></span><br><span class="line">        KeepManager.getInstance().setSinglePixelActivity(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 作一些唤醒服务动作</span></span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其次，从 AndroidManifest 中通过如下属性，排除 Activity 在 RecentTask 中的显示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">".onepixel.SinglePixelActivity"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">android:configChanges</span>=<span class="string">"keyboardHidden|orientation|screenSize|navigation|keyboard"</span></span></span><br><span class="line"><span class="tag">					 <span class="attr">android:excludeFromRecents</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:exported</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:finishOnTaskLaunch</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:launchMode</span>=<span class="string">"singleInstance"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:theme</span>=<span class="string">"@style/SinglePixelActivityStyle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>讲解一下：</strong></p>
<ul>
<li><strong>android:launchMode属性：</strong>用于指定activity的启动模式，总共分为四种，即：<ul>
<li><strong>standar模式</strong>，每次启动activity都会创建其实例，并加入到任务栈的栈顶；</li>
<li><strong>singleTop模式</strong>，每次启动activity如果栈顶时该activity则无需创建，其余情况都要创建该activity的实例；</li>
<li><strong>singleTask模式</strong>，如果被启动的activity的实例存在栈中，则不需要创建，只需要把此activity加入到栈顶，并把该activity以上的activity实例全部pop；</li>
<li><strong>singleInstance模式</strong>：将创建的activity实例放入单独的栈中，该栈只能存储这个实例，且是作为共享实例存在。</li>
</ul>
</li>
<li><strong>android:configChanges属性：</strong>用于捕获手机状态的改变，即当手机状态(如切换横竖屏、屏幕大小)改变时会保存当前活动状态重启Activity，由于SinglePixelActivity肩负着保活的特殊使命，这里使用<strong>android:configChanges</strong>属性：防止Activity重启，它只是调用了<strong>onConfigurationChanged(Configuration newConfig)</strong>来通知手机状态的改变；</li>
<li><strong>android:excludeFromRecents属性：</strong>用于控制SinglePixelActivity不在最近任务列表中显示；</li>
<li><strong>android:finishOnTaskLaunch属性：</strong>用于标记当用户再起启动应用(TASK)时是否关闭已经存在的Activity的实例，false表示不关闭；</li>
<li><strong>android:theme属性：</strong>用于指定Activity显示主题，这里我们自定义主题SingleActivityStyle。</li>
</ul>
</blockquote>
<p>设置Activity样式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对1像素Activity进行特殊处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SinglePixelActivityStyle"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFrame"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsFloating"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowContentOverlay"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:backgroundDimEnabled"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowAnimationStyle"</span>&gt;</span>@null<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowDisablePreview"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoDisplay"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>自定义广播接收者。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        String action = intent.getAction();</span><br><span class="line">      	<span class="comment">// Activity 启动与销毁时机的控制：</span></span><br><span class="line">        <span class="keyword">if</span> (Intent.ACTION_SCREEN_OFF.equals(action)) &#123;</span><br><span class="line">            KeepManager.getInstance().startSinglePixelActivity(context);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Intent.ACTION_SCREEN_ON.equals(action) || Intent.ACTION_USER_PRESENT.equals(action)) &#123;</span><br><span class="line">            KeepManager.getInstance().finishSinglePixelActivity();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>管理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = ScreenManager<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ScreenManager mInstance = <span class="keyword">new</span> ScreenManager();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScreenBroadcastReceiver mKeepBroadcastReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;Activity&gt; mActivity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScreenManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerKeepReceiver</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mKeepBroadcastReceiver = <span class="keyword">new</span> ScreenBroadcastReceiver();</span><br><span class="line">        IntentFilter filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        filter.addAction(Intent.ACTION_SCREEN_OFF);</span><br><span class="line">        filter.addAction(Intent.ACTION_SCREEN_ON);</span><br><span class="line">        context.registerReceiver(mKeepBroadcastReceiver, filter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterKeepReceiver</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mKeepBroadcastReceiver != <span class="keyword">null</span>) &#123;</span><br><span class="line">            context.unregisterReceiver(mKeepBroadcastReceiver);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持有SinglePixelActivity的弱引用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSinglePixelActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        mActivity = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动SinglePixelActivity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startSinglePixelActivity</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(context, SinglePixelActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束SinglePixelActivity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishSinglePixelActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Activity activity = mActivity.get();</span><br><span class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                activity.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在需要使用的地方使用，如MainActivity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 1像素保活</span></span><br><span class="line">        activeSinglePixelActivity();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        ScreenManager.getInstance().unregisterKeepReceiver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activeSinglePixelActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ScreenManager.getInstance().registerKeepReceiver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="利用前台-Service-提升权限"><a href="#利用前台-Service-提升权限" class="headerlink" title="利用前台 Service 提升权限"></a>利用前台 Service 提升权限</h2><p>Android 中 Service 的优先级为4，通过 setForeground 接口可以将后台 Service 设置为前台 Service，使进程的优先级由4提升为2，从而使进程的优先级仅仅低于用户当前正在交互的进程，与可见进程优先级一致，使进程被杀死的概率大大降低。</p>
<p>从 Android2.3 开始调用 setForeground 将后台 Service 设置为前台 Service 时，必须在系统的通知栏发送一条通知，也就是前台 Service 与一条可见的通知时绑定在一起的。</p>
<p>对于不需要常驻通知栏的应用来说，该方案虽好，但却是用户感知的，无法直接使用。</p>
<p>对于 API level &lt; 18 ：调用startForeground(ID， new Notification())，发送空的Notification ，图标则不会显示。对于 API level &gt;= 18：在需要提优先级的service A启动一个InnerService，两个服务同时startForeground，且绑定同样的 ID。Stop 掉InnerService ，这样通知栏图标即被移除。这方案实际利用了Android前台service的漏洞。</p>
<p><strong>该方案适用范围：7.1.1系统以下</strong>，8.0后的系统通知栏API的变更以及前台服务的变更导致通知栏常驻，造成用户感知。</p>
<h3 id="具体方案实现-1"><a href="#具体方案实现-1" class="headerlink" title="具体方案实现"></a>具体方案实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = ProcessService<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PROCESS_SERVICE_ID = -<span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="comment">// API &lt; 18 ，此方法能有效隐藏Notification上的图标</span></span><br><span class="line">            startForeground(PROCESS_SERVICE_ID, <span class="keyword">new</span> Notification());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Intent innerIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ProcessInnerService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            startService(innerIntent);</span><br><span class="line">            startForeground(PROCESS_SERVICE_ID, <span class="keyword">new</span> Notification());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> START_STICKY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给 API &gt;= 18 的平台上用的保活手段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessInnerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">            startForeground(PROCESS_SERVICE_ID, <span class="keyword">new</span> Notification());</span><br><span class="line">            stopSelf();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="进程死后拉活的方案"><a href="#进程死后拉活的方案" class="headerlink" title="进程死后拉活的方案"></a>进程死后拉活的方案</h1><h2 id="利用系统广播拉活"><a href="#利用系统广播拉活" class="headerlink" title="利用系统广播拉活"></a>利用系统广播拉活</h2><p>在发生特定系统事件时，系统会发出响应的广播，通过在 AndroidManifest 中“静态”注册对应的广播监听器，即可在发生响应事件时拉活。</p>
<p>常用的用于拉活的广播事件包括：</p>
<p><img src="staticbroadcast.webp" alt></p>
<p>适用于全部Android平台。但存在如下几个缺点：</p>
<p>1） 广播接收器被管理软件、系统软件通过“自启管理”等功能禁用的场景无法接收到广播，从而无法自启。</p>
<p>2） 系统广播事件不可控，只能保证发生事件时拉活进程，但无法保证进程挂掉后立即拉活。</p>
<blockquote>
<p>Google已经开始意识到这些问题，所以在最新的Android N取消了 ACTION_NEW_PICTURE（拍照），ACTION_NEW_VIDEO（拍视频），CONNECTIVITY_ACTION（网络切换）等三种广播，无疑给了很多app沉重的打击。</p>
</blockquote>
<p>因此，该方案主要作为备用手段。</p>
<h2 id="利用第三方应用广播拉活"><a href="#利用第三方应用广播拉活" class="headerlink" title="利用第三方应用广播拉活"></a>利用第三方应用广播拉活</h2><p><strong>利用不同的app进程使用广播来进行相互唤醒。举个3个比较常见的场景：</strong></p>
<ul>
<li>场景1：接入第三方SDK也会唤醒相应的app进程，如微信sdk会唤醒微信，支付宝sdk会唤醒支付宝。由此发散开去，就会直接触发了下面的 场景3；</li>
<li>场景2：假如你手机里装了支付宝、淘宝、天猫、UC等阿里系的app，那么你打开任意一个阿里系的app后，有可能就顺便把其他阿里系的app给唤醒了。（只是拿阿里打个比方，其实BAT系都差不多）。</li>
</ul>
<p>也可以通过反编译第三方 Top 应用，如：手机QQ、微信、支付宝、UC浏览器等，以及友盟、信鸽、个推等 SDK，找出它们外发的广播，在应用中进行监听，这样当这些应用发出广播时，就会将我们的应用拉活。</p>
<p>该方案的有效程度除与系统广播一样的因素外，主要受如下因素限制：</p>
<p>1） 反编译分析过的第三方应用的多少</p>
<p>2） 第三方应用的广播属于应用私有，当前版本中有效的广播，在后续版本随时就可能被移除或被改为不外发。</p>
<p>这些因素都影响了拉活的效果。</p>
<h2 id="利用系统Service机制拉活"><a href="#利用系统Service机制拉活" class="headerlink" title="利用系统Service机制拉活"></a>利用系统Service机制拉活</h2><p>将 Service 设置为 START_STICKY，利用系统机制在 Service 挂掉后自动拉活：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> START_STICKY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是在以下两种情况无法拉活：</p>
<ol>
<li>Service 第一次被异常杀死后会在5秒内重启，第二次被杀死会在10秒内重启，第三次会在20秒内重启，一旦在短时间内 Service 被杀死达到5次，则系统不再拉起。</li>
<li>进程被取得 Root 权限的管理工具或系统工具通过 forestop 停止掉，无法重启。</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://mp.weixin.qq.com/s/OXiFQNTyCHpqSP6B9HOiHw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/OXiFQNTyCHpqSP6B9HOiHw</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>进程保活</tag>
      </tags>
  </entry>
  <entry>
    <title>重学Android之Handler</title>
    <url>/2020/02/02/%E9%87%8D%E5%AD%A6Android%E4%B9%8BHandler/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>Handler</code> 是 <code>Android</code> 开发过程中非常非常常见的东西。它通常被我们用来做主线程与子线程之间的通信工具，而 Handler 作为 Android 中消息机制的重要一员也确实给我们的开发带来了极大的便利。</p>
<a id="more"></a>
<h1 id="重识Handler"><a href="#重识Handler" class="headerlink" title="重识Handler"></a>重识Handler</h1><p>我们可以使用 Handler <strong>发送并处理</strong>与一个线程关联的 Message 和 Runnable 。（注意：<strong>Runnable 会被封装进一个 Message，所以它本质上还是一个 Message</strong> ）</p>
<p>每个 Handler 都会跟一个线程绑定，并与该线程的 MessageQueue 关联在一起，从而实现消息的管理以及线程间通信。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android.os.Handler handler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="keyword">final</span> Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里接受并处理消息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line">handler.sendMessage(message);</span><br><span class="line">handler.post(runnable);</span><br></pre></td></tr></table></figure>
<p>实例化一个 Handler 重写 <code>handleMessage</code> 方法 ，然后在需要的时候调用它的 <code>send</code> 以及 <code>post</code> <strong>系列方法</strong>就可以了，非常简单易用，并且支持延时消息。</p>
<p><strong>一些常用的方法如下</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sendMessage(Message msg)</span><br><span class="line">sendMessageDelayed(Message msg, <span class="keyword">long</span> uptimeMillis)</span><br><span class="line">post(Runnable r)</span><br><span class="line">postDelayed(Runnable r, <span class="keyword">long</span> uptimeMillis)</span><br><span class="line">sendMessageAtTime(Message msg,<span class="keyword">long</span> when)</span><br><span class="line">  </span><br><span class="line">sendEmptyMessage(<span class="keyword">int</span> what)</span><br><span class="line">sendEmptyMessageDelayed(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span><br><span class="line">sendEmptyMessageAtTime(<span class="keyword">int</span> what, <span class="keyword">long</span> when)</span><br></pre></td></tr></table></figure>
<h1 id="Looper、Handler、MessageQueue与Message的关系与相关概念"><a href="#Looper、Handler、MessageQueue与Message的关系与相关概念" class="headerlink" title="Looper、Handler、MessageQueue与Message的关系与相关概念"></a>Looper、Handler、MessageQueue与Message的关系与相关概念</h1><h2 id="Android消息处理机制"><a href="#Android消息处理机制" class="headerlink" title="Android消息处理机制"></a>Android消息处理机制</h2><p>什么是Android消息处理机制？</p>
<p><strong>“消息”</strong>是windows运行机制中一个基本而又重要的概念。<strong>消息</strong>是一个<strong>报告事件发生的通知</strong>，<strong>消息驱动</strong>是围绕消息的产生与处理展开的，并依靠<strong>消息循环机制</strong>来实现（百度百科）。与Windows系统一样，Android也是<strong>消息驱动型</strong>的系统。引用一下消息驱动机制的四要素：</p>
<ul>
<li><p>接收消息的“消息队列”</p>
</li>
<li><p>阻塞式地从消息队列中接收消息并进行处理的“线程”</p>
</li>
<li><p>可发送的“消息的格式”</p>
</li>
<li><p>“消息发送函数”</p>
</li>
</ul>
<p>与之对应，Android系统中对应实现了：</p>
<ul>
<li>接收消息的“消息队列” ——　<strong>MessageQueue</strong></li>
<li>阻塞式地从消息队列中接收消息并进行处理的“线程” ——　<strong>Thread+Looper</strong></li>
<li>可发送的“消息的格式” ——　<strong>Message</strong></li>
<li>“消息发送函数”——　<strong>Handler的post()和sendMessage()</strong></li>
</ul>
<p>Android有大量的消息驱动方式来进行交互，比如Android的四大组件——<strong>Activity, Service, Broadcast, ContentProvider</strong>的启动过程的交互，都离不开消息机制。</p>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>Handler是Android消息机制的上层接口。<strong>Handler并不是专门用来更新UI的，只是开发者常常用它来更新UI</strong>。Handler的主要用于<strong>同一个进程间的线程通信</strong>，Handler用于更新UI的时候是<strong>“子线程与主线程通信”；当然，Handler也可以用于子线程之间通信。</strong></p>
<p>Handler的消息机制主要是就指“Handler的运行机制”，Handler的运行机制时需要底层的<strong>MessageQueue和Looper</strong>支持的。</p>
<h2 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h2><p>MessageQueue翻译过来是”消息队列”的意思，实际上它内部的数据结构不是队列，而是<strong>单向链表</strong>；MessageQueue中储存了大量的<strong>消息</strong>，由于<strong>一个线程同一时间只能处理一条消息，所以我们建了一个链表，将我们需要处理的消息按顺序储存起来，然后一项一项的交给需要的线程处理</strong>，这就是MessageQueue存在的价值。</p>
<h2 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h2><p>Looper和MessageQueue的消息就像水泵和井(里边装的是水)的关系一样，我们有了消息(水)，但是为了把水从井中抽取出来(循环起来)，我们得有一个水泵作为<strong>动力</strong>，这个动力就是Looper。</p>
<p>如果我们在一个线程中调用<code>Looper.prepare()...Looper.loop()</code>，那么你的线程就成功升级为了一个<strong>Looper线程</strong>，这意味着<strong>你的线程有了一个消息泵(Looper)和一个消息队列(MessageQueue),此时你就可以调用Handler来进行线程间的通信了。</strong></p>
<p>我们应用的UI线程也就是主线程，在应用启动的时候，系统会自动初始化一个Looper，也就是说，我们的UI线程默认是Looper线程。这也就是为什么主线程中直接调用Handler没什么事，但是再子线程中创建Handler需要手动调用<code>Looper.prepare()...Looper.loop()</code>的和原因。</p>
<h2 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h2><p>Message也就是消息，井中的水。一个Message包括了消息类型(what),消息内容(arg1,arg2),发送它的Handler(target),Runnable回调接口等：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> what;        <span class="comment">//数据类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> arg1;        <span class="comment">//简单的整数值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> arg2;        <span class="comment">//简单的整数值可以直接发送，是一种替代setData（Bundle）的低成本方案，更加省资源</span></span><br><span class="line"><span class="keyword">public</span> Object obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*package*/</span> <span class="keyword">int</span> flags;</span><br><span class="line"><span class="comment">/*package*/</span> <span class="keyword">long</span> when;          <span class="comment">//Handler发送一个消息之后，返回此消息的目标交付时间（以毫秒为单位）。</span></span><br><span class="line"><span class="comment">/*package*/</span> Bundle data;        <span class="comment">//Bundle可以携带更复杂的数据类型</span></span><br><span class="line"><span class="comment">/*package*/</span> Handler target;     <span class="comment">//哪个Handler发送的消息</span></span><br><span class="line"><span class="comment">/*package*/</span> Runnable callback;  <span class="comment">//回调方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以看到，Message带了一个指向一下个节点的链，也就是说，MessageQueue内部维护的实际上是一个链表</span></span><br><span class="line"><span class="comment">/*package*/</span> Message next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object sPoolSync = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Message sPool;       <span class="comment">//消息池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sPoolSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_POOL_SIZE = <span class="number">50</span>;    <span class="comment">//消息池的最大容量</span></span><br></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Handler 的背后有着 Looper 以及 MessageQueue 的协助，三者通力合作，分工明确。</p>
<ul>
<li><strong>Message</strong>：消息分为硬件产生的消息(如按钮、触摸)和软件生成的消息；</li>
<li><strong>MessageQueue</strong>：消息队列的主要功能向消息池投递消息(<code>MessageQueue.enqueueMessage</code>)和取走消息池的消息(<code>MessageQueue.next</code>)；</li>
<li><strong>Handler</strong>：消息辅助类，主要功能向消息池发送各种消息事件(<code>Handler.sendMessage</code>)和处理相应消息事件(<code>Handler.handleMessage</code>)；</li>
<li><strong>Looper</strong>：不断循环执行(<code>Looper.loop</code>)，按分发机制将消息分发给目标处理者。</li>
</ul>
<p>一张图来了解一下它们之间的关系：</p>
<p><img src="messagequene.png" alt></p>
<h1 id="Handler原理解析（Java层）"><a href="#Handler原理解析（Java层）" class="headerlink" title="Handler原理解析（Java层）"></a>Handler原理解析（Java层）</h1><p>来分析原理前，先明确一下问题：</p>
<ol>
<li><strong>Handler 是如何与线程关联的？</strong></li>
<li><strong>Handler 发出去的消息是谁管理的？</strong></li>
<li><strong>消息又是怎么回到 handleMessage() 方法的？</strong></li>
<li><strong>线程的切换是怎么回事？</strong></li>
</ol>
<p>带着问题去寻找答案。</p>
<h2 id="Handler与Looper的关联"><a href="#Handler与Looper的关联" class="headerlink" title="Handler与Looper的关联"></a>Handler与Looper的关联</h2><p>实例化 Handler 的时候 Handler 会去检查当前线程的 Looper 是否存在，如果不存在则会报异常，也就是说<strong>在创建 Handler 之前一定需要先创建 Looper</strong> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(@Nullable Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//检查当前的线程是否有 Looper</span></span><br><span class="line">	mLooper = Looper.myLooper();</span><br><span class="line">	<span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread "</span> + Thread.currentThread()</span><br><span class="line">                        + <span class="string">" that has not called Looper.prepare()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">//Looper 持有一个 MessageQueue</span></span><br><span class="line">	mQueue = mLooper.mQueue;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个异常可能有的不熟悉，因为平时直接使用感受不到这个异常是因为主线程已经为我们创建好了 Looper</p>
</blockquote>
<p>一个完整的 Handler 使用例子其实是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Handler mHandler;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// process incoming messages here</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Looper.prepare()</strong></p>
<p>对于无参的情况，默认调用<code>prepare(true)</code>，表示的是这个Looper允许退出，而对于false的情况则表示当前Looper不允许退出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的<code>sThreadLocal</code>是ThreadLocal类型，下面，先说说ThreadLocal。</p>
<p><strong>ThreadLocal</strong>： 线程本地存储区（Thread Local Storage，简称为TLS），每个线程都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的TLS区域。</p>
<p>Looper类中其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br></pre></td></tr></table></figure>
<p>可见<code>sThreadLocal</code>的get()和set()操作的类型都是<code>Looper</code>类型。</p>
<blockquote>
<p>另外，与prepare()相近功能的，还有一个<code>prepareMainLooper()</code>方法，该方法主要在ActivityThread类中使用。</p>
</blockquote>
<p>Looper 提供了 <code>Looper.prepare()</code> 方法来创建 Looper ，并且会<strong>借助 ThreadLocal 来实现与当前线程的绑定</strong>功能。<strong>Looper.loop() 则会开始不断尝试从 MessageQueue 中获取 Message , 并分发给对应的 Handler</strong></p>
<p><strong>也就是说 Handler 跟线程的关联是靠 Looper 来实现的。</strong></p>
<h2 id="Message-的发送"><a href="#Message-的发送" class="headerlink" title="Message 的发送"></a>Message 的发送</h2><p>发送消息调用链：</p>
<p><img src="java_sendmessage.png" alt></p>
<p>不管我们调用什么方法，最终都会走到 <code>MessageQueue.enqueueMessage(Message,long)</code> 方法。</p>
<p>例如<code>sendEmptyMessage</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessage</span><span class="params">(<span class="keyword">int</span> what)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> sendEmptyMessageDelayed(what, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">	Message msg = Message.obtain();</span><br><span class="line">	msg.what = what;</span><br><span class="line">	<span class="keyword">return</span> sendMessageDelayed(msg, delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageDelayed</span><span class="params">(@NonNull Message msg, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		delayMillis = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(@NonNull Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">	MessageQueue queue = mQueue;</span><br><span class="line">	<span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">		RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">   	<span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">		Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Handler.sendEmptyMessage()</code>等系列方法最终调用<code>MessageQueue.enqueueMessage(msg, uptimeMillis)</code>，将消息添加到消息队列中，其中uptimeMillis为系统当前的运行时间，不包括休眠时间。</p>
<p><strong>enqueueMessage</strong></p>
<p>添加一条消息到消息队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 每一个普通Message必须有一个target</span></span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mQuitting) &#123;  <span class="comment">//正在退出时，回收msg，加入到消息池</span></span><br><span class="line">            msg.recycle();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        msg.markInUse();</span><br><span class="line">        msg.when = when;</span><br><span class="line">        Message p = mMessages;</span><br><span class="line">        <span class="keyword">boolean</span> needWake;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">            <span class="comment">//p为null(代表MessageQueue没有消息） 或者msg的触发时间是队列中最早的， 则进入该该分支</span></span><br><span class="line">            msg.next = p;</span><br><span class="line">            mMessages = msg;</span><br><span class="line">            needWake = mBlocked; <span class="comment">//当阻塞时需要唤醒</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//将消息按时间顺序插入到MessageQueue。一般地，不需要唤醒事件队列，除非</span></span><br><span class="line">            <span class="comment">//消息队头存在barrier，并且同时Message是队列中最早的异步消息。</span></span><br><span class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">            Message prev;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                prev = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                    needWake = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.next = p;</span><br><span class="line">            prev.next = msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消息没有退出，我们认为此时mPtr != 0</span></span><br><span class="line">        <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">            nativeWake(mPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>MessageQueue</code>是按照Message触发时间的先后顺序排列的，队头的消息是将要最早触发的消息。当有消息需要加入消息队列时，会从队列头开始遍历，直到找到消息应该插入的合适位置，以保证所有消息的时间顺序。</p>
<h2 id="Message的分发"><a href="#Message的分发" class="headerlink" title="Message的分发"></a>Message的分发</h2><p><code>Looper.loop()</code>方法来进行消息的分发：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Looper</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper(); <span class="comment">//获取TLS存储的Looper对象</span></span><br><span class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue; <span class="comment">//获取Looper对象中的消息队列</span></span><br><span class="line">  </span><br><span class="line">  	Binder.clearCallingIdentity();</span><br><span class="line">    <span class="comment">//确保在权限检查时基于本地进程，而不是调用进程。</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">       <span class="comment">// 不断从 MessageQueue 获取 消息</span></span><br><span class="line">        Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="comment">//退出 Looper </span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            msg.target.dispatchMessage(msg);</span><br><span class="line">            end = (slowDispatchThresholdMs == <span class="number">0</span>) ? <span class="number">0</span> : SystemClock.uptimeMillis();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      	<span class="comment">//恢复调用者信息</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class="line">				<span class="comment">//回收 message</span></span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>loop()进入循环模式，不断重复下面的操作，直到没有消息时退出循环</p>
<ul>
<li>读取MessageQueue的下一条Message；</li>
<li>把Message分发给相应的target；</li>
<li>再把分发后的Message回收到消息池，以便重复利用。</li>
</ul>
<p>这是这个消息处理的核心部分。另外，上面代码中可以看到有logging方法，这是用于debug的，默认情况下<code>logging == null</code>，通过设置setMessageLogging()用来开启debug工作。</p>
<p><code>loop()</code> 里调用了 <code>MessageQueue.next()</code> :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123; <span class="comment">//当消息循环已经退出，则直接返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// 循环迭代的首次为-1</span></span><br><span class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">            Binder.flushPendingCommands();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//阻塞操作，当等待nextPollTimeoutMillis时长，或者消息队列被唤醒，都会返回</span></span><br><span class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">            Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">            Message msg = mMessages;</span><br><span class="line">            <span class="comment">//当消息的Handler为空时，则查询异步消息</span></span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//当查询到异步消息，则立刻退出循环</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    prevMsg = msg;</span><br><span class="line">                    msg = msg.next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                    <span class="comment">//当异步消息触发时间大于当前时间，则设置下一次轮询的超时时长</span></span><br><span class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 获取一条消息，并返回</span></span><br><span class="line">                    mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        prevMsg.next = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mMessages = msg.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    msg.next = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//设置消息的使用状态，即flags |= FLAG_IN_USE</span></span><br><span class="line">                    msg.markInUse();</span><br><span class="line">                    <span class="keyword">return</span> msg;   <span class="comment">//成功地获取MessageQueue中的下一条即将要执行的消息</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//没有消息</span></span><br><span class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//消息正在退出，返回null</span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                dispose();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当消息队列为空，或者是消息队列的第一个消息时</span></span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span> &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//没有idle handlers 需要运行，则循环并等待。</span></span><br><span class="line">                mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只有第一次循环时，会运行idle handlers，执行完成后，重置pendingIdleHandlerCount为0.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">            mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">//去掉handler的引用</span></span><br><span class="line">            <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                keep = idler.queueIdle();  <span class="comment">//idle时执行的方法</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    mIdleHandlers.remove(idler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重置idle handler个数为0，以保证不会再次重复运行</span></span><br><span class="line">        pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//当调用一个空闲handler时，一个新message能够被分发，因此无需等待可以直接查询pending message.</span></span><br><span class="line">        nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>nativePollOnce</code>是阻塞操作，其中<code>nextPollTimeoutMillis</code>代表下一个消息到来前，还需要等待的时长；当nextPollTimeoutMillis = -1时，表示消息队列中无消息，会一直等待下去。</p>
<p>当处于空闲时，往往会执行<code>IdleHandler</code>中的方法。当nativePollOnce()返回后，next()从<code>mMessages</code>中提取一个消息。</p>
</blockquote>
<p>并且loop方法调用了 <code>msg.target.dispatchMessage(msg)</code> ，msg.target 就是发送该消息的 Handler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Handler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//msg.callback 是 Runnable ，如果是 post方法则会走这个 if</span></span><br><span class="line">  <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">    handleCallback(msg);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//callback </span></span><br><span class="line">    <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//回调到 Handler 的 handleMessage 方法</span></span><br><span class="line">    handleMessage(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>dispatchMessage() 方法针对 Runnable 的方法做了特殊处理，如果是 ，则会直接执行 <code>Runnable.run()</code> 。</strong></p>
</blockquote>
<p><strong>Looper.loop() 是个死循环，会不断调用 MessageQueue.next() 获取 Message ，并调用 <code>msg.target.dispatchMessage(msg)</code> 回到了 Handler 来分发消息，以此来完成消息的回调</strong>。</p>
<p><img src="yuanli.webp" alt></p>
<h2 id="线程的切换"><a href="#线程的切换" class="headerlink" title="线程的切换"></a>线程的切换</h2><p>先将所涉及的方法调用栈画出来，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.foo()&#123;</span><br><span class="line">	Looper.loop()</span><br><span class="line">	 -&gt; MessageQueue.next()</span><br><span class="line"> 	  -&gt; Message.target.dispatchMessage()</span><br><span class="line"> 	   -&gt; Handler.handleMessage()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>显而易见，Handler.handleMessage() 所在的线程最终由调用 Looper.loop() 的线程所决定。</strong></p>
<p>平时我们用的时候从异步线程发送消息到 Handler，这个 Handler 的 <code>handleMessage()</code> 方法是在主线程调用的，所以消息就从异步线程切换到了主线程。</p>
<h1 id="Handler的正确使用姿势"><a href="#Handler的正确使用姿势" class="headerlink" title="Handler的正确使用姿势"></a>Handler的正确使用姿势</h1><p>Handler很常用，但是也有很多需要注意的。</p>
<h2 id="为什么主线程可以直接使用-Handler，不需要创建-Looper"><a href="#为什么主线程可以直接使用-Handler，不需要创建-Looper" class="headerlink" title="为什么主线程可以直接使用 Handler，不需要创建 Looper"></a>为什么主线程可以直接使用 Handler，不需要创建 Looper</h2><p>前面我们提到了每个Handler 的线程都有一个 Looper ，主线程当然也不例外，但是我们不曾准备过主线程的 Looper 而可以直接使用，这是为何？</p>
<p><strong>注意：通常我们认为 ActivityThread 就是主线程。事实上它并不是一个线程，而是主线程操作的管理者，所以吧，我觉得把 ActivityThread 认为就是主线程无可厚非，另外主线程也可以说成 UI 线程。</strong></p>
<p>在 ActivityThread.main() 方法中有如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//android.app.ActivityThread</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">  //...</span><br><span class="line">  Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">  ActivityThread thread = new ActivityThread();</span><br><span class="line">  thread.attach(false);</span><br><span class="line"></span><br><span class="line">  if (sMainThreadHandler == null) &#123;</span><br><span class="line">    sMainThreadHandler = thread.getHandler();</span><br><span class="line">  &#125;</span><br><span class="line">  //...</span><br><span class="line">  Looper.loop();</span><br><span class="line"></span><br><span class="line">  throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Looper.prepareMainLooper(); 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Initialize the current thread as a looper, marking it as an</span><br><span class="line"> * application&apos;s main looper. The main looper for your application</span><br><span class="line"> * is created by the Android environment, so you should never need</span><br><span class="line"> * to call this function yourself.  See also: &#123;@link #prepare()&#125;</span><br><span class="line"> */</span><br><span class="line">public static void prepareMainLooper() &#123;</span><br><span class="line">    prepare(false);</span><br><span class="line">    synchronized (Looper.class) &#123;</span><br><span class="line">        if (sMainLooper != null) &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;The main Looper has already been prepared.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sMainLooper = myLooper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到<strong>在 ActivityThread 里 调用了 Looper.prepareMainLooper() 方法创建了 主线程的 Looper ,并且调用了 loop() 方法</strong>，所以我们就可以直接使用 Handler 了。</p>
<p><strong>注意：<code>Looper.loop()</code> 是个死循环，后面的代码正常情况不会执行。</strong></p>
<h2 id="主线程的-Looper-不允许退出"><a href="#主线程的-Looper-不允许退出" class="headerlink" title="主线程的 Looper 不允许退出"></a>主线程的 Looper 不允许退出</h2><p>如果你尝试退出 Looper ，你会得到以下错误信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: Main thread not allowed to quit.</span><br><span class="line">  at android.os.MessageQueue.quit(MessageQueue.java:415)</span><br><span class="line">  at android.os.Looper.quit(Looper.java:240)</span><br></pre></td></tr></table></figure>
<p> 其实原因很简单，<strong>主线程不允许退出</strong>，退出就意味 APP 要挂。</p>
<h2 id="为什么Looper-loop方法不会卡死主线程"><a href="#为什么Looper-loop方法不会卡死主线程" class="headerlink" title="为什么Looper.loop方法不会卡死主线程"></a>为什么Looper.loop方法不会卡死主线程</h2><p>参考：<a href="https://www.zhihu.com/question/34652589/answer/90344494" target="_blank" rel="noopener">https://www.zhihu.com/question/34652589/answer/90344494</a></p>
<h2 id="Handler-里藏着的-Callback-能干什么"><a href="#Handler-里藏着的-Callback-能干什么" class="headerlink" title="Handler 里藏着的 Callback 能干什么"></a>Handler 里藏着的 Callback 能干什么</h2><p>在 Handler 的构造方法中有几个 要求传入 Callback ，那它是什么，又能做什么呢？</p>
<p>来看看 <code>Handler.dispatchMessage(msg)</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void dispatchMessage(Message msg) &#123;</span><br><span class="line">  //这里的 callback 是 Runnable</span><br><span class="line">  if (msg.callback != null) &#123;</span><br><span class="line">    handleCallback(msg);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    //如果 callback 处理了该 msg 并且返回 true， 就不会再回调 handleMessage</span><br><span class="line">    if (mCallback != null) &#123;</span><br><span class="line">      if (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleMessage(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到 Handler.Callback 有<strong>优先处理消息的权利</strong> ，当一条消息被 Callback 处理<strong>并拦截（返回 true）</strong>，那么 Handler 的 <code>handleMessage(msg)</code> 方法就不会被调用了；如果 Callback 处理了消息，但是并没有拦截，那么就意味着<strong>一个消息可以同时被 Callback 以及 Handler 处理</strong>。</p>
<p><strong>我们可以利用 Callback 这个拦截机制来拦截 Handler 的消息！</strong></p>
<blockquote>
<p> 场景：Hook <code>ActivityThread.mH</code>， 在 ActivityThread 中有个成员变量 <code>mH</code> ，它是个 Handler，又是个极其重要的类，几乎所有的插件化框架都使用了这个方法。</p>
</blockquote>
<h2 id="创建-Message-实例的方式"><a href="#创建-Message-实例的方式" class="headerlink" title="创建 Message 实例的方式"></a>创建 Message 实例的方式</h2><p>先来看看消息池：</p>
<p>在代码中，可能经常看到recycle()方法，咋一看，可能是在做虚拟机的gc()相关的工作，其实不然，这是用于把消息加入到消息池的作用。这样的好处是，当消息池不为空时，可以直接从消息池中获取Message对象，而不是直接创建，提高效率。</p>
<p>静态变量<code>sPool</code>的数据类型为Message，通过next成员变量，维护一个消息池；静态变量<code>MAX_POOL_SIZE</code>代表消息池的可用大小；消息池的默认大小为50。</p>
<p>消息池常用的操作方法是obtain()和recycle()。</p>
<p><strong>obtain</strong></p>
<p>从消息池中获取消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sPool != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Message m = sPool;</span><br><span class="line">            sPool = m.next;</span><br><span class="line">            m.next = <span class="keyword">null</span>; <span class="comment">//从sPool中取出一个Message对象，并消息链表断开</span></span><br><span class="line">            m.flags = <span class="number">0</span>; <span class="comment">// 清除in-use flag</span></span><br><span class="line">            sPoolSize--; <span class="comment">//消息池的可用大小进行减1操作</span></span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Message(); <span class="comment">// 当消息池为空时，直接创建Message对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>obtain()，从消息池取Message，都是把消息池表头的Message取走，再把表头指向next;</p>
<p><strong>recycle</strong></p>
<p>把不再使用的消息加入消息池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isInUse()) &#123; <span class="comment">//判断消息是否正在使用</span></span><br><span class="line">        <span class="keyword">if</span> (gCheckRecycle) &#123; <span class="comment">//Android 5.0以后的版本默认为true,之前的版本默认为false.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"This message cannot be recycled because it is still in use."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    recycleUnchecked();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于不再使用的消息，加入到消息池</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycleUnchecked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将消息标示位置为IN_USE，并清空消息所有的参数。</span></span><br><span class="line">    flags = FLAG_IN_USE;</span><br><span class="line">    what = <span class="number">0</span>;</span><br><span class="line">    arg1 = <span class="number">0</span>;</span><br><span class="line">    arg2 = <span class="number">0</span>;</span><br><span class="line">    obj = <span class="keyword">null</span>;</span><br><span class="line">    replyTo = <span class="keyword">null</span>;</span><br><span class="line">    sendingUid = -<span class="number">1</span>;</span><br><span class="line">    when = <span class="number">0</span>;</span><br><span class="line">    target = <span class="keyword">null</span>;</span><br><span class="line">    callback = <span class="keyword">null</span>;</span><br><span class="line">    data = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123; <span class="comment">//当消息池没有满时，将Message对象加入消息池</span></span><br><span class="line">            next = sPool;</span><br><span class="line">            sPool = <span class="keyword">this</span>;</span><br><span class="line">            sPoolSize++; <span class="comment">//消息池的可用大小进行加1操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>recycle()，将Message加入到消息池的过程，都是把Message加到链表的表头；</p>
<p><strong>所以由于 Handler 极为常用，所以为了节省开销，Android 给 Message 设计了回收机制，所以我们在使用的时候尽量复用 Message ，减少内存消耗。</strong></p>
<ul>
<li><p>1、通过 Message 的静态方法 <code>Message.obtain();</code>  获取；</p>
</li>
<li><p>2、通过 Handler 的公有方法 <code>handler.obtainMessage();</code> 。</p>
</li>
</ul>
<h2 id="Handler-引起的内存泄露原因以及解决方案"><a href="#Handler-引起的内存泄露原因以及解决方案" class="headerlink" title="Handler 引起的内存泄露原因以及解决方案"></a>Handler 引起的内存泄露原因以及解决方案</h2><p>Handler 允许我们发送<strong>延时消息</strong>，如果在延时期间用户关闭了 Activity，那么该 Activity 会泄露。</p>
<p>这个泄露是因为 Message 会持有 Handler，而又因为 <strong>Java 的特性，内部类会持有外部类</strong>，使得 Activity 会被 Handler 持有，这样最终就导致 Activity 泄露。</p>
<p>解决该问题的最有效的方法是：<strong>将 Handler 定义成静态的内部类，在内部持有 Activity 的弱引用，并及时移除所有消息</strong>。</p>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WeakReference&lt;DemoActivity&gt; ref;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SafeHandler</span><span class="params">(DemoActivity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ref = <span class="keyword">new</span> WeakReference(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="keyword">final</span> Message msg)</span> </span>&#123;</span><br><span class="line">        DemoActivity activity = ref.get();</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            activity.handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> SafeHandler mSafeHandler = <span class="keyword">new</span> SafeHandler(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// .... do somthing</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//移除消息，加一层保障：</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  	mSafeHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">  	<span class="keyword">super</span>.onDestroy();</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：单纯的在 <code>onDestroy</code> 移除消息并不保险，因为 <code>onDestroy</code> 并不一定执行。</strong></p>
</blockquote>
<h2 id="子线程里弹-Toast"><a href="#子线程里弹-Toast" class="headerlink" title="子线程里弹 Toast"></a>子线程里弹 Toast</h2><p>当我们尝试在子线程里直接去弹 Toast 的时候，会 crash ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.RuntimeException: Can&apos;t create handler inside thread that has not called Looper.prepare()</span><br></pre></td></tr></table></figure>
<p><strong>本质上是因为 Toast 的实现依赖于 Handler</strong>，同理的还有 Dialog。</p>
<p>正确使用代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Looper.prepare();</span><br><span class="line">    Toast.makeText(HandlerActivity.<span class="keyword">this</span>, <span class="string">"子线程下测试不会崩溃啦！"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    Looper.loop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<h2 id="巧妙利用-Looper-机制"><a href="#巧妙利用-Looper-机制" class="headerlink" title="巧妙利用 Looper 机制"></a>巧妙利用 Looper 机制</h2><p>我们可以利用 Looper 的机制来帮助我们做一些事情：</p>
<ol>
<li>将 Runnable post 到主线程执行；</li>
<li>利用 Looper 判断当前线程是否是主线程。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MainThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MainThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Handler HANDLER = <span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(@NonNull Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isMainThread()) &#123;</span><br><span class="line">            runnable.run();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            HANDLER.post(runnable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMainThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Looper.myLooper() == Looper.getMainLooper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/f70ee1765a61" target="_blank" rel="noopener">https://www.jianshu.com/p/f70ee1765a61</a></p>
<p><a href="http://gityuan.com/2015/12/26/handler-message-framework/" target="_blank" rel="noopener">http://gityuan.com/2015/12/26/handler-message-framework/</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Handler</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Android Studio——Configuration on demand is not supported by the current version of the Android Gradle</title>
    <url>/2020/01/17/%E8%A7%A3%E5%86%B3Android-Studio%E2%80%94%E2%80%94Configuration-on-demand-is-not-supported-by-the-current-version-of-the-Android-Gradle/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>【错误】<br>Configuration on demand is not supported by the current version of the Android Gradle plugin since you are using Gradle version 4.6 or above. </p>
<p>Suggestion: disable configuration on demand by setting org.gradle.configureondemand=false in your gradle.properties file or use a Gradle version less than 4.6.</p>
<p>【翻译】<br>由于使用你正在使用 Gradle 版本4.6或以上，当前版本的Android的 Gradle 插件不支持按需配置。</p>
<p>建议：通过在你的 gradle.properties 文件中设置 org.gradle.configureondemand=false 禁用按需配置，或者使用一个低于4.6版本的 Gradle。</p>
<a id="more"></a>
<p><strong>解决方案1：降级</strong></p>
<p>打开 <strong>gradle-wrapper.properties</strong> 文件，修改 <strong>distributionUrl</strong> 参数，将其后面修改为低于4.6版本的 Gradle。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip</span><br></pre></td></tr></table></figure>
<p><img src="properties.png" alt></p>
<p><strong>解决方法2：禁用按需配置</strong></p>
<p>1、打开 <strong>gradle.properties</strong> 文件，共有两个：<strong>Global Properties</strong> 和 <strong>Project Properties</strong>，将其中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.gradle.configureondemand=true</span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.gradle.configureondemand=false</span><br></pre></td></tr></table></figure>
<blockquote>
<p>或删除该语句，或注释掉该语句。</p>
</blockquote>
<p>2、或者通过 <strong>Preferences</strong> 菜单，找到 <strong>Build, Execution, Deployment</strong> 里面的 <strong>Compiler</strong>，将右面的 <strong>Configure on demand</strong> 取消勾选。</p>
<p><img src="panel.png" alt></p>
<p><strong>参考链接</strong></p>
<p><a href="https://stackoverflow.com/questions/49990933/configuration-on-demand-is-not-supported-by-the-current-version-of-the-android-g" target="_blank" rel="noopener">https://stackoverflow.com/questions/49990933/configuration-on-demand-is-not-supported-by-the-current-version-of-the-android-g</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 新特性一览</title>
    <url>/2020/01/04/Java-8-%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%80%E8%A7%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java 8 (又称为 jdk 1.8) 是 Java 语言开发的一个主要版本。 Oracle 公司于 2014 年 3 月 18 日发布 Java 8 ，它支持函数式编程，新的 JavaScript 引擎，新的日期 API，新的Stream API 等。</p>
<a id="more"></a>
<h1 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h1><p>Java8 新增了非常多的特性，我们主要讨论以下几个：</p>
<ul>
<li><strong>Lambda 表达式</strong> − Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。</li>
<li><strong>方法引用</strong> − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</li>
<li><strong>默认方法</strong> − 默认方法就是一个在接口里面有了一个实现的方法。</li>
<li><strong>Stream API</strong> −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。</li>
<li><strong>Date Time API</strong> − 加强对日期与时间的处理。</li>
<li><strong>Optional 类</strong> − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。</li>
</ul>
<blockquote>
<p>更多相关请浏览-&gt;<a href="https://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html</a></p>
</blockquote>
<h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p>
<p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p>
<p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>lambda 表达式的语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(parameters) -&gt; expression </span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">(parameters) -&gt;&#123; statements; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值。</li>
<li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号。</li>
<li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号。</li>
<li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</li>
</ul>
<p>来看一下最简单的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambda</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"Lambda实现"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Lambda lambda = <span class="keyword">new</span> Lambda();</span><br><span class="line">        lambda.printFunc(() -&gt; System.out.println(<span class="string">"hello, lambda"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printFunc</span><span class="params">(Functional func)</span> </span>&#123;</span><br><span class="line">        func.accept();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Functional</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">匿名内部类实现</span><br><span class="line">Lambda实现</span><br><span class="line">hello, lambda</span><br></pre></td></tr></table></figure>
<p><strong>更多实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 不需要参数,返回值为 5  </span></span><br><span class="line">() -&gt; <span class="number">5</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 2. 接收一个参数(数字类型),返回其2倍的值  </span></span><br><span class="line">x -&gt; <span class="number">2</span> * x  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 3. 接受2个参数(数字),并返回他们的差值  </span></span><br><span class="line">(x, y) -&gt; x – y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 4. 接收2个int型整数,返回他们的和  </span></span><br><span class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span></span><br><span class="line">(String s) -&gt; System.out.print(s)</span><br></pre></td></tr></table></figure>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>Lambda的语法非常简洁，但并不是可以随便使用的，使用时有几个条件需要特别注意：</p>
<ul>
<li><strong>方法的参数</strong>或者<strong>局部变量类型</strong>必须为<strong>接口</strong>才能使用Lambda</li>
<li>接口中有且仅有一个抽象方法</li>
</ul>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>函数式接口在Java中指的是：<strong>有且仅有一个抽象方法的接口</strong>。</p>
<p>函数式接口，即适用于函数式变成场景的接口，而Java中的函数式编程体现就是Lambda，所以函数式接口就是可以适用于Lambda使用的接口。只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利进行推导。</p>
<p><code>@FunctionalInterface</code>注解</p>
<p>与<code>@Override</code>注解的作用类似，Java 8中专门为函数式接口引入了一个新的注解：<code>@FunctionalInterface</code>。该注解可以用于一个接口的定义上。</p>
<blockquote>
<p>默认方法和静态方法不会破坏函数式接口的定义，因此如下的代码是合法的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FunctionalDefaultMethods</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">defaultMethod</span><span class="params">()</span> </span>&#123;&#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Lambda与匿名内部类对比"><a href="#Lambda与匿名内部类对比" class="headerlink" title="Lambda与匿名内部类对比"></a>Lambda与匿名内部类对比</h2><ul>
<li>所需要的类型不一样：匿名内部类需要的类型可以是类、抽象类、接口。Lambda表达式需要的类型必须是接口。</li>
<li>抽象方法的数量不一样：匿名内部类所需的接口中抽象方法数量随意，Lambda表达式所需的接口有且只能有一个抽象方法。</li>
<li>实现原理不同：匿名内部类是在编译后形成class，Lambda表达式是在程序运行时动态生成class。</li>
</ul>
<h2 id="常用的内置函数式接口"><a href="#常用的内置函数式接口" class="headerlink" title="常用的内置函数式接口"></a>常用的内置函数式接口</h2><p>Lambda表达式的前提是需要有函数式接口。而Lambda使用时不需要关心接口名、抽象方法名。只关心抽象方法的参数列表和返回值类型。因此为了让我们使用Lambda方便，JDK提供了大量的函数式接口。都在<code>java.util.function</code>包下可以查看。</p>
<p>常用的几个接口：</p>
<h3 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h3><p>该接口意味着“供给”，对应的Lambda表达式需要对外提供一个符合泛型类型的对象数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p>该接口与Supplier正好相反，它不是生产一个数据，而是消费一个数据，其数据类型由泛型参数决定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>该接口用来提供一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件，有参数有返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>有时候需要对某种类型数据进行判断，从而得到一个布尔值的接口，这时可以使用该接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="接口默认方法"><a href="#接口默认方法" class="headerlink" title="接口默认方法"></a>接口默认方法</h1><p>Java 8 新增了接口的默认方法。</p>
<p>简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。</p>
<p>我们只需在方法名前面加个 default 关键字即可实现默认方法。</p>
<blockquote>
<p><strong>为什么要有这个特性？</strong></p>
<p>首先，之前的接口是个双刃剑，好处是面向抽象而不是面向具体编程，缺陷是，当需要修改接口时候，需要修改全部实现该接口的类，目前的 java 8 之前的集合框架没有 foreach 方法，通常能想到的解决办法是在JDK里给相关的接口添加新的方法及实现。然而，对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现。所以引进的默认方法。他们的目的是为了解决接口的修改与现有的实现不兼容的问题。</p>
</blockquote>
<h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><h3 id="默认方法语法："><a href="#默认方法语法：" class="headerlink" title="默认方法语法："></a>默认方法语法：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"我是一辆车!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多个默认方法"><a href="#多个默认方法" class="headerlink" title="多个默认方法"></a>多个默认方法</h3><p>一个接口有默认方法，考虑这样的情况，一个类实现了多个接口，且这些接口有相同的默认方法，以下实例说明了这种情况的解决方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"我是一辆车!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FourWheeler</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"我是一辆四轮车!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="静态默认方法"><a href="#静态默认方法" class="headerlink" title="静态默认方法"></a>静态默认方法</h2><p>Java 8 的另一个特性是接口可以声明（并且可以提供实现）静态方法。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"我是一辆车!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">blowHorn</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"按喇叭!!!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>尽管默认方法有这么多好处，但在实际开发中应该谨慎使用：在复杂的继承体系中，默认方法可能引起歧义和编译错误。</p>
</blockquote>
<h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>方法引用使得开发者可以直接引用现存的方法、Java类的构造方法或者实例对象。方法引用和Lambda表达式配合使用，使得java类的构造方法看起来紧凑而简洁，没有很多复杂的模板代码。</p>
<p>方法引用使用一对冒号 <strong>::</strong> </p>
<ul>
<li><strong>构造器引用：</strong>它的语法是<code>Class::new</code>，或者更一般的<code>Class&lt; T &gt;::new</code>实例如下：</li>
<li><strong>静态方法引用：</strong>它的语法是<code>Class::static_method</code>，实例如下：</li>
<li><strong>特定类的任意对象的方法引用：</strong>它的语法是<code>Class::method</code>实例如下：</li>
<li><strong>特定对象的方法引用：</strong>它的语法是<code>instance::method</code>实例如下：</li>
</ul>
<p>我们来用一个案例来理解一下为什么需要方法引用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : arr) &#123;</span><br><span class="line">            sum += n;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">// 直接重复拷贝代码</span></span><br><span class="line">        printMax((arr) -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> n : arr) &#123;</span><br><span class="line">                sum += n;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;);</span><br><span class="line">				<span class="comment">// 在Lambda中调用另一个函数</span></span><br><span class="line">        printMax((arr) -&gt; &#123;</span><br><span class="line">            getMax(arr);</span><br><span class="line">        &#125;);</span><br><span class="line">				<span class="comment">// 直接使用方法引用</span></span><br><span class="line">        printMax(MethodRef::getMax);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(Consumer&lt;<span class="keyword">int</span>[]&gt; consumer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line">        consumer.accept(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在main函数中的使用的三个对比，这就是减少了代码的冗余。</p>
<h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><p>Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。</p>
<p>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。</p>
<p>Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p>
<p>这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p>
<p>元素流在管道中经过中间操作（intermediate operation）的处理，最后由最终操作(terminal operation)得到前面处理的结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br><span class="line">| stream of elements +-----&gt; |filter+-&gt; |sorted+-&gt; |map+-&gt; |collect|</span><br><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br></pre></td></tr></table></figure>
<p>以上的流程转换为 Java 代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; transactionsIds = </span><br><span class="line">widgets.stream()</span><br><span class="line">             .filter(b -&gt; b.getColor() == RED)</span><br><span class="line">             .sorted((x,y) -&gt; x.getWeight() - y.getWeight())</span><br><span class="line">             .mapToInt(Widget::getWeight)</span><br><span class="line">             .sum();</span><br></pre></td></tr></table></figure>
<h2 id="什么是-Stream"><a href="#什么是-Stream" class="headerlink" title="什么是 Stream"></a>什么是 Stream</h2><p>Stream（流）是一个来自数据源的元素队列并支持聚合操作</p>
<ul>
<li>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。</li>
<li><strong>数据源</strong> 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。</li>
<li><strong>聚合操作</strong> 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。</li>
</ul>
<p>和以前的Collection操作不同， Stream操作还有两个基础的特征：</p>
<ul>
<li><strong>Pipelining</strong>: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。</li>
<li><strong>内部迭代</strong>： 以前对集合遍历都是通过Iterator或者For-Each的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式， 通过访问者模式(Visitor)实现。</li>
</ul>
<h2 id="生成流"><a href="#生成流" class="headerlink" title="生成流"></a>生成流</h2><p>在 Java 8 中, 集合接口有两个方法来生成流：</p>
<ul>
<li><strong>stream()</strong> − 为集合创建串行流。</li>
<li><strong>parallelStream()</strong> − 为集合创建并行流。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">"abc"</span>, <span class="string">""</span>, <span class="string">"bc"</span>, <span class="string">"efg"</span>, <span class="string">"abcd"</span>,<span class="string">""</span>, <span class="string">"jkl"</span>);</span><br><span class="line">List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>Stream 提供了新的方法 ‘forEach’ 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line">random.ints().limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 获取对应的平方数</span></span><br><span class="line">List&lt;Integer&gt; squaresList = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt;strings = Arrays.asList(<span class="string">"abc"</span>, <span class="string">""</span>, <span class="string">"bc"</span>, <span class="string">"efg"</span>, <span class="string">"abcd"</span>,<span class="string">""</span>, <span class="string">"jkl"</span>);</span><br><span class="line"><span class="comment">// 获取空字符串的数量</span></span><br><span class="line"><span class="keyword">long</span> count = strings.stream().filter(string -&gt; string.isEmpty()).count();</span><br></pre></td></tr></table></figure>
<h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h2><p>limit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 10 条数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line">random.ints().limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h2><p>sorted 方法用于对流进行排序。以下代码片段使用 sorted 方法对输出的 10 个随机数进行排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line">random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h2 id="并行（parallel）程序"><a href="#并行（parallel）程序" class="headerlink" title="并行（parallel）程序"></a>并行（parallel）程序</h2><p>parallelStream 是流并行处理程序的代替方法。以下实例我们使用 parallelStream 来输出空字符串的数量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">"abc"</span>, <span class="string">""</span>, <span class="string">"bc"</span>, <span class="string">"efg"</span>, <span class="string">"abcd"</span>,<span class="string">""</span>, <span class="string">"jkl"</span>);</span><br><span class="line"><span class="comment">// 获取空字符串的数量</span></span><br><span class="line"><span class="keyword">int</span> count = strings.parallelStream().filter(string -&gt; string.isEmpty()).count();</span><br></pre></td></tr></table></figure>
<p>我们可以很容易的在顺序运行和并行直接切换。</p>
<h2 id="Collectors"><a href="#Collectors" class="headerlink" title="Collectors"></a>Collectors</h2><p>Collectors 类实现了很多归约操作，例如将流转换成集合和聚合元素。Collectors 可用于返回列表或字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt;strings = Arrays.asList(<span class="string">"abc"</span>, <span class="string">""</span>, <span class="string">"bc"</span>, <span class="string">"efg"</span>, <span class="string">"abcd"</span>,<span class="string">""</span>, <span class="string">"jkl"</span>);</span><br><span class="line">List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">"筛选列表: "</span> + filtered);</span><br><span class="line">String mergedString = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(<span class="string">", "</span>));</span><br><span class="line">System.out.println(<span class="string">"合并字符串: "</span> + mergedString);</span><br></pre></td></tr></table></figure>
<h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><p>另外，一些产生统计结果的收集器也非常有用。它们主要用于int、double、long等基本类型上，它们可以用来产生类似如下的统计结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line">IntSummaryStatistics stats = numbers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">"列表中最大的数 : "</span> + stats.getMax());</span><br><span class="line">System.out.println(<span class="string">"列表中最小的数 : "</span> + stats.getMin());</span><br><span class="line">System.out.println(<span class="string">"所有数之和 : "</span> + stats.getSum());</span><br><span class="line">System.out.println(<span class="string">"平均数 : "</span> + stats.getAverage());</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多Api请翻阅文档：<a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html</a></p>
</blockquote>
<h1 id="Date-Time-API"><a href="#Date-Time-API" class="headerlink" title="Date/Time API"></a>Date/Time API</h1><p>Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。</p>
<p>在旧版的 Java 中，日期时间 API 存在诸多问题，其中有：</p>
<ul>
<li><strong>非线程安全</strong> − java.util.Date 是非线程安全的，所有的日期类都是可变的，这是Java日期类最大的问题之一。</li>
<li><strong>设计很差</strong> − Java的日期/时间类的定义并不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类在java.text包中定义。java.util.Date同时包含日期和时间，而java.sql.Date仅包含日期，将其纳入java.sql包并不合理。另外这两个类都有相同的名字，这本身就是一个非常糟糕的设计。</li>
<li><strong>时区处理麻烦</strong> − 日期类并不提供国际化，没有时区支持，因此Java引入了java.util.Calendar和java.util.TimeZone类，但他们同样存在上述所有的问题。</li>
</ul>
<p>Java 8 在 <strong>java.time</strong> 包下提供了很多新的 API。以下为两个比较重要的 API：</p>
<ul>
<li><strong>Local(本地)</strong> − 简化了日期时间的处理，没有时区的问题。</li>
<li><strong>Zoned(时区)</strong> − 通过制定的时区处理日期时间。</li>
</ul>
<p>新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p>
<blockquote>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/datetime/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/guides/datetime/index.html</a></p>
</blockquote>
<h2 id="本地化日期时间-API"><a href="#本地化日期时间-API" class="headerlink" title="本地化日期时间 API"></a>本地化日期时间 API</h2><p><code>LocalDate/LocalTime</code> 和 <code>LocalDateTime</code> 类可以在处理时区不是必须的情况。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前的日期时间</span></span><br><span class="line">LocalDateTime currentTime = LocalDateTime.now();</span><br><span class="line">System.out.println(<span class="string">"当前时间: "</span> + currentTime);</span><br><span class="line">        </span><br><span class="line">LocalDate date1 = currentTime.toLocalDate();</span><br><span class="line">System.out.println(<span class="string">"date1: "</span> + date1);</span><br><span class="line">        </span><br><span class="line">Month month = currentTime.getMonth();</span><br><span class="line"><span class="keyword">int</span> day = currentTime.getDayOfMonth();</span><br><span class="line"><span class="keyword">int</span> seconds = currentTime.getSecond();</span><br><span class="line">        </span><br><span class="line">System.out.println(<span class="string">"月: "</span> + month +<span class="string">", 日: "</span> + day +<span class="string">", 秒: "</span> + seconds);</span><br><span class="line">        </span><br><span class="line">LocalDateTime date2 = currentTime.withDayOfMonth(<span class="number">10</span>).withYear(<span class="number">2012</span>);</span><br><span class="line">System.out.println(<span class="string">"date2: "</span> + date2);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 12 december 2014</span></span><br><span class="line">LocalDate date3 = LocalDate.of(<span class="number">2014</span>, Month.DECEMBER, <span class="number">12</span>);</span><br><span class="line">System.out.println(<span class="string">"date3: "</span> + date3);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 22 小时 15 分钟</span></span><br><span class="line">LocalTime date4 = LocalTime.of(<span class="number">22</span>, <span class="number">15</span>);</span><br><span class="line">System.out.println(<span class="string">"date4: "</span> + date4);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 解析字符串</span></span><br><span class="line">LocalTime date5 = LocalTime.parse(<span class="string">"20:15:30"</span>);</span><br><span class="line">System.out.println(<span class="string">"date5: "</span> + date5);</span><br></pre></td></tr></table></figure>
<blockquote>
<p> output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 当前时间: 2016-04-15T16:55:48.668</span><br><span class="line">&gt; date1: 2016-04-15</span><br><span class="line">&gt; 月: APRIL, 日: 15, 秒: 48</span><br><span class="line">&gt; date2: 2012-04-10T16:55:48.668</span><br><span class="line">&gt; date3: 2014-12-12</span><br><span class="line">&gt; date4: 22:15</span><br><span class="line">&gt; date5: 20:15:30</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="使用时区的日期时间API"><a href="#使用时区的日期时间API" class="headerlink" title="使用时区的日期时间API"></a>使用时区的日期时间API</h2><p>如果我们需要考虑到时区，就可以使用时区<code>ZonedDateTime</code>的日期时间API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间日期</span></span><br><span class="line">ZonedDateTime date1 = ZonedDateTime.parse(<span class="string">"2015-12-03T10:15:30+05:30[Asia/Shanghai]"</span>);</span><br><span class="line">System.out.println(<span class="string">"date1: "</span> + date1);</span><br><span class="line">        </span><br><span class="line">ZoneId id = ZoneId.of(<span class="string">"Europe/Paris"</span>);</span><br><span class="line">System.out.println(<span class="string">"ZoneId: "</span> + id);</span><br><span class="line">        </span><br><span class="line">ZoneId currentZone = ZoneId.systemDefault();</span><br><span class="line">System.out.println(<span class="string">"当期时区: "</span> + currentZone);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; date1: 2015-12-03T10:15:30+08:00[Asia/Shanghai]</span><br><span class="line">&gt; ZoneId: Europe/Paris</span><br><span class="line">&gt; 当期时区: Asia/Shanghai</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>更多示例<a href="https://www.javacodegeeks.com/2014/04/java-8-date-time-api-tutorial-localdatetime.html" target="_blank" rel="noopener">https://www.javacodegeeks.com/2014/04/java-8-date-time-api-tutorial-localdatetime.html</a></p>
</blockquote>
<h1 id="Optional-类"><a href="#Optional-类" class="headerlink" title="Optional 类"></a>Optional 类</h1><p>Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p>
<p>Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</p>
<p>Optional 类的引入很好的解决空指针异常。</p>
<h2 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h2><p>以下是一个 <strong>java.util.Optional</strong> 类的声明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Object</span></span></span><br></pre></td></tr></table></figure>
<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><table>
<thead>
<tr>
<th style="text-align:left">序号</th>
<th style="text-align:left">方法 &amp; 描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><strong>static  Optional empty()</strong>返回空的 Optional 实例。</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><strong>boolean equals(Object obj)</strong>判断其他对象是否等于 Optional。</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><strong>Optional filter(Predicate predicate)</strong>如果值存在，并且这个值匹配给定的 predicate，返回一个Optional用以描述这个值，否则返回一个空的Optional。</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><strong> Optional flatMap(Function&gt; mapper)</strong>如果值存在，返回基于Optional包含的映射方法的值，否则返回一个空的Optional</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><strong>T get()</strong>如果在这个Optional中包含这个值，返回值，否则抛出异常：NoSuchElementException</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left"><strong>int hashCode()</strong>返回存在值的哈希码，如果值不存在 返回 0。</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left"><strong>void ifPresent(Consumer consumer)</strong>如果值存在则使用该值调用 consumer , 否则不做任何事情。</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left"><strong>boolean isPresent()</strong>如果值存在则方法会返回true，否则返回 false。</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left"><strong>Optional map(Function mapper)</strong>如果有值，则对其执行调用映射函数得到返回值。如果返回值不为 null，则创建包含映射返回值的Optional作为map方法返回值，否则返回空Optional。</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left"><strong>static  Optional of(T value)</strong>返回一个指定非null值的Optional。</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left"><strong>static  Optional ofNullable(T value)</strong>如果为非空，返回 Optional 描述的指定值，否则返回空的 Optional。</td>
</tr>
<tr>
<td style="text-align:left">12</td>
<td style="text-align:left"><strong>T orElse(T other)</strong>如果存在该值，返回值， 否则返回 other。</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left"><strong>T orElseGet(Supplier other)</strong>如果存在该值，返回值， 否则触发 other，并返回 other 调用的结果。</td>
</tr>
<tr>
<td style="text-align:left">14</td>
<td style="text-align:left"><strong> T orElseThrow(Supplier exceptionSupplier)</strong>如果存在该值，返回包含的值，否则抛出由 Supplier 继承的异常</td>
</tr>
<tr>
<td style="text-align:left">15</td>
<td style="text-align:left"><strong>String toString()</strong>返回一个Optional的非空字符串，用来调试</td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong> 这些方法是从 <strong>java.lang.Object</strong> 类继承来的。</p>
<h2 id="Optional实例"><a href="#Optional实例" class="headerlink" title="Optional实例"></a>Optional实例</h2><p>通过以下实例来更好的了解 Optional 类的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">      OptionalDemo optionalDemo = <span class="keyword">new</span> OptionalDemo();</span><br><span class="line">      Integer value1 = <span class="keyword">null</span>;</span><br><span class="line">      Integer value2 = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.ofNullable - 允许传递为 null 参数</span></span><br><span class="line">      Optional&lt;Integer&gt; a = Optional.ofNullable(value1);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.of - 如果传递的参数是 null，抛出异常 NullPointerException</span></span><br><span class="line">      Optional&lt;Integer&gt; b = Optional.of(value2);</span><br><span class="line">      System.out.println(optionalDemo.sum(a,b));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(Optional&lt;Integer&gt; a, Optional&lt;Integer&gt; b)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// Optional.isPresent - 判断值是否存在</span></span><br><span class="line">      System.out.println(<span class="string">"第一个参数值存在: "</span> + a.isPresent());</span><br><span class="line">      System.out.println(<span class="string">"第二个参数值存在: "</span> + b.isPresent());</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.orElse - 如果值存在，返回它，否则返回默认值</span></span><br><span class="line">      Integer value1 = a.orElse(<span class="keyword">new</span> Integer(<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//Optional.get - 获取值，值需要存在</span></span><br><span class="line">      Integer value2 = b.get();</span><br><span class="line">      <span class="keyword">return</span> value1 + value2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 第一个参数值存在: false</span><br><span class="line">&gt; 第二个参数值存在: true</span><br><span class="line">&gt; 10</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/5b800057f2d8" target="_blank" rel="noopener">https://www.jianshu.com/p/5b800057f2d8</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>i18n（国际化）地域标识码</title>
    <url>/2019/12/16/i18n%EF%BC%88%E5%9B%BD%E9%99%85%E5%8C%96%EF%BC%89%E5%9C%B0%E5%9F%9F%E6%A0%87%E8%AF%86%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>i18n(国际化) 和l18n(本地化)时的地域标识代码 格式如 zh-CN(语言-国家)</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:left">国家</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">语言编码</th>
<th style="text-align:left">国家编码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">中国</td>
<td style="text-align:left">汉语</td>
<td style="text-align:left">zh</td>
<td style="text-align:left">CN</td>
</tr>
<tr>
<td style="text-align:left">中国香港</td>
<td style="text-align:left"></td>
<td style="text-align:left">zh</td>
<td style="text-align:left">HK</td>
</tr>
<tr>
<td style="text-align:left">中国澳门</td>
<td style="text-align:left"></td>
<td style="text-align:left">zh</td>
<td style="text-align:left">MO</td>
</tr>
<tr>
<td style="text-align:left">中国台湾</td>
<td style="text-align:left"></td>
<td style="text-align:left">zh</td>
<td style="text-align:left">TW</td>
</tr>
<tr>
<td style="text-align:left">新加坡</td>
<td style="text-align:left">汉语</td>
<td style="text-align:left">zh</td>
<td style="text-align:left">SG</td>
</tr>
<tr>
<td style="text-align:left">中国简体中文</td>
<td style="text-align:left">zh-CHS</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">中国繁体中文</td>
<td style="text-align:left">zh-CHT</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">英国</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">GB</td>
</tr>
<tr>
<td style="text-align:left">美国</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">US</td>
</tr>
<tr>
<td style="text-align:left">俄罗斯</td>
<td style="text-align:left">俄罗斯 Tatar 语</td>
<td style="text-align:left">tt</td>
<td style="text-align:left">RU</td>
</tr>
<tr>
<td style="text-align:left">俄罗斯</td>
<td style="text-align:left">俄罗斯语</td>
<td style="text-align:left">ru</td>
<td style="text-align:left">RU</td>
</tr>
<tr>
<td style="text-align:left">德国</td>
<td style="text-align:left">德语</td>
<td style="text-align:left">de</td>
<td style="text-align:left">DE</td>
</tr>
<tr>
<td style="text-align:left">瑞士</td>
<td style="text-align:left">德语</td>
<td style="text-align:left">de</td>
<td style="text-align:left">CH</td>
</tr>
<tr>
<td style="text-align:left">卢森堡</td>
<td style="text-align:left">德语</td>
<td style="text-align:left">de</td>
<td style="text-align:left">LU</td>
</tr>
<tr>
<td style="text-align:left">奥地利</td>
<td style="text-align:left">德语</td>
<td style="text-align:left">de</td>
<td style="text-align:left">AT</td>
</tr>
<tr>
<td style="text-align:left">列支敦士登</td>
<td style="text-align:left">德语</td>
<td style="text-align:left">de</td>
<td style="text-align:left">LI</td>
</tr>
<tr>
<td style="text-align:left">加拿大</td>
<td style="text-align:left">法语</td>
<td style="text-align:left">fr</td>
<td style="text-align:left">CA</td>
</tr>
<tr>
<td style="text-align:left">法国</td>
<td style="text-align:left">法语</td>
<td style="text-align:left">fr</td>
<td style="text-align:left">FR</td>
</tr>
<tr>
<td style="text-align:left">卢森堡</td>
<td style="text-align:left">法语</td>
<td style="text-align:left">fr</td>
<td style="text-align:left">LU</td>
</tr>
<tr>
<td style="text-align:left">比利时</td>
<td style="text-align:left">法语</td>
<td style="text-align:left">fr</td>
<td style="text-align:left">BE</td>
</tr>
<tr>
<td style="text-align:left">摩纳哥</td>
<td style="text-align:left">法语</td>
<td style="text-align:left">fr</td>
<td style="text-align:left">MC</td>
</tr>
<tr>
<td style="text-align:left">瑞士</td>
<td style="text-align:left">法语</td>
<td style="text-align:left">fr</td>
<td style="text-align:left">CH</td>
</tr>
<tr>
<td style="text-align:left">意大利</td>
<td style="text-align:left">意大利</td>
<td style="text-align:left">it</td>
<td style="text-align:left">IT</td>
</tr>
<tr>
<td style="text-align:left">日本</td>
<td style="text-align:left">日语</td>
<td style="text-align:left">ja</td>
<td style="text-align:left">JP</td>
</tr>
<tr>
<td style="text-align:left">韩国</td>
<td style="text-align:left">韩国</td>
<td style="text-align:left">ko</td>
<td style="text-align:left">KR</td>
</tr>
<tr>
<td style="text-align:left">哈萨克</td>
<td style="text-align:left">哈萨克(Kazakh)</td>
<td style="text-align:left">kk</td>
<td style="text-align:left">KZ</td>
</tr>
<tr>
<td style="text-align:left">芬兰</td>
<td style="text-align:left">芬兰语</td>
<td style="text-align:left">fi</td>
<td style="text-align:left">FI</td>
</tr>
<tr>
<td style="text-align:left">瑞典</td>
<td style="text-align:left">芬兰语</td>
<td style="text-align:left">sv</td>
<td style="text-align:left">FI</td>
</tr>
<tr>
<td style="text-align:left">瑞典</td>
<td style="text-align:left">瑞典语</td>
<td style="text-align:left">sv</td>
<td style="text-align:left">SE</td>
</tr>
<tr>
<td style="text-align:left">匈牙利</td>
<td style="text-align:left">匈牙利</td>
<td style="text-align:left">hu</td>
<td style="text-align:left">HU</td>
</tr>
<tr>
<td style="text-align:left">冰岛</td>
<td style="text-align:left">冰岛</td>
<td style="text-align:left">is</td>
<td style="text-align:left">IS</td>
</tr>
<tr>
<td style="text-align:left">印尼</td>
<td style="text-align:left">印尼</td>
<td style="text-align:left">id</td>
<td style="text-align:left">ID</td>
</tr>
<tr>
<td style="text-align:left">瑞士</td>
<td style="text-align:left">意大利</td>
<td style="text-align:left">it</td>
<td style="text-align:left">CH</td>
</tr>
<tr>
<td style="text-align:left">土耳其</td>
<td style="text-align:left">土耳其语</td>
<td style="text-align:left">tr</td>
<td style="text-align:left">TR</td>
</tr>
<tr>
<td style="text-align:left">乌克兰</td>
<td style="text-align:left">乌克兰语</td>
<td style="text-align:left">uk</td>
<td style="text-align:left">UA</td>
</tr>
<tr>
<td style="text-align:left">巴基斯坦</td>
<td style="text-align:left">巴基斯坦 Urdu 语</td>
<td style="text-align:left">ur</td>
<td style="text-align:left">PK</td>
</tr>
<tr>
<td style="text-align:left">加拿大</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">CA</td>
</tr>
<tr>
<td style="text-align:left">爱尔兰</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">IE</td>
</tr>
<tr>
<td style="text-align:left">捷克</td>
<td style="text-align:left">捷克</td>
<td style="text-align:left">cs</td>
<td style="text-align:left">CZ</td>
</tr>
<tr>
<td style="text-align:left">瑞士</td>
<td style="text-align:left">法语</td>
<td style="text-align:left">fr</td>
<td style="text-align:left">CH</td>
</tr>
<tr>
<td style="text-align:left">加勒比海</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">CB</td>
</tr>
<tr>
<td style="text-align:left">澳洲</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">AU</td>
</tr>
<tr>
<td style="text-align:left">新西兰</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">NZ</td>
</tr>
<tr>
<td style="text-align:left">比利时</td>
<td style="text-align:left">法语</td>
<td style="text-align:left">fr</td>
<td style="text-align:left">BE</td>
</tr>
<tr>
<td style="text-align:left">菲律宾</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">PH</td>
</tr>
<tr>
<td style="text-align:left">牙买加</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">JM</td>
</tr>
<tr>
<td style="text-align:left">伯利兹</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">BZ</td>
</tr>
<tr>
<td style="text-align:left">千里达托贝哥共和国英语</td>
<td style="text-align:left"></td>
<td style="text-align:left">en</td>
<td style="text-align:left">TT</td>
</tr>
<tr>
<td style="text-align:left">津巴布韦</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">ZW</td>
</tr>
<tr>
<td style="text-align:left">爱沙尼亚</td>
<td style="text-align:left">爱沙尼亚</td>
<td style="text-align:left">et</td>
<td style="text-align:left">EE</td>
</tr>
<tr>
<td style="text-align:left">法罗群岛</td>
<td style="text-align:left">法罗语(Faroese)</td>
<td style="text-align:left">fo</td>
<td style="text-align:left">FO</td>
</tr>
<tr>
<td style="text-align:left">摩纳哥</td>
<td style="text-align:left">法语</td>
<td style="text-align:left">fr</td>
<td style="text-align:left">MC</td>
</tr>
<tr>
<td style="text-align:left">西班牙</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">ES</td>
</tr>
<tr>
<td style="text-align:left">阿根廷</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">AR</td>
</tr>
<tr>
<td style="text-align:left">墨西哥</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">MX</td>
</tr>
<tr>
<td style="text-align:left">玻利维亚</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">BO</td>
</tr>
<tr>
<td style="text-align:left">智利</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">CL</td>
</tr>
<tr>
<td style="text-align:left">巴拿马</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">PA</td>
</tr>
<tr>
<td style="text-align:left">委内瑞拉</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">VE</td>
</tr>
<tr>
<td style="text-align:left">哥伦比亚</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">CO</td>
</tr>
<tr>
<td style="text-align:left">秘鲁</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">PE</td>
</tr>
<tr>
<td style="text-align:left">哥斯达黎加</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">CR</td>
</tr>
<tr>
<td style="text-align:left">多米尼加共和国</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">DO</td>
</tr>
<tr>
<td style="text-align:left">厄瓜多尔</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">EC</td>
</tr>
<tr>
<td style="text-align:left">萨尔瓦多</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">SV</td>
</tr>
<tr>
<td style="text-align:left">危地马拉</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">GT</td>
</tr>
<tr>
<td style="text-align:left">洪都拉斯</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">HN</td>
</tr>
<tr>
<td style="text-align:left">尼加拉瓜</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">NI</td>
</tr>
<tr>
<td style="text-align:left">巴拉圭</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">PY</td>
</tr>
<tr>
<td style="text-align:left">波多黎各</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">PR</td>
</tr>
<tr>
<td style="text-align:left">乌拉圭</td>
<td style="text-align:left">西班牙语</td>
<td style="text-align:left">es</td>
<td style="text-align:left">UY</td>
</tr>
<tr>
<td style="text-align:left">印度</td>
<td style="text-align:left">坦米尔语</td>
<td style="text-align:left">ta</td>
<td style="text-align:left">IN</td>
</tr>
<tr>
<td style="text-align:left">印度</td>
<td style="text-align:left">印度语(Gujarati)</td>
<td style="text-align:left">gu</td>
<td style="text-align:left">IN</td>
</tr>
<tr>
<td style="text-align:left">印度</td>
<td style="text-align:left">北印度语</td>
<td style="text-align:left">hi</td>
<td style="text-align:left">IN</td>
</tr>
<tr>
<td style="text-align:left">印度</td>
<td style="text-align:left">卡纳达语</td>
<td style="text-align:left">kn</td>
<td style="text-align:left">IN</td>
</tr>
<tr>
<td style="text-align:left">印度</td>
<td style="text-align:left">Konkani</td>
<td style="text-align:left">kok</td>
<td style="text-align:left">IN</td>
</tr>
<tr>
<td style="text-align:left">印度</td>
<td style="text-align:left">马拉地语</td>
<td style="text-align:left">mr</td>
<td style="text-align:left">IN</td>
</tr>
<tr>
<td style="text-align:left">印度</td>
<td style="text-align:left">Punjab 语</td>
<td style="text-align:left">pa</td>
<td style="text-align:left">IN</td>
</tr>
<tr>
<td style="text-align:left">印度</td>
<td style="text-align:left">梵文</td>
<td style="text-align:left">sa</td>
<td style="text-align:left">IN</td>
</tr>
<tr>
<td style="text-align:left">印度</td>
<td style="text-align:left">印度 Telugu 语</td>
<td style="text-align:left">te</td>
<td style="text-align:left">IN</td>
</tr>
<tr>
<td style="text-align:left">挪威</td>
<td style="text-align:left">挪威</td>
<td style="text-align:left">nb</td>
<td style="text-align:left">NO</td>
</tr>
<tr>
<td style="text-align:left">挪威</td>
<td style="text-align:left">挪威(Nynorsk)</td>
<td style="text-align:left">nn</td>
<td style="text-align:left">NO</td>
</tr>
<tr>
<td style="text-align:left">波兰</td>
<td style="text-align:left">波兰</td>
<td style="text-align:left">pl</td>
<td style="text-align:left">PL</td>
</tr>
<tr>
<td style="text-align:left">巴西</td>
<td style="text-align:left">葡萄牙语</td>
<td style="text-align:left">pt</td>
<td style="text-align:left">BR</td>
</tr>
<tr>
<td style="text-align:left">葡萄牙</td>
<td style="text-align:left">葡萄牙语</td>
<td style="text-align:left">pt</td>
<td style="text-align:left">PT</td>
</tr>
<tr>
<td style="text-align:left">越南</td>
<td style="text-align:left">越南语</td>
<td style="text-align:left">vi</td>
<td style="text-align:left">VN</td>
</tr>
<tr>
<td style="text-align:left">泰国</td>
<td style="text-align:left">泰语</td>
<td style="text-align:left">th</td>
<td style="text-align:left">TH</td>
</tr>
<tr>
<td style="text-align:left">南非</td>
<td style="text-align:left">英语</td>
<td style="text-align:left">en</td>
<td style="text-align:left">ZA</td>
</tr>
<tr>
<td style="text-align:left">南非</td>
<td style="text-align:left">公用荷兰语</td>
<td style="text-align:left">af</td>
<td style="text-align:left">ZA</td>
</tr>
<tr>
<td style="text-align:left">白俄罗斯</td>
<td style="text-align:left">白俄罗斯语(Belarusian)</td>
<td style="text-align:left">be</td>
<td style="text-align:left">BY</td>
</tr>
<tr>
<td style="text-align:left">伊朗王国</td>
<td style="text-align:left">波斯语</td>
<td style="text-align:left">fa</td>
<td style="text-align:left">IR</td>
</tr>
<tr>
<td style="text-align:left">以色列</td>
<td style="text-align:left">希伯来文</td>
<td style="text-align:left">he</td>
<td style="text-align:left">IL</td>
</tr>
<tr>
<td style="text-align:left">丹麦</td>
<td style="text-align:left">丹麦</td>
<td style="text-align:left">da</td>
<td style="text-align:left">DK</td>
</tr>
<tr>
<td style="text-align:left">马尔代夫</td>
<td style="text-align:left">马尔代夫(Dhivehi)</td>
<td style="text-align:left">div</td>
<td style="text-align:left">MV</td>
</tr>
<tr>
<td style="text-align:left">比利时</td>
<td style="text-align:left">荷兰语</td>
<td style="text-align:left">nl</td>
<td style="text-align:left">BE</td>
</tr>
<tr>
<td style="text-align:left">荷兰</td>
<td style="text-align:left">荷兰语</td>
<td style="text-align:left">nl</td>
<td style="text-align:left">NL</td>
</tr>
<tr>
<td style="text-align:left">希腊</td>
<td style="text-align:left">希腊</td>
<td style="text-align:left">el</td>
<td style="text-align:left">GR</td>
</tr>
<tr>
<td style="text-align:left">沙特阿拉伯</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">SA</td>
</tr>
<tr>
<td style="text-align:left">埃及</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">EG</td>
</tr>
<tr>
<td style="text-align:left">伊拉克</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">IQ</td>
</tr>
<tr>
<td style="text-align:left">约旦</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">JO</td>
</tr>
<tr>
<td style="text-align:left">科威特</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">KW</td>
</tr>
<tr>
<td style="text-align:left">黎巴嫩</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">LB</td>
</tr>
<tr>
<td style="text-align:left">利比亚</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">LY</td>
</tr>
<tr>
<td style="text-align:left">卡塔尔</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">QA</td>
</tr>
<tr>
<td style="text-align:left">叙利亚共和国</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">SY</td>
</tr>
<tr>
<td style="text-align:left">叙利亚共和国</td>
<td style="text-align:left">叙利亚语(Syriac)</td>
<td style="text-align:left">syr</td>
<td style="text-align:left">SY</td>
</tr>
<tr>
<td style="text-align:left">保加利亚</td>
<td style="text-align:left">保加利亚</td>
<td style="text-align:left">bg</td>
<td style="text-align:left">BG</td>
</tr>
<tr>
<td style="text-align:left">阿尔巴尼亚</td>
<td style="text-align:left">阿尔巴尼亚</td>
<td style="text-align:left">sq</td>
<td style="text-align:left">AL</td>
</tr>
<tr>
<td style="text-align:left">阿尔及利亚</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">DZ</td>
</tr>
<tr>
<td style="text-align:left">巴林</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">BH</td>
</tr>
<tr>
<td style="text-align:left">摩洛哥</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">MA</td>
</tr>
<tr>
<td style="text-align:left">阿曼</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">OM</td>
</tr>
<tr>
<td style="text-align:left">北非的共和国</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">TN</td>
</tr>
<tr>
<td style="text-align:left">阿拉伯联合酋长国</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">AE</td>
</tr>
<tr>
<td style="text-align:left">也门</td>
<td style="text-align:left">阿拉伯语</td>
<td style="text-align:left">ar</td>
<td style="text-align:left">YE</td>
</tr>
<tr>
<td style="text-align:left">亚美尼亚</td>
<td style="text-align:left">亚美尼亚语</td>
<td style="text-align:left">hy</td>
<td style="text-align:left">AM</td>
</tr>
<tr>
<td style="text-align:left">巴斯克</td>
<td style="text-align:left">巴斯克</td>
<td style="text-align:left">eu</td>
<td style="text-align:left">ES</td>
</tr>
<tr>
<td style="text-align:left">嘉泰罗尼亚</td>
<td style="text-align:left">嘉泰罗尼亚</td>
<td style="text-align:left">ca</td>
<td style="text-align:left">ES</td>
</tr>
<tr>
<td style="text-align:left">肯尼亚</td>
<td style="text-align:left">肯尼亚(Swahili)语</td>
<td style="text-align:left">sw</td>
<td style="text-align:left">KE</td>
</tr>
<tr>
<td style="text-align:left">克罗埃西亚</td>
<td style="text-align:left">克罗埃西亚</td>
<td style="text-align:left">hr</td>
<td style="text-align:left">HR</td>
</tr>
<tr>
<td style="text-align:left">加利西亚</td>
<td style="text-align:left">加利西亚</td>
<td style="text-align:left">gl</td>
<td style="text-align:left">ES</td>
</tr>
<tr>
<td style="text-align:left">格鲁吉亚州</td>
<td style="text-align:left">格鲁吉亚州</td>
<td style="text-align:left">ka</td>
<td style="text-align:left">GE</td>
</tr>
<tr>
<td style="text-align:left">哈萨克</td>
<td style="text-align:left">Kyrgyz</td>
<td style="text-align:left">ky</td>
<td style="text-align:left">KZ</td>
</tr>
<tr>
<td style="text-align:left">拉脱维亚</td>
<td style="text-align:left">拉脱维亚</td>
<td style="text-align:left">lv</td>
<td style="text-align:left">LV</td>
</tr>
<tr>
<td style="text-align:left">立陶宛</td>
<td style="text-align:left">立陶宛</td>
<td style="text-align:left">lt</td>
<td style="text-align:left">LT</td>
</tr>
<tr>
<td style="text-align:left">马其顿</td>
<td style="text-align:left">马其顿</td>
<td style="text-align:left">mk</td>
<td style="text-align:left">MK</td>
</tr>
<tr>
<td style="text-align:left">汶莱</td>
<td style="text-align:left">马来语</td>
<td style="text-align:left">ms</td>
<td style="text-align:left">BN</td>
</tr>
<tr>
<td style="text-align:left">马来西亚</td>
<td style="text-align:left">马来西亚语</td>
<td style="text-align:left">ms</td>
<td style="text-align:left">MY</td>
</tr>
<tr>
<td style="text-align:left">蒙古</td>
<td style="text-align:left">蒙古</td>
<td style="text-align:left">mn</td>
<td style="text-align:left">MN</td>
</tr>
<tr>
<td style="text-align:left">罗马尼亚</td>
<td style="text-align:left">罗马尼亚语</td>
<td style="text-align:left">ro</td>
<td style="text-align:left">RO</td>
</tr>
<tr>
<td style="text-align:left">塞尔维亚(西里尔字母的)</td>
<td style="text-align:left">sr-SP-Cyrl</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">塞尔(拉丁文)</td>
<td style="text-align:left">sr-SP-Latn</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">斯洛伐克</td>
<td style="text-align:left">斯洛伐克</td>
<td style="text-align:left">sk</td>
<td style="text-align:left">SK</td>
</tr>
<tr>
<td style="text-align:left">斯洛文尼亚</td>
<td style="text-align:left">斯洛文尼亚</td>
<td style="text-align:left">sl</td>
<td style="text-align:left">SI</td>
</tr>
<tr>
<td style="text-align:left">乌兹别克</td>
<td style="text-align:left">乌兹别克(西里尔字母的)</td>
<td style="text-align:left">uz</td>
<td style="text-align:left">uz-UZ-Cyrl</td>
</tr>
<tr>
<td style="text-align:left">乌兹别克</td>
<td style="text-align:left">乌兹别克(拉丁文的)</td>
<td style="text-align:left">uz</td>
<td style="text-align:left">UZ-Latn</td>
</tr>
<tr>
<td style="text-align:left">塞浦路斯</td>
<td style="text-align:left">希腊文</td>
<td style="text-align:left">el</td>
<td style="text-align:left">CY</td>
</tr>
<tr>
<td style="text-align:left">英语(全球)</td>
<td style="text-align:left">en-WW</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<blockquote>
<p>内容转载于<a href="https://www.cnblogs.com/isdom/p/webclips009.html" target="_blank" rel="noopener">https://www.cnblogs.com/isdom/p/webclips009.html</a></p>
</blockquote>
<p>更为详细的一个表格：</p>
<table>
<thead>
<tr>
<th>Language</th>
<th>English Name</th>
<th>Chinese Name</th>
<th>Code</th>
<th>GB</th>
<th>ICS</th>
<th>JB</th>
<th>KK</th>
</tr>
</thead>
<tbody>
<tr>
<td>العربية</td>
<td>Arabic(Israel)</td>
<td>阿拉伯语(以色列)</td>
<td>ar_IL</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>Arabic(Egypt)</td>
<td>阿拉伯语(埃及)</td>
<td>ar_EG</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td>中文</td>
<td>Chinese Simplified</td>
<td>中文简体</td>
<td>zh_TW</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>Chinese Tradition</td>
<td>中文繁体</td>
<td>zh_CN</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>Chinese</td>
<td>中文(香港)</td>
<td>zh_HK</td>
<td>N</td>
<td>N</td>
<td>P</td>
<td>P</td>
</tr>
<tr>
<td>Nederlands</td>
<td>Dutch (Netherlands)</td>
<td>荷兰语</td>
<td>nl_NL</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>Dutch (Netherlands)</td>
<td>荷兰语(比利时)</td>
<td>nl_BE</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td>English</td>
<td>English(United States)</td>
<td>英语(美国)</td>
<td>en_US</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>English(Australia)</td>
<td>英语(澳大利亚)</td>
<td>en_AU</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td></td>
<td>English(Canada)</td>
<td>英语(加拿大)</td>
<td>en_CA</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td></td>
<td>English(India)</td>
<td>英语(印度)</td>
<td>en_IN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td></td>
<td>English(Ireland)</td>
<td>英语(爱尔兰)</td>
<td>en_IE</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td></td>
<td>English(New Zealand)</td>
<td>英语(新西兰)</td>
<td>en_NZ</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td></td>
<td>English(Singapore)</td>
<td>英语(新加波)</td>
<td>en_SG</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td></td>
<td>English(South Africa)</td>
<td>英语(南非)</td>
<td>en_ZA</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td></td>
<td>English(United Kingdom)</td>
<td>英语(英国)</td>
<td>en_GB</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>Y</td>
</tr>
<tr>
<td>Français</td>
<td>French</td>
<td>法语</td>
<td>fr_FR</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>French</td>
<td>法语(比利时)</td>
<td>fr_BE</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td></td>
<td>French</td>
<td>法语(加拿大)</td>
<td>fr_CA</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td></td>
<td>French</td>
<td>法语(瑞士)</td>
<td>fr_CH</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td>Deutsch</td>
<td>German</td>
<td>德语</td>
<td>de_DE</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>German</td>
<td>德语(列支敦斯登)</td>
<td>de_LI</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td></td>
<td>German</td>
<td>德语(奥地利)</td>
<td>de_AT</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>German</td>
<td>德语(瑞士)</td>
<td>de_CH</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td>Italiano</td>
<td>Italian</td>
<td>意大利语</td>
<td>it_IT</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>Italian</td>
<td>意大利语(瑞士)</td>
<td>it_CH</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td>Protuguês</td>
<td>Portuguese</td>
<td>葡萄牙语（巴西）</td>
<td>pt_BR</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>Portuguese</td>
<td>葡萄牙语</td>
<td>pt_PT</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Español</td>
<td>Spanish</td>
<td>西班牙语</td>
<td>es_ES</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>Spanish</td>
<td>西班牙语(美国)</td>
<td>es_US</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>বাংলা</td>
<td>Bengali</td>
<td>孟加拉语</td>
<td>bn_BD</td>
<td>Y</td>
<td>N</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td></td>
<td>Bengali</td>
<td>孟加拉语(印度)</td>
<td>bn_IN</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>hrvatski</td>
<td>Croatian</td>
<td>克罗地亚语</td>
<td>hr_HR</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>čeština</td>
<td>Czech</td>
<td>捷克语</td>
<td>cs_CZ</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Dansk</td>
<td>Danish</td>
<td>丹麦语</td>
<td>da_DK</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>ελληνικά</td>
<td>Greek</td>
<td>希腊语</td>
<td>el_GR</td>
<td>GD_MN</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>עברית</td>
<td>Hebrew</td>
<td>希伯来语(以色列)</td>
<td>he_IL</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td></td>
<td>Hebrew</td>
<td>希伯来语(以色列)</td>
<td>iw_IL</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>हिंदी</td>
<td>Hindi</td>
<td>印度语</td>
<td>hi_IN</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Magyar</td>
<td>Hungarian</td>
<td>匈牙利语</td>
<td>hu_HU</td>
<td>GD_MN</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>Indonesian</td>
<td>印度尼西亚语</td>
<td>in_ID</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>日本語の言語</td>
<td>Japanese</td>
<td>日语</td>
<td>ja_JP</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>P</td>
</tr>
<tr>
<td>한국의</td>
<td>Korean</td>
<td>韩语（朝鲜语）</td>
<td>ko_KR</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Bahasa Melayu</td>
<td>Malay</td>
<td>马来语</td>
<td>ms_MY</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>فارسی</td>
<td>Perisan</td>
<td>波斯语</td>
<td>fa_IR</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Polski</td>
<td>Polish</td>
<td>波兰语</td>
<td>pl_PL</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>româna</td>
<td>Romanian</td>
<td>罗马尼亚语</td>
<td>ro_RO</td>
<td>GD_MN</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Русский</td>
<td>Russian</td>
<td>俄罗斯语</td>
<td>ru_RU</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>српски</td>
<td>Serbian</td>
<td>塞尔维亚语</td>
<td>sr_RS</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>P</td>
</tr>
<tr>
<td>Svenska</td>
<td>Swedish</td>
<td>瑞典语</td>
<td>sv_SE</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>ไทย</td>
<td>Thai</td>
<td>泰语</td>
<td>th_TH</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Türkçe</td>
<td>Turkey</td>
<td>土耳其语</td>
<td>tr_TR</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>اردو</td>
<td>Urdu</td>
<td>乌尔都语</td>
<td>ur_PK</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>tiếng việt</td>
<td>Vietnamese</td>
<td>越南语</td>
<td>vi_VN</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>catalá</td>
<td>Catalan</td>
<td>加泰隆语(西班牙)</td>
<td>ca_ES</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>P</td>
</tr>
<tr>
<td>latviešu</td>
<td>Latviesu</td>
<td>拉脱维亚语</td>
<td>lv_LV</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>Lietuvių</td>
<td>Lithuanian</td>
<td>立陶宛语</td>
<td>lt_LT</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>Norsk bokmal</td>
<td>Norwegian</td>
<td>挪威语</td>
<td>nb_NO</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>Slovenčina</td>
<td>slovencina</td>
<td>斯洛伐克语</td>
<td>sk_SK</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>Slovenščina</td>
<td>Slovenian</td>
<td>斯洛文尼亚语</td>
<td>sl_SI</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>P</td>
</tr>
<tr>
<td>български</td>
<td>bulgarian</td>
<td>保加利亚语</td>
<td>bg_BG</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>українська</td>
<td>Ukrainian</td>
<td>乌克兰语</td>
<td>uk_UA</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>Tagalog</td>
<td>Filipino</td>
<td>菲律宾语</td>
<td>tl_PH</td>
<td>GD_MN</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>Suomi</td>
<td>Finnish</td>
<td>芬兰语</td>
<td>fi_FI</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>P</td>
<td>Y</td>
</tr>
<tr>
<td>Afrikaans</td>
<td>Afrikaans</td>
<td>南非语</td>
<td>af_ZA</td>
<td>N</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td>Rumantsch</td>
<td>Romansh</td>
<td>罗曼什语(瑞士)</td>
<td>rm_CH</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td>ဗမာ</td>
<td>Burmese(Zawgyi)</td>
<td>缅甸语(民间)</td>
<td>my_ZG</td>
<td>N</td>
<td>N</td>
<td>P</td>
<td>P</td>
</tr>
<tr>
<td></td>
<td>Burmese(Paduak)</td>
<td>缅甸语(官方)</td>
<td>my_MM</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>មែរ</td>
<td>Khmer</td>
<td>柬埔寨语</td>
<td>km_KH</td>
<td>N</td>
<td>N</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>አማርኛ</td>
<td>Amharic</td>
<td>阿姆哈拉语(埃塞俄比亚)</td>
<td>am_ET</td>
<td>N</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td>беларуская</td>
<td>Belarusian</td>
<td>白俄罗斯语</td>
<td>be_BY</td>
<td>N</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td>eesti</td>
<td>Estonian</td>
<td>爱沙尼亚语</td>
<td>et_EE</td>
<td>N</td>
<td>GD_MN</td>
<td>P</td>
<td>P</td>
</tr>
<tr>
<td>Kiswahili</td>
<td>Swahili</td>
<td>斯瓦希里语(坦桑尼亚)</td>
<td>sw_TZ</td>
<td>N</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td>isiZulu</td>
<td>Zulu</td>
<td>祖鲁语(南非)</td>
<td>zu_ZA</td>
<td>N</td>
<td>GD_MN</td>
<td>GD_MN</td>
<td>GD_MN</td>
</tr>
<tr>
<td>azərbaycanca</td>
<td>Azerbaijani</td>
<td>阿塞拜疆语</td>
<td>az_AZ</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>GD_MN</td>
</tr>
<tr>
<td>Հայերէն</td>
<td>Armenian</td>
<td>亚美尼亚语(亚美尼亚)</td>
<td>hy_AM</td>
<td>N</td>
<td>N</td>
<td>P</td>
<td>P</td>
</tr>
<tr>
<td>ქართული</td>
<td>Georgian</td>
<td>格鲁吉亚语(格鲁吉亚)</td>
<td>ka_GE</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>GD_MN</td>
</tr>
<tr>
<td>ລາວ</td>
<td>Laotian</td>
<td>老挝语(老挝)</td>
<td>lo_LA</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>GD_MN</td>
</tr>
<tr>
<td>Монгол</td>
<td>Mongolian</td>
<td>蒙古语</td>
<td>mn_MN</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>GD_MN</td>
</tr>
<tr>
<td>नेपाली</td>
<td>Nepali</td>
<td>尼泊尔语</td>
<td>ne_NP</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>GD_MN</td>
</tr>
<tr>
<td>қазақ тілі</td>
<td>Kazakh</td>
<td>哈萨克语</td>
<td>kk_KZ</td>
<td>N</td>
<td>N</td>
<td>P</td>
<td>P</td>
</tr>
<tr>
<td>සිංහල</td>
<td>Sinhala</td>
<td>僧加罗语(斯里兰卡)</td>
<td>si_LK</td>
<td>N</td>
<td>N</td>
<td>N</td>
<td>GD_MN</td>
</tr>
</tbody>
</table>
<blockquote>
<p>1、标记“N”表示当前版本不支持；标记“Y”表示mtk、google均支持；标记“GD_MN”表示Google默认支持，MTK不支持。<br>2、对于GD_MN，如果要支持的话，只需翻译mtk新增的部分字串就行。<br>3、如若打开或者添加语言，可以参考如下FAQ，<br>   如何打开一种语言：FAQ04326<br>4、标记“P”是mtk后面新支持的一些语言,如果要支持，可以通过PMS系统直接申请Patch，ALPS01686452  支持除民间缅甸语以外所有版本的多国语言（这个PATCH的民间缅甸语只支持KK.MP1 , KK.MP6 , KK.MP7）<br>5、关于民间缅甸语的情况<br>目前MTK JB3.MP,JB5.MP,JB9.MP,KK.MP1,KK.MP6已经可以支持Zawgyi。如果需要的话可以通过PMS系统申请patch,请按以下操作：<br>1).申请strings patch 和字库PATCH<br>   JBX:<br>      ALPS01561463<br>      ALPS01400558<br>      ALPS01444813<br>      ALPS01444868<br>KK.MP1 , KK.MP6 , KK.MP7<br>ALPS01686452<br>3).需要注意的是padauk(my_MM)和zawgyi(my_ZG)不能同时开,只能打开一个.<br>4)如果遇到访问一些缅甸语语网站时出现大量圈圈，可能是该网站是民间缅甸语网站，可以申请这些patch</p>
</blockquote>
<p>摘抄自：<a href="https://blog.csdn.net/ouyang_peng/article/details/50209789" target="_blank" rel="noopener">https://blog.csdn.net/ouyang_peng/article/details/50209789</a></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>i18n</tag>
      </tags>
  </entry>
  <entry>
    <title>网页布局之Flex布局</title>
    <url>/2019/12/14/%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80%E4%B9%8BFlex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>网页布局（layout）是 CSS 的一个重点应用。布局的传统解决方案，基于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model" target="_blank" rel="noopener">盒状模型</a>，依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a> 属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="noopener"><code>position</code></a>属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float" target="_blank" rel="noopener"><code>float</code></a>属性。它对于那些特殊布局非常不方便，比如，<a href="https://css-tricks.com/centering-css-complete-guide/" target="_blank" rel="noopener">垂直居中</a>就不容易实现。</p>
<a id="more"></a>
<p><img src="flexbg.png" alt></p>
<p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>
<p><img src="caniuseflex.png" alt></p>
<h1 id="Flex布局是什么"><a href="#Flex布局是什么" class="headerlink" title="Flex布局是什么"></a>Flex布局是什么</h1><p>Flex是Flexible Box的缩写。译为“弹性布局”，用来作为盒状模型提供最大的灵活性。</p>
<p>任何一个容器都可以指定为Flex布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>行内元素也可以使用Flex布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Webkit内核的浏览器，必须加上<code>-webkit</code>前缀。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>
</blockquote>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>
<p>我们把一个容器的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a> 属性值改为 <code>flex</code> 或者 <code>inline-flex</code> 完成这一步之后，容器中的直系子元素就会变为 <strong>flex 元素</strong>。所有CSS属性都会有一个初始值，所以 flex 容器中的所有 flex 元素都会有下列行为：</p>
<ul>
<li>元素排列为一行 (<code>flex-direction</code> 属性的初始值是 <code>row</code>)。</li>
<li>元素从主轴的起始线开始。</li>
<li>元素不会在主维度方向拉伸，但是可以缩小。</li>
<li>元素被拉伸来填充交叉轴大小。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis" target="_blank" rel="noopener"><code>flex-basis</code></a> 属性为 <code>auto。</code></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-wrap" target="_blank" rel="noopener"><code>flex-wrap</code></a> 属性为 <code>nowrap。</code></li>
</ul>
<p>容器默认存在两根轴：主轴和交叉轴。主轴由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-direction" target="_blank" rel="noopener"><code>flex-direction</code></a> 定义，另一根轴垂直于它。而Flexbox的所有属性都与这两根主轴有关。</p>
<h2 id="主轴"><a href="#主轴" class="headerlink" title="主轴"></a>主轴</h2><p>主轴（main axis）由<code>flex-direction</code>定义，可以取四个值。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">flex-direction: column | column-reverse | row | row-reverse;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>选择了 <code>row</code> 或者 <code>row-reverse</code>，你的主轴将沿着 <strong>inline</strong> 方向延伸。</p>
<p>选择 <code>column</code> 或者 <code>column-reverse</code> 时，你的主轴会沿着上下方向延伸 — 也就是 <strong>block 排列的方向。</strong></p>
</blockquote>
<h2 id="交叉轴"><a href="#交叉轴" class="headerlink" title="交叉轴"></a>交叉轴</h2><p>交叉轴（cross axis）垂直于主轴</p>
<blockquote>
<p><code>flex-direction</code> (主轴) 设成了 <code>row</code> 或者 <code>row-reverse</code> 的话，交叉轴的方向就是沿着列向下的。</p>
<p>主轴方向设成了 <code>column</code> 或者 <code>column-reverse</code>，交叉轴就是水平方向。</p>
</blockquote>
<h2 id="起始线和终止线"><a href="#起始线和终止线" class="headerlink" title="起始线和终止线"></a>起始线和终止线</h2><p>主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<p><img src="axis.png" alt></p>
<h1 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h1><p>以下6个属性设置在容器上。</p>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
<h2 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h2><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">flex-direction: row | row-reverse | column | column-reverse;</span><br></pre></td></tr></table></figure>
<p>它可能取四个值：</p>
<ul>
<li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>
<li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>
<li><code>column</code>：主轴为垂直方向，起点在上沿。</li>
<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li>
</ul>
<p><img src="flexdirection.png" alt></p>
<h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h2><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">flex-wrap: nowrap | wrap | wrap-reverse;</span><br></pre></td></tr></table></figure>
<p>它可能取三个值：</p>
<ul>
<li><code>nowrap</code>（默认）：不换行。</li>
<li><code>wrap</code>：换行，第一行在上方。</li>
<li><code>wrap-reverse</code>：换行，第一行在下方。</li>
</ul>
<p><img src="flexwrap.png" alt></p>
<h2 id="flex-flow属性"><a href="#flex-flow属性" class="headerlink" title="flex-flow属性"></a>flex-flow属性</h2><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br></pre></td></tr></table></figure>
<h2 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h2><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">justify-content: flex-start | flex-end | center | space-between | space-around;</span><br></pre></td></tr></table></figure>
<p>它可能取5个值，具体对齐方式与轴的方向有关。</p>
<ul>
<li><code>flex-start</code>（默认值）：主轴的起点对齐</li>
<li><code>flex-end</code>：主轴的终点对齐</li>
<li><code>center</code>： 主轴的中点对齐</li>
<li><code>space-between</code>：主轴两端对齐，项目之间的间隔都相等。</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<p><img src="justifycontent.png" alt></p>
<h2 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h2><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">align-items: flex-start | flex-end | center | baseline | stretch;</span><br></pre></td></tr></table></figure>
<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<ul>
<li><code>flex-start</code>：交叉轴的起点对齐。</li>
<li><code>flex-end</code>：交叉轴的终点对齐。</li>
<li><code>center</code>：交叉轴的中点对齐。</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
<p><img src="alignitems.png" alt></p>
<h2 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h2><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<p>即该属性对单行弹性盒子模型无效。（即：带有 <code>flex-wrap: nowrap</code>）。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br></pre></td></tr></table></figure>
<p>该属性可能取6个值。</p>
<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
<p><img src="aligncontent.png" alt></p>
<h1 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h1><p>以下6个属性设置在项目上。</p>
<ul>
<li><code>order</code></li>
<li><code>flex-grow</code></li>
<li><code>flex-shrink</code></li>
<li><code>flex-basis</code></li>
<li><code>flex</code></li>
<li><code>align-self</code></li>
</ul>
<h2 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h2><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">order</span>: &lt;<span class="selector-tag">integer</span>&gt;; <span class="comment">/* default 0 */</span></span><br></pre></td></tr></table></figure>
<p><img src="order.png" alt></p>
<h2 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h2><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">flex-grow</span>: &lt;<span class="selector-tag">number</span>&gt;; <span class="comment">/* default 0 */</span></span><br></pre></td></tr></table></figure>
<p><img src="flexgrow.png" alt></p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h2 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h2><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">flex-shrink</span>: &lt;<span class="selector-tag">number</span>&gt;; <span class="comment">/* default 1 */</span></span><br></pre></td></tr></table></figure>
<p><img src="flexshrink.png" alt></p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
<h2 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h2><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值是<code>auto</code>，即项目的本来大小。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">flex-basis: &lt;length&gt; | auto; /* default auto */</span><br></pre></td></tr></table></figure>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>
<h2 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h2><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]</span><br></pre></td></tr></table></figure>
<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h2 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h2><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br></pre></td></tr></table></figure>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Alignment/Box_Alignment_in_Flexbox" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Alignment/Box_Alignment_in_Flexbox</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Flex布局</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker入门（六）——Docker Compose</title>
    <url>/2019/12/11/Docker%E5%85%A5%E9%97%A8%EF%BC%88%E5%85%AD%EF%BC%89%E2%80%94%E2%80%94Docker-Compose/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker-Compose简介"><a href="#Docker-Compose简介" class="headerlink" title="Docker Compose简介"></a>Docker Compose简介</h1><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。其代码目前在 <a href="https://github.com/docker/compose" target="_blank" rel="noopener">https://github.com/docker/compose</a> 上开源。</p>
<p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p>
<a id="more"></a>
<p><code>Dockerfile</code> 模板文件可以让用户很方便的定义一个单独的应用容器。但是在平常使用中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p>
<p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p>
<p><strong><code>Compose</code> 中有两个重要的概念：</strong></p>
<ul>
<li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li>
<li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li>
</ul>
<p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p>
<p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p>
<h1 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h1><p><code>Compose</code> 支持 Linux、macOS、Windows 10 三大平台。</p>
<p><code>Compose</code> 可以通过 Python 的包管理工具 <code>pip</code> 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。</p>
<p><code>Docker Desktop for Mac/Windows</code> 自带 <code>docker-compose</code> 二进制文件，安装 Docker 之后可以直接使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line"></span><br><span class="line">docker-compose version 1.24.1, build 4667896b</span><br></pre></td></tr></table></figure>
<p>Linux 系统请使用以下介绍的方法安装。</p>
<h2 id="二进制包"><a href="#二进制包" class="headerlink" title="二进制包"></a>二进制包</h2><p>在 Linux 上的也安装十分简单，从 <a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">官方 GitHub Release</a> 处直接下载编译好的二进制文件即可。</p>
<p>例如，在 Linux 64 位系统上直接下载对应的二进制包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>
<h2 id="PIP-安装"><a href="#PIP-安装" class="headerlink" title="PIP 安装"></a>PIP 安装</h2><p><em>注：</em> <code>x86_64</code> 架构的 Linux 建议按照上边的方法下载二进制包进行安装，如果您计算机的架构是 <code>ARM</code> (例如，树莓派)，再使用 <code>pip</code> 安装。</p>
<p>这种方式是将 Compose 当作一个 Python 应用来从 pip 源中安装。</p>
<p>执行安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pip install -U docker-compose</span><br></pre></td></tr></table></figure>
<p>可以看到类似如下输出，说明安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Collecting docker-compose</span><br><span class="line">  Downloading docker-compose-1.24.1.tar.gz (149kB): 149kB downloaded</span><br><span class="line">...</span><br><span class="line">Successfully installed docker-compose cached-property requests texttable websocket-client docker-py dockerpty six enum34 backports.ssl-match-hostname ipaddress</span><br></pre></td></tr></table></figure>
<h2 id="bash-补全命令"><a href="#bash-补全命令" class="headerlink" title="bash 补全命令"></a>bash 补全命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -L https://raw.githubusercontent.com/docker/compose/1.24.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>如果是二进制包方式安装的，删除二进制文件即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>如果是通过 <code>pip</code> 安装的，则执行如下命令即可删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pip uninstall docker-compose</span><br></pre></td></tr></table></figure>
<h1 id="Compose使用"><a href="#Compose使用" class="headerlink" title="Compose使用"></a>Compose使用</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。</p>
<h2 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h2><p>新建文件夹，在该目录中编写 <code>app.py</code> 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    count = redis.incr(<span class="string">'hits'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! 该页面已被访问 &#123;&#125; 次。\n'</span>.format(count)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>编写 <code>Dockerfile</code> 文件，内容为</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span>-alpine</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /code</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /code</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install redis flask</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"python"</span>, <span class="string">"app.py"</span>]</span></span><br></pre></td></tr></table></figure>
<h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><p>编写 <code>docker-compose.yml</code> 文件，这个是 Compose 使用的主模板文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">"5000:5000"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">"redis:alpine"</span></span><br></pre></td></tr></table></figure>
<h2 id="运行compose项目"><a href="#运行compose项目" class="headerlink" title="运行compose项目"></a>运行compose项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure>
<p>此时访问本地 <code>5000</code> 端口，每次刷新页面，计数就会加 1。</p>
<h1 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h1><h2 id="命令对象与格式"><a href="#命令对象与格式" class="headerlink" title="命令对象与格式"></a>命令对象与格式</h2><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>
<p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p>
<p><code>docker-compose</code> 命令的基本的使用格式是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><ul>
<li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li>
<li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li>
<li><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</li>
<li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为 <code>bridge</code></li>
<li><code>--verbose</code> 输出更多调试信息。</li>
<li><code>-v, --version</code> 打印版本并退出。</li>
</ul>
<h2 id="命令使用说明"><a href="#命令使用说明" class="headerlink" title="命令使用说明"></a>命令使用说明</h2><h3 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h3><p>格式为 <code>docker-compose build [options] [SERVICE...]</code>。</p>
<p>构建（重新构建）项目中的服务容器。</p>
<p>服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p>
<p>可以随时在项目目录下运行 <code>docker-compose build</code> 来重新构建服务。</p>
<p>选项包括：</p>
<ul>
<li><code>--force-rm</code> 删除构建过程中的临时容器。</li>
<li><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</li>
<li><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</li>
</ul>
<h3 id="config"><a href="#config" class="headerlink" title="config"></a><code>config</code></h3><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p>
<h3 id="down"><a href="#down" class="headerlink" title="down"></a><code>down</code></h3><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h3><p>进入指定的容器。</p>
<h3 id="help"><a href="#help" class="headerlink" title="help"></a><code>help</code></h3><p>获得一个命令的帮助。</p>
<h3 id="images"><a href="#images" class="headerlink" title="images"></a><code>images</code></h3><p>列出 Compose 文件中包含的镜像。</p>
<h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a><code>kill</code></h3><p>格式为 <code>docker-compose kill [options] [SERVICE...]</code>。</p>
<p>通过发送 <code>SIGKILL</code> 信号来强制停止服务容器。</p>
<p>支持通过 <code>-s</code> 参数来指定发送的信号，例如通过如下指令发送 <code>SIGINT</code> 信号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose <span class="built_in">kill</span> -s SIGINT</span><br></pre></td></tr></table></figure>
<h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a><code>logs</code></h3><p>格式为 <code>docker-compose logs [options] [SERVICE...]</code>。</p>
<p>查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 <code>--no-color</code> 来关闭颜色。</p>
<p>该命令在调试问题的时候十分有用。</p>
<h3 id="pause"><a href="#pause" class="headerlink" title="pause"></a><code>pause</code></h3><p>格式为 <code>docker-compose pause [SERVICE...]</code>。</p>
<p>暂停一个服务容器。</p>
<h3 id="port"><a href="#port" class="headerlink" title="port"></a><code>port</code></h3><p>格式为 <code>docker-compose port [options] SERVICE PRIVATE_PORT</code>。</p>
<p>打印某个容器端口所映射的公共端口。</p>
<p>选项：</p>
<ul>
<li><code>--protocol=proto</code> 指定端口协议，tcp（默认值）或者 udp。</li>
<li><code>--index=index</code> 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。</li>
</ul>
<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a><code>ps</code></h3><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p>
<p>列出项目中目前的所有容器。</p>
<p>选项：</p>
<ul>
<li><code>-q</code> 只打印容器的 ID 信息。</li>
</ul>
<h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a><code>pull</code></h3><p>格式为 <code>docker-compose pull [options] [SERVICE...]</code>。</p>
<p>拉取服务依赖的镜像。</p>
<p>选项：</p>
<ul>
<li><code>--ignore-pull-failures</code> 忽略拉取镜像过程中的错误。</li>
</ul>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a><code>push</code></h3><p>推送服务依赖的镜像到 Docker 镜像仓库。</p>
<h3 id="restart"><a href="#restart" class="headerlink" title="restart"></a><code>restart</code></h3><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p>
<p>重启项目中的服务。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li>
</ul>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h3><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p>
<p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p>
<p>选项：</p>
<ul>
<li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li>
<li><code>-v</code> 删除容器所挂载的数据卷。</li>
</ul>
<h3 id="run"><a href="#run" class="headerlink" title="run"></a><code>run</code></h3><p>格式为 <code>docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</code>。</p>
<p>在指定服务上执行一个命令。</p>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose run ubuntu ping docker.com</span><br></pre></td></tr></table></figure>
<p>将会启动一个 ubuntu 服务容器，并执行 <code>ping docker.com</code> 命令。</p>
<p>默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。</p>
<p>该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。</p>
<p>两个不同点：</p>
<ul>
<li>给定命令将会覆盖原有的自动运行命令；</li>
<li>不会自动创建端口，以避免冲突。</li>
</ul>
<p>如果不希望自动启动关联的容器，可以使用 <code>--no-deps</code> 选项，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose run --no-deps web python manage.py shell</span><br></pre></td></tr></table></figure>
<p>将不会启动 web 容器所关联的其它容器。</p>
<p>选项：</p>
<ul>
<li><code>-d</code> 后台运行容器。</li>
<li><code>--name NAME</code> 为容器指定一个名字。</li>
<li><code>--entrypoint CMD</code> 覆盖默认的容器启动指令。</li>
<li><code>-e KEY=VAL</code> 设置环境变量值，可多次使用选项来设置多个环境变量。</li>
<li><code>-u, --user=&quot;&quot;</code> 指定运行容器的用户名或者 uid。</li>
<li><code>--no-deps</code> 不自动启动关联的服务容器。</li>
<li><code>--rm</code> 运行命令后自动删除容器，<code>d</code> 模式下将忽略。</li>
<li><code>-p, --publish=[]</code> 映射容器端口到本地主机。</li>
<li><code>--service-ports</code> 配置服务端口并映射到本地主机。</li>
<li><code>-T</code> 不分配伪 tty，意味着依赖 tty 的指令将无法运行。</li>
</ul>
<h3 id="scale"><a href="#scale" class="headerlink" title="scale"></a><code>scale</code></h3><p>格式为 <code>docker-compose scale [options] [SERVICE=NUM...]</code>。</p>
<p>设置指定服务运行的容器个数。</p>
<p>通过 <code>service=num</code> 的参数来设置数量。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose scale web=3 db=2</span><br></pre></td></tr></table></figure>
<p>将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。</p>
<p>一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>
</ul>
<h3 id="start"><a href="#start" class="headerlink" title="start"></a><code>start</code></h3><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p>
<p>启动已经存在的服务容器。</p>
<h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a><code>stop</code></h3><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p>
<p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>
</ul>
<h3 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h3><p>查看各个服务容器内运行的进程。</p>
<h3 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a><code>unpause</code></h3><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p>
<p>恢复处于暂停状态中的服务。</p>
<h3 id="up"><a href="#up" class="headerlink" title="up"></a><code>up</code></h3><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p>
<p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p>
<p>链接的服务都将会被自动启动，除非已经处于运行状态。</p>
<p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p>
<p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p>
<p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p>
<p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p>
<p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate</code>。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 <code>docker-compose up --no-deps -d</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p>
<p>选项：</p>
<ul>
<li><code>-d</code> 在后台运行服务容器。</li>
<li><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</li>
<li><code>--no-deps</code> 不启动服务所链接的容器。</li>
<li><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用。</li>
<li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</li>
<li><code>--no-build</code> 不自动构建缺失的服务镜像。</li>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>
</ul>
<h3 id="version"><a href="#version" class="headerlink" title="version"></a><code>version</code></h3><p>格式为 <code>docker-compose version</code>。</p>
<p>打印版本信息。</p>
<h1 id="Compose模版文件"><a href="#Compose模版文件" class="headerlink" title="Compose模版文件"></a>Compose模版文件</h1><p>模板文件是使用 <code>Compose</code> 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。</p>
<p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">examples/web</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/data"</span></span><br></pre></td></tr></table></figure>
<p>注意每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</p>
<p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置。</p>
<p>下面分别介绍各个指令的用法。</p>
<h2 id="build-1"><a href="#build-1" class="headerlink" title="build"></a><code>build</code></h2><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure>
<p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p>
<p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p>
<p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>cache_from</code> 指定构建镜像的缓存</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">cache_from:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">alpine:latest</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">corp/web_app:3.14</span></span><br></pre></td></tr></table></figure>
<h2 id="cap-add-cap-drop"><a href="#cap-add-cap-drop" class="headerlink" title="cap_add, cap_drop"></a><code>cap_add, cap_drop</code></h2><p>指定容器的内核能力（capacity）分配。</p>
<p>例如，让容器拥有所有能力可以指定为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cap_add:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ALL</span></span><br></pre></td></tr></table></figure>
<p>去掉 NET_ADMIN 能力可以指定为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cap_drop:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br></pre></td></tr></table></figure>
<h2 id="command"><a href="#command" class="headerlink" title="command"></a><code>command</code></h2><p>覆盖容器启动后默认执行的命令。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure>
<h2 id="configs"><a href="#configs" class="headerlink" title="configs"></a><code>configs</code></h2><p>仅用于 <code>Swarm mode</code>，详细内容请查看 <a href="https://yeasy.gitbooks.io/docker_practice/content/swarm_mode" target="_blank" rel="noopener"><code>Swarm mode</code></a> 一节。</p>
<h2 id="cgroup-parent"><a href="#cgroup-parent" class="headerlink" title="cgroup_parent"></a><code>cgroup_parent</code></h2><p>指定父 <code>cgroup</code> 组，意味着将继承该组的资源限制。</p>
<p>例如，创建了一个 cgroup 组名称为 <code>cgroups_1</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cgroup_parent:</span> <span class="string">cgroups_1</span></span><br></pre></td></tr></table></figure>
<h2 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a><code>container_name</code></h2><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p>
</blockquote>
<h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a><code>deploy</code></h2><p>仅用于 <code>Swarm mode</code>，详细内容请查看 <a href="https://yeasy.gitbooks.io/docker_practice/content/swarm_mode" target="_blank" rel="noopener"><code>Swarm mode</code></a> 一节</p>
<h2 id="devices"><a href="#devices" class="headerlink" title="devices"></a><code>devices</code></h2><p>指定设备映射关系。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">devices:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"/dev/ttyUSB1:/dev/ttyUSB0"</span></span><br></pre></td></tr></table></figure>
<h2 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a><code>depends_on</code></h2><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p>
</blockquote>
<h2 id="dns"><a href="#dns" class="headerlink" title="dns"></a><code>dns</code></h2><p>自定义 <code>DNS</code> 服务器。可以是一个值，也可以是一个列表。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure>
<h2 id="dns-search"><a href="#dns-search" class="headerlink" title="dns_search"></a><code>dns_search</code></h2><p>配置 <code>DNS</code> 搜索域。可以是一个值，也可以是一个列表。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dns_search:</span> <span class="string">example.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns_search:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">domain1.example.com</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">domain2.example.com</span></span><br></pre></td></tr></table></figure>
<h2 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a><code>tmpfs</code></h2><p>挂载一个 tmpfs 文件系统到容器。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tmpfs:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">tmpfs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/run</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure>
<h2 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a><code>env_file</code></h2><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p>
<p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p>
<p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env_file: .env</span><br><span class="line"></span><br><span class="line">env_file:</span><br><span class="line">  - ./common.env</span><br><span class="line">  - ./apps/web.env</span><br><span class="line">  - /opt/secrets.env</span><br></pre></td></tr></table></figure>
<p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># common.env: Set development environment</span></span><br><span class="line">PROG_ENV=development</span><br></pre></td></tr></table></figure>
<h2 id="environment"><a href="#environment" class="headerlink" title="environment"></a><code>environment</code></h2><p>设置环境变量。你可以使用数组或字典两种格式。</p>
<p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure>
<p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href="https://yaml.org/type/bool.html" target="_blank" rel="noopener">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">y|Y|yes|Yes|YES|n|N|no|No|NO|<span class="literal">true</span>|True|TRUE|<span class="literal">false</span>|False|FALSE|on|On|ON|off|Off|OFF</span><br></pre></td></tr></table></figure>
<h2 id="expose"><a href="#expose" class="headerlink" title="expose"></a><code>expose</code></h2><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p>
<p>仅可以指定内部端口为参数</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"3000"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"8000"</span></span><br></pre></td></tr></table></figure>
<h2 id="external-links"><a href="#external-links" class="headerlink" title="external_links"></a><code>external_links</code></h2><blockquote>
<p>注意：不建议使用该指令。</p>
</blockquote>
<p>链接到 <code>docker-compose.yml</code> 外部的容器，甚至并非 <code>Compose</code> 管理的外部容器。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">external_links:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">redis_1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">project_db_1:mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">project_db_1:postgresql</span></span><br></pre></td></tr></table></figure>
<h2 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a><code>extra_hosts</code></h2><p>类似 Docker 中的 <code>--add-host</code> 参数，指定额外的 host 名称映射信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">extra_hosts:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"googledns:8.8.8.8"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"dockerhub:52.1.157.61"</span></span><br></pre></td></tr></table></figure>
<p>会在启动后的服务容器中 <code>/etc/hosts</code> 文件中添加如下两条条目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">8.8.8.8 googledns</span><br><span class="line">52.1.157.61 dockerhub</span><br></pre></td></tr></table></figure>
<h2 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a><code>healthcheck</code></h2><p>通过命令检查容器是否健康运行。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line">  <span class="attr">test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost"</span><span class="string">]</span></span><br><span class="line">  <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="image"><a href="#image" class="headerlink" title="image"></a><code>image</code></h2><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">orchardup/postgresql</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">a4bc65fd</span></span><br></pre></td></tr></table></figure>
<h2 id="labels"><a href="#labels" class="headerlink" title="labels"></a><code>labels</code></h2><p>为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">labels:</span></span><br><span class="line">  <span class="attr">com.startupteam.description:</span> <span class="string">"webapp for a startup team"</span></span><br><span class="line">  <span class="attr">com.startupteam.department:</span> <span class="string">"devops department"</span></span><br><span class="line">  <span class="attr">com.startupteam.release:</span> <span class="string">"rc3 for v1.0"</span></span><br></pre></td></tr></table></figure>
<h2 id="links"><a href="#links" class="headerlink" title="links"></a><code>links</code></h2><blockquote>
<p>注意：不推荐使用该指令。</p>
</blockquote>
<h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a><code>logging</code></h2><p>配置日志选项。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">syslog</span></span><br><span class="line">  <span class="attr">options:</span></span><br><span class="line">    <span class="attr">syslog-address:</span> <span class="string">"tcp://192.168.0.42:123"</span></span><br></pre></td></tr></table></figure>
<p>目前支持三种日志驱动类型。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver:</span> <span class="string">"json-file"</span></span><br><span class="line"><span class="attr">driver:</span> <span class="string">"syslog"</span></span><br><span class="line"><span class="attr">driver:</span> <span class="string">"none"</span></span><br></pre></td></tr></table></figure>
<p><code>options</code> 配置日志驱动的相关参数。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">options:</span></span><br><span class="line">  <span class="attr">max-size:</span> <span class="string">"200k"</span></span><br><span class="line">  <span class="attr">max-file:</span> <span class="string">"10"</span></span><br></pre></td></tr></table></figure>
<h2 id="network-mode"><a href="#network-mode" class="headerlink" title="network_mode"></a><code>network_mode</code></h2><p>设置网络模式。使用和 <code>docker run</code> 的 <code>--network</code> 参数一样的值。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">"bridge"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"host"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"none"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"service:[service name]"</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"container:[container name/id]"</span></span><br></pre></td></tr></table></figure>
<h2 id="networks"><a href="#networks" class="headerlink" title="networks"></a><code>networks</code></h2><p>配置容器连接的网络。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">some-network</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">other-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">some-network:</span></span><br><span class="line">  <span class="attr">other-network:</span></span><br></pre></td></tr></table></figure>
<h2 id="pid"><a href="#pid" class="headerlink" title="pid"></a><code>pid</code></h2><p>跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pid:</span> <span class="string">"host"</span></span><br></pre></td></tr></table></figure>
<h2 id="ports"><a href="#ports" class="headerlink" title="ports"></a><code>ports</code></h2><p>暴露端口信息。</p>
<p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"3000"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"8000:8000"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"49100:22"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"127.0.0.1:8001:8001"</span></span><br></pre></td></tr></table></figure>
<p><em>注意：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 <code>YAML</code> 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</em></p>
<h2 id="secrets"><a href="#secrets" class="headerlink" title="secrets"></a><code>secrets</code></h2><p>存储敏感数据，例如 <code>mysql</code> 服务密码。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">MYSQL_ROOT_PASSWORD_FILE:</span> <span class="string">/run/secrets/db_root_password</span></span><br><span class="line">  <span class="attr">secrets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">db_root_password</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">my_other_secret</span></span><br><span class="line"></span><br><span class="line"><span class="attr">secrets:</span></span><br><span class="line">  <span class="attr">my_secret:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./my_secret.txt</span></span><br><span class="line">  <span class="attr">my_other_secret:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="security-opt"><a href="#security-opt" class="headerlink" title="security_opt"></a><code>security_opt</code></h2><p>指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如配置标签的用户名和角色名。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">security_opt:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">label:user:USER</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">label:role:ROLE</span></span><br></pre></td></tr></table></figure>
<h2 id="stop-signal"><a href="#stop-signal" class="headerlink" title="stop_signal"></a><code>stop_signal</code></h2><p>设置另一个信号来停止容器。在默认情况下使用的是 SIGTERM 停止容器。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stop_signal:</span> <span class="string">SIGUSR1</span></span><br></pre></td></tr></table></figure>
<h2 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a><code>sysctls</code></h2><p>配置容器内核参数。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="attr">net.core.somaxconn:</span> <span class="number">1024</span></span><br><span class="line">  <span class="attr">net.ipv4.tcp_syncookies:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.core.somaxconn=1024</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.ipv4.tcp_syncookies=0</span></span><br></pre></td></tr></table></figure>
<h2 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a><code>ulimits</code></h2><p>指定容器的 ulimits 限制值。</p>
<p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line">  <span class="attr">nproc:</span> <span class="number">65535</span></span><br><span class="line">  <span class="attr">nofile:</span></span><br><span class="line">    <span class="attr">soft:</span> <span class="number">20000</span></span><br><span class="line">    <span class="attr">hard:</span> <span class="number">40000</span></span><br></pre></td></tr></table></figure>
<h2 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a><code>volumes</code></h2><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p>
<p>该指令中路径支持相对路径。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br></pre></td></tr></table></figure>
<p>如果路径为数据卷名称，必须在文件中配置数据卷。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my_src:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br></pre></td></tr></table></figure>
<h2 id="其它指令"><a href="#其它指令" class="headerlink" title="其它指令"></a>其它指令</h2><p>此外，还有包括 <code>domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir</code> 等指令，基本跟 <code>docker run</code> 中对应参数的功能一致。</p>
<p>指定服务容器启动后执行的入口文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">entrypoint:</span> <span class="string">/code/entrypoint.sh</span></span><br></pre></td></tr></table></figure>
<p>指定容器中运行应用的用户名。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>
<p>指定容器中工作目录。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">working_dir:</span> <span class="string">/code</span></span><br></pre></td></tr></table></figure>
<p>指定容器中搜索域名、主机名、mac 地址等。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">domainname:</span> <span class="string">your_website.com</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">mac_address:</span> <span class="number">08</span><span class="number">-00</span><span class="number">-27</span><span class="number">-00</span><span class="string">-0C-0A</span></span><br></pre></td></tr></table></figure>
<p>允许容器中运行一些特权命令。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">privileged:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 <code>always</code> 或者 <code>unless-stopped</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>
<p>以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">read_only:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>打开标准输入，可以接受外部输入。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stdin_open:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>模拟一个伪终端。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tty:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="读取变量"><a href="#读取变量" class="headerlink" title="读取变量"></a>读取变量</h2><p>Compose 模板文件支持动态读取主机的系统环境变量和当前目录下的 <code>.env</code> 文件中的变量。</p>
<p>例如，下面的 Compose 文件将从运行它的环境中读取变量 <code>${MONGO_VERSION}</code> 的值，并写入执行的指令中。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">"mongo:$&#123;MONGO_VERSION&#125;"</span></span><br></pre></td></tr></table></figure>
<p>如果执行 <code>MONGO_VERSION=3.2 docker-compose up</code> 则会启动一个 <code>mongo:3.2</code> 镜像的容器；如果执行 <code>MONGO_VERSION=2.8 docker-compose up</code> 则会启动一个 <code>mongo:2.8</code> 镜像的容器。</p>
<p>若当前目录存在 <code>.env</code> 文件，执行 <code>docker-compose</code> 命令时将从该文件中读取变量。</p>
<p>在当前目录新建 <code>.env</code> 文件并写入以下内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 支持 # 号注释</span></span><br><span class="line">MONGO_VERSION=3.6</span><br></pre></td></tr></table></figure>
<p>执行 <code>docker-compose up</code> 则会启动一个 <code>mongo:3.6</code> 镜像的容器。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/</a></p>
<p>本文章摘抄于：<a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker入门（五）——Dockerfile</title>
    <url>/2019/12/05/Docker%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94Dockerfile/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Dockerfile简介"><a href="#Dockerfile简介" class="headerlink" title="Dockerfile简介"></a>Dockerfile简介</h1><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p>
<a id="more"></a>
<h1 id="利用-commit-理解镜像构成"><a href="#利用-commit-理解镜像构成" class="headerlink" title="利用 commit 理解镜像构成"></a>利用 commit 理解镜像构成</h1><p>理解Dockerfile定制镜像前先来了解一下<code>docker commit</code>。</p>
<p>镜像是容器的基础，每次执行 <code>docker run</code> 的时候都会指定哪个镜像作为容器运行的基础。在之前的例子中，我们所使用的都是来自于 Docker Hub 的镜像。直接使用这些镜像是可以满足一定的需求，而当这些镜像无法直接满足需求时，我们就需要定制这些镜像。</p>
<p>镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存储，是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层。</p>
<p>现在让我们以定制一个 Web 服务器为例子，来讲解镜像是如何构建的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --name webserver -d -p 80:80 nginx</span><br></pre></td></tr></table></figure>
<p>这条命令会用 <code>nginx</code> 镜像启动一个容器，命名为 <code>webserver</code>，并且映射了 80 端口，这样我们可以用浏览器去访问这个 <code>nginx</code> 服务器。</p>
<p>如果是在 Linux 本机运行的 Docker，或者如果使用的是 Docker Desktop for Mac/Windows，那么可以直接访问：<a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>；如果使用的是 Docker Toolbox，或者是在虚拟机、云服务器上安装的 Docker，则需要将 <code>localhost</code> 换为虚拟机地址或者实际云服务器地址。</p>
<p>直接用浏览器访问的话，我们会看到默认的 Nginx 欢迎页面。</p>
<p><img src="commit_hello_nginx.png" alt></p>
<p>现在，假设我们非常不喜欢这个欢迎页面，我们希望改成欢迎 Docker 的文字，我们可以使用 <code>docker exec</code> 命令进入容器，修改其内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it webserver bash</span><br><span class="line">root@3e3b6840ce9a:/<span class="comment"># echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html</span></span><br><span class="line">root@3e3b6840ce9a:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>我们以交互式终端方式进入 <code>webserver</code> 容器，并执行了 <code>bash</code> 命令，也就是获得一个可操作的 Shell。</p>
<p>然后，我们用 <code>Hello, Docker!</code> 覆盖了 <code>/usr/share/nginx/html/index.html</code> 的内容。</p>
<p>现在我们再刷新浏览器的话，会发现内容被改变了。</p>
<p><img src="commit_hello_nginx2.png" alt></p>
<p>现在我们定制好了变化，我们希望能将其保存下来形成镜像。</p>
<p>要知道，当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。而 Docker 提供了一个 <code>docker commit</code> 命令，可以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。</p>
<p><code>docker commit</code> 的语法格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</span><br></pre></td></tr></table></figure>
<p>我们可以用下面的命令将容器保存为镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker commit \</span><br><span class="line">    --author <span class="string">"Tao Wang &lt;twang2218@gmail.com&gt;"</span> \</span><br><span class="line">    --message <span class="string">"修改了默认网页"</span> \</span><br><span class="line">    webserver \</span><br><span class="line">    nginx:v2</span><br><span class="line">sha256:07e33465974800ce65751acc279adc6ed2dc5ed4e0838f8b86f0c87aa1795214</span><br></pre></td></tr></table></figure>
<p>其中 <code>--author</code> 是指定修改的作者，而 <code>--message</code> 则是记录本次修改的内容。这点和 <code>git</code> 版本控制相似，不过这里这些信息可以省略留空。</p>
<p>我们可以在 <code>docker image ls</code> 中看到这个新定制的镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls nginx</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               v2                  07e334659748        9 seconds ago       181.5 MB</span><br><span class="line">nginx               1.11                05a60462f8ba        12 days ago         181.5 MB</span><br><span class="line">nginx               latest              e43d811ce2f4        4 weeks ago         181.5 MB</span><br></pre></td></tr></table></figure>
<p>我们还可以用 <code>docker history</code> 具体查看镜像内的历史记录，如果比较 <code>nginx:latest</code> 的历史记录，我们会发现新增了我们刚刚提交的这一层。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">history</span> nginx:v2</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">07e334659748        54 seconds ago      nginx -g daemon off;                            95 B                修改了默认网页</span><br><span class="line">e43d811ce2f4        4 weeks ago         /bin/sh -c <span class="comment">#(nop)  CMD ["nginx" "-g" "daemon    0 B</span></span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c <span class="comment">#(nop)  EXPOSE 443/tcp 80/tcp        0 B</span></span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c ln -sf /dev/stdout /var/<span class="built_in">log</span>/nginx/   22 B</span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c apt-key adv --keyserver hkp://pgp.   58.46 MB</span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c <span class="comment">#(nop)  ENV NGINX_VERSION=1.11.5-1   0 B</span></span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c <span class="comment">#(nop)  MAINTAINER NGINX Docker Ma   0 B</span></span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/bash"]            0 B</span></span><br><span class="line">&lt;missing&gt;           4 weeks ago         /bin/sh -c <span class="comment">#(nop) ADD file:23aa4f893e3288698c   123 MB</span></span><br></pre></td></tr></table></figure>
<p>新的镜像定制好后，我们可以来运行这个镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name web2 -d -p 81:80 nginx:v2</span><br></pre></td></tr></table></figure>
<p>这里我们命名为新的服务为 <code>web2</code>，并且映射到 <code>81</code> 端口。如果是 Docker Desktop for Mac/Windows 或 Linux 桌面的话，我们就可以直接访问 <a href="http://localhost:81/" target="_blank" rel="noopener">http://localhost:81</a> 看到结果，其内容应该和之前修改后的 <code>webserver</code> 一样。</p>
<p>至此，我们第一次完成了定制镜像，使用的是 <code>docker commit</code> 命令，手动操作给旧的镜像添加了新的一层，形成新的镜像，对镜像多层存储应该有了更直观的感觉。</p>
<blockquote>
<p>注意： <code>docker commit</code> 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 <code>docker commit</code> 定制镜像，使用 <code>docker commit</code> 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是实际环境中并不会这样使用。</p>
<p>定制镜像应该使用 <code>Dockerfile</code> 来完成。如果你想要定制镜像请查看下一小节。</p>
</blockquote>
<h1 id="Dockerfile定制镜像"><a href="#Dockerfile定制镜像" class="headerlink" title="Dockerfile定制镜像"></a>Dockerfile定制镜像</h1><p>从<code>docker commit</code>中了解到镜像的定制实际上就是定制每一层所添加的配置、文件。</p>
<p>如果可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。</p>
<p>Dockerfile 是一个文本文件，其内包含了一条条的 <strong>指令(Instruction)</strong>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p>
<p>还以之前定制 <code>nginx</code> 镜像为例，这次我们使用 Dockerfile 来定制。</p>
<p>在一个空白目录中，建立一个文本文件，并命名为 <code>Dockerfile</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir mynginx</span><br><span class="line">$ <span class="built_in">cd</span> mynginx</span><br><span class="line">$ touch Dockerfile</span><br></pre></td></tr></table></figure>
<p>其内容为：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>
<p>这个 Dockerfile 很简单，一共就两行。涉及到了两条指令，<code>FROM</code> 和 <code>RUN</code>。</p>
<h2 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h2><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 <code>nginx</code> 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 <code>FROM</code> 就是指定 <strong>基础镜像</strong>，因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令。</p>
<p>在 <a href="https://hub.docker.com/search?q=&amp;type=image&amp;image_filter=official" target="_blank" rel="noopener">Docker Hub</a> 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 <a href="https://hub.docker.com/_/nginx/" target="_blank" rel="noopener"><code>nginx</code></a>、<a href="https://hub.docker.com/_/redis/" target="_blank" rel="noopener"><code>redis</code></a>、<a href="https://hub.docker.com/_/mongo/" target="_blank" rel="noopener"><code>mongo</code></a>、<a href="https://hub.docker.com/_/mysql/" target="_blank" rel="noopener"><code>mysql</code></a>、<a href="https://hub.docker.com/_/httpd/" target="_blank" rel="noopener"><code>httpd</code></a>、<a href="https://hub.docker.com/_/php/" target="_blank" rel="noopener"><code>php</code></a>、<a href="https://hub.docker.com/_/tomcat/" target="_blank" rel="noopener"><code>tomcat</code></a> 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 <a href="https://hub.docker.com/_/node" target="_blank" rel="noopener"><code>node</code></a>、<a href="https://hub.docker.com/_/openjdk/" target="_blank" rel="noopener"><code>openjdk</code></a>、<a href="https://hub.docker.com/_/python/" target="_blank" rel="noopener"><code>python</code></a>、<a href="https://hub.docker.com/_/ruby/" target="_blank" rel="noopener"><code>ruby</code></a>、<a href="https://hub.docker.com/_/golang/" target="_blank" rel="noopener"><code>golang</code></a> 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。</p>
<p>如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 <a href="https://hub.docker.com/_/ubuntu/" target="_blank" rel="noopener"><code>ubuntu</code></a>、<a href="https://hub.docker.com/_/debian/" target="_blank" rel="noopener"><code>debian</code></a>、<a href="https://hub.docker.com/_/centos/" target="_blank" rel="noopener"><code>centos</code></a>、<a href="https://hub.docker.com/_/fedora/" target="_blank" rel="noopener"><code>fedora</code></a>、<a href="https://hub.docker.com/_/alpine/" target="_blank" rel="noopener"><code>alpine</code></a> 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。</p>
<p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 <code>scratch</code>。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>如果你以 <code>scratch</code> 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p>
<p>不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 <a href="https://hub.docker.com/_/swarm/" target="_blank" rel="noopener"><code>swarm</code></a>、<a href="https://quay.io/repository/coreos/etcd" target="_blank" rel="noopener"><code>etcd</code></a>。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 <code>FROM scratch</code> 会让镜像体积更加小巧。使用 <a href="https://golang.org/" target="_blank" rel="noopener">Go 语言</a> 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。</p>
<h2 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h2><p><code>RUN</code> 指令是用来执行命令行命令的。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有两种：</p>
<ul>
<li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 <code>RUN</code> 指令就是这种格式。</li>
</ul>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure>
<ul>
<li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li>
</ul>
<p>既然 <code>RUN</code> 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:stretch</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y gcc libc6-dev make wget</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/redis</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> make -C /usr/src/redis</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> make -C /usr/src/redis install</span></span><br></pre></td></tr></table></figure>
<p>之前说过，Dockerfile 中每一个指令都会建立一层，<code>RUN</code> 也不例外。每一个 <code>RUN</code> 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，<code>commit</code> 这一层的修改，构成新的镜像。</p>
<p>而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。</p>
<p><em>Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</em></p>
<p>上面的 <code>Dockerfile</code> 正确的写法应该是这样：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:stretch</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> buildDeps=<span class="string">'gcc libc6-dev make wget'</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y <span class="variable">$buildDeps</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir -p /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make -C /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make -C /usr/src/redis install \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm redis.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -r /usr/src/redis \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get purge -y --auto-remove <span class="variable">$buildDeps</span></span></span><br></pre></td></tr></table></figure>
<p>首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 <code>RUN</code> 对一一对应不同的命令，而是仅仅使用一个 <code>RUN</code> 指令，并使用 <code>&amp;&amp;</code> 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。</p>
<p>并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 <code>\</code> 的命令换行方式，以及行首 <code>#</code> 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。</p>
<p>此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 <code>apt</code> 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p>
<p>很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。</p>
<h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个 Dockerfile 的内容，那么让我们来构建这个镜像吧。</p>
<p>在 <code>Dockerfile</code> 文件所在目录执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t nginx:v3 .</span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Step 1 : FROM nginx</span><br><span class="line"> ---&gt; e43d811ce2f4</span><br><span class="line">Step 2 : RUN <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 9cdc27646c7b</span><br><span class="line"> ---&gt; 44aa4490ce2c</span><br><span class="line">Removing intermediate container 9cdc27646c7b</span><br><span class="line">Successfully built 44aa4490ce2c</span><br></pre></td></tr></table></figure>
<p>从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 <code>Step 2</code> 中，如同我们之前所说的那样，<code>RUN</code> 指令启动了一个容器 <code>9cdc27646c7b</code>，执行了所要求的命令，并最后提交了这一层 <code>44aa4490ce2c</code>，随后删除了所用到的这个容器 <code>9cdc27646c7b</code>。</p>
<p>这里我们使用了 <code>docker build</code> 命令进行镜像构建。其格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure>
<p>在这里我们指定了最终镜像的名称 <code>-t nginx:v3</code>，构建成功后，我们可以像之前运行 <code>nginx:v2</code> 那样来运行这个镜像，其结果会和 <code>nginx:v2</code> 一样。</p>
<h2 id="镜像构建上下文（Context）"><a href="#镜像构建上下文（Context）" class="headerlink" title="镜像构建上下文（Context）"></a>镜像构建上下文（Context）</h2><p>如果注意，会看到 <code>docker build</code> 命令最后有一个 <code>.</code>。<code>.</code> 表示当前目录，而 <code>Dockerfile</code> 就在当前目录，因此不少初学者以为这个路径是在指定 <code>Dockerfile</code> 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定 <strong>上下文路径</strong>。那么什么是上下文呢？</p>
<p>首先我们要理解 <code>docker build</code> 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 <a href="https://docs.docker.com/develop/sdk/" target="_blank" rel="noopener">Docker Remote API</a>，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 <code>docker</code> 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p>
<p>当我们进行镜像构建的时候，并非所有定制都会通过 <code>RUN</code> 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 <code>COPY</code> 指令、<code>ADD</code> 指令等。而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？</p>
<p>这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code> 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p>
<p>如果在 <code>Dockerfile</code> 中这么写：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> ./package.json /app/</span></span><br></pre></td></tr></table></figure>
<p>这并不是要复制执行 <code>docker build</code> 命令所在的目录下的 <code>package.json</code>，也不是复制 <code>Dockerfile</code> 所在目录下的 <code>package.json</code>，而是复制 <strong>上下文（context）</strong> 目录下的 <code>package.json</code>。</p>
<p>因此，<code>COPY</code> 这类指令中的源文件的路径都是<em>相对路径</em>。这也是初学者经常会问的为什么 <code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p>
<p>现在就可以理解刚才的命令 <code>docker build -t nginx:v3 .</code> 中的这个 <code>.</code>，实际上是在指定上下文的目录，<code>docker build</code> 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p>
<p>如果观察 <code>docker build</code> 输出，我们其实已经看到了这个发送上下文的过程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t nginx:v3 .</span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 <code>COPY /opt/xxxx /app</code> 不工作后，于是干脆将 <code>Dockerfile</code> 放到了硬盘根目录去构建，结果发现 <code>docker build</code> 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 <code>docker build</code> 打包整个硬盘，这显然是使用错误。</p>
<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p>
<p>那么为什么会有人误以为 <code>.</code> 是指定 <code>Dockerfile</code> 所在目录呢？这是因为在默认情况下，如果不额外指定 <code>Dockerfile</code> 的话，会将上下文目录下的名为 <code>Dockerfile</code> 的文件作为 Dockerfile。</p>
<p>这只是默认行为，实际上 <code>Dockerfile</code> 的文件名并不要求必须为 <code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为 <code>Dockerfile</code>。</p>
<p>一般使用默认的文件名 <code>Dockerfile</code>，以及会将其置于镜像构建上下文目录中。</p>
<h2 id="其它-docker-build-的用法"><a href="#其它-docker-build-的用法" class="headerlink" title="其它 docker build 的用法"></a>其它 <code>docker build</code> 的用法</h2><h3 id="直接用-Git-repo-进行构建"><a href="#直接用-Git-repo-进行构建" class="headerlink" title="直接用 Git repo 进行构建"></a>直接用 Git repo 进行构建</h3><p>或许你已经注意到了，<code>docker build</code> 还支持从 URL 构建，比如可以直接从 Git repo 中构建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build https://github.com/twang2218/gitlab-ce-zh.git<span class="comment">#:11.1</span></span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Step 1 : FROM gitlab/gitlab-ce:11.1.0-ce.0</span><br><span class="line">11.1.0-ce.0: Pulling from gitlab/gitlab-ce</span><br><span class="line">aed15891ba52: Already exists</span><br><span class="line">773ae8583d14: Already exists</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这行命令指定了构建所需的 Git repo，并且指定默认的 <code>master</code> 分支，构建目录为 <code>/11.1/</code>，然后 Docker 就会自己去 <code>git clone</code> 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p>
<h3 id="用给定的-tar-压缩包构建"><a href="#用给定的-tar-压缩包构建" class="headerlink" title="用给定的 tar 压缩包构建"></a>用给定的 tar 压缩包构建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build http://server/context.tar.gz</span><br></pre></td></tr></table></figure>
<p>如果所给出的 URL 不是个 Git repo，而是个 <code>tar</code> 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。</p>
<h3 id="从标准输入中读取-Dockerfile-进行构建"><a href="#从标准输入中读取-Dockerfile-进行构建" class="headerlink" title="从标准输入中读取 Dockerfile 进行构建"></a>从标准输入中读取 Dockerfile 进行构建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build - &lt; Dockerfile</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat Dockerfile | docker build -</span><br></pre></td></tr></table></figure>
<p>如果标准输入传入的是文本文件，则将其视为 <code>Dockerfile</code>，并开始构建。这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 <code>COPY</code> 进镜像之类的事情。</p>
<h3 id="从标准输入中读取上下文压缩包进行构建"><a href="#从标准输入中读取上下文压缩包进行构建" class="headerlink" title="从标准输入中读取上下文压缩包进行构建"></a>从标准输入中读取上下文压缩包进行构建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build - &lt; context.tar.gz</span><br></pre></td></tr></table></figure>
<p>如果发现标准输入的文件格式是 <code>gzip</code>、<code>bzip2</code> 以及 <code>xz</code> 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。</p>
<h1 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h1><p>一张图来大概了解一下</p>
<p><img src="command.webp" alt></p>
<h2 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h2><p>格式：</p>
<ul>
<li><code>COPY [--chown=:] &lt;源路径&gt;... &lt;目标路径&gt;</code></li>
<li><code>COPY [--chown=:] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li>
</ul>
<p>和 <code>RUN</code> 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。</p>
<p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。比如：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json /usr/src/app/</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match" target="_blank" rel="noopener"><code>filepath.Match</code></a> 规则，如：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> hom* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> hom?.txt /mydir/</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>
<p>此外，还需要注意一点，使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p>
<p>在使用该指令的时候还可以加上 <code>--chown=:</code> 选项来改变文件的所属用户及所属组。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --chown=55:mygroup files* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --chown=bin files* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --chown=1 files* /mydir/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --chown=10:11 files* /mydir/</span></span><br></pre></td></tr></table></figure>
<h2 id="ADD-更高级的复制文件"><a href="#ADD-更高级的复制文件" class="headerlink" title="ADD 更高级的复制文件"></a>ADD 更高级的复制文件</h2><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p>
<p>比如 <code>&lt;源路径&gt;</code> 可以是一个 <code>URL</code>，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。下载后的文件权限自动设置为 <code>600</code>，如果这并不是想要的权限，那么还需要增加额外的一层 <code>RUN</code> 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 <code>RUN</code> 指令进行解压缩。所以不如直接使用 <code>RUN</code> 指令，然后使用 <code>wget</code> 或者 <code>curl</code> 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。</p>
<p>如果 <code>&lt;源路径&gt;</code> 为一个 <code>tar</code> 压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;目标路径&gt;</code> 去。</p>
<p>在某些情况下，这个自动解压缩的功能非常有用，比如官方镜像 <code>ubuntu</code> 中：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用 <code>ADD</code> 命令了。</p>
<p>在 Docker 官方的 <a href="https://yeasy.gitbooks.io/docker_practice/content/appendix/best_practices.html" target="_blank" rel="noopener">Dockerfile 最佳实践文档</a> 中要求，尽可能的使用 <code>COPY</code>，因为 <code>COPY</code> 的语义很明确，就是复制文件而已，而 <code>ADD</code> 则包含了更复杂的功能，其行为也不一定很清晰。最适合使用 <code>ADD</code> 的场合，就是所提及的需要自动解压缩的场合。</p>
<p>另外需要注意的是，<code>ADD</code> 指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p>
<p>因此在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p>
<p>在使用该指令的时候还可以加上 <code>--chown=:</code> 选项来改变文件的所属用户及所属组。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> --chown=55:mygroup files* /mydir/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> --chown=bin files* /mydir/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> --chown=1 files* /mydir/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> --chown=10:11 files* /mydir/</span></span><br></pre></td></tr></table></figure>
<h2 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h2><p><code>CMD</code> 指令的格式和 <code>RUN</code> 相似，也是两种格式：</p>
<ul>
<li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li>
<li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li>
<li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li>
</ul>
<p>之前介绍容器的时候曾经说过，Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。<code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。</p>
<p>在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，<code>ubuntu</code> 镜像默认的 <code>CMD</code> 是 <code>/bin/bash</code>，如果我们直接 <code>docker run -it ubuntu</code> 的话，会直接进入 <code>bash</code>。我们也可以在运行时指定运行别的命令，如 <code>docker run -it ubuntu cat /etc/os-release</code>。这就是用 <code>cat /etc/os-release</code> 命令替换了默认的 <code>/bin/bash</code> 命令了，输出了系统版本信息。</p>
<p>在指令格式上，一般推荐使用 <code>exec</code> 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 <code>&quot;</code>，而不要使用单引号。</p>
<p>如果使用 <code>shell</code> 格式的话，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。比如：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$HOME</span></span></span><br></pre></td></tr></table></figure>
<p>在实际执行中，会将其变更为：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo <span class="variable">$HOME</span>"</span> ]</span></span><br></pre></td></tr></table></figure>
<p>这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。</p>
<p>提到 <code>CMD</code> 就不得不提容器中应用在前台执行和后台执行的问题。这是初学者常出现的一个混淆。</p>
<p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 <code>systemd</code> 去启动后台服务，容器内没有后台服务的概念。</p>
<p>一些初学者将 <code>CMD</code> 写为：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> service nginx start</span></span><br></pre></td></tr></table></figure>
<p>然后发现容器执行后就立即退出了。甚至在容器内去使用 <code>systemctl</code> 命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。</p>
<p><strong>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</strong></p>
<p>而使用 <code>service nginx start</code> 命令，则是希望 upstart 来以后台守护进程形式启动 <code>nginx</code> 服务。而刚才说了 <code>CMD service nginx start</code> 会被理解为 <code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]</code>，因此主进程实际上是 <code>sh</code>。那么当 <code>service nginx start</code> 命令结束后，<code>sh</code> 也就结束了，<code>sh</code> 作为主进程退出了，自然就会令容器退出。</p>
<p>正确的做法是直接执行 <code>nginx</code> 可执行文件，并且要求以前台形式运行。比如：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>]</span></span><br></pre></td></tr></table></figure>
<h2 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h2><p><code>ENTRYPOINT</code> 的格式和 <code>RUN</code> 指令格式一样，分为 <code>exec</code> 格式和 <code>shell</code> 格式。</p>
<p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p>
<p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;ENTRYPOINT&gt; <span class="string">"&lt;CMD&gt;"</span></span><br></pre></td></tr></table></figure>
<p>那么有了 <code>CMD</code> 后，为什么还要有 <code>ENTRYPOINT</code> 呢？这种 <code>&quot;&quot;</code> 有什么好处么？让我们来看几个场景。</p>
<h3 id="场景一：让镜像变成像命令一样使用"><a href="#场景一：让镜像变成像命令一样使用" class="headerlink" title="场景一：让镜像变成像命令一样使用"></a>场景一：让镜像变成像命令一样使用</h3><p>假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用 <code>CMD</code> 来实现：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y curl \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"curl"</span>, <span class="string">"-s"</span>, <span class="string">"https://ip.cn"</span> ]</span></span><br></pre></td></tr></table></figure>
<p>假如我们使用 <code>docker build -t myip .</code> 来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run myip</span><br><span class="line">当前 IP：61.148.226.66 来自：北京市 联通</span><br></pre></td></tr></table></figure>
<p>嗯，这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的 <code>CMD</code> 中可以看到实质的命令是 <code>curl</code>，那么如果我们希望显示 HTTP 头信息，就需要加上 <code>-i</code> 参数。那么我们可以直接加 <code>-i</code> 参数给 <code>docker run myip</code> 么？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run myip -i</span><br><span class="line">docker: Error response from daemon: invalid header field value <span class="string">"oci runtime error: container_linux.go:247: starting container process caused \"exec: \\\"-i\\\": executable file not found in <span class="variable">$PATH</span>\"\n"</span>.</span><br></pre></td></tr></table></figure>
<p>我们可以看到可执行文件找不到的报错，<code>executable file not found</code>。之前我们说过，跟在镜像名后面的是 <code>command</code>，运行时会替换 <code>CMD</code> 的默认值。因此这里的 <code>-i</code> 替换了原来的 <code>CMD</code>，而不是添加在原来的 <code>curl -s https://ip.cn</code> 后面。而 <code>-i</code> 根本不是命令，所以自然找不到。</p>
<p>那么如果我们希望加入 <code>-i</code> 这参数，我们就必须重新完整的输入这个命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run myip curl -s https://ip.cn -i</span><br></pre></td></tr></table></figure>
<p>这显然不是很好的解决方案，而使用 <code>ENTRYPOINT</code> 就可以解决这个问题。现在我们重新用 <code>ENTRYPOINT</code> 来实现这个镜像：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y curl \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">"curl"</span>, <span class="string">"-s"</span>, <span class="string">"https://ip.cn"</span> ]</span></span><br></pre></td></tr></table></figure>
<p>这次我们再来尝试直接使用 <code>docker run myip -i</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run myip</span><br><span class="line">当前 IP：61.148.226.66 来自：北京市 联通</span><br><span class="line"></span><br><span class="line">$ docker run myip -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.8.0</span><br><span class="line">Date: Tue, 22 Nov 2016 05:12:40 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Powered-By: PHP/5.6.24-1~dotdeb+7.1</span><br><span class="line">X-Cache: MISS from cache-2</span><br><span class="line">X-Cache-Lookup: MISS from cache-2:80</span><br><span class="line">X-Cache: MISS from proxy-2_6</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Via: 1.1 cache-2:80, 1.1 proxy-2_6:8006</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">当前 IP：61.148.226.66 来自：北京市 联通</span><br></pre></td></tr></table></figure>
<p>可以看到，这次成功了。这是因为当存在 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的内容将会作为参数传给 <code>ENTRYPOINT</code>，而这里 <code>-i</code> 就是新的 <code>CMD</code>，因此会作为参数传给 <code>curl</code>，从而达到了我们预期的效果。</p>
<h3 id="场景二：应用运行前的准备工作"><a href="#场景二：应用运行前的准备工作" class="headerlink" title="场景二：应用运行前的准备工作"></a>场景二：应用运行前的准备工作</h3><p>启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。</p>
<p>比如 <code>mysql</code> 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。</p>
<p>此外，可能希望避免使用 <code>root</code> 用户去启动服务，从而提高安全性，而在启动服务前还需要以 <code>root</code> 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用 <code>root</code> 身份执行，方便调试等。</p>
<p>这些准备工作是和容器 <code>CMD</code> 无关的，无论 <code>CMD</code> 为什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入 <code>ENTRYPOINT</code> 中去执行，而这个脚本会将接到的参数（也就是 <code></code>）作为命令，在脚本最后执行。比如官方镜像 <code>redis</code> 中就是这么做的：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.4</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> addgroup -S redis &amp;&amp; adduser -S -G redis redis</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"docker-entrypoint.sh"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"redis-server"</span> ]</span></span><br></pre></td></tr></table></figure>
<p>可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 <code>ENTRYPOINT</code> 为 <code>docker-entrypoint.sh</code> 脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># allow the container to be started with `--user`</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'redis-server'</span> -a <span class="string">"<span class="variable">$(id -u)</span>"</span> = <span class="string">'0'</span> ]; <span class="keyword">then</span></span><br><span class="line">    chown -R redis .</span><br><span class="line">    <span class="built_in">exec</span> su-exec redis <span class="string">"<span class="variable">$0</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure>
<p>该脚本的内容就是根据 <code>CMD</code> 的内容来判断，如果是 <code>redis-server</code> 的话，则切换到 <code>redis</code> 用户身份启动服务器，否则依旧使用 <code>root</code> 身份执行。比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -it redis id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure>
<h2 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h2><p>格式有两种：</p>
<ul>
<li><code>ENV</code></li>
<li><code>ENV = =...</code></li>
</ul>
<p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 <code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ENV VERSION=1.0 DEBUG=on \</span><br><span class="line">    NAME=&quot;Happy Feet&quot;</span><br></pre></td></tr></table></figure>
<p>这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p>
<p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 <code>node</code> 镜像 <code>Dockerfile</code> 中，就有类似这样的代码：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">7.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -SLO <span class="string">"https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz"</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; curl -SLO <span class="string">"https://nodejs.org/dist/v<span class="variable">$NODE_VERSION</span>/SHASUMS256.txt.asc"</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \</span></span><br><span class="line"><span class="bash">  &amp;&amp; grep <span class="string">" node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz\$"</span> SHASUMS256.txt | sha256sum -c - \</span></span><br><span class="line"><span class="bash">  &amp;&amp; tar -xJf <span class="string">"node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz"</span> -C /usr/<span class="built_in">local</span> --strip-components=1 \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm <span class="string">"node-v<span class="variable">$NODE_VERSION</span>-linux-x64.tar.xz"</span> SHASUMS256.txt.asc SHASUMS256.txt \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /usr/<span class="built_in">local</span>/bin/node /usr/<span class="built_in">local</span>/bin/nodejs</span></span><br></pre></td></tr></table></figure>
<p>在这里先定义了环境变量 <code>NODE_VERSION</code>，其后的 <code>RUN</code> 这层里，多次使用 <code>$NODE_VERSION</code> 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 <code>7.2.0</code> 即可，<code>Dockerfile</code> 构建维护变得更轻松了。</p>
<p>下列指令可以支持环境变量展开： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>FROM</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>、<code>RUN</code>。</p>
<p>可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 <code>Dockerfile</code> 制作更多的镜像，只需使用不同的环境变量即可。</p>
<h2 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h2><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p>
<p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p>
<p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p>
<p>在 1.13 之前的版本，要求 <code>--build-arg</code> 中的参数名，必须在 <code>Dockerfile</code> 中用 <code>ARG</code> 定义过了，换句话说，就是 <code>--build-arg</code> 指定的参数，必须在 <code>Dockerfile</code> 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 <code>Dockerfile</code> 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p>
<h2 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h2><p>格式为：</p>
<ul>
<li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li>
<li><code>VOLUME &lt;路径&gt;</code></li>
</ul>
<p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 <code>Dockerfile</code> 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data</span></span><br></pre></td></tr></table></figure>
<p>这里的 <code>/data</code> 目录就会在运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -v mydata:/data xxxx</span><br></pre></td></tr></table></figure>
<p>在这行命令中，就使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置。</p>
<h2 id="EXPOSE-声明端口"><a href="#EXPOSE-声明端口" class="headerlink" title="EXPOSE 声明端口"></a>EXPOSE 声明端口</h2><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code>。</p>
<p><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</p>
<p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>
<h2 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h2><p>格式为 <code>WORKDIR &lt;工作目录路径&gt;</code>。</p>
<p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。</p>
<p>之前提到一些初学者常犯的错误是把 <code>Dockerfile</code> 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"hello"</span> &gt; world.txt</span></span><br></pre></td></tr></table></figure>
<p>如果将这个 <code>Dockerfile</code> 进行构建镜像运行后，会发现找不到 <code>/app/world.txt</code> 文件，或者其内容不是 <code>hello</code>。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 <code>Dockerfile</code> 中，这两行 <code>RUN</code> 命令的执行环境根本不同，是两个完全不同的容器。这就是对 <code>Dockerfile</code> 构建分层存储的概念不了解所导致的错误。</p>
<p>之前说过每一个 <code>RUN</code> 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 <code>RUN cd /app</code> 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</p>
<p>因此如果需要改变以后各层的工作目录的位置，那么应该使用 <code>WORKDIR</code> 指令。</p>
<h2 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a>USER 指定当前用户</h2><p>格式：<code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></p>
<p><code>USER</code> 指令和 <code>WORKDIR</code> 相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code> 是改变工作目录，<code>USER</code> 则是改变之后层的执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 这类命令的身份。</p>
<p>当然，和 <code>WORKDIR</code> 一样，<code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span></span><br><span class="line"><span class="keyword">USER</span> redis</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [ <span class="string">"redis-server"</span> ]</span></span><br></pre></td></tr></table></figure>
<p>如果以 <code>root</code> 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 <code>su</code> 或者 <code>sudo</code>，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 <a href="https://github.com/tianon/gosu" target="_blank" rel="noopener"><code>gosu</code></a>。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span></span><br><span class="line"><span class="comment"># 下载 gosu</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget -O /usr/<span class="built_in">local</span>/bin/gosu <span class="string">"https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod +x /usr/<span class="built_in">local</span>/bin/gosu \</span></span><br><span class="line"><span class="bash">    &amp;&amp; gosu nobody <span class="literal">true</span></span></span><br><span class="line"><span class="comment"># 设置 CMD，并以另外的用户执行</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"exec"</span>, <span class="string">"gosu"</span>, <span class="string">"redis"</span>, <span class="string">"redis-server"</span> ]</span></span><br></pre></td></tr></table></figure>
<h2 id="HEALTHCHECK-健康检查"><a href="#HEALTHCHECK-健康检查" class="headerlink" title="HEALTHCHECK 健康检查"></a>HEALTHCHECK 健康检查</h2><p>格式：</p>
<ul>
<li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li>
<li><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li>
</ul>
<p><code>HEALTHCHECK</code> 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。</p>
<p>在没有 <code>HEALTHCHECK</code> 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。</p>
<p>而自 1.12 之后，Docker 提供了 <code>HEALTHCHECK</code> 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。</p>
<p>当在一个镜像指定了 <code>HEALTHCHECK</code> 指令后，用其启动容器，初始状态会为 <code>starting</code>，在 <code>HEALTHCHECK</code> 指令检查成功后变为 <code>healthy</code>，如果连续一定次数失败，则会变为 <code>unhealthy</code>。</p>
<p><code>HEALTHCHECK</code> 支持下列选项：</p>
<ul>
<li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li>
<li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li>
<li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</li>
</ul>
<p>和 <code>CMD</code>, <code>ENTRYPOINT</code> 一样，<code>HEALTHCHECK</code> 只可以出现一次，如果写了多个，只有最后一个生效。</p>
<p>在 <code>HEALTHCHECK [选项] CMD</code> 后面的命令，格式和 <code>ENTRYPOINT</code> 一样，分为 <code>shell</code> 格式，和 <code>exec</code> 格式。命令的返回值决定了该次健康检查的成功与否：<code>0</code>：成功；<code>1</code>：失败；<code>2</code>：保留，不要使用这个值。</p>
<p>假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 <code>curl</code> 来帮助判断，其 <code>Dockerfile</code> 的 <code>HEALTHCHECK</code> 可以这么写：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="bash"> --interval=5s --timeout=3s \</span></span><br><span class="line"><span class="bash">  CMD curl -fs http://localhost/ || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure>
<p>这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 <code>curl -fs http://localhost/ || exit 1</code> 作为健康检查命令。</p>
<p>使用 <code>docker build</code> 来构建这个镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t myweb:v1 .</span><br></pre></td></tr></table></figure>
<p>构建好了后，我们启动一个容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d --name web -p 80:80 myweb:v1</span><br></pre></td></tr></table></figure>
<p>当运行该镜像后，可以通过 <code>docker container ls</code> 看到最初的状态为 <code>(health: starting)</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES</span><br><span class="line">03e28eb00bd0        myweb:v1            <span class="string">"nginx -g 'daemon off"</span>   3 seconds ago       Up 2 seconds (health: starting)   80/tcp, 443/tcp     web</span><br></pre></td></tr></table></figure>
<p>在等待几秒钟后，再次 <code>docker container ls</code>，就会看到健康状态变化为了 <code>(healthy)</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">03e28eb00bd0        myweb:v1            <span class="string">"nginx -g 'daemon off"</span>   18 seconds ago      Up 16 seconds (healthy)   80/tcp, 443/tcp     web</span><br></pre></td></tr></table></figure>
<p>如果健康检查连续失败超过了重试次数，状态就会变为 <code>(unhealthy)</code>。</p>
<p>为了帮助排障，健康检查命令的输出（包括 <code>stdout</code> 以及 <code>stderr</code>）都会被存储于健康状态里，可以用 <code>docker inspect</code> 来查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker inspect --format <span class="string">'&#123;&#123;json .State.Health&#125;&#125;'</span> web | python -m json.tool</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"FailingStreak"</span>: 0,</span><br><span class="line">    <span class="string">"Log"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"End"</span>: <span class="string">"2016-11-25T14:35:37.940957051Z"</span>,</span><br><span class="line">            <span class="string">"ExitCode"</span>: 0,</span><br><span class="line">            <span class="string">"Output"</span>: <span class="string">"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\n    body &#123;\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    &#125;\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\"http://nginx.org/\"&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\"http://nginx.com/\"&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n"</span>,</span><br><span class="line">            <span class="string">"Start"</span>: <span class="string">"2016-11-25T14:35:37.780192565Z"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"Status"</span>: <span class="string">"healthy"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ONBUILD-为他人做嫁衣裳"><a href="#ONBUILD-为他人做嫁衣裳" class="headerlink" title="ONBUILD 为他人做嫁衣裳"></a>ONBUILD 为他人做嫁衣裳</h2><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p>
<p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p>
<p><code>Dockerfile</code> 中的其它指令都是为了定制当前镜像而准备的，唯有 <code>ONBUILD</code> 是为了帮助别人定制自己而准备的。</p>
<p>假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 <code>npm</code> 进行包管理，所有依赖、配置、启动信息等会放到 <code>package.json</code> 文件里。在拿到程序代码后，需要先进行 <code>npm install</code> 才可以获得所有需要的依赖。然后就可以通过 <code>npm start</code> 来启动应用。因此，一般来说会这样写 <code>Dockerfile</code>：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:slim</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./package.json /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [ <span class="string">"npm"</span>, <span class="string">"install"</span> ]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app/</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"npm"</span>, <span class="string">"start"</span> ]</span></span><br></pre></td></tr></table></figure>
<p>把这个 <code>Dockerfile</code> 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 <code>Dockerfile</code> 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。</p>
<p>如果第一个 Node.js 项目在开发过程中，发现这个 <code>Dockerfile</code> 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 <code>Dockerfile</code>，再次构建，问题解决。第一个项目没问题了，但是第二个项目呢？虽然最初 <code>Dockerfile</code> 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 <code>Dockerfile</code>，而第二个项目的 <code>Dockerfile</code> 就会被自动修复。</p>
<p>那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 <code>Dockerfile</code> 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 <code>Dockerfile</code> 就会变为：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:slim</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"npm"</span>, <span class="string">"start"</span> ]</span></span><br></pre></td></tr></table></figure>
<p>这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 <code>my-node</code> 的话，各个项目内的自己的 <code>Dockerfile</code> 就变为：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> my-node</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./package.json /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [ <span class="string">"npm"</span>, <span class="string">"install"</span> ]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app/</span></span><br></pre></td></tr></table></figure>
<p>基础镜像变化后，各个项目都用这个 <code>Dockerfile</code> 重新构建镜像，会继承基础镜像的更新。</p>
<p>那么，问题解决了么？没有。准确说，只解决了一半。如果这个 <code>Dockerfile</code> 里面有些东西需要调整呢？比如 <code>npm install</code> 都需要加一些参数，那怎么办？这一行 <code>RUN</code> 是不可能放入基础镜像的，因为涉及到了当前项目的 <code>./package.json</code>，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 <code>Dockerfile</code> 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。</p>
<p><code>ONBUILD</code> 可以解决这个问题。让我们用 <code>ONBUILD</code> 重新写一下基础镜像的 <code>Dockerfile</code>:</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:slim</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">COPY</span><span class="bash"> ./package.json /app</span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="bash"> [ <span class="string">"npm"</span>, <span class="string">"install"</span> ]</span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">COPY</span><span class="bash"> . /app/</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">"npm"</span>, <span class="string">"start"</span> ]</span></span><br></pre></td></tr></table></figure>
<p>这次我们回到原始的 <code>Dockerfile</code>，但是这次将项目相关的指令加上 <code>ONBUILD</code>，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 <code>Dockerfile</code> 就变成了简单地：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> my-node</span><br></pre></td></tr></table></figure>
<p>是的，只有这么一行。当在各个项目目录中，用这个只有一行的 <code>Dockerfile</code> 构建镜像时，之前基础镜像的那三行 <code>ONBUILD</code> 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 <code>npm install</code>，生成应用镜像。</p>
<h1 id="Dockerfile多阶段构建"><a href="#Dockerfile多阶段构建" class="headerlink" title="Dockerfile多阶段构建"></a>Dockerfile多阶段构建</h1><h2 id="之前的做法"><a href="#之前的做法" class="headerlink" title="之前的做法"></a>之前的做法</h2><p>在 Docker 17.05 版本之前，我们构建 Docker 镜像时，通常会采用两种方式：</p>
<h3 id="全部放入一个-Dockerfile"><a href="#全部放入一个-Dockerfile" class="headerlink" title="全部放入一个 Dockerfile"></a>全部放入一个 Dockerfile</h3><p>一种方式是将所有的构建过程编包含在一个 <code>Dockerfile</code> 中，包括项目及其依赖库的编译、测试、打包等流程，这里可能会带来的一些问题：</p>
<ul>
<li>镜像层次多，镜像体积较大，部署时间变长</li>
<li>源代码存在泄露的风险</li>
</ul>
<p>例如，编写 <code>app.go</code> 文件，该程序输出 <code>Hello World!</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写 <code>Dockerfile.one</code> 文件</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.9</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add git ca-certificates</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/github.com/go/helloworld/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> app.go .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go get -d -v github.com/go-sql-driver/mysql \</span></span><br><span class="line"><span class="bash">  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app . \</span></span><br><span class="line"><span class="bash">  &amp;&amp; cp /go/src/github.com/go/helloworld/app /root</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"./app"</span>]</span></span><br></pre></td></tr></table></figure>
<p>构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t go/helloworld:1 -f Dockerfile.one .</span><br></pre></td></tr></table></figure>
<h3 id="分散到多个-Dockerfile"><a href="#分散到多个-Dockerfile" class="headerlink" title="分散到多个 Dockerfile"></a>分散到多个 Dockerfile</h3><p>另一种方式，就是我们事先在一个 <code>Dockerfile</code> 将项目及其依赖库编译测试打包好后，再将其拷贝到运行环境中，这种方式需要我们编写两个 <code>Dockerfile</code> 和一些编译脚本才能将其两个阶段自动整合起来，这种方式虽然可以很好地规避第一种方式存在的风险，但明显部署过程较复杂。</p>
<p>例如，编写 <code>Dockerfile.build</code> 文件</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.9</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add git</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/github.com/go/helloworld</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> app.go .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go get -d -v github.com/go-sql-driver/mysql \</span></span><br><span class="line"><span class="bash">  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span></span><br></pre></td></tr></table></figure>
<p>编写 <code>Dockerfile.copy</code> 文件</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add ca-certificates</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> app .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"./app"</span>]</span></span><br></pre></td></tr></table></figure>
<p>新建 <code>build.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> Building go/helloworld:build</span><br><span class="line"></span><br><span class="line">docker build -t go/helloworld:build . -f Dockerfile.build</span><br><span class="line"></span><br><span class="line">docker create --name extract go/helloworld:build</span><br><span class="line">docker cp extract:/go/src/github.com/go/helloworld/app ./app</span><br><span class="line">docker rm -f extract</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Building go/helloworld:2</span><br><span class="line"></span><br><span class="line">docker build --no-cache -t go/helloworld:2 . -f Dockerfile.copy</span><br><span class="line">rm ./app</span><br></pre></td></tr></table></figure>
<p>现在运行脚本即可构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod +x build.sh</span><br><span class="line"></span><br><span class="line">$ ./build.sh</span><br></pre></td></tr></table></figure>
<p>对比两种方式生成的镜像大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line">REPOSITORY      TAG    IMAGE ID        CREATED         SIZE</span><br><span class="line">go/helloworld   2      f7cf3465432c    22 seconds ago  6.47MB</span><br><span class="line">go/helloworld   1      f55d3e16affc    2 minutes ago   295MB</span><br></pre></td></tr></table></figure>
<h2 id="使用多阶段构建"><a href="#使用多阶段构建" class="headerlink" title="使用多阶段构建"></a>使用多阶段构建</h2><p>为解决以上问题，Docker v17.05 开始支持多阶段构建 (<code>multistage builds</code>)。使用多阶段构建我们就可以很容易解决前面提到的问题，并且只需要编写一个 <code>Dockerfile</code>：</p>
<p>例如，编写 <code>Dockerfile</code> 文件</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.9</span>-alpine as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add git</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/github.com/go/helloworld/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go get -d -v github.com/go-sql-driver/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> app.go .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest as prod</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --no-cache add ca-certificates</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /root/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=0 /go/src/github.com/go/helloworld/app .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"./app"</span>]</span></span><br></pre></td></tr></table></figure>
<p>构建镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t go/helloworld:3 .</span><br></pre></td></tr></table></figure>
<p>对比三个镜像大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line">REPOSITORY        TAG   IMAGE ID         CREATED            SIZE</span><br><span class="line">go/helloworld     3     d6911ed9c846     7 seconds ago      6.47MB</span><br><span class="line">go/helloworld     2     f7cf3465432c     22 seconds ago     6.47MB</span><br><span class="line">go/helloworld     1     f55d3e16affc     2 minutes ago      295MB</span><br></pre></td></tr></table></figure>
<p>很明显使用多阶段构建的镜像体积小，同时也完美解决了上边提到的问题。</p>
<h3 id="只构建某一阶段的镜像"><a href="#只构建某一阶段的镜像" class="headerlink" title="只构建某一阶段的镜像"></a>只构建某一阶段的镜像</h3><p>我们可以使用 <code>as</code> 来为某一阶段命名，例如</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.9</span>-alpine as builder</span><br></pre></td></tr></table></figure>
<p>例如当我们只想构建 <code>builder</code> 阶段的镜像时，增加 <code>--target=builder</code> 参数即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build --target builder -t username/imagename:tag .</span><br></pre></td></tr></table></figure>
<h3 id="构建时从其他镜像复制文件"><a href="#构建时从其他镜像复制文件" class="headerlink" title="构建时从其他镜像复制文件"></a>构建时从其他镜像复制文件</h3><p>上面例子中我们使用 <code>COPY --from=0 /go/src/github.com/go/helloworld/app .</code> 从上一阶段的镜像中复制文件，我们也可以复制任意镜像中的文件。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">COPY</span><span class="bash"> --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf</span></span><br></pre></td></tr></table></figure>
<h1 id="镜像的实现原理"><a href="#镜像的实现原理" class="headerlink" title="镜像的实现原理"></a>镜像的实现原理</h1><p>Docker 镜像是怎么实现增量的修改和维护的？</p>
<p>每个镜像都由很多层次构成，Docker 使用 <a href="https://en.wikipedia.org/wiki/UnionFS" target="_blank" rel="noopener">Union FS</a> 将这些不同的层结合到一个镜像中去。</p>
<p>通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下,另一个更常用的就是将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。</p>
<p>Docker 在 AUFS 上构建的容器也是利用了类似的原理。</p>
<h1 id="实践指南"><a href="#实践指南" class="headerlink" title="实践指南"></a>实践指南</h1><h2 id="一般性的指南和建议"><a href="#一般性的指南和建议" class="headerlink" title="一般性的指南和建议"></a>一般性的指南和建议</h2><h3 id="容器应该是短暂的"><a href="#容器应该是短暂的" class="headerlink" title="容器应该是短暂的"></a>容器应该是短暂的</h3><p>通过 <code>Dockerfile</code> 构建的镜像所启动的容器应该尽可能短暂（生命周期短）。「短暂」意味着可以停止和销毁容器，并且创建一个新容器并部署好所需的设置和配置工作量应该是极小的。</p>
<h3 id="使用-dockerignore-文件"><a href="#使用-dockerignore-文件" class="headerlink" title="使用 .dockerignore 文件"></a>使用 <code>.dockerignore</code> 文件</h3><p>使用 <code>Dockerfile</code> 构建镜像时最好是将 <code>Dockerfile</code> 放置在一个新建的空目录下。然后将构建镜像所需要的文件添加到该目录中。为了提高构建镜像的效率，你可以在目录下新建一个 <code>.dockerignore</code> 文件来指定要忽略的文件和目录。<code>.dockerignore</code> 文件的排除模式语法和 Git 的 <code>.gitignore</code> 文件相似。</p>
<h3 id="使用多阶段构建-1"><a href="#使用多阶段构建-1" class="headerlink" title="使用多阶段构建"></a>使用多阶段构建</h3><p>在 <code>Docker 17.05</code> 以上版本中，你可以使用 <a href="https://yeasy.gitbooks.io/docker_practice/content/image/multistage-builds.md" target="_blank" rel="noopener">多阶段构建</a> 来减少所构建镜像的大小。</p>
<h3 id="避免安装不必要的包"><a href="#避免安装不必要的包" class="headerlink" title="避免安装不必要的包"></a>避免安装不必要的包</h3><p>为了降低复杂性、减少依赖、减小文件大小、节约构建时间，你应该避免安装任何不必要的包。例如，不要在数据库镜像中包含一个文本编辑器。</p>
<h3 id="一个容器只运行一个进程"><a href="#一个容器只运行一个进程" class="headerlink" title="一个容器只运行一个进程"></a>一个容器只运行一个进程</h3><p>应该保证在一个容器中只运行一个进程。将多个应用解耦到不同容器中，保证了容器的横向扩展和复用。例如 web 应用应该包含三个容器：web应用、数据库、缓存。</p>
<p>如果容器互相依赖，你可以使用 <a href="https://yeasy.gitbooks.io/docker_practice/content/network/linking.html" target="_blank" rel="noopener">Docker 自定义网络</a> 来把这些容器连接起来。</p>
<h3 id="镜像层数尽可能少"><a href="#镜像层数尽可能少" class="headerlink" title="镜像层数尽可能少"></a>镜像层数尽可能少</h3><p>你需要在 <code>Dockerfile</code> 可读性（也包括长期的可维护性）和减少层数之间做一个平衡。</p>
<h3 id="将多行参数排序"><a href="#将多行参数排序" class="headerlink" title="将多行参数排序"></a>将多行参数排序</h3><p>将多行参数按字母顺序排序（比如要安装多个包时）。这可以帮助你避免重复包含同一个包，更新包列表时也更容易。也便于 <code>PRs</code> 阅读和审查。建议在反斜杠符号 <code>\</code> 之前添加一个空格，以增加可读性。</p>
<p>下面是来自 <code>buildpack-deps</code> 镜像的例子：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash">  bzr \</span></span><br><span class="line"><span class="bash">  cvs \</span></span><br><span class="line"><span class="bash">  git \</span></span><br><span class="line"><span class="bash">  mercurial \</span></span><br><span class="line"><span class="bash">  subversion</span></span><br></pre></td></tr></table></figure>
<h3 id="构建缓存"><a href="#构建缓存" class="headerlink" title="构建缓存"></a>构建缓存</h3><p>在镜像的构建过程中，Docker 会遍历 <code>Dockerfile</code> 文件中的指令，然后按顺序执行。在执行每条指令之前，Docker 都会在缓存中查找是否已经存在可重用的镜像，如果有就使用现存的镜像，不再重复创建。如果你不想在构建过程中使用缓存，你可以在 <code>docker build</code> 命令中使用 <code>--no-cache=true</code> 选项。</p>
<p>但是，如果你想在构建的过程中使用缓存，你得明白什么时候会，什么时候不会找到匹配的镜像，遵循的基本规则如下：</p>
<ul>
<li>从一个基础镜像开始（<code>FROM</code> 指令指定），下一条指令将和该基础镜像的所有子镜像进行匹配，检查这些子镜像被创建时使用的指令是否和被检查的指令完全一样。如果不是，则缓存失效。</li>
<li>在大多数情况下，只需要简单地对比 <code>Dockerfile</code> 中的指令和子镜像。然而，有些指令需要更多的检查和解释。</li>
<li>对于 <code>ADD</code> 和 <code>COPY</code> 指令，镜像中对应文件的内容也会被检查，每个文件都会计算出一个校验和。文件的最后修改时间和最后访问时间不会纳入校验。在缓存的查找过程中，会将这些校验和和已存在镜像中的文件校验和进行对比。如果文件有任何改变，比如内容和元数据，则缓存失效。</li>
<li>除了 <code>ADD</code> 和 <code>COPY</code> 指令，缓存匹配过程不会查看临时容器中的文件来决定缓存是否匹配。例如，当执行完 <code>RUN apt-get -y update</code> 指令后，容器中一些文件被更新，但 Docker 不会检查这些文件。这种情况下，只有指令字符串本身被用来匹配缓存。</li>
</ul>
<p>一旦缓存失效，所有后续的 <code>Dockerfile</code> 指令都将产生新的镜像，缓存不会被使用。</p>
<h2 id="Dockerfile-指令"><a href="#Dockerfile-指令" class="headerlink" title="Dockerfile 指令"></a>Dockerfile 指令</h2><p>下面针对 <code>Dockerfile</code> 中各种指令的最佳编写方式给出建议。</p>
<h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>尽可能使用当前官方仓库作为你构建镜像的基础。推荐使用 <a href="https://hub.docker.com/_/alpine/" target="_blank" rel="noopener">Alpine</a> 镜像，因为它被严格控制并保持最小尺寸（目前小于 5 MB），但它仍然是一个完整的发行版。</p>
<h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h3><p>你可以给镜像添加标签来帮助组织镜像、记录许可信息、辅助自动化构建等。每个标签一行，由 <code>LABEL</code> 开头加上一个或多个标签对。下面的示例展示了各种不同的可能格式。<code>#</code> 开头的行是注释内容。</p>
<blockquote>
<p>注意：如果你的字符串中包含空格，必须将字符串放入引号中或者对空格使用转义。如果字符串内容本身就包含引号，必须对引号使用转义。</p>
</blockquote>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set one or more individual labels</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> com.example.version=<span class="string">"0.0.1-beta"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> vendor=<span class="string">"ACME Incorporated"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> com.example.release-date=<span class="string">"2015-02-12"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> com.example.version.is-production=<span class="string">""</span></span></span><br></pre></td></tr></table></figure>
<p>一个镜像可以包含多个标签，但建议将多个标签放入到一个 <code>LABEL</code> 指令中。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set multiple labels at once, using line-continuation characters to break long lines</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> vendor=ACME\ Incorporated \</span></span><br><span class="line"><span class="bash">      com.example.is-beta= \</span></span><br><span class="line"><span class="bash">      com.example.is-production=<span class="string">""</span> \</span></span><br><span class="line"><span class="bash">      com.example.version=<span class="string">"0.0.1-beta"</span> \</span></span><br><span class="line"><span class="bash">      com.example.release-date=<span class="string">"2015-02-12"</span></span></span><br></pre></td></tr></table></figure>
<p>关于标签可以接受的键值对，参考 <a href="https://docs.docker.com/config/labels-custom-metadata/" target="_blank" rel="noopener">Understanding object labels</a>。关于查询标签信息，参考 <a href="https://docs.docker.com/config/labels-custom-metadata/" target="_blank" rel="noopener">Managing labels on objects</a>。</p>
<h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>为了保持 <code>Dockerfile</code> 文件的可读性，可理解性，以及可维护性，建议将长的或复杂的 <code>RUN</code> 指令用反斜杠 <code>\</code> 分割成多行。</p>
<h4 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h4><p><code>RUN</code> 指令最常见的用法是安装包用的 <code>apt-get</code>。因为 <code>RUN apt-get</code> 指令会安装包，所以有几个问题需要注意。</p>
<p>不要使用 <code>RUN apt-get upgrade</code> 或 <code>dist-upgrade</code>，因为许多基础镜像中的「必须」包不会在一个非特权容器中升级。如果基础镜像中的某个包过时了，你应该联系它的维护者。如果你确定某个特定的包，比如 <code>foo</code>，需要升级，使用 <code>apt-get install -y foo</code> 就行，该指令会自动升级 <code>foo</code> 包。</p>
<p>永远将 <code>RUN apt-get update</code> 和 <code>apt-get install</code> 组合成一条 <code>RUN</code> 声明，例如：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash">        package-bar \</span></span><br><span class="line"><span class="bash">        package-baz \</span></span><br><span class="line"><span class="bash">        package-foo</span></span><br></pre></td></tr></table></figure>
<p>将 <code>apt-get update</code> 放在一条单独的 <code>RUN</code> 声明中会导致缓存问题以及后续的 <code>apt-get install</code> 失败。比如，假设你有一个 <code>Dockerfile</code> 文件：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y curl</span></span><br></pre></td></tr></table></figure>
<p>构建镜像后，所有的层都在 Docker 的缓存中。假设你后来又修改了其中的 <code>apt-get install</code> 添加了一个包：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y curl nginx</span></span><br></pre></td></tr></table></figure>
<p>Docker 发现修改后的 <code>RUN apt-get update</code> 指令和之前的完全一样。所以，<code>apt-get update</code> 不会执行，而是使用之前的缓存镜像。因为 <code>apt-get update</code> 没有运行，后面的 <code>apt-get install</code> 可能安装的是过时的 <code>curl</code> 和 <code>nginx</code> 版本。</p>
<p>使用 <code>RUN apt-get update &amp;&amp; apt-get install -y</code> 可以确保你的 Dockerfiles 每次安装的都是包的最新的版本，而且这个过程不需要进一步的编码或额外干预。这项技术叫作 <code>cache busting</code>。你也可以显示指定一个包的版本号来达到 <code>cache-busting</code>，这就是所谓的固定版本，例如：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash">    package-bar \</span></span><br><span class="line"><span class="bash">    package-baz \</span></span><br><span class="line"><span class="bash">    package-foo=1.3.*</span></span><br></pre></td></tr></table></figure>
<p>固定版本会迫使构建过程检索特定的版本，而不管缓存中有什么。这项技术也可以减少因所需包中未预料到的变化而导致的失败。</p>
<p>下面是一个 <code>RUN</code> 指令的示例模板，展示了所有关于 <code>apt-get</code> 的建议。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="bash">    aufs-tools \</span></span><br><span class="line"><span class="bash">    automake \</span></span><br><span class="line"><span class="bash">    build-essential \</span></span><br><span class="line"><span class="bash">    curl \</span></span><br><span class="line"><span class="bash">    dpkg-sig \</span></span><br><span class="line"><span class="bash">    libcap-dev \</span></span><br><span class="line"><span class="bash">    libsqlite3-dev \</span></span><br><span class="line"><span class="bash">    mercurial \</span></span><br><span class="line"><span class="bash">    reprepro \</span></span><br><span class="line"><span class="bash">    ruby1.9.1 \</span></span><br><span class="line"><span class="bash">    ruby1.9.1-dev \</span></span><br><span class="line"><span class="bash">    s3cmd=1.1.* \</span></span><br><span class="line"><span class="bash"> &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure>
<p>其中 <code>s3cmd</code> 指令指定了一个版本号 <code>1.1.*</code>。如果之前的镜像使用的是更旧的版本，指定新的版本会导致 <code>apt-get udpate</code> 缓存失效并确保安装的是新版本。</p>
<p>另外，清理掉 apt 缓存 <code>var/lib/apt/lists</code> 可以减小镜像大小。因为 <code>RUN</code> 指令的开头为 <code>apt-get udpate</code>，包缓存总是会在 <code>apt-get install</code> 之前刷新。</p>
<blockquote>
<p>注意：官方的 Debian 和 Ubuntu 镜像会自动运行 apt-get clean，所以不需要显式的调用 apt-get clean。</p>
</blockquote>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p><code>CMD</code> 指令用于执行目标镜像中包含的软件，可以包含参数。<code>CMD</code> 大多数情况下都应该以 <code>CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;...]</code> 的形式使用。因此，如果创建镜像的目的是为了部署某个服务(比如 <code>Apache</code>)，你可能会执行类似于 <code>CMD [&quot;apache2&quot;, &quot;-DFOREGROUND&quot;]</code> 形式的命令。我们建议任何服务镜像都使用这种形式的命令。</p>
<p>多数情况下，<code>CMD</code> 都需要一个交互式的 <code>shell</code> (bash, Python, perl 等)，例如 <code>CMD [&quot;perl&quot;, &quot;-de0&quot;]</code>，或者 <code>CMD [&quot;PHP&quot;, &quot;-a&quot;]</code>。使用这种形式意味着，当你执行类似 <code>docker run -it python</code> 时，你会进入一个准备好的 <code>shell</code> 中。<code>CMD</code> 应该在极少的情况下才能以 <code>CMD [&quot;param&quot;, &quot;param&quot;]</code> 的形式与 <code>ENTRYPOINT</code> 协同使用，除非你和你的镜像使用者都对 <code>ENTRYPOINT</code> 的工作方式十分熟悉。</p>
<h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p><code>EXPOSE</code> 指令用于指定容器将要监听的端口。因此，你应该为你的应用程序使用常见的端口。例如，提供 <code>Apache</code> web 服务的镜像应该使用 <code>EXPOSE 80</code>，而提供 <code>MongoDB</code> 服务的镜像使用 <code>EXPOSE 27017</code>。</p>
<p>对于外部访问，用户可以在执行 <code>docker run</code> 时使用一个标志来指示如何将指定的端口映射到所选择的端口。</p>
<h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>为了方便新程序运行，你可以使用 <code>ENV</code> 来为容器中安装的程序更新 <code>PATH</code> 环境变量。例如使用 <code>ENV PATH /usr/local/nginx/bin:$PATH</code> 来确保 <code>CMD [&quot;nginx&quot;]</code> 能正确运行。</p>
<p><code>ENV</code> 指令也可用于为你想要容器化的服务提供必要的环境变量，比如 Postgres 需要的 <code>PGDATA</code>。</p>
<p>最后，<code>ENV</code> 也能用于设置常见的版本号，比如下面的示例：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> PG_MAJOR <span class="number">9.3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PG_VERSION <span class="number">9.3</span>.<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -SL http://example.com/postgres-<span class="variable">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PATH /usr/local/postgres-$PG_MAJOR/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>类似于程序中的常量，这种方法可以让你只需改变 <code>ENV</code> 指令来自动的改变容器中的软件版本。</p>
<h3 id="ADD-和-COPY"><a href="#ADD-和-COPY" class="headerlink" title="ADD 和 COPY"></a>ADD 和 COPY</h3><p>虽然 <code>ADD</code> 和 <code>COPY</code> 功能类似，但一般优先使用 <code>COPY</code>。因为它比 <code>ADD</code> 更透明。<code>COPY</code> 只支持简单将本地文件拷贝到容器中，而 <code>ADD</code> 有一些并不明显的功能（比如本地 tar 提取和远程 URL 支持）。因此，<code>ADD</code> 的最佳用例是将本地 tar 文件自动提取到镜像中，例如 <code>ADD rootfs.tar.xz</code>。</p>
<p>如果你的 <code>Dockerfile</code> 有多个步骤需要使用上下文中不同的文件。单独 <code>COPY</code> 每个文件，而不是一次性的 <code>COPY</code> 所有文件，这将保证每个步骤的构建缓存只在特定的文件变化时失效。例如：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt /tmp/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install --requirement /tmp/requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /tmp/</span></span><br></pre></td></tr></table></figure>
<p>如果将 <code>COPY . /tmp/</code> 放置在 <code>RUN</code> 指令之前，只要 <code>.</code> 目录中任何一个文件变化，都会导致后续指令的缓存失效。</p>
<p>为了让镜像尽量小，最好不要使用 <code>ADD</code> 指令从远程 URL 获取包，而是使用 <code>curl</code> 和 <code>wget</code>。这样你可以在文件提取完之后删掉不再需要的文件来避免在镜像中额外添加一层。比如尽量避免下面的用法：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> http://example.com/big.tar.xz /usr/src/things/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> make -C /usr/src/things all</span></span><br></pre></td></tr></table></figure>
<p>而是应该使用下面这种方法：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/things \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -SL http://example.com/big.tar.xz \</span></span><br><span class="line"><span class="bash">    | tar -xJC /usr/src/things \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make -C /usr/src/things all</span></span><br></pre></td></tr></table></figure>
<p>上面使用的管道操作，所以没有中间文件需要删除。</p>
<p>对于其他不需要 <code>ADD</code> 的自动提取功能的文件或目录，你应该使用 <code>COPY</code>。</p>
<h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p><code>ENTRYPOINT</code> 的最佳用处是设置镜像的主命令，允许将镜像当成命令本身来运行（用 <code>CMD</code> 提供默认选项）。</p>
<p>例如，下面的示例镜像提供了命令行工具 <code>s3cmd</code>:</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"s3cmd"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"--help"</span>]</span></span><br></pre></td></tr></table></figure>
<p>现在直接运行该镜像创建的容器会显示命令帮助：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run s3cmd</span><br></pre></td></tr></table></figure>
<p>或者提供正确的参数来执行某个命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run s3cmd ls s3://mybucket</span><br></pre></td></tr></table></figure>
<p>这样镜像名可以当成命令行的参考。</p>
<p><code>ENTRYPOINT</code> 指令也可以结合一个辅助脚本使用，和前面命令行风格类似，即使启动工具需要不止一个步骤。</p>
<p>例如，<code>Postgres</code> 官方镜像使用下面的脚本作为 <code>ENTRYPOINT</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">'postgres'</span> ]; <span class="keyword">then</span></span><br><span class="line">    chown -R postgres <span class="string">"<span class="variable">$PGDATA</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$(ls -A "$PGDATA")</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        gosu postgres initdb</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">exec</span> gosu postgres <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：该脚本使用了 Bash 的内置命令 exec，所以最后运行的进程就是容器的 PID 为 1 的进程。这样，进程就可以接收到任何发送给容器的 Unix 信号了。</p>
</blockquote>
<p>该辅助脚本被拷贝到容器，并在容器启动时通过 <code>ENTRYPOINT</code> 执行：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> ./docker-entrypoint.sh /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/docker-entrypoint.sh"</span>]</span></span><br></pre></td></tr></table></figure>
<p>该脚本可以让用户用几种不同的方式和 <code>Postgres</code> 交互。</p>
<p>你可以很简单地启动 <code>Postgres</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run postgres</span><br></pre></td></tr></table></figure>
<p>也可以执行 <code>Postgres</code> 并传递参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run postgres postgres --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p>最后，你还可以启动另外一个完全不同的工具，比如 <code>Bash</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --rm -it postgres bash</span><br></pre></td></tr></table></figure>
<h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p><code>VOLUME</code> 指令用于暴露任何数据库存储文件，配置文件，或容器创建的文件和目录。强烈建议使用 <code>VOLUME</code> 来管理镜像中的可变部分和用户可以改变的部分。</p>
<h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>如果某个服务不需要特权执行，建议使用 <code>USER</code> 指令切换到非 root 用户。先在 <code>Dockerfile</code> 中使用类似 <code>RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code> 的指令创建用户和用户组。</p>
<blockquote>
<p>注意：在镜像中，用户和用户组每次被分配的 UID/GID 都是不确定的，下次重新构建镜像时被分配到的 UID/GID 可能会不一样。如果要依赖确定的 UID/GID，你应该显示的指定一个 UID/GID。</p>
</blockquote>
<p>你应该避免使用 <code>sudo</code>，因为它不可预期的 TTY 和信号转发行为可能造成的问题比它能解决的问题还多。如果你真的需要和 <code>sudo</code> 类似的功能（例如，以 root 权限初始化某个守护进程，以非 root 权限执行它），你可以使用 <a href="https://github.com/tianon/gosu" target="_blank" rel="noopener">gosu</a>。</p>
<p>最后，为了减少层数和复杂度，避免频繁地使用 <code>USER</code> 来回切换用户。</p>
<h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>为了清晰性和可靠性，你应该总是在 <code>WORKDIR</code> 中使用绝对路径。另外，你应该使用 <code>WORKDIR</code> 来替代类似于 <code>RUN cd ... &amp;&amp; do-something</code> 的指令，后者难以阅读、排错和维护。</p>
<h2 id="官方镜像示例"><a href="#官方镜像示例" class="headerlink" title="官方镜像示例"></a>官方镜像示例</h2><p>这些官方镜像的 Dockerfile 都是参考典范：<a href="https://github.com/docker-library/docs" target="_blank" rel="noopener">https://github.com/docker-library/docs</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>本文章摘抄于：<a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker入门（四）——仓库</title>
    <url>/2019/12/04/Docker%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker仓库简介"><a href="#Docker仓库简介" class="headerlink" title="Docker仓库简介"></a>Docker仓库简介</h1><p>仓库（<code>Repository</code>）是集中存放镜像的地方。</p>
<p>一个容易混淆的概念是注册服务器（<code>Registry</code>）。实际上注册服务器是管理仓库的具体服务器，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像。从这方面来说，仓库可以被认为是一个具体的项目或目录。例如对于仓库地址 <code>dl.dockerpool.com/ubuntu</code> 来说，<code>dl.dockerpool.com</code> 是注册服务器地址，<code>ubuntu</code> 是仓库名。</p>
<p>大部分时候，并不需要严格区分这两者的概念。</p>
<a id="more"></a>
<h1 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h1><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，其中已经包括了数量超过 <a href="https://hub.docker.com/search/?type=image" target="_blank" rel="noopener">2,650,000</a> 的镜像。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>你可以在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com</a> 免费注册一个 Docker 账号。</p>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>可以通过执行 <code>docker login</code> 命令交互式的输入用户名及密码来完成在命令行界面登录 Docker Hub。</p>
<p>你可以通过 <code>docker logout</code> 退出登录。</p>
<h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>你可以通过 <code>docker search</code> 命令来查找官方仓库中的镜像，并利用 <code>docker pull</code> 命令来将它下载到本地。</p>
<p>例如以 <code>centos</code> 为关键词进行搜索：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker search centos</span><br><span class="line">NAME                                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">centos                                          The official build of CentOS.                   465       [OK]</span><br><span class="line">tianon/centos                                   CentOS 5 and 6, created using rinse instea...   28</span><br><span class="line">blalor/centos                                   Bare-bones base CentOS 6.5 image                6                    [OK]</span><br><span class="line">saltstack/centos-6-minimal                                                                      6                    [OK]</span><br><span class="line">tutum/centos-6.4                                DEPRECATED. Use tutum/centos:6.4 instead. ...   5                    [OK]</span><br></pre></td></tr></table></figure>
<p>可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、收藏数（表示该镜像的受关注程度）、是否官方创建（OFFICIAL）、是否自动构建 （AUTOMATED）。</p>
<p>根据是否是官方提供，可将镜像分为两类。</p>
<p>一种是类似 <code>centos</code> 这样的镜像，被称为基础镜像或根镜像。这些基础镜像由 Docker 公司创建、验证、支持、提供。这样的镜像往往使用单个单词作为名字。</p>
<p>还有一种类型，比如 <code>tianon/centos</code> 镜像，它是由 Docker Hub 的注册用户创建并维护的，往往带有用户名称前缀。可以通过前缀 <code>username/</code> 来指定使用某个用户提供的镜像，比如 tianon 用户。</p>
<p>另外，在查找的时候通过 <code>--filter=stars=N</code> 参数可以指定仅显示收藏数量为 <code>N</code> 以上的镜像。</p>
<p>下载官方 <code>centos</code> 镜像到本地。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull centos</span><br><span class="line">Pulling repository centos</span><br><span class="line">0b443ba03958: Download complete</span><br><span class="line">539c0211cd76: Download complete</span><br><span class="line">511136ea3c5a: Download complete</span><br><span class="line">7064731afe90: Download complete</span><br></pre></td></tr></table></figure>
<h2 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h2><p>用户也可以在登录后通过 <code>docker push</code> 命令来将自己的镜像推送到 Docker Hub。</p>
<p>以下命令中的 <code>username</code> 请替换为你的 Docker 账号用户名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker tag ubuntu:18.04 username/ubuntu:18.04</span><br><span class="line"></span><br><span class="line">$ docker image ls</span><br><span class="line"></span><br><span class="line">REPOSITORY                                               TAG                    IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu                                                   18.04                  275d79972a86        6 days ago          94.6MB</span><br><span class="line">username/ubuntu                                          18.04                  275d79972a86        6 days ago          94.6MB</span><br><span class="line"></span><br><span class="line">$ docker push username/ubuntu:18.04</span><br><span class="line"></span><br><span class="line">$ docker search username</span><br><span class="line"></span><br><span class="line">NAME                      DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">username/ubuntu</span><br></pre></td></tr></table></figure>
<h2 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h2><p>自动构建（Automated Builds）功能对于需要经常升级镜像内程序来说，十分方便。</p>
<p>有时候，用户构建了镜像，安装了某个软件，当软件发布新版本则需要手动更新镜像。</p>
<p>而自动构建允许用户通过 Docker Hub 指定跟踪一个目标网站（支持 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 或 <a href="https://bitbucket.org/" target="_blank" rel="noopener">BitBucket</a>）上的项目，一旦项目发生新的提交 （commit）或者创建了新的标签（tag），Docker Hub 会自动构建镜像并推送到 Docker Hub 中。</p>
<p>要配置自动构建，包括如下的步骤：</p>
<ul>
<li>登录 Docker Hub；</li>
<li>在 Docker Hub 点击右上角头像，在账号设置（Account Settings）中关联（Linked Accounts）目标网站；</li>
<li>在 Docker Hub 中新建或选择已有的仓库，在 <code>Builds</code> 选项卡中选择 <code>Configure Automated Builds</code>；</li>
<li>选取一个目标网站中的项目（需要含 <code>Dockerfile</code>）和分支；</li>
<li>指定 <code>Dockerfile</code> 的位置，并保存。</li>
</ul>
<p>之后，可以在 Docker Hub 的仓库页面的 <code>Timeline</code> 选项卡中查看每次构建的状态。</p>
<h1 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h1><p>有时候使用 Docker Hub 这样的公共仓库可能不方便，用户可以创建一个本地仓库供私人使用。</p>
<p>本节介绍如何使用本地仓库。</p>
<p><a href="https://docs.docker.com/registry/" target="_blank" rel="noopener"><code>docker-registry</code></a> 是官方提供的工具，可以用于构建私有的镜像仓库。本文内容基于 <a href="https://github.com/docker/distribution" target="_blank" rel="noopener"><code>docker-registry</code></a> v2.x 版本。</p>
<h2 id="安装运行-docker-registry"><a href="#安装运行-docker-registry" class="headerlink" title="安装运行 docker-registry"></a>安装运行 docker-registry</h2><h3 id="容器运行"><a href="#容器运行" class="headerlink" title="容器运行"></a>容器运行</h3><p>你可以通过获取官方 <code>registry</code> 镜像来运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 5000:5000 --restart=always --name registry registry</span><br></pre></td></tr></table></figure>
<p>这将使用官方的 <code>registry</code> 镜像来启动私有仓库。默认情况下，仓库会被创建在容器的 <code>/var/lib/registry</code> 目录下。你可以通过 <code>-v</code> 参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的 <code>/opt/data/registry</code> 目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v /opt/data/registry:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure>
<h2 id="在私有仓库上传、搜索、下载镜像"><a href="#在私有仓库上传、搜索、下载镜像" class="headerlink" title="在私有仓库上传、搜索、下载镜像"></a>在私有仓库上传、搜索、下载镜像</h2><p>创建好私有仓库之后，就可以使用 <code>docker tag</code> 来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 <code>127.0.0.1:5000</code>。</p>
<p>先在本机查看已有的镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">ubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker tag</code> 将 <code>ubuntu:latest</code> 这个镜像标记为 <code>127.0.0.1:5000/ubuntu:latest</code>。</p>
<p>格式为 <code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">ubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br><span class="line">127.0.0.1:5000/ubuntu:latest      latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker push</code> 上传标记的镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker push 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">The push refers to repository [127.0.0.1:5000/ubuntu]</span><br><span class="line">373a30c24545: Pushed</span><br><span class="line">a9148f5200b0: Pushed</span><br><span class="line">cdd3de0940ab: Pushed</span><br><span class="line">fc56279bbb33: Pushed</span><br><span class="line">b38367233d37: Pushed</span><br><span class="line">2aebd096e0e2: Pushed</span><br><span class="line">latest: digest: sha256:fe4277621f10b5026266932ddf760f5a756d2facd505a94d2da12f4f52f71f5a size: 1568</span><br></pre></td></tr></table></figure>
<p>用 <code>curl</code> 查看仓库中的镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl 127.0.0.1:5000/v2/_catalog</span><br><span class="line">&#123;<span class="string">"repositories"</span>:[<span class="string">"ubuntu"</span>]&#125;</span><br></pre></td></tr></table></figure>
<p>这里可以看到 <code>{&quot;repositories&quot;:[&quot;ubuntu&quot;]}</code>，表明镜像已经被成功上传了。</p>
<p>先删除已有镜像，再尝试从私有仓库中下载这个镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image rm 127.0.0.1:5000/ubuntu:latest</span><br><span class="line"></span><br><span class="line">$ docker pull 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">Pulling repository 127.0.0.1:5000/ubuntu:latest</span><br><span class="line">ba5877dc9bec: Download complete</span><br><span class="line">511136ea3c5a: Download complete</span><br><span class="line">9bad880da3d2: Download complete</span><br><span class="line">25f11f5fb0cb: Download complete</span><br><span class="line">ebc34468f71d: Download complete</span><br><span class="line">2318d26665ef: Download complete</span><br><span class="line"></span><br><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">127.0.0.1:5000/ubuntu:latest       latest              ba5877dc9bec        6 weeks ago         192.7 MB</span><br></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果你不想使用 <code>127.0.0.1:5000</code> 作为仓库地址，比如想让本网段的其他主机也能把镜像推送到私有仓库。你就得把例如 <code>192.168.199.100:5000</code> 这样的内网地址作为私有仓库地址，这时你会发现无法成功推送镜像。</p>
<p>这是因为 Docker 默认不允许非 <code>HTTPS</code> 方式推送镜像。我们可以通过 Docker 的配置选项来取消这个限制，或者查看下一节配置能够通过 <code>HTTPS</code> 访问的私有仓库。</p>
<h3 id="Ubuntu-16-04-Debian-8-centos-7"><a href="#Ubuntu-16-04-Debian-8-centos-7" class="headerlink" title="Ubuntu 16.04+, Debian 8+, centos 7"></a>Ubuntu 16.04+, Debian 8+, centos 7</h3><p>对于使用 <code>systemd</code> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirror"</span>: [</span><br><span class="line">    <span class="string">"https://dockerhub.azk8s.cn"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"insecure-registries"</span>: [</span><br><span class="line">    <span class="string">"192.168.199.100:5000"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：该文件必须符合 <code>json</code> 规范，否则 Docker 将不能启动。</p>
</blockquote>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>对于 Docker Desktop for Windows 、 Docker Desktop for Mac 在设置中的 <code>Docker Engine</code> 中进行编辑 ，增加和上边一样的字符串即可。</p>
<h1 id="Nexus3-x-的私有仓库"><a href="#Nexus3-x-的私有仓库" class="headerlink" title="Nexus3.x 的私有仓库"></a>Nexus3.x 的私有仓库</h1><p>使用 Docker 官方的 Registry 创建的仓库面临一些维护问题。比如某些镜像删除以后空间默认是不会回收的，需要一些命令去回收空间然后重启 Registry 程序。在企业中把内部的一些工具包放入 Nexus 中是比较常见的做法，最新版本 <code>Nexus3.x</code> 全面支持 Docker 的私有镜像。所以使用 <a href="https://www.sonatype.com/download-oss-sonatype/" target="_blank" rel="noopener"><code>Nexus3.x</code></a> 一个软件来管理 <code>Docker</code> , <code>Maven</code> , <code>Yum</code> , <code>PyPI</code> 等是一个明智的选择。</p>
<h2 id="启动-Nexus-容器"><a href="#启动-Nexus-容器" class="headerlink" title="启动 Nexus 容器"></a>启动 Nexus 容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d --name nexus3 --restart=always \</span><br><span class="line">    -p 8081:8081 \</span><br><span class="line">    --mount src=nexus-data,target=/nexus-data \</span><br><span class="line">    sonatype/nexus3</span><br></pre></td></tr></table></figure>
<p>等待 3-5 分钟，如果 <code>nexus3</code> 容器没有异常退出，那么你可以使用浏览器打开 <code>http://YourIP:8081</code> 访问 Nexus 了。</p>
<p>第一次启动 Nexus 的默认帐号是 <code>admin</code> 密码是 <code>admin123</code> 登录以后点击页面上方的齿轮按钮进行设置。</p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>创建一个私有仓库的方法： <code>Repository-&gt;Repositories</code> 点击右边菜单 <code>Create repository</code> 选择 <code>docker (hosted)</code></p>
<ul>
<li>Name: 仓库的名称</li>
<li>HTTP: 仓库单独的访问端口</li>
<li>Enable Docker V1 API: 如果需要同时支持 V1 版本请勾选此项（不建议勾选）。</li>
<li>Hosted -&gt; Deployment pollcy: 请选择 Allow redeploy 否则无法上传 Docker 镜像。</li>
</ul>
<p>其它的仓库创建方法请各位自己摸索，还可以创建一个 docker (proxy) 类型的仓库链接到 DockerHub 上。再创建一个 docker (group) 类型的仓库把刚才的 hosted 与 proxy 添加在一起。主机在访问的时候默认下载私有仓库中的镜像，如果没有将链接到 DockerHub 中下载并缓存到 Nexus 中。</p>
<h2 id="添加访问权限"><a href="#添加访问权限" class="headerlink" title="添加访问权限"></a>添加访问权限</h2><p>菜单 <code>Security-&gt;Realms</code> 把 Docker Bearer Token Realm 移到右边的框中保存。</p>
<p>添加用户规则：菜单 <code>Security-&gt;Roles</code>-&gt;<code>Create role</code> 在 <code>Privlleges</code> 选项搜索 docker 把相应的规则移动到右边的框中然后保存。</p>
<p>添加用户：菜单 <code>Security-&gt;Users</code>-&gt;<code>Create local user</code> 在 <code>Roles</code> 选项中选中刚才创建的规则移动到右边的窗口保存。</p>
<h2 id="NGINX-加密代理"><a href="#NGINX-加密代理" class="headerlink" title="NGINX 加密代理"></a>NGINX 加密代理</h2><p>证书的生成请参见 <a href="https://yeasy.gitbooks.io/docker_practice/content/repository/registry_auth.html" target="_blank" rel="noopener"><code>私有仓库高级配置</code></a> 里面证书生成一节。</p>
<p>NGINX 示例配置如下</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> register</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="string">"YourHostName OR IP"</span>:<span class="number">5001</span>; <span class="comment">#端口为上面添加的私有镜像仓库是设置的 HTTP 选项的端口号</span></span><br><span class="line">    <span class="attribute">check</span> interval=<span class="number">3000</span> rise=<span class="number">2</span> fall=<span class="number">10</span> timeout=<span class="number">1000</span> type=http;</span><br><span class="line">    <span class="attribute">check_http_send</span> <span class="string">"HEAD / HTTP/1.0\r\n\r\n"</span>;</span><br><span class="line">    <span class="attribute">check_http_expect_alive</span> http_4xx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> YourDomainName;<span class="comment">#如果没有 DNS 服务器做解析，请删除此选项使用本机 IP 地址访问</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> key/example.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> key/example.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>   <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">300m</span>;</span><br><span class="line">    <span class="attribute">client_body_buffer_size</span> <span class="number">512k</span>;</span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span>   <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">proxy_send_timeout</span>   <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">proxy_buffer_size</span>    <span class="number">128k</span>;</span><br><span class="line">    <span class="attribute">proxy_buffers</span>       <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="attribute">proxy_busy_buffers_size</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="attribute">proxy_temp_file_write_size</span> <span class="number">512k</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Port <span class="variable">$server_port</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://register;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">900s</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Docker-主机访问镜像仓库"><a href="#Docker-主机访问镜像仓库" class="headerlink" title="Docker 主机访问镜像仓库"></a>Docker 主机访问镜像仓库</h2><p>如果不启用 SSL 加密可以通过前面章节的方法添加信任地址到 Docker 的配置文件中然后重启 Docker</p>
<p>使用 SSL 加密以后程序需要访问就不能采用修改配置的访问了。具体方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl s_client -showcerts -connect YourDomainName OR HostIP:443 &lt;/dev/null 2&gt;/dev/null|openssl x509 -outform PEM &gt;ca.crt</span><br><span class="line">$ cat ca.crt | sudo tee -a /etc/ssl/certs/ca-certificates.crt</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>使用 <code>docker login YourDomainName OR HostIP</code> 进行测试，用户名密码填写上面 Nexus 中生成的。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>本文章摘抄于：<a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins更换语言</title>
    <url>/2019/12/04/Jenkins%E6%9B%B4%E6%8D%A2%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近学习Jenkins中，使用Docker安装完成后，Jenkins的默认语言是狗血的繁体版本，想更换成英文版本或者中文版本。</p>
<a id="more"></a>
<h1 id="更换Google浏览器默认语言"><a href="#更换Google浏览器默认语言" class="headerlink" title="更换Google浏览器默认语言"></a>更换Google浏览器默认语言</h1><p>我google之前设置的默认语言第一位是中文繁体版本，我现在直接删除掉了。后面Jenkins就更换回了英文版本。</p>
<p><img src="changegooglelan.png" alt></p>
<h1 id="使用Locale插件"><a href="#使用Locale插件" class="headerlink" title="使用Locale插件"></a>使用Locale插件</h1><p>繁体版本下找到插件为<code>管理Jenkins</code>-&gt;<code>外掛程式管理</code></p>
<p><img src="findplugin.png" alt></p>
<p>在可用的插件列表搜索Locale插件，选择直接安装。</p>
<p><img src="findplugin2.png" alt></p>
<p>安装完成后，进入<code>管理Jenkins</code>-&gt;<code>设定系统</code></p>
<p><img src="setting.png" alt></p>
<p>应用并保存即可。</p>
<blockquote>
<p>记住Ignore browser preference and force this language to all users这个单选框要勾选上，否则不生效</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>两种方式中，第二种中文好像并不是完全支持，有些中文有些英文。</p>
<p>所以我选择了使用第一种方式。学习的情况下还是多些习惯英文吧。</p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker入门（三）——镜像</title>
    <url>/2019/12/02/Docker%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker镜像简介"><a href="#Docker镜像简介" class="headerlink" title="Docker镜像简介"></a>Docker镜像简介</h1><p>镜像是 Docker 的三大组件之一。</p>
<p>Docker 运行容器前需要本地存在对应的镜像，如果本地不存在该镜像，Docker 会从镜像仓库下载该镜像。</p>
<p>本章将介绍更多关于镜像的内容，包括：</p>
<ul>
<li>从仓库获取镜像；</li>
<li>管理本地主机上的镜像</li>
</ul>
<a id="more"></a>
<h1 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h1><p>之前提到过，<a href="https://hub.docker.com/explore/" target="_blank" rel="noopener">Docker Hub</a> 上有大量的高质量的镜像可以用，这里我们就说一下怎么获取这些镜像。</p>
<p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure>
<p>具体的选项可以通过 <code>docker pull --help</code> 命令看到，这里我们说一下镜像名称的格式。</p>
<ul>
<li>Docker 镜像仓库地址：地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 Docker Hub。</li>
<li>仓库名：如之前所说，这里的仓库名是两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</li>
</ul>
<p>比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull ubuntu:18.04</span><br><span class="line">18.04: Pulling from library/ubuntu</span><br><span class="line">bf5d46315322: Pull complete</span><br><span class="line">9f13e0ac480c: Pull complete</span><br><span class="line">e8988b5b3097: Pull complete</span><br><span class="line">40af181810e7: Pull complete</span><br><span class="line">e6f7c7e5c03e: Pull complete</span><br><span class="line">Digest: sha256:147913621d9cdea08853f6ba9116c2e27a3ceffecf3b492983ae97c3d643fbbe</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:18.04</span><br></pre></td></tr></table></figure>
<p>上面的命令中没有给出 Docker 镜像仓库地址，因此将会从 Docker Hub 获取镜像。而镜像名称是 <code>ubuntu:18.04</code>，因此将会获取官方镜像 <code>library/ubuntu</code> 仓库中标签为 <code>18.04</code> 的镜像。</p>
<p>从下载过程中可以看到我们之前提及的分层存储的概念，镜像是由多层存储所构成。下载也是一层层的去下载，并非单一文件。下载过程中给出了每一层的 ID 的前 12 位。并且下载结束后，给出该镜像完整的 <code>sha256</code> 的摘要，以确保下载一致性。</p>
<p>在使用上面命令的时候，你可能会发现，你所看到的层 ID 以及 <code>sha256</code> 的摘要和这里的不一样。这是因为官方镜像是一直在维护的，有任何新的 bug，或者版本更新，都会进行修复再以原来的标签发布，这样可以确保任何使用这个标签的用户可以获得更安全、更稳定的镜像。</p>
<p><em>如果从 Docker Hub 下载镜像非常缓慢，可以参照 <a href="https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html" target="_blank" rel="noopener">镜像加速器</a> 一节配置加速器。</em></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器。以上面的 <code>ubuntu:18.04</code> 为例，如果我们打算启动里面的 <code>bash</code> 并且进行交互式操作的话，可以执行下面的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -it --rm \</span><br><span class="line">    ubuntu:18.04 \</span><br><span class="line">    bash</span><br><span class="line"></span><br><span class="line">root@e7009c6ce357:/<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">"Ubuntu"</span></span><br><span class="line">VERSION=<span class="string">"18.04.1 LTS (Bionic Beaver)"</span></span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=<span class="string">"Ubuntu 18.04.1 LTS"</span></span><br><span class="line">VERSION_ID=<span class="string">"18.04"</span></span><br><span class="line">HOME_URL=<span class="string">"https://www.ubuntu.com/"</span></span><br><span class="line">SUPPORT_URL=<span class="string">"https://help.ubuntu.com/"</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">"https://bugs.launchpad.net/ubuntu/"</span></span><br><span class="line">PRIVACY_POLICY_URL=<span class="string">"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"</span></span><br><span class="line">VERSION_CODENAME=bionic</span><br><span class="line">UBUNTU_CODENAME=bionic</span><br></pre></td></tr></table></figure>
<p><code>docker run</code> 就是运行容器的命令，具体格式我们会在 <a href="https://yeasy.gitbooks.io/docker_practice/content/container" target="_blank" rel="noopener">容器</a> 一节进行详细讲解，我们这里简要的说明一下上面用到的参数。</p>
<ul>
<li><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 <code>bash</code> 执行一些命令并查看返回结果，因此我们需要交互式终端。</li>
<li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 <code>--rm</code> 可以避免浪费空间。</li>
<li><code>ubuntu:18.04</code>：这是指用 <code>ubuntu:18.04</code> 镜像为基础来启动容器。</li>
<li><code>bash</code>：放在镜像名后的是 <strong>命令</strong>，这里我们希望有个交互式 Shell，因此用的是 <code>bash</code>。</li>
</ul>
<p>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 <code>cat /etc/os-release</code>，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 <code>Ubuntu 18.04.1 LTS</code> 系统。</p>
<p>最后我们通过 <code>exit</code> 退出了这个容器。</p>
<h1 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h1><p>要想列出已经下载下来的镜像，可以使用 <code>docker image ls</code> 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis                latest              5f515359c7f8        5 days ago          183 MB</span><br><span class="line">nginx                latest              05a60462f8ba        5 days ago          181 MB</span><br><span class="line">mongo                3.2                 fe9198c04d62        5 days ago          342 MB</span><br><span class="line">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br><span class="line">ubuntu               18.04               f753707788c5        4 weeks ago         127 MB</span><br><span class="line">ubuntu               latest              f753707788c5        4 weeks ago         127 MB</span><br></pre></td></tr></table></figure>
<p>列表包含了 <code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code>。</p>
<p>其中仓库名、标签在之前的基础概念章节已经介绍过了。<strong>镜像 ID</strong> 则是镜像的唯一标识，一个镜像可以对应多个 <strong>标签</strong>。因此，在上面的例子中，我们可以看到 <code>ubuntu:18.04</code> 和 <code>ubuntu:latest</code> 拥有相同的 ID，因为它们对应的是同一个镜像。</p>
<h2 id="镜像体积"><a href="#镜像体积" class="headerlink" title="镜像体积"></a>镜像体积</h2><p>如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。比如，<code>ubuntu:18.04</code> 镜像大小，在这里是 <code>127 MB</code>，但是在 <a href="https://hub.docker.com/r/library/ubuntu/tags/" target="_blank" rel="noopener">Docker Hub</a> 显示的却是 <code>50 MB</code>。这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 <code>docker image ls</code> 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。</p>
<p>另外一个需要注意的问题是，<code>docker image ls</code> 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。</p>
<p>你可以通过以下命令来便捷的查看镜像、容器、数据卷所占用的空间。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker system df</span><br><span class="line"></span><br><span class="line">TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE</span><br><span class="line">Images              24                  0                   1.992GB             1.992GB (100%)</span><br><span class="line">Containers          1                   0                   62.82MB             62.82MB (100%)</span><br><span class="line">Local Volumes       9                   0                   652.2MB             652.2MB (100%)</span><br><span class="line">Build Cache                                                 0B                  0B</span><br></pre></td></tr></table></figure>
<h2 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h2><p>上面的镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code></code>。：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>
<p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>。除了 `docker pull` 可能导致这种情况，`docker build` 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls -f dangling=<span class="literal">true</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>
<p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image prune</span><br></pre></td></tr></table></figure>
<h2 id="中间层镜像"><a href="#中间层镜像" class="headerlink" title="中间层镜像"></a>中间层镜像</h2><p>为了加速镜像构建、重复利用资源，Docker 会利用 <strong>中间层镜像</strong>。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的 <code>docker image ls</code> 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 <code>-a</code> 参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls -a</span><br></pre></td></tr></table></figure>
<p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</p>
<h2 id="列出部分镜像"><a href="#列出部分镜像" class="headerlink" title="列出部分镜像"></a>列出部分镜像</h2><p>不加任何参数的情况下，<code>docker image ls</code> 会列出所有顶层镜像，但是有时候我们只希望列出部分镜像。<code>docker image ls</code> 有好几个参数可以帮助做到这个事情。</p>
<p>根据仓库名列出镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls ubuntu</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              18.04               f753707788c5        4 weeks ago         127 MB</span><br><span class="line">ubuntu              latest              f753707788c5        4 weeks ago         127 MB</span><br></pre></td></tr></table></figure>
<p>列出特定的某个镜像，也就是说指定仓库名和标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls ubuntu:18.04</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              18.04               f753707788c5        4 weeks ago         127 MB</span><br></pre></td></tr></table></figure>
<p>除此以外，<code>docker image ls</code> 还支持强大的过滤器参数 <code>--filter</code>，或者简写 <code>-f</code>。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，我们希望看到在 <code>mongo:3.2</code> 之后建立的镜像，可以用下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls -f since=mongo:3.2</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">redis               latest              5f515359c7f8        5 days ago          183 MB</span><br><span class="line">nginx               latest              05a60462f8ba        5 days ago          181 MB</span><br></pre></td></tr></table></figure>
<p>想查看某个位置之前的镜像也可以，只需要把 <code>since</code> 换成 <code>before</code> 即可。</p>
<p>此外，如果镜像构建时，定义了 <code>LABEL</code>，还可以通过 <code>LABEL</code> 来过滤。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls -f label=com.example.version=0.1</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="以特定格式显示"><a href="#以特定格式显示" class="headerlink" title="以特定格式显示"></a>以特定格式显示</h2><p>默认情况下，<code>docker image ls</code> 会输出一个完整的表格，但是我们并非所有时候都会需要这些内容。比如，刚才删除虚悬镜像的时候，我们需要利用 <code>docker image ls</code> 把所有的虚悬镜像的 ID 列出来，然后才可以交给 <code>docker image rm</code> 命令作为参数来删除指定的这些镜像，这个时候就用到了 <code>-q</code> 参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls -q</span><br><span class="line">5f515359c7f8</span><br><span class="line">05a60462f8ba</span><br><span class="line">fe9198c04d62</span><br><span class="line">00285df0df87</span><br><span class="line">f753707788c5</span><br><span class="line">f753707788c5</span><br><span class="line">1e0c3dd64ccd</span><br></pre></td></tr></table></figure>
<p><code>--filter</code> 配合 <code>-q</code> 产生出指定范围的 ID 列表，然后送给另一个 <code>docker</code> 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用过程中非常常见，不仅仅是镜像，将来我们会在各个命令中看到这类搭配以完成很强大的功能。因此每次在文档看到过滤器后，可以多注意一下它们的用法。</p>
<p>另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 <a href="https://gohugo.io/templates/go-templates/" target="_blank" rel="noopener">Go 的模板语法</a>。</p>
<p>比如，下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls --format <span class="string">"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;"</span></span><br><span class="line">5f515359c7f8: redis</span><br><span class="line">05a60462f8ba: nginx</span><br><span class="line">fe9198c04d62: mongo</span><br><span class="line">00285df0df87: &lt;none&gt;</span><br><span class="line">f753707788c5: ubuntu</span><br><span class="line">f753707788c5: ubuntu</span><br><span class="line">1e0c3dd64ccd: ubuntu</span><br></pre></td></tr></table></figure>
<p>或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls --format <span class="string">"table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;"</span></span><br><span class="line">IMAGE ID            REPOSITORY          TAG</span><br><span class="line">5f515359c7f8        redis               latest</span><br><span class="line">05a60462f8ba        nginx               latest</span><br><span class="line">fe9198c04d62        mongo               3.2</span><br><span class="line">00285df0df87        &lt;none&gt;              &lt;none&gt;</span><br><span class="line">f753707788c5        ubuntu              18.04</span><br><span class="line">f753707788c5        ubuntu              latest</span><br></pre></td></tr></table></figure>
<h1 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h1><p>如果要删除本地的镜像，可以使用 <code>docker image rm</code> 命令，其格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure>
<h2 id="用-ID、镜像名、摘要删除镜像"><a href="#用-ID、镜像名、摘要删除镜像" class="headerlink" title="用 ID、镜像名、摘要删除镜像"></a>用 ID、镜像名、摘要删除镜像</h2><p>其中，<code>&lt;镜像&gt;</code> 可以是 <code>镜像短 ID</code>、<code>镜像长 ID</code>、<code>镜像名</code> 或者 <code>镜像摘要</code>。</p>
<p>比如我们有这么一些镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos                      latest              0584b3d2cf6d        3 weeks ago         196.5 MB</span><br><span class="line">redis                       alpine              501ad78535f0        3 weeks ago         21.03 MB</span><br><span class="line">docker                      latest              cf693ec9b5c7        3 weeks ago         105.1 MB</span><br><span class="line">nginx                       latest              e43d811ce2f4        5 weeks ago         181.5 MB</span><br></pre></td></tr></table></figure>
<p>我们可以用镜像的完整 ID，也称为 <code>长 ID</code>，来删除镜像。使用脚本的时候可能会用长 ID，但是人工输入就太累了，所以更多的时候是用 <code>短 ID</code> 来删除镜像。<code>docker image ls</code> 默认列出的就已经是短 ID 了，一般取前3个字符以上，只要足够区分于别的镜像就可以了。</p>
<p>比如这里，如果我们要删除 <code>redis:alpine</code> 镜像，可以执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image rm 501</span><br><span class="line">Untagged: redis:alpine</span><br><span class="line">Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d</span><br><span class="line">Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7</span><br><span class="line">Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b</span><br><span class="line">Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23</span><br><span class="line">Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa</span><br><span class="line">Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3</span><br><span class="line">Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7</span><br></pre></td></tr></table></figure>
<p>我们也可以用<code>镜像名</code>，也就是 <code>&lt;仓库名&gt;:&lt;标签&gt;</code>，来删除镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image rm centos</span><br><span class="line">Untagged: centos:latest</span><br><span class="line">Untagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c</span><br><span class="line">Deleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a</span><br><span class="line">Deleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38</span><br></pre></td></tr></table></figure>
<p>当然，更精确的是使用 <code>镜像摘要</code> 删除镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image ls --digests</span><br><span class="line">REPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE</span><br><span class="line">node                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        3 weeks ago         214 MB</span><br><span class="line"></span><br><span class="line">$ docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</span><br><span class="line">Untagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</span><br></pre></td></tr></table></figure>
<h2 id="Untagged-和-Deleted"><a href="#Untagged-和-Deleted" class="headerlink" title="Untagged 和 Deleted"></a>Untagged 和 Deleted</h2><p>如果观察上面这几个命令的运行输出信息的话，你会注意到删除行为分为两类，一类是 <code>Untagged</code>，另一类是 <code>Deleted</code>。我们之前介绍过，镜像的唯一标识是其 ID 和摘要，而一个镜像可以有多个标签。</p>
<p>因此当我们使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的 <code>Untagged</code> 的信息。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 <code>Delete</code> 行为就不会发生。所以并非所有的 <code>docker image rm</code> 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已。</p>
<p>当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变得非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 <code>docker pull</code> 看到的层数不一样的原因。</p>
<p>除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。</p>
<h2 id="用-docker-image-ls-命令来配合"><a href="#用-docker-image-ls-命令来配合" class="headerlink" title="用 docker image ls 命令来配合"></a>用 docker image ls 命令来配合</h2><p>像其它可以承接多个实体的命令一样，可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。</p>
<p>比如，我们需要删除所有仓库名为 <code>redis</code> 的镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q redis)</span><br></pre></td></tr></table></figure>
<p>或者删除所有在 <code>mongo:3.2</code> 之前的镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image rm $(docker image ls -q -f before=mongo:3.2)</span><br></pre></td></tr></table></figure>
<p> Linux 命令行的强大可以完成很多非常赞的功能。</p>
<h1 id="镜像的实现原理"><a href="#镜像的实现原理" class="headerlink" title="镜像的实现原理"></a>镜像的实现原理</h1><p>Docker 镜像是怎么实现增量的修改和维护的？</p>
<p>每个镜像都由很多层次构成，Docker 使用 <a href="https://en.wikipedia.org/wiki/UnionFS" target="_blank" rel="noopener">Union FS</a> 将这些不同的层结合到一个镜像中去。</p>
<p>通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下,另一个更常用的就是将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。</p>
<p>Docker 在 AUFS 上构建的容器也是利用了类似的原理。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>本文章摘抄于：<a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker入门（二）——容器</title>
    <url>/2019/11/28/Docker%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker容器简介"><a href="#Docker容器简介" class="headerlink" title="Docker容器简介"></a>Docker容器简介</h1><p>容器是 Docker 是一核心概念。</p>
<p>简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p>
<a id="more"></a>
<p>接下来看看容器的操作使用。</p>
<h1 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h1><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（<code>stopped</code>）的容器重新启动。</p>
<h3 id="新建并启动"><a href="#新建并启动" class="headerlink" title="新建并启动"></a>新建并启动</h3><p>所需要的命令主要为 <code>docker run</code>。</p>
<p>例如，下面的命令输出一个 “Hello World”，之后终止容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run ubuntu:18.04 /bin/<span class="built_in">echo</span> <span class="string">'Hello world'</span></span><br><span class="line">Unable to find image <span class="string">'ubuntu:18.04'</span> locally</span><br><span class="line">18.04: Pulling from library/ubuntu</span><br><span class="line">7ddbc47eeb70: Pull complete </span><br><span class="line">c1bbdc448b72: Pull complete </span><br><span class="line">8c3b70e39044: Pull complete </span><br><span class="line">45d437916d57: Pull complete </span><br><span class="line">Digest: sha256:6e9f67fa63b0323e9a1e587fd71c561ba48a034504fb804fd26fd8800039835d</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> ubuntu:18.04</span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure>
<p>这跟在本地直接执行 <code>/bin/echo &#39;hello world&#39;</code> 几乎感觉不出任何区别。</p>
<h3 id="启动交互式终端"><a href="#启动交互式终端" class="headerlink" title="启动交互式终端"></a>启动交互式终端</h3><p>我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现<strong>“对话”</strong>的能力：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -t -i ubuntu:18.04 /bin/bash</span><br><span class="line">root@349a1edaa615:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>各个参数解析：</p>
<ul>
<li><strong>-t:</strong> 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</li>
<li><strong>-i:</strong> 则让容器的标准输入保持打开。</li>
<li><strong>ubuntu:18.04</strong>: ubuntu 镜像。</li>
<li><strong>/bin/bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。</li>
</ul>
<p>在交互模式下，用户可以通过所创建的终端来输入命令，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@349a1edaa615:/<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">root@349a1edaa615:/<span class="comment"># ls</span></span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@349a1edaa615:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>exit退出交互式 Shell</p>
</blockquote>
<p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
<h3 id="启动已终止容器"><a href="#启动已终止容器" class="headerlink" title="启动已终止容器"></a>启动已终止容器</h3><p>可以利用 <code>docker container start</code> 命令，直接将一个已经终止的容器启动运行。</p>
<p>容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 <code>ps</code> 或 <code>top</code> 来查看进程信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@181e9d1236d5:/<span class="comment"># ps</span></span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">    1 pts/0    00:00:00 bash</span><br><span class="line">   11 pts/0    00:00:00 ps</span><br></pre></td></tr></table></figure>
<h2 id="守护态运行容器"><a href="#守护态运行容器" class="headerlink" title="守护态运行容器"></a>守护态运行容器</h2><p>如果需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 <code>-d</code> 参数来实现。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -i -t ubuntu:18.04 /bin/sh</span><br><span class="line">edae8d9d6311b344b3971bafc2a698625242bcf3300e2c850ba1e4ef51d88707</span><br></pre></td></tr></table></figure>
<p>此时容器启动后会进入后台。如果想要进入容器可以使用<code>docker exec</code>命令，后面会逐渐讲解到。</p>
<blockquote>
<p> <strong>注：</strong>容器是否会长久运行，是和 <code>docker run</code> 指定的命令有关，和 <code>-d</code> 参数无关。</p>
</blockquote>
<p>使用 <code>-d</code> 参数启动后会返回一个唯一的 id，也可以通过 <code>docker container ls</code> 命令来查看容器信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">edae8d9d6311        ubuntu:18.04        <span class="string">"/bin/sh"</span>           4 minutes ago       Up 4 minutes                            suspicious_pike</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要获取容器的输出信息，可以通过 <code>docker container logs</code> 命令。如<code>docker container logs [container ID or NAMES]</code></p>
</blockquote>
<h2 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h2><p>可以使用 <code>docker container stop</code> 来终止一个运行中的容器。</p>
<p>此外，当 Docker 容器中指定的应用终结时，容器也自动终止。</p>
<p>例如对于上一章节中只启动了一个终端的容器，用户通过 <code>exit</code> 命令或 <code>Ctrl+d</code> 来退出终端时，所创建的容器立刻终止。</p>
<p>终止状态的容器可以用 <code>docker container ls -a</code> 命令看到。例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container stop edae</span><br><span class="line">edae</span><br><span class="line">$ docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">edae8d9d6311        ubuntu:18.04        <span class="string">"/bin/sh"</span>                7 minutes ago       Exited (137) 36 seconds ago                       suspicious_pike</span><br><span class="line">181e9d1236d5        ubuntu:18.04        <span class="string">"/bin/bash"</span>              2 days ago          Exited (0) 2 days ago                             condescending_feistel</span><br><span class="line">349a1edaa615        ubuntu:18.04        <span class="string">"/bin/bash"</span>              2 days ago          Exited (0) 2 days ago                             suspicious_lehmann</span><br><span class="line">7d6482342da5        ubuntu:18.04        <span class="string">"/bin/echo 'Hello wo…"</span>   2 days ago          Exited (0) 2 days ago                             affectionate_knuth</span><br></pre></td></tr></table></figure>
<p>处于终止状态的容器，可以通过 <code>docker container start</code> 命令来重新启动。</p>
<p>此外，<code>docker container restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p>
<blockquote>
<p>指定容器ID时可以不需要输入完整ID，可以输入ID前几位都可以，只要能够辨识到该容器即可。</p>
</blockquote>
<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>在使用 <code>-d</code> 参数时，容器启动后会进入后台。</p>
<p>某些时候需要进入容器进行操作，包括使用 <code>docker attach</code> 命令或 <code>docker exec</code> 命令，推荐大家使用 <code>docker exec</code> 命令。</p>
<h3 id="attach命令"><a href="#attach命令" class="headerlink" title="attach命令"></a><code>attach</code>命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">edae8d9d6311        ubuntu:18.04        <span class="string">"/bin/sh"</span>           9 minutes ago       Up 4 seconds                            suspicious_pike</span><br><span class="line">$ docker attach 243c</span><br><span class="line"><span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br></pre></td></tr></table></figure>
<p><em>注意：</em> 如果从这个 stdin 中 exit，会导致容器的停止。</p>
<h3 id="exec命令"><a href="#exec命令" class="headerlink" title="exec命令"></a><code>exec</code>命令</h3><p><code>docker exec</code> 后边可以跟多个参数，这里主要说明 <code>-i</code> <code>-t</code> 参数。</p>
<p>只用 <code>-i</code> 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p>
<p>当 <code>-i</code> <code>-t</code> 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">edae8d9d6311        ubuntu:18.04        <span class="string">"/bin/sh"</span>           13 minutes ago      Up 5 seconds                            suspicious_pike</span><br><span class="line">$ docker <span class="built_in">exec</span> -i edae bash</span><br><span class="line">ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">va</span><br><span class="line">$ docker <span class="built_in">exec</span> -i -t edae bash</span><br><span class="line">root@edae8d9d6311:/<span class="comment"># ls</span></span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@edae8d9d6311:/<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 <code>docker exec</code> 的原因。</p>
<p>更多参数说明请使用 <code>docker exec --help</code> 查看。</p>
<h2 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h2><h3 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h3><p>如果要导出本地某个容器，可以使用 <code>docker export</code> 命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES</span><br><span class="line">edae8d9d6311        ubuntu:18.04        <span class="string">"/bin/sh"</span>                18 minutes ago      Exited (137) About a minute ago                       suspicious_pike</span><br><span class="line">181e9d1236d5        ubuntu:18.04        <span class="string">"/bin/bash"</span>              2 days ago          Exited (0) 2 days ago                                 condescending_feistel</span><br><span class="line">349a1edaa615        ubuntu:18.04        <span class="string">"/bin/bash"</span>              2 days ago          Exited (0) 2 days ago                                 suspicious_lehmann</span><br><span class="line">7d6482342da5        ubuntu:18.04        <span class="string">"/bin/echo 'Hello wo…"</span>   2 days ago          Exited (0) 2 days ago                                 affectionate_knuth</span><br><span class="line">$ docker <span class="built_in">export</span> edae &gt; ubuntu.zip</span><br></pre></td></tr></table></figure>
<h3 id="导入容器快照"><a href="#导入容器快照" class="headerlink" title="导入容器快照"></a>导入容器快照</h3><p>可以使用 <code>docker import</code> 从容器快照文件中再导入为镜像，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat ubuntu.zip | docker import - <span class="built_in">test</span>/ubuntu:v1.0</span><br><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</span><br><span class="line"><span class="built_in">test</span>/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB</span><br></pre></td></tr></table></figure>
<p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>
<blockquote>
<p><em>注：用户既可以使用 <code>docker load</code> 来导入镜像存储文件到本地镜像库，也可以使用 <code>docker import</code> 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</em></p>
</blockquote>
<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p>可以使用 <code>docker container rm</code> 来删除一个处于终止状态的容器。例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container rm  edae</span><br><span class="line">edae</span><br></pre></td></tr></table></figure>
<p>如果要删除一个运行中的容器，可以添加 <code>-f</code> 参数。Docker 会发送 <code>SIGKILL</code> 信号给容器。</p>
<p><strong>清理所有处于终止状态的容器</strong></p>
<p>用 <code>docker container ls -a</code> 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用命令<code>docker container prune</code>可以清理掉所有处于终止状态的容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                  PORTS               NAMES</span><br><span class="line">181e9d1236d5        ubuntu:18.04        <span class="string">"/bin/bash"</span>              2 days ago          Exited (0) 2 days ago                       condescending_feistel</span><br><span class="line">349a1edaa615        ubuntu:18.04        <span class="string">"/bin/bash"</span>              2 days ago          Exited (0) 2 days ago                       suspicious_lehmann</span><br><span class="line">7d6482342da5        ubuntu:18.04        <span class="string">"/bin/echo 'Hello wo…"</span>   2 days ago          Exited (0) 2 days ago                       affectionate_knuth</span><br><span class="line">$ docker container prune</span><br><span class="line">WARNING! This will remove all stopped containers.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br><span class="line">Deleted Containers:</span><br><span class="line">181e9d1236d54ee898f8f0ebc5349dbcc0cd2368c34f427f7963c9014c9e1dc8</span><br><span class="line">349a1edaa61597acb426a0961059bf5a73ae0b23350774d5cd5c33963c8b2b12</span><br><span class="line">7d6482342da5f695a5351c15ef17acb521f893548db0891154b5c1268227ce7d</span><br><span class="line"></span><br><span class="line">Total reclaimed space: 20B</span><br><span class="line">$ docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br></pre></td></tr></table></figure>
<h1 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h1><p>在容器中管理数据主要有两种方式：</p>
<ul>
<li>数据卷（Volumes）</li>
<li>挂载主机目录 (Bind mounts)</li>
</ul>
<h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>
<ul>
<li><code>数据卷</code> 可以在容器之间共享和重用</li>
<li>对 <code>数据卷</code> 的修改会立马生效</li>
<li>对 <code>数据卷</code> 的更新，不会影响镜像</li>
<li><code>数据卷</code> 默认会一直存在，即使容器被删除</li>
</ul>
<blockquote>
<p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的 <code>数据卷</code>。</p>
</blockquote>
<h3 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume create my-vol</span><br><span class="line">my-vol</span><br></pre></td></tr></table></figure>
<p>查看所有的 <code>数据卷</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>               my-vol</span><br></pre></td></tr></table></figure>
<p>在主机里使用以下命令可以查看指定 <code>数据卷</code> 的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume inspect my-vol</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"CreatedAt"</span>: <span class="string">"2019-12-02T03:25:01Z"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Mountpoint"</span>: <span class="string">"/var/lib/docker/volumes/my-vol/_data"</span>,</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"my-vol"</span>,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="启动一个挂载数据卷的容器"><a href="#启动一个挂载数据卷的容器" class="headerlink" title="启动一个挂载数据卷的容器"></a>启动一个挂载数据卷的容器</h3><p>在用 <code>docker run</code> 命令的时候，使用 <code>--mount</code> 标记来将 <code>数据卷</code> 挂载到容器里。在一次 <code>docker run</code> 中可以挂载多个 <code>数据卷</code>。</p>
<p>下面创建一个名为 <code>web</code> 的容器，并加载一个 <code>数据卷</code> 到容器的 <code>/webapp</code> 目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    <span class="comment"># -v my-vol:/wepapp \</span></span><br><span class="line">    --mount <span class="built_in">source</span>=my-vol,target=/webapp \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的高端口</p>
</blockquote>
<h3 id="查看数据卷的具体信息"><a href="#查看数据卷的具体信息" class="headerlink" title="查看数据卷的具体信息"></a>查看数据卷的具体信息</h3><p>在主机里使用以下命令可以查看 <code>web</code> 容器的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker inspect web</span><br></pre></td></tr></table></figure>
<p><code>数据卷</code> 信息在 “Mounts” Key 下面</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"Mounts": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"Type"</span>: <span class="string">"volume"</span>,</span><br><span class="line">        <span class="attr">"Name"</span>: <span class="string">"my-vol"</span>,</span><br><span class="line">        <span class="attr">"Source"</span>: <span class="string">"/var/lib/docker/volumes/my-vol/_data"</span>,</span><br><span class="line">        <span class="attr">"Destination"</span>: <span class="string">"/app"</span>,</span><br><span class="line">        <span class="attr">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="attr">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"Propagation"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume rm my-vol</span><br></pre></td></tr></table></figure>
<p><code>数据卷</code> 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 <code>数据卷</code>，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 <code>数据卷</code>。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 <code>docker rm -v</code> 这个命令。</p>
<p>无主的数据卷可能会占据很多空间，要清理请使用以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker volume prune</span><br></pre></td></tr></table></figure>
<h2 id="挂载主机目录"><a href="#挂载主机目录" class="headerlink" title="挂载主机目录"></a>挂载主机目录</h2><h3 id="挂载一个主机目录作为数据卷"><a href="#挂载一个主机目录作为数据卷" class="headerlink" title="挂载一个主机目录作为数据卷"></a>挂载一个主机目录作为数据卷</h3><p>使用 <code>--mount</code> 标记可以指定挂载一个本地主机的目录到容器中去。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    <span class="comment"># -v /src/webapp:/opt/webapp \</span></span><br><span class="line">    --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/src/webapp,target=/opt/webapp \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure>
<p>上面的命令加载主机的 <code>/src/webapp</code> 目录到容器的 <code>/opt/webapp</code>目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，以前使用 <code>-v</code> 参数时如果本地目录不存在 Docker 会自动为你创建一个文件夹，现在使用 <code>--mount</code> 参数时如果本地目录不存在，Docker 会报错。</p>
<p>Docker 挂载主机目录的默认权限是 <code>读写</code>，用户也可以通过增加 <code>readonly</code> 指定为 <code>只读</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -P \</span><br><span class="line">    --name web \</span><br><span class="line">    <span class="comment"># -v /src/webapp:/opt/webapp:ro \</span></span><br><span class="line">    --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/src/webapp,target=/opt/webapp,<span class="built_in">readonly</span> \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure>
<p>加了 <code>readonly</code> 之后，就挂载为 <code>只读</code> 了。如果你在容器内 <code>/opt/webapp</code> 目录新建文件，会显示如下错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/webapp <span class="comment"># touch new.txt</span></span><br><span class="line">touch: new.txt: Read-only file system</span><br></pre></td></tr></table></figure>
<h3 id="查看数据卷的具体信息-1"><a href="#查看数据卷的具体信息-1" class="headerlink" title="查看数据卷的具体信息"></a>查看数据卷的具体信息</h3><p>在主机里使用以下命令可以查看 <code>web</code> 容器的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker inspect web</span><br></pre></td></tr></table></figure>
<p><code>挂载主机目录</code> 的配置信息在 “Mounts” Key 下面</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"Mounts": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">        <span class="attr">"Source"</span>: <span class="string">"/src/webapp"</span>,</span><br><span class="line">        <span class="attr">"Destination"</span>: <span class="string">"/opt/webapp"</span>,</span><br><span class="line">        <span class="attr">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h3 id="挂载一个本地主机文件作为数据卷"><a href="#挂载一个本地主机文件作为数据卷" class="headerlink" title="挂载一个本地主机文件作为数据卷"></a>挂载一个本地主机文件作为数据卷</h3><p><code>--mount</code> 标记也可以从主机挂载单个文件到容器中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --rm -it \</span><br><span class="line">   <span class="comment"># -v $HOME/.bash_history:/root/.bash_history \</span></span><br><span class="line">   --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=<span class="variable">$HOME</span>/.bash_history,target=/root/.bash_history \</span><br><span class="line">   ubuntu:18.04 \</span><br><span class="line">   bash</span><br><span class="line"></span><br><span class="line">root@2affd44b4667:/<span class="comment"># history</span></span><br><span class="line">1  ls</span><br><span class="line">2  diskutil list</span><br></pre></td></tr></table></figure>
<p>这样就可以记录在容器输入过的命令了。</p>
<h2 id="选择-v-or-–mount-标志"><a href="#选择-v-or-–mount-标志" class="headerlink" title="选择 -v or –mount 标志"></a>选择 -v or –mount 标志</h2><p>最初，<code>-v</code>或<code>--volume</code>标志用于独立容器，而<code>--mount</code>标志用于群集服务。但是，从Docker 17.06开始，您也可以使用<code>--mount</code>独立的容器。一般来说，<code>--mount</code>更明确和详细。最大的区别在于-v语法将所有选项组合在一个字段中，而<code>--mount</code>语法将它们分开。建议新学者使用。</p>
<p><strong><code>v</code>或<code>- volume</code>:由三个字段组成，由冒号分隔(:)。字段必须按照正确的顺序书写，并且每个字段的含义都不是立刻确定。</strong></p>
<ul>
<li>在命名卷的情况下，第一个字段是卷的名称，在给定的主机上是惟一的。对于匿名卷，省略了第一个字段。</li>
<li>第二个字段是在容器中安装文件或目录的路径。</li>
<li>第三个字段是可选的，并且是一个逗号分隔的选项列表，如ro。下面讨论这些选项。</li>
</ul>
<p><strong><code>--mount</code>:由多个键-值对组成，由逗号分隔，每一对由<code>&lt; key&gt;= &lt;value&gt; tuple(元组）</code>组成。<code>--mount</code> 语法比<code>- v</code>或<code>—volume</code> 更详细，其中键对的顺序并不重要，而且标记的值更容易理解。</strong></p>
<ul>
<li>挂载的类型(type)，可以是绑定(bind)、卷(volume)或tmpfs。本主题讨论卷，因此类型将始终是卷。</li>
<li>挂载源（source)。对于命名卷，是卷的名称。对于匿名卷，该字段被省略。可以指定为source 或src。</li>
<li>挂在目标(destination)的值是将文件或目录安装在容器中的路径。可以指定为destination、dst或target。</li>
<li>如果存在readonly选项，则将绑定挂载安装到容器中作为只读。</li>
<li>可以使用键值对多次指定的volume-opt选项.</li>
</ul>
<p>与绑定挂载相反，所有的卷的选项对于<code>--mount</code> 和<code>-v</code>标志 都可以使用。当卷(volume)作为服务时，只支持<code>--mount</code>。</p>
<h1 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h1><p>Docker 允许通过外部访问容器或容器互联的方式来提供网络服务。</p>
<h2 id="外部访问容器"><a href="#外部访问容器" class="headerlink" title="外部访问容器"></a>外部访问容器</h2><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 <code>-P</code> 或 <code>-p</code> 参数来指定端口映射。</p>
<p>当使用 <code>-P</code> 标记时，Docker 会随机映射一个 <code>49000~49900</code> 的端口到内部容器开放的网络端口。</p>
<p>使用 <code>docker container ls</code> 可以看到，本地主机的 49155 被映射到了容器的 5000 端口。此时访问本机的 49155 端口即可访问容器内 web 应用提供的界面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -P training/webapp python app.py</span><br><span class="line">ea7fb3aa1ca874847d7469f62f7cdfcd557438453ad08c283416b5d229468db2</span><br><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">ea7fb3aa1ca8        training/webapp     <span class="string">"python app.py"</span>     About an hour ago   Up About an hour    0.0.0.0:32768-&gt;5000/tcp   serene_buck</span><br></pre></td></tr></table></figure>
<p>同样的，可以通过 <code>docker logs</code> 命令来查看应用的信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker logs -f serene_buck</span><br><span class="line"> * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</span><br><span class="line">172.17.0.1 - - [02/Dec/2019 06:27:22] <span class="string">"GET / HTTP/1.1"</span> 200 -</span><br><span class="line">172.17.0.1 - - [02/Dec/2019 06:27:23] <span class="string">"GET /favicon.ico HTTP/1.1"</span> 404 -</span><br></pre></td></tr></table></figure>
<p><code>-p</code> 则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 <code>ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</code>。</p>
<h3 id="映射所有接口地址"><a href="#映射所有接口地址" class="headerlink" title="映射所有接口地址"></a>映射所有接口地址</h3><p>使用 <code>hostPort:containerPort</code> 格式本地的 8000 端口映射到容器的 5000 端口，可以执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 8000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure>
<p>此时默认会绑定本地所有接口上的所有地址。</p>
<h3 id="映射到指定地址的指定端口"><a href="#映射到指定地址的指定端口" class="headerlink" title="映射到指定地址的指定端口"></a>映射到指定地址的指定端口</h3><p>可以使用 <code>ip:hostPort:containerPort</code> 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure>
<h3 id="映射到指定地址的任意端口"><a href="#映射到指定地址的任意端口" class="headerlink" title="映射到指定地址的任意端口"></a>映射到指定地址的任意端口</h3><p>使用 <code>ip::containerPort</code> 绑定 localhost 的任意端口到容器的 5000 端口，本地主机会自动分配一个端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1::5000 training/webapp python app.py</span><br></pre></td></tr></table></figure>
<p>还可以使用 <code>udp</code> 标记来指定 <code>udp</code> 端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span><br></pre></td></tr></table></figure>
<h3 id="查看映射端口配置"><a href="#查看映射端口配置" class="headerlink" title="查看映射端口配置"></a>查看映射端口配置</h3><p>使用 <code>docker port</code> 来查看当前映射的端口配置，也可以查看到绑定的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker port 5f2b 5000</span><br><span class="line">0.0.0.0:8000</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：</p>
<ul>
<li>容器有自己的内部网络和 ip 地址（使用 <code>docker inspect</code> 可以获取所有的变量，Docker 还可以有一个可变的网络配置。）</li>
<li><code>-p</code> 标记可以多次使用来绑定多个端口</li>
</ul>
<p>例如</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -p 3000:80 \</span><br><span class="line">    training/webapp \</span><br><span class="line">    python app.py</span><br></pre></td></tr></table></figure>
<h2 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h2><h3 id="新建网络"><a href="#新建网络" class="headerlink" title="新建网络"></a>新建网络</h3><p>下面先创建一个新的 Docker 网络。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker network create -d bridge my-net</span><br><span class="line">cea6b6e901d97a319c537895587df6a1256ccc18fc1e6faccfa911ec843e2e64</span><br></pre></td></tr></table></figure>
<p><code>-d</code> 参数指定 Docker 网络类型，有 <code>bridge</code> <code>overlay</code>。其中 <code>overlay</code> 网络类型用于 Swarm mode，属于高级用法了。入门章节则不介绍了。</p>
<h3 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h3><p>运行一个容器并连接到新建的 <code>my-net</code> 网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -i -t --rm --name busybox1 --network my-net busybox sh</span><br></pre></td></tr></table></figure>
<p>打开新的终端，再运行一个容器并加入到 <code>my-net</code> 网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -i -t --rm --name busybox2 --network my-net busybox sh</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Clean up (–rm) 指在容器运行完之后自动清除，<em>注意：–rm 和 -d不能共用！</em></p>
</blockquote>
<p>再打开一个新的终端查看容器信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container ls       </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">4f37d2e62181        busybox             <span class="string">"sh"</span>                48 seconds ago      Up 47 seconds                           busybox2</span><br><span class="line">98b27738599c        busybox             <span class="string">"sh"</span>                2 minutes ago       Up About a minute                       busybox1</span><br></pre></td></tr></table></figure>
<p>下面通过 <code>ping</code> 来证明 <code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p>
<p>在 <code>busybox1</code> 容器输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># ping busybox2</span></span><br><span class="line">PING busybox2 (172.18.0.3): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.115 ms</span><br><span class="line">64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.138 ms</span><br><span class="line">64 bytes from 172.18.0.3: seq=2 ttl=64 time=0.139 ms</span><br><span class="line">64 bytes from 172.18.0.3: seq=3 ttl=64 time=0.137 ms</span><br><span class="line">64 bytes from 172.18.0.3: seq=4 ttl=64 time=0.138 ms</span><br><span class="line">64 bytes from 172.18.0.3: seq=5 ttl=64 time=0.138 ms</span><br><span class="line">64 bytes from 172.18.0.3: seq=6 ttl=64 time=0.133 ms</span><br></pre></td></tr></table></figure>
<p>用 ping 来测试连接 <code>busybox2</code> 容器，它会解析成 <code>172.18.0.3</code>。</p>
<p>同理在 <code>busybox2</code> 容器执行 <code>ping busybox1</code>，也会成功连接到。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># ping busybox1</span></span><br><span class="line">PING busybox1 (172.18.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.091 ms</span><br><span class="line">64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.137 ms</span><br></pre></td></tr></table></figure>
<p>这样，<code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p>
<blockquote>
<p>如果有多个容器需要互相连接，推荐使用Docker Compose。</p>
</blockquote>
<blockquote>
<p><code>BusyBox</code> 是一个集成了一百多个最常用 Linux 命令和工具（如 <code>cat</code>、<code>echo</code>、<code>grep</code>、<code>mount</code>、<code>telnet</code> 等）的精简工具箱，它只需要几 MB 的大小，很方便进行各种快速验证，被誉为“Linux 系统的瑞士军刀”。</p>
<p><code>BusyBox</code> 可运行于多款 <code>POSIX</code> 环境的操作系统中，如 <code>Linux</code>（包括 <code>Android</code>）、<code>Hurd</code>、<code>FreeBSD</code> 等。</p>
</blockquote>
<h2 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h2><p>Docker 利用虚拟文件来挂载容器的 3 个相关配置文件。</p>
<p>在容器中使用 <code>mount</code> 命令可以看到挂载信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mount</span><br><span class="line">/dev/disk/by-uuid/1fec...ebdf on /etc/hostname <span class="built_in">type</span> ext4 ...</span><br><span class="line">/dev/disk/by-uuid/1fec...ebdf on /etc/hosts <span class="built_in">type</span> ext4 ...</span><br><span class="line">tmpfs on /etc/resolv.conf <span class="built_in">type</span> tmpfs ...</span><br></pre></td></tr></table></figure>
<p>这种机制可以让宿主主机 DNS 信息发生更新后，所有 Docker 容器的 DNS 配置通过 <code>/etc/resolv.conf</code> 文件立刻得到更新。</p>
<p>配置全部容器的 DNS ，也可以在 <code>/etc/docker/daemon.json</code> 文件中增加以下内容来设置。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dns"</span> : [</span><br><span class="line">    <span class="string">"114.114.114.114"</span>,</span><br><span class="line">    <span class="string">"8.8.8.8"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样每次启动的容器 DNS 自动配置为 <code>114.114.114.114</code> 和 <code>8.8.8.8</code>。使用以下命令来证明其已经生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -it --rm ubuntu:18.04  cat etc/resolv.conf</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>
<p>如果用户想要手动指定容器的配置，可以在使用 <code>docker run</code> 命令启动容器时加入如下参数：</p>
<blockquote>
<p><code>-h HOSTNAME</code> 或者 <code>--hostname=HOSTNAME</code> 设定容器的主机名，它会被写到容器内的 <code>/etc/hostname</code> 和 <code>/etc/hosts</code>。但它在容器外部看不到，既不会在 <code>docker container ls</code> 中显示，也不会在其他的容器的 <code>/etc/hosts</code> 看到。</p>
<p><code>--dns=IP_ADDRESS</code> 添加 DNS 服务器到容器的 <code>/etc/resolv.conf</code> 中，让容器用这个服务器来解析所有不在 <code>/etc/hosts</code> 中的主机名。</p>
<p><code>--dns-search=DOMAIN</code> 设定容器的搜索域，当设定搜索域为 <code>.example.com</code> 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 <code>host.example.com</code>。</p>
<p>注意：如果在容器启动时没有指定最后两个参数，Docker 会默认用主机上的<code>/etc/resolv.conf</code> 来配置容器。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>Docker 官网：<a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com</a></p>
<p>Github Docker 源码：<a href="https://github.com/docker/docker-ce" target="_blank" rel="noopener">https://github.com/docker/docker-ce</a></p>
<p>Docker命令大全：<a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-command-manual.html</a></p>
<p>本文章摘抄于：<a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker入门（一）——基本概念与安装</title>
    <url>/2019/11/27/Docker%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><p>Docker 是一个开源的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html" target="_blank" rel="noopener">Go 语言</a> 并遵从 Apache2.0 协议开源。</p>
<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p>
<p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>
<p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版）</p>
<a id="more"></a>
<p>Docker 使用 <code>Google</code> 公司推出的 <a href="https://golang.org/" target="_blank" rel="noopener">Go 语言</a> 进行开发实现，基于 <code>Linux</code> 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups" target="_blank" rel="noopener">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="noopener">namespace</a>，以及 <a href="https://en.wikipedia.org/wiki/Aufs" target="_blank" rel="noopener">AUFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="noopener">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization" target="_blank" rel="noopener">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 <a href="https://linuxcontainers.org/lxc/introduction/" target="_blank" rel="noopener">LXC</a>，从 0.7 版本以后开始去除 <code>LXC</code>，转而使用自行开发的 <a href="https://github.com/docker/libcontainer" target="_blank" rel="noopener">libcontainer</a>，从 1.11 开始，则进一步演进为使用 <a href="https://github.com/opencontainers/runc" target="_blank" rel="noopener">runC</a> 和 <a href="https://github.com/containerd/containerd" target="_blank" rel="noopener">containerd</a>。</p>
<p><img src="docker-on-linux.png" alt></p>
<blockquote>
<p><code>runc</code> 是一个 Linux 命令行工具，用于根据 <a href="https://github.com/opencontainers/runtime-spec" target="_blank" rel="noopener">OCI容器运行时规范</a> 创建和运行容器。</p>
<p><code>containerd</code> 是一个守护程序，它管理容器生命周期，提供了在一个节点上执行容器和管理镜像的最小功能集。</p>
</blockquote>
<p>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 <code>Docker</code> 技术比虚拟机技术更为轻便、快捷。</p>
<p>下面的图片比较了 <strong>Docker</strong> 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p>
<p><img src="virtualization.png" alt></p>
<p><img src="docker.png" alt></p>
<h1 id="Docker优点"><a href="#Docker优点" class="headerlink" title="Docker优点"></a>Docker优点</h1><p> Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。 </p>
<h2 id="快速，一致地交付您的应用程序"><a href="#快速，一致地交付您的应用程序" class="headerlink" title="快速，一致地交付您的应用程序"></a>快速，一致地交付您的应用程序</h2><p>Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。</p>
<p>容器非常适合持续集成和持续交付（CI / CD）工作流程，请考虑以下示例方案：</p>
<ul>
<li>您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。</li>
<li>他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。</li>
<li>当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。</li>
<li>测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。</li>
</ul>
<h2 id="响应式部署和扩展"><a href="#响应式部署和扩展" class="headerlink" title="响应式部署和扩展"></a>响应式部署和扩展</h2><p>Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</p>
<p>Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</p>
<h2 id="更轻松的维护和扩展"><a href="#更轻松的维护和扩展" class="headerlink" title="更轻松的维护和扩展"></a>更轻松的维护和扩展</h2><p> Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，<code>Docker</code> 团队同各个开源项目团队一起维护了一大批高质量的 <a href="https://hub.docker.com/search/?type=image&amp;image_filter=official" target="_blank" rel="noopener">官方镜像</a>，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。 </p>
<h2 id="在同一硬件上运行更多工作负载"><a href="#在同一硬件上运行更多工作负载" class="headerlink" title="在同一硬件上运行更多工作负载"></a>在同一硬件上运行更多工作负载</h2><p> Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。 </p>
<h2 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h2><table>
<thead>
<tr>
<th style="text-align:left">特性</th>
<th style="text-align:left">容器</th>
<th style="text-align:left">虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">启动</td>
<td style="text-align:left">秒级</td>
<td style="text-align:left">分钟级</td>
</tr>
<tr>
<td style="text-align:left">硬盘使用</td>
<td style="text-align:left">一般为 <code>MB</code></td>
<td style="text-align:left">一般为 <code>GB</code></td>
</tr>
<tr>
<td style="text-align:left">性能</td>
<td style="text-align:left">接近原生</td>
<td style="text-align:left">弱于</td>
</tr>
<tr>
<td style="text-align:left">系统支持量</td>
<td style="text-align:left">单机支持上千个容器</td>
<td style="text-align:left">一般几十个</td>
</tr>
</tbody>
</table>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Docker 包括三个基本概念</p>
<ul>
<li>镜像（<code>Image</code>）</li>
<li>容器（<code>Container</code>）</li>
<li>仓库（<code>Repository</code>）</li>
</ul>
<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:18.04</code> 就包含了完整的一套 Ubuntu 18.04 最小系统的 <code>root</code> 文件系统。</p>
<p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<h3 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h3><p>因为镜像包含操作系统完整的 <code>root</code> 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="noopener">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p>
<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>
<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>
<p>关于镜像构建，将会在后续相关章节中做进一步的讲解。</p>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
<p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 <a href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="noopener">命名空间</a>。因此容器可以拥有自己的 <code>root</code> 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p>
<p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 <strong>容器存储层</strong>。</p>
<p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>
<p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 <strong>数据卷（Volume）</strong>、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p>
<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><h3 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h3><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<a href="https://yeasy.gitbooks.io/docker_practice/content/repository/registry.html" target="_blank" rel="noopener">Docker Registry</a> 就是这样的服务。</p>
<p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p>
<p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p>
<p>以 <a href="https://hub.docker.com/_/ubuntu" target="_blank" rel="noopener">Ubuntu 镜像</a> 为例，<code>ubuntu</code> 是仓库的名字，其内包含有不同的版本标签，如，<code>16.04</code>, <code>18.04</code>。我们可以通过 <code>ubuntu:16.04</code>，或者 <code>ubuntu:18.04</code> 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 <code>ubuntu</code>，那将视为 <code>ubuntu:latest</code>。</p>
<p>仓库名经常以 <em>两段式路径</em> 形式出现，比如 <code>jwilder/nginx-proxy</code>，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p>
<h3 id="Docker-Registry-公开服务"><a href="#Docker-Registry-公开服务" class="headerlink" title="Docker Registry 公开服务"></a>Docker Registry 公开服务</h3><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p>
<p>最常使用的 Registry 公开服务是官方的 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a>，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 <a href="https://coreos.com/" target="_blank" rel="noopener">CoreOS</a> 的 <a href="https://quay.io/repository/" target="_blank" rel="noopener">Quay.io</a>，CoreOS 相关的镜像存储在这里；Google 的 <a href="https://cloud.google.com/container-registry/" target="_blank" rel="noopener">Google Container Registry</a>，<a href="https://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a> 的镜像使用的就是这个服务。</p>
<p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（<code>Registry Mirror</code>），这些镜像服务被称为<strong>加速器</strong>。常见的有 <a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云加速器</a>、<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">DaoCloud 加速器</a> 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。</p>
<p>国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 <a href="https://hub.tenxcloud.com/" target="_blank" rel="noopener">时速云镜像仓库</a>、<a href="https://c.163.com/hub#/m/library/" target="_blank" rel="noopener">网易云镜像服务</a>、<a href="https://hub.daocloud.io/" target="_blank" rel="noopener">DaoCloud 镜像市场</a>、<a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">阿里云镜像库</a> 等。</p>
<h3 id="私有-Docker-Registry"><a href="#私有-Docker-Registry" class="headerlink" title="私有 Docker Registry"></a>私有 Docker Registry</h3><p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 <a href="https://hub.docker.com/_/registry/" target="_blank" rel="noopener">Docker Registry</a> 镜像，可以直接使用做为私有 Registry 服务。在 <a href="https://yeasy.gitbooks.io/docker_practice/content/repository/registry.html" target="_blank" rel="noopener">私有仓库</a> 一节中，会有进一步的搭建私有 Registry 服务的讲解。</p>
<p>开源的 Docker Registry 镜像只提供了 <a href="https://docs.docker.com/registry/spec/api/" target="_blank" rel="noopener">Docker Registry API</a> 的服务端实现，足以支持 <code>docker</code> 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 <a href="https://docs.docker.com/datacenter/dtr/2.0/" target="_blank" rel="noopener">Docker Trusted Registry</a> 中，提供了这些高级功能。</p>
<p>除了官方的 Docker Registry 外，还有第三方软件实现了 Docker Registry API，甚至提供了用户界面以及一些高级功能。比如，<a href="https://github.com/goharbor/harbor" target="_blank" rel="noopener">Harbor</a> 和 <a href="https://yeasy.gitbooks.io/docker_practice/content/repository/nexus3_registry.html" target="_blank" rel="noopener">Sonatype Nexus</a>。</p>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p>
<p>Docker CE 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。每六个月发布一个 <code>stable</code> 版本 (<code>18.09</code>, <code>19.03</code>, <code>19.09</code>…)。</p>
<p>官方网站上有各种环境下的 <a href="https://docs.docker.com/install/" target="_blank" rel="noopener">安装指南</a>，这里主要介绍 Docker CE 在 <code>Linux</code> 、 <code>macOS</code> 上的安装。</p>
<h2 id="Linux—CentOS"><a href="#Linux—CentOS" class="headerlink" title="Linux—CentOS"></a>Linux—CentOS</h2><h3 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h3><p> Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 <code>overlay2</code> 存储层驱动）无法使用，并且部分功能可能不太稳定。 </p>
<h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><p> 旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code>，使用以下命令卸载旧版本： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>
<h3 id="使用yum安装"><a href="#使用yum安装" class="headerlink" title="使用yum安装"></a>使用yum安装</h3><p> 执行以下命令安装依赖包： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2</span><br></pre></td></tr></table></figure>
<p>鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。</p>
<p>执行下面的命令添加 <code>yum</code> 软件源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># $ sudo yum-config-manager \</span></span><br><span class="line"><span class="comment">#     --add-repo \</span></span><br><span class="line"><span class="comment">#     https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p> 如果需要测试版本的 Docker CE 请使用以下命令： </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-test</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 如果需要每日构建版本的 Docker CE 请使用以下命令： </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager --<span class="built_in">enable</span> docker-ce-nightly</span><br></pre></td></tr></table></figure>
<h3 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h3><p> 更新 <code>yum</code> 软件源缓存，并安装 <code>docker-ce</code>。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum makecache fast</span><br><span class="line">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure>
<h3 id="使用脚本自动安装"><a href="#使用脚本自动安装" class="headerlink" title="使用脚本自动安装"></a>使用脚本自动安装</h3><p> 在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"><span class="comment"># $ sudo sh get-docker.sh --mirror AzureChinaCloud</span></span><br></pre></td></tr></table></figure>
<p> 执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的稳定(stable)版本安装在系统中。 </p>
<h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<h3 id="建立-docker-用户组"><a href="#建立-docker-用户组" class="headerlink" title="建立 docker 用户组"></a>建立 docker 用户组</h3><p>默认情况下，<code>docker</code> 命令会使用 <a href="https://en.wikipedia.org/wiki/Unix_domain_socket" target="_blank" rel="noopener">Unix socket</a> 与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p>
<p>建立 <code>docker</code> 组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure>
<p> 将当前用户加入 <code>docker</code> 组： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
<p> 退出当前终端并重新登录，进行如下测试。 </p>
<h3 id="测试-Docker-是否安装正确"><a href="#测试-Docker-是否安装正确" class="headerlink" title="测试 Docker 是否安装正确"></a>测试 Docker 是否安装正确</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">d1725b59e92d: Pull complete</span><br><span class="line">Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure>
<p> 若能正常输出以上信息，则说明安装成功。 </p>
<blockquote>
<p>个人作为开发者，建议直接使用宝塔进行安装，bt.cn安装后可以查看软件商店找到docker直接进行安装。对于开发者而言更加方便使用。</p>
</blockquote>
<h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><h3 id="系统要求-1"><a href="#系统要求-1" class="headerlink" title="系统要求"></a>系统要求</h3><p> <a href="https://docs.docker.com/docker-for-mac/" target="_blank" rel="noopener">Docker Desktop for Mac</a> 要求系统最低为 macOS Sierra 10.12。 </p>
<h3 id="Homebrew-安装"><a href="#Homebrew-安装" class="headerlink" title="Homebrew 安装"></a>Homebrew 安装</h3><p> <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 的 <a href="https://caskroom.github.io/" target="_blank" rel="noopener">Cask</a> 已经支持 Docker Desktop for Mac，因此可以很方便的使用 Homebrew Cask 来进行安装： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew cask install docker</span><br></pre></td></tr></table></figure>
<h3 id="手动下载安装"><a href="#手动下载安装" class="headerlink" title="手动下载安装"></a>手动下载安装</h3><p> <a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">https://hub.docker.com/editions/community/docker-ce-desktop-mac</a> </p>
<p><a href="https://docs.docker.com/toolbox/overview/" target="_blank" rel="noopener">https://docs.docker.com/toolbox/overview/</a></p>
<p>也可以点击以下链接直接下载 <a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">Stable</a> 或 <a href="https://download.docker.com/mac/edge/Docker.dmg" target="_blank" rel="noopener">Edge</a> 版本的 Docker Desktop for Mac。</p>
<blockquote>
<p>点击链接注册Docker ID即可下载。傻瓜式安装。安装后点击图标运行即可。</p>
<p>可关掉开机自启。preference -&gt; general -&gt; start Docker Desktop when you log in</p>
</blockquote>
<p>启动终端后，通过命令可以检查安装后的 Docker 版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker --version</span><br><span class="line">Docker version 19.03.5, build 633a0ea</span><br><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.24.1, build 4667896b</span><br><span class="line">$ docker-machine --version</span><br><span class="line">docker-machine version 0.16.2, build bd45ab13</span><br></pre></td></tr></table></figure>
<h2 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h2><p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。国内很多云服务商都提供了国内加速器服务，例如：</p>
<ul>
<li><a href="https://github.com/Azure/container-service-for-azure-china/blob/master/aks/README.md#22-container-registry-proxy" target="_blank" rel="noopener">Azure 中国镜像 <code>https://dockerhub.azk8s.cn</code></a></li>
<li><a href="https://cr.console.aliyun.com/cn-hangzhou/mirrors" target="_blank" rel="noopener">阿里云加速器(需登录账号获取)</a></li>
<li><a href="https://kirk-enterprise.github.io/hub-docs/#/user-guide/mirror" target="_blank" rel="noopener">七牛云加速器 <code>https://reg-mirror.qiniu.com</code></a></li>
</ul>
<blockquote>
<p>由于镜像服务可能出现宕机，建议同时配置多个镜像。</p>
<p>国内各大云服务商均提供了 Docker 镜像加速服务，建议根据运行 Docker 的云平台选择对应的镜像加速服务，具体请参考官方文档。</p>
</blockquote>
<p>这里以 Azure 中国镜像 <code>https://dockerhub.azk8s.cn</code> 为例进行介绍。</p>
<h3 id="Ubuntu-16-04-、Debian-8-、CentOS-7"><a href="#Ubuntu-16-04-、Debian-8-、CentOS-7" class="headerlink" title="Ubuntu 16.04+、Debian 8+、CentOS 7"></a>Ubuntu 16.04+、Debian 8+、CentOS 7</h3><p> 对于使用 <a href="https://www.freedesktop.org/wiki/Software/systemd/" target="_blank" rel="noopener">systemd</a> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件） </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://dockerhub.azk8s.cn"</span>,</span><br><span class="line">    <span class="string">"https://reg-mirror.qiniu.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。 </p>
</blockquote>
<p> 之后重新启动服务。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 注意：如果您之前查看旧教程，修改了 <code>docker.service</code> 文件内容，请去掉您添加的内容（<code>--registry-mirror=https://dockerhub.azk8s.cn</code>）。 </p>
</blockquote>
<h3 id="macOS-1"><a href="#macOS-1" class="headerlink" title="macOS"></a>macOS</h3><p> 对于使用 macOS 的用户，在任务栏点击 Docker Desktop 应用图标 -&gt; <code>Perferences</code>，在左侧导航菜单选择 <code>Docker Engine</code>，在右侧像下边一样编辑 json 文件。修改完成之后，点击 <code>Apply &amp; Restart</code> 按钮，Docker 就会重启并应用配置的镜像地址了。 </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://dockerhub.azk8s.cn"</span>,</span><br><span class="line">    <span class="string">"https://reg-mirror.qiniu.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="检查加速器是否生效"><a href="#检查加速器是否生效" class="headerlink" title="检查加速器是否生效"></a>检查加速器是否生效</h3><p> 执行 <code>$ docker info</code>，如果从结果中看到了如下内容，说明配置成功。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Registry Mirrors:</span><br><span class="line"> https://dockerhub.azk8s.cn/</span><br></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>Docker 官网：<a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com</a></p>
<p>Github Docker 源码：<a href="https://github.com/docker/docker-ce" target="_blank" rel="noopener">https://github.com/docker/docker-ce</a></p>
<p>Docker命令大全：<a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-command-manual.html</a></p>
<p>本文章摘抄于：<a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/content/</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>了解JSON Web Token</title>
    <url>/2019/11/11/%E4%BA%86%E8%A7%A3JSON-Web-Token/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案。<a href="https://jwt.io" target="_blank" rel="noopener">JWT</a></p>
<a id="more"></a>
<h1 id="跨域认证问题"><a href="#跨域认证问题" class="headerlink" title="跨域认证问题"></a>跨域认证问题</h1><p>互联网服务离不开用户认证。一般流程是下面这样。</p>
<blockquote>
<p>1、用户向服务器发送用户名和密码。</p>
<p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p>
<p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p>
<p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p>
<p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p>
</blockquote>
<p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p>
<p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</p>
<p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</p>
<p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</p>
<h1 id="JWT原理"><a href="#JWT原理" class="headerlink" title="JWT原理"></a>JWT原理</h1><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"username"</span>: <span class="string">"张三"</span>,</span><br><span class="line">  <span class="attr">"role"</span>: <span class="string">"管理员"</span>,</span><br><span class="line">  <span class="attr">"exp"</span>: <span class="string">"2018年7月1日0点0分"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p>
<p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p>
<h1 id="JWT的数据结构"><a href="#JWT的数据结构" class="headerlink" title="JWT的数据结构"></a>JWT的数据结构</h1><p>实际的 JWT 大概就像下面这样。</p>
<p><img src="jsonwebtoken.png" alt></p>
<p>它是一个很长的字符串，中间用点（<code>.</code>）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p>
<p>JWT 的三个部分依次如下：</p>
<ul>
<li>Header（头部）</li>
<li>Payload（负载）</li>
<li>Signature（签名）</li>
</ul>
<p>写成一行，就是<code>Header.Payload.Signature</code>。</p>
<p><img src="jsonwebtoken1.jpg" alt></p>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>alg</code>属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；<code>typ</code>属性表示这个令牌（token）的类型（type），JWT 令牌统一写为<code>JWT</code>。</p>
<p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p>
<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p>
<ul>
<li>iss (issuer)：签发人</li>
<li>exp (expiration time)：过期时间</li>
<li>sub (subject)：主题</li>
<li>aud (audience)：受众</li>
<li>nbf (Not Before)：生效时间</li>
<li>iat (Issued At)：签发时间</li>
<li>jti (JWT ID)：编号</li>
</ul>
<p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="attr">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p>
<p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p>
<h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>Signature 部分是对前两部分的签名，防止数据篡改。</p>
<p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure>
<p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（<code>.</code>）分隔，就可以返回给用户。</p>
<h2 id="Base64URL"><a href="#Base64URL" class="headerlink" title="Base64URL"></a>Base64URL</h2><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p>
<p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符<code>+</code>、<code>/</code>和<code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code>被省略、<code>+</code>替换成<code>-</code>，<code>/</code>替换成<code>_</code> 。这就是 Base64URL 算法。</p>
<h1 id="JWT-的使用方式"><a href="#JWT-的使用方式" class="headerlink" title="JWT 的使用方式"></a>JWT 的使用方式</h1><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p>
<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Authorization</span>: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure>
<p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p>
<blockquote>
<p>在node中使用jwt：<a href="https://segmentfault.com/a/1190000009494020" target="_blank" rel="noopener">jsonwebtoken中文文档</a> ｜ <a href="https://www.npmjs.com/package/jsonwebtoken" target="_blank" rel="noopener">jsonwebtoken npm</a></p>
</blockquote>
<h1 id="JWT-的几个特点"><a href="#JWT-的几个特点" class="headerlink" title="JWT 的几个特点"></a>JWT 的几个特点</h1><p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p>
<p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p>
<p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p>
<p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p>
<p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p>
<p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p>
<h1 id="JWT优点"><a href="#JWT优点" class="headerlink" title="JWT优点"></a>JWT优点</h1><p>使用 JSON Web Token 保护应用安全，你至少可以获得以下几个优势：</p>
<p>更少的数据库连接：因其基于算法来实现身份认证，在使用 JWT 时查询数据的次数更少(更少的数据连接不等于不连接数据库)，可以获得更快的系统响应时间。构建更简单：如果你的应用程序本身是无状态的，那么选择 JWT 可以加快系统构建过程。</p>
<p>跨服务调用：你可以构建一个认证中心来处理用户身份认证和发放签名的工作，其他应用服务在后续的用户请求中不需要(理论上)在询问认证中心，可使用自有的公钥对用户签名进行验证。</p>
<p>无状态：你不需要向传统的 Web 应用那样将用户状态保存于 Session 中。</p>
<h1 id="JWT弊端"><a href="#JWT弊端" class="headerlink" title="JWT弊端"></a>JWT弊端</h1><p>JWT 不是万能的，使用 JWT 也会带来诸多问题。就个人使用情况，使用 JWT 时可能会面临以下几个麻烦：</p>
<ul>
<li>严重依赖于秘钥：JWT 的生成与解析过程都需要依赖于秘钥(Secret)，且都以硬编码的方式存在于系统中(也有放在外部配置文件中的)。如果秘钥不小心泄露，系统的安全性将收到威胁。</li>
<li>服务端无法管理客户端的信息：如果用户身份发生异常(信息泄露，或者被攻击)，服务端很难向操作 Session 那样主动将异常用户进行隔离。</li>
<li>服务端无法主动推送消息：服务端由于是无状态的，他将无法使用像 Session 那样的方式推送消息到客户端，例如过期时间将至，服务端无法主动为用户续约，需要客户端向服务端发起续约请求。</li>
<li>冗余的数据开销：一个 JWT 签名的大小要远比一个 Session ID 长很多，如果你对有效载荷(payload)中的数据不做有效控制，其长度会成几何倍数增长，且在每一次请求时都需要负担额外的网络开销。</li>
<li>JSON Web Token 很流行，但是它相比于 Session,OIDC(OpenId Connect)等技术还比较新，支持 JSON Web Token 的库还比较少，而且 JWT 也并非比传统 Session 更安全，他们都没有解决 CSRF 和 XSS 的问题。因此，在决定使用 JWT 前，你需要仔细考虑其利弊。</li>
</ul>
<h1 id="安全隐患思考"><a href="#安全隐患思考" class="headerlink" title="安全隐患思考"></a>安全隐患思考</h1><p><strong>考虑这样一个问题：如果客户端的 JWT 令牌泄露或者被盗取，会发生什么严重的后果？有什么补救措施？</strong></p>
<ul>
<li>如果单纯的依靠 JSON Web Token 解决用户认证的所有问题，那么系统的安全性将是脆弱的。由于 JWT 令牌存储于客户端中，一旦客户端存储的令牌发生泄露事件或者被攻击，攻击者就可以轻而易举的伪造用户身份去修改/删除系统资源，岁如按 JWT 自带过期时间，但在过期之前，攻击者可以肆无忌惮的操作系统数据。通过算法来校验用户身份合法性是 JWT 的优势，同时也是最大的弊端——它太过于依赖算法。</li>
<li>反观传统的用户认证措施，通常会包含多种组合，如手机验证码，人脸识别，语音识别，指纹锁等。用户名和密码只做用户身份识别使用，当用户名和密码泄露后，在遇到敏感操作时(如新增，修改，删除，下载，上传)，都会采用另外的方式对用户的合法性进行验证(发送验证码，邮箱验证码，指纹信息等)以确保数据安全。</li>
<li>与传统的身份验证方式相比，JWT 过多的依赖于算法，缺乏灵活性，而且服务端往往是被动执行用户身份验证操作，无法及时对异常用户进行隔离。那是否有补救措施呢？答案是肯定的。接下来，将介绍在发生令牌泄露事件后，如何保证系统的安全。</li>
</ul>
<h1 id="防范手段"><a href="#防范手段" class="headerlink" title="防范手段"></a>防范手段</h1><p>不管是基于 Sessions 还是基于 JSON Web Token，一旦密令被盗取，都是一件棘手的事情。接下来，将讲述基于 JSON Web Token 的方式发生令牌泄露是该采取什么样的措施(解决方案包含但不局限与本文所涉及的内容)。</p>
<p>为了防止用户 JWT 令牌泄露而威胁系统安全，你可以在以下几个方面完善系统功能：</p>
<ol>
<li>清除已泄露的令牌：此方案最直接，也容易实现，你需将 JWT 令牌在服务端也存储一份，若发现有异常的令牌存在，则从服务端令牌列表中将此异常令牌清除。当用户发起请求时，强制用户重新进行身份验证，直至验证成功。对于服务端的令牌存储，可以借助 Redis 等缓存服务器进行管理，也可以使用 Ehcache 将令牌信息存储在内存中。</li>
<li>敏感操作保护：在涉及到诸如新增，修改，删除，上传，下载等敏感性操作时，定期(30分钟，15分钟甚至更短)检查用户身份，如手机验证码，扫描二维码等手段，确认操作者是用户本人。如果身份验证不通过，则终止请求，并要求重新验证用户身份信息。</li>
<li>地域检查：通常用户会在一个相对固定的地理范围内访问应用程序，可以将地理位置信息作为一个辅助来甄别用户的 JWT 令牌是否存在问题。如果发现用户A由经常所在的地区 1 变到了相对较远的地区 2 ，或者频繁在多个地区间切换，不管用户有没有可能在短时间内在多个地域活动(一般不可能)，都应当终止当前请求，强制用户重新进行验证身份，颁发新的 JWT 令牌，并提醒(或要求)用户重置密码。</li>
<li>监控请求频率：如果 JWT 密令被盗取，攻击者或通过某些工具伪造用户身份，高频次的对系统发送请求，以套取用户数据。针对这种情况，可以监控用户在单位时间内的请求次数，当单位时间内的请求次数超出预定阈值值，则判定该用户密令是有问题的。例如 1 秒内连续超过 5 次请求，则视为用户身份非法，服务端终止请求并强制将该用户的 JWT 密令清除，然后回跳到认证中心对用户身份进行验证。</li>
<li>客户端环境检查：对于一些移动端应用来说，可以将用户信息与设备(手机,平板)的机器码进行绑定，并存储于服务端中，当客户端发起请求时，可以先校验客户端的机器码与服务端的是否匹配，如果不匹配，则视为非法请求，并终止用户的后续请求。</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://jwt.io/introduction/" target="_blank" rel="noopener">https://jwt.io/introduction/</a></p>
]]></content>
      <categories>
        <category>架构之路</category>
      </categories>
      <tags>
        <tag>Json Web Token</tag>
      </tags>
  </entry>
  <entry>
    <title>理解OAuth 2.0</title>
    <url>/2019/10/25/%E7%90%86%E8%A7%A3OAuth-2-0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近需要接入到第三方应用登陆接触到了这个<a href="http://en.wikipedia.org/wiki/OAuth" target="_blank" rel="noopener">OAuth</a>概念，它是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用（QQ，Github，微博等），目前的版本是2.0版。</p>
<p>所以记录下OAuth 2.0的设计思路和运行流程，做一个简明通俗的解释，主要参考材料为<a href="http://www.rfcreader.com/#rfc6749" target="_blank" rel="noopener">RFC 6749</a>。</p>
<a id="more"></a>
<h1 id="名词定义"><a href="#名词定义" class="headerlink" title="名词定义"></a>名词定义</h1><p>在详细讲解OAuth 2.0之前，需要了解几个专用名词。它们对读懂后面的讲解，尤其是几张图，至关重要。</p>
<ul>
<li><strong>Third-party application</strong>：第三方应用程序，本文中又称”客户端”（client），即上一节例子中的”云冲印”。</li>
<li><strong>HTTP service</strong>：HTTP服务提供商，本文中简称”服务提供商”。</li>
<li><strong>User Agent</strong>：用户代理，本文中就是指浏览器。</li>
<li><strong>Authorization server</strong>：认证服务器，即服务提供商专门用来处理认证的服务器。</li>
<li><strong>Resource server</strong>：资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。</li>
</ul>
<blockquote>
<p>OAuth的作用就是让”客户端”安全可控地获取”用户”的授权，与”服务商提供商”进行互动。</p>
</blockquote>
<h1 id="OAuth的思路"><a href="#OAuth的思路" class="headerlink" title="OAuth的思路"></a>OAuth的思路</h1><p>OAuth在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。</p>
<p>“客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p>
<h1 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h1><p>OAuth 2.0的运行流程如下图，摘自RFC 6749。</p>
<p><img src="1.png" alt></p>
<blockquote>
<p>（A）用户打开客户端以后，客户端要求用户给予授权。</p>
<p>（B）用户同意给予客户端授权。</p>
<p>（C）客户端使用上一步获得的授权，向认证服务器申请令牌。</p>
<p>（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。</p>
<p>（E）客户端使用令牌，向资源服务器申请获取资源。</p>
<p>（F）资源服务器确认令牌无误，同意向客户端开放资源。</p>
</blockquote>
<p>上面六个步骤之中，B是关键，即用户怎样才能给于客户端授权。有了这个授权以后，客户端就可以获取令牌，进而凭令牌获取资源。</p>
<p>下面讲解客户端获取授权的四种模式。</p>
<h1 id="客户端的授权模式"><a href="#客户端的授权模式" class="headerlink" title="客户端的授权模式"></a>客户端的授权模式</h1><p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。</p>
<ul>
<li>授权码模式（authorization code）</li>
<li>简化模式（implicit）</li>
<li>密码模式（resource owner password credentials）</li>
<li>客户端模式（client credentials）</li>
</ul>
<h2 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h2><p>授权码模式（authorization code）是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与”服务提供商”的认证服务器进行互动。</p>
<p><img src="authorizationcode.png" alt></p>
<p>它的步骤如下：</p>
<blockquote>
<p>（A）用户访问客户端，后者将前者导向认证服务器。</p>
<p>（B）用户选择是否给予客户端授权。</p>
<p>（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的”重定向URI”（redirection URI），同时附上一个授权码。</p>
<p>（D）客户端收到授权码，附上早先的”重定向URI”，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。</p>
<p>（E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。</p>
</blockquote>
<p>下面是上面这些步骤所需要的参数。</p>
<p>A步骤中，客户端申请认证的URI，包含以下参数：</p>
<ul>
<li>response_type：表示授权类型，必选项，此处的值固定为”code”</li>
<li>client_id：表示客户端的ID，必选项</li>
<li>redirect_uri：表示重定向URI，可选项</li>
<li>scope：表示申请的权限范围，可选项</li>
<li>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;state=xyz</span><br><span class="line">        &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: server.example.com</span><br></pre></td></tr></table></figure>
<p>C步骤中，服务器回应客户端的URI，包含以下参数：</p>
<ul>
<li>code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。</li>
<li>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">Location</span>: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA</span><br><span class="line">          &amp;state=xyz</span><br></pre></td></tr></table></figure>
<p>D步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：</p>
<ul>
<li>grant_type：表示使用的授权模式，必选项，此处的值固定为”authorization_code”。</li>
<li>code：表示上一步获得的授权码，必选项。</li>
<li>redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。</li>
<li>client_id：表示客户端ID，必选项。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/token</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: server.example.com</span><br><span class="line"><span class="attribute">Authorization</span>: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code&amp;code=SplxlOBeZQQYbYS6WxSbIA</span><br><span class="line">&amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb</span><br></pre></td></tr></table></figure>
<p>E步骤中，认证服务器发送的HTTP回复，包含以下参数：</p>
<ul>
<li>access_token：表示访问令牌，必选项。</li>
<li>token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。</li>
<li>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。</li>
<li>refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。</li>
<li>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json;charset=UTF-8</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-store</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">		"access_token":"2YotnFZFEjr1zCsicMWpAA",</span><br><span class="line">		"token_type":"example",</span><br><span class="line">		"expires_in":3600,</span><br><span class="line">		"refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",</span><br><span class="line">		"example_parameter":"example_value"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面代码可以看到，相关参数使用JSON格式发送（Content-Type: application/json）。此外，HTTP头信息中明确指定不得缓存。</p>
<h2 id="简化模式"><a href="#简化模式" class="headerlink" title="简化模式"></a>简化模式</h2><p>简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了”授权码”这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</p>
<p><img src="implicitgranttype.png" alt></p>
<p>它的步骤如下：</p>
<blockquote>
<p>（A）客户端将用户导向认证服务器。</p>
<p>（B）用户决定是否给于客户端授权。</p>
<p>（C）假设用户给予授权，认证服务器将用户导向客户端指定的”重定向URI”，并在URI的Hash部分包含了访问令牌。</p>
<p>（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。</p>
<p>（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。</p>
<p>（F）浏览器执行上一步获得的脚本，提取出令牌。</p>
<p>（G）浏览器将令牌发给客户端。</p>
</blockquote>
<p>下面是上面这些步骤所需要的参数。</p>
<p>A步骤中，客户端发出的HTTP请求，包含以下参数：</p>
<ul>
<li>response_type：表示授权类型，此处的值固定为”token”，必选项。</li>
<li>client_id：表示客户端的ID，必选项。</li>
<li>redirect_uri：表示重定向的URI，可选项。</li>
<li>scope：表示权限范围，可选项。</li>
<li>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /authorize?response_type=token&amp;client_id=s6BhdRkqt3&amp;state=xyz</span><br><span class="line">        &amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: server.example.com</span><br></pre></td></tr></table></figure>
<p>C步骤中，认证服务器回应客户端的URI，包含以下参数：</p>
<ul>
<li>access_token：表示访问令牌，必选项。</li>
<li>token_type：表示令牌类型，该值大小写不敏感，必选项。</li>
<li>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。</li>
<li>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。</li>
<li>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">Location</span>: http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA</span><br><span class="line">               &amp;state=xyz&amp;token_type=example&amp;expires_in=3600</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，认证服务器用HTTP头信息的Location栏，指定浏览器重定向的网址。注意，在这个网址的Hash部分包含了令牌。</p>
<p>根据上面的D步骤，下一步浏览器会访问Location指定的网址，但是Hash部分不会发送。接下来的E步骤，服务提供商的资源服务器发送过来的代码，会提取出Hash中的令牌。</p>
<h2 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h2><p>密码模式（Resource Owner Password Credentials Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向”服务商提供商”索要授权。</p>
<p>在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。</p>
<p><img src="ResourceOwnerPasswordCredentialsGrant.png" alt></p>
<p>它的步骤如下：</p>
<blockquote>
<p>（A）用户向客户端提供用户名和密码。</p>
<p>（B）客户端将用户名和密码发给认证服务器，向后者请求令牌。</p>
<p>（C）认证服务器确认无误后，向客户端提供访问令牌。</p>
</blockquote>
<p>B步骤中，客户端发出的HTTP请求，包含以下参数：</p>
<ul>
<li>grant_type：表示授权类型，此处的值固定为”password”，必选项。</li>
<li>username：表示用户名，必选项。</li>
<li>password：表示用户的密码，必选项。</li>
<li>scope：表示权限范围，可选项。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/token</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: server.example.com</span><br><span class="line"><span class="attribute">Authorization</span>: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=password&amp;username=johndoe&amp;password=A3ddj3w</span><br></pre></td></tr></table></figure>
<p>C步骤中，认证服务器向客户端发送访问令牌，下面是一个例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json;charset=UTF-8</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-store</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   "access_token":"2YotnFZFEjr1zCsicMWpAA",</span><br><span class="line">   "token_type":"example",</span><br><span class="line">   "expires_in":3600,</span><br><span class="line">   "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",</span><br><span class="line">   "example_parameter":"example_value"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，各个参数的含义参见《授权码模式》一节。</p>
<p>整个过程中，客户端不得保存用户的密码。</p>
<blockquote>
<p>个人觉得这种模式对于用户来说，用户需要对你的系统需要有极大的信任度才会这样做，所以很少会有这种模式的授权方式。</p>
</blockquote>
<h2 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h2><p>客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向”服务提供商”进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求”服务提供商”提供服务，其实不存在授权问题。</p>
<p><img src="ClientCredentialsGrant.png" alt></p>
<p>它的步骤如下：</p>
<blockquote>
<p>（A）客户端向认证服务器进行身份认证，并要求一个访问令牌。</p>
<p>（B）认证服务器确认无误后，向客户端提供访问令牌。</p>
</blockquote>
<p>A步骤中，客户端发出的HTTP请求，包含以下参数：</p>
<ul>
<li>grant<em>type：表示授权类型，此处的值固定为”client</em>credentials”，必选项。</li>
<li>scope：表示权限范围，可选项。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/token</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: server.example.com</span><br><span class="line"><span class="attribute">Authorization</span>: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=client_credentials</span><br></pre></td></tr></table></figure>
<p>认证服务器必须以某种方式，验证客户端身份。</p>
<p>B步骤中，认证服务器向客户端发送访问令牌，下面是一个例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json;charset=UTF-8</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-store</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   "access_token":"2YotnFZFEjr1zCsicMWpAA",</span><br><span class="line">   "token_type":"example",</span><br><span class="line">   "expires_in":3600,</span><br><span class="line">   "example_parameter":"example_value"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中，各个参数的含义参见《授权码模式》一节。</p>
<h1 id="更新令牌"><a href="#更新令牌" class="headerlink" title="更新令牌"></a>更新令牌</h1><p>如果用户访问的时候，客户端的”访问令牌”已经过期，则需要使用”更新令牌”申请一个新的访问令牌。</p>
<p>客户端发出更新令牌的HTTP请求，包含以下参数：</p>
<ul>
<li>grant<em>type：表示使用的授权模式，此处的值固定为”refresh</em>token”，必选项。</li>
<li>refresh_token：表示早前收到的更新令牌，必选项。</li>
<li>scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/token</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: server.example.com</span><br><span class="line"><span class="attribute">Authorization</span>: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=refresh_token&amp;refresh_token=tGzv3JOkF0XG5Qx2TlKWIA</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a></p>
<p><a href="https://www.bilibili.com/video/av35979732?from=search&amp;seid=13491637330338351260" target="_blank" rel="noopener">https://www.bilibili.com/video/av35979732?from=search&amp;seid=13491637330338351260</a></p>
]]></content>
      <categories>
        <category>架构之路</category>
      </categories>
      <tags>
        <tag>OAuth 2.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle构建脚本</title>
    <url>/2019/10/17/Gradle%E6%9E%84%E5%BB%BA%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Gradle提供了一种领域特定语言，目前同时支持 Groovy 和 Kotlin 。在 Groovy 构建脚本中（.gradle) 你可以使用任何 Groovy 元素。</p>
<p>在 Kotlin 构建脚本中 (.gradle.kts) 你可以使用任何 Kotlin 元素。</p>
<a id="more"></a>
<h1 id="项目（Project）和任务（Task）"><a href="#项目（Project）和任务（Task）" class="headerlink" title="项目（Project）和任务（Task）"></a>项目（Project）和任务（Task）</h1><p>Gradle 构建的一切都是基于两个概念 ：项目和任务；</p>
<p>一个构建是由一个或多个项目组成的。</p>
<p>项目的概念比较抽象，你可以创建一个 Project 用于生成一个 jar,也可以定义个项目用于生成 war 包，还可以定义一个项目用于发布上传你的 war等。</p>
<p>一个项目就是在你的业务范围内，被你抽象出来的一个独立的模块，你可以根据工程的实际情况抽象归类，最后这一个个的项目组成了整个 Gradle 构建。</p>
<p>一个项目又包含很多个任务，每个项目是由一个或多个任务组成的。</p>
<p>任务就是一个操作，一个原子性的操作。比如打个 jar 包，复制一份文件，编译一次 java 代码等，这就是一个任务。</p>
<h1 id="build-gradle-amp-Project-API"><a href="#build-gradle-amp-Project-API" class="headerlink" title="build.gradle &amp; Project API"></a>build.gradle &amp; Project API</h1><p>每个项目都有一个 build.gradle 文件，该文件是该项目的构建入口，可以在这这个文件里对该项目进行配置，比如配置版本，需要哪些插件，依赖哪些库等。</p>
<p>我们通过配置这个文件描述我们的构建，这其实就是一个配置脚本。</p>
<p>每一个脚本在执行的时候都会被关联到一个 Project 实例上。</p>
<p>在构建生命周期的初始化阶段，Gradle 会为每个项目创建一个 Project 实例，并根据 build.gradle的内容配置这个实例。</p>
<p>也就是说每个 build.gradle 的配置都会被配置到 Project 实例上。</p>
<p>实际上，build.gradle 中几乎所有的顶级属性和代码块都是 Project 类的 API，</p>
<p>下面通过访问 Project.name 属性验证一下。</p>
<p>在 <code>build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">println <span class="string">"name is $name"</span></span><br><span class="line">println <span class="string">"project.name is $&#123;project.name&#125;"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行 build 任务，你将会得到下面的输出,输出的值都是 项目的名字</p>
</blockquote>
<p>第一条语句使用的是Project的顶级属性。</p>
<p>第二条语句使用的 project 属性 可以在脚本的任何地方访问，它代表的是当前脚本的Project对象。</p>
<p>只有在你定义了和Project的成员（方法，属性）同名的时候才需要使用 project ，其他时候直接使用 名称即可访问，例如第一条语句。</p>
<p><strong>一个构建是由多个Project组成的，是通过项目树的形式表示的。</strong></p>
<p>可以在项目树的根项目对所有的项目统一配置一些配置。例如，应用的插件，依赖的 Maven 中心库等。</p>
<p>为所有子项目配置仓库为 jcenter</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">subprojects&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以为所有子项目配置 使用 Java 插件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">subprojects&#123;</span><br><span class="line">    apply <span class="string">plugin:</span><span class="string">'java'</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了 subprojects 还有 allprojects ,从名字就可以看出来这不仅是对子项目的配置而是对所有项目的配置。</p>
<p>这两个配置其实是两个方法，接受一个闭包参数，对项目进行遍历，遍历的过程中调用我们自定义的闭包，所以我们可以在闭包里配置，打印，输出或者修改 Project 的属性。</p>
<h1 id="Project的属性"><a href="#Project的属性" class="headerlink" title="Project的属性"></a>Project的属性</h1><p>Project 对象的属性在 脚本全局都是可以使用的。</p>
<p>下面列出一些常用的属性，更全的属性可以在 Project API 中查询。</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>project</td>
<td>Project</td>
<td>Project 实例</td>
</tr>
<tr>
<td>name</td>
<td>String</td>
<td>项目名字</td>
</tr>
<tr>
<td>path</td>
<td>String</td>
<td>项目的绝对路径</td>
</tr>
<tr>
<td>description</td>
<td>String</td>
<td>项目描述</td>
</tr>
<tr>
<td>projectDir</td>
<td>File</td>
<td>配置脚本所在的目录</td>
</tr>
<tr>
<td>buildDir</td>
<td>File</td>
<td>projectDir/build 输出目录</td>
</tr>
<tr>
<td>group</td>
<td>Object</td>
<td>未指定</td>
</tr>
<tr>
<td>version</td>
<td>Object</td>
<td>未指定</td>
</tr>
<tr>
<td>ant</td>
<td>AntBuilder</td>
<td>AntBuilder 实例</td>
</tr>
</tbody>
</table>
<h1 id="settings-gradle"><a href="#settings-gradle" class="headerlink" title="settings.gradle"></a>settings.gradle</h1><p>这个文件是由 Gradle 约定命名的，默认名为 settings.gradle ，在初始化阶段被执行。</p>
<p>对于多项目构建，必须在这里声明要参与构建的所有项目。对于单项目构建就是可选的了，可有可无。</p>
<p>Gradle 是如何寻找 settings.gradle 的？</p>
<p>1.在当前目录寻找2.没有找到的话就去父目录寻找3.仍然没有找到就是是单项目构建了4.如果找到了就是确定其中的项目，如果当前执行的项目在 settings.gradle 有定义就执行多项目构建，否则就执行单项目构建。</p>
<p>一个脚本的属性访问和方法调用是委托给 Project 类的实例的，</p>
<p>类似的 settings.gradle 的属性访问和方法调用是委托给 Settings 类的实例对象的。</p>
<h1 id="script-API"><a href="#script-API" class="headerlink" title="script API"></a>script API</h1><p>当 Gradle 执行 Groovy 脚本(.gradle)时，会编译脚本到实现了 <code>Script</code> 的类中。也就是说，Script 接口中的所有属性和方法都可以在脚本中使用。</p>
<p>当 Gradle 执行 Kotlin 脚本(.gradle.kts)时,会编译脚本到 <code>KotlinBuildScript</code>的子类中。</p>
<p>也就是说 KotlinBuildScript 类中的所有属性和方法都可以在脚本中使用。</p>
<p>更详细的可以参考 KotlinSettingsScript 和 KotlinInitScript 类，分别用于设置脚本和init脚本。</p>
<p>写的确实是脚本，但不是简单的脚本。在脚本里可以定义 Class ，内部类，导入包，定义方法、常量、接口等。</p>
<p>不要把它当作简单的脚本，我们可以灵活的使用 Java ，Groovy ，Kotlin 和 Gradle.</p>
<p>例如 定义一个获取当前日期的方法</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> buildTime()&#123;</span><br><span class="line">     <span class="keyword">def</span> date = <span class="keyword">new</span> Date()</span><br><span class="line">     <span class="keyword">def</span> formattedDate = date.format(<span class="string">'yyyyMMdd'</span>)</span><br><span class="line">     <span class="keyword">return</span> formattedDate</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="变量-amp-额外的自定义属性"><a href="#变量-amp-额外的自定义属性" class="headerlink" title="变量 &amp; 额外的自定义属性"></a>变量 &amp; 额外的自定义属性</h1><p>Gradle 支持两种变量 ：</p>
<ul>
<li>局部变量</li>
<li>自定义属性</li>
</ul>
<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>局部变量使用 def 关键字声明，局部变量只能在声明的范围内可见。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> myName = <span class="string">'local var'</span></span><br></pre></td></tr></table></figure>
<h1 id="额外的自定义属性"><a href="#额外的自定义属性" class="headerlink" title="额外的自定义属性"></a>额外的自定义属性</h1><p>Gradle 领域模型中 所有的对象 都可以添加额外的自定义属性。</p>
<p>通过对象的 ext 属性实现对自定义属性的添加，访问，设置值的操作。</p>
<p>添加之后可以通过 ext 属性对自定义属性读取和设置，也可以同时添加多个自定义属性。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为 project 添加一个 age 属性 并赋值 20</span></span><br><span class="line"> ext.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//为 project 添加两个属性</span></span><br><span class="line"> ext&#123;</span><br><span class="line">     phone =<span class="number">110</span></span><br><span class="line">     address = <span class="string">'404'</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> task myTask &#123;</span><br><span class="line">     <span class="comment">//为 myTask 任务添加属性</span></span><br><span class="line">     ext.myProperty = <span class="string">"myValue"</span></span><br><span class="line"> &#125;</span><br><span class="line"> task extra&#123;</span><br><span class="line">      doLast&#123;</span><br><span class="line">          println <span class="string">"project : age= $&#123;project.ext.age&#125;,phone= $&#123;project.ext.phone&#125; , address = $&#123;project.ext.address&#125;"</span></span><br><span class="line">          println <span class="string">"myTask :  $&#123;myTask.myProperty&#125;"</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="创建一个任务"><a href="#创建一个任务" class="headerlink" title="创建一个任务"></a>创建一个任务</h1><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">     doLast &#123;</span><br><span class="line">         println <span class="string">'Hello world!'</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>这里的 task 看着像一个关键字，实际上是一个方法，这个方法的原型是 TaskContainer.create(）</p>
<p>任务的创建就是使用这个方法给 Project 添加一个 Task 类型的属性；</p>
<p>所以才能使用任务名字引用一些API，例如为任务添加额外的属性。</p>
<h1 id="任务依赖和任务排序"><a href="#任务依赖和任务排序" class="headerlink" title="任务依赖和任务排序"></a>任务依赖和任务排序</h1><p>一个任务可以依赖其他任务或者在其他任务执行后再执行。</p>
<p>Gradle 确保在执行任务时遵守所有任务依赖性和排序规则，以便在所有依赖项和任何 “必须运行” 的任务执行之后再执行任务。</p>
<p>Gradle 为我们提供了几个方法用来控制任务的依赖和排序，就是下面这几个</p>
<ul>
<li>Task.dependsOn(java.lang.Object[])</li>
<li>Task.setDependsOn(java.lang.Iterable)</li>
<li>Task.mustRunAfter(java.lang.Object[])</li>
<li>Task.setMustRunAfter(java.lang.Iterable)</li>
<li>Task.shouldRunAfter(java.lang.Object[])</li>
<li>Task.setShouldRunAfter(java.lang.Iterable)</li>
</ul>
<p>这些方法可以接收 任务，任务名字，路径等，具体参数可以在 <a href="https://docs.gradle.org/current/userguide/more_about_tasks.html" target="_blank" rel="noopener">Task文档</a> 里查看</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task hello &#123;</span><br><span class="line">     doLast &#123;</span><br><span class="line">         println <span class="string">'Hello world!'</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> task taskX &#123;</span><br><span class="line">     dependsOn hello</span><br><span class="line">     doLast&#123;</span><br><span class="line">         println <span class="string">"I'm  $name."</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> task taskY &#123;</span><br><span class="line">     doFirst &#123;</span><br><span class="line">         println <span class="string">"I'm $name."</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>如果 taskX 要依赖 taskY 的话，并不能直接引用，因为 taskY 是在 taskX 之后定义的。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task taskX &#123;</span><br><span class="line">     dependsOn <span class="string">'taskY'</span></span><br><span class="line">     doLast&#123;</span><br><span class="line">         println <span class="string">"I'm  $name."</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="默认任务"><a href="#默认任务" class="headerlink" title="默认任务"></a>默认任务</h1><p>在没有指定执行任务的时候，可以在脚本中定义默认任务，使用 defaultTasks 方法</p>
<p>这个方法接收 字符串参数，传入任务的名称即可</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">defaultTasks <span class="string">'hello'</span>,<span class="string">'taskY'</span></span><br></pre></td></tr></table></figure>
<h1 id="外部依赖"><a href="#外部依赖" class="headerlink" title="外部依赖"></a>外部依赖</h1><p>用添加外部依赖，必须添加依赖所在仓库。例如 jcenter,maven，google等</p>
<p>添加 google 仓库</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Android 的项目中，这都是放在根项目里的 allprojects 方法里，对所有项目统一配置</p>
<p>添加外部依赖</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'io.reactivex.rxjava2:rxjava:2.1.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Android 中依赖的添加放在了各个module 中，按需添加，哪个模块需要在哪个模块的构建脚本里添加。</p>
<p>依赖属性分为三部分</p>
<ul>
<li>group：这个属性用来标识一个组织、公司或者项目，可以用点号分隔，例如上面的 io.reactivex.rxjava2</li>
<li>name：name属性唯一的描述了这个依赖，例如上面的 rxjava</li>
<li>version：一个库可以有很多个版本。例如上面的 2.1.2</li>
</ul>
<p>其中 implementation 为配置项，配置也有很多种类型，</p>
<table>
<thead>
<tr>
<th>新配置(3.0后)</th>
<th>弃用配置(3.0前)</th>
<th>说明</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>implementation</code></td>
<td><code>compile</code></td>
<td>依赖项在编译时对模块可用，并且仅在运行时对模块的消费者可用。 对于大型多项目构建，使用<code>implementation</code>而不是<code>api/compile</code>可以显著缩短构建时间，因为它可以减少构建系统需要重新编译的项目量。 大多数应用和测试模块都应使用此配置。</td>
<td>使用<code>implementation</code>方式来依赖项目或库，该库在编译时，只对当前的module可见，对其他的module不可见。</td>
</tr>
<tr>
<td><code>api</code></td>
<td><code>compile</code></td>
<td>依赖项在编译时对模块可用，并且在编译时和运行时还对模块的消费者可用。 此配置的行为类似于<code>compile</code>（现在已弃用），一般情况下，您应当仅在库模块中使用它。 应用模块应使用<code>implementation</code>，除非您想要将其 API 公开给单独的测试模块。</td>
<td>使用<code>api</code>方式来依赖项目或库，该库在编译和运行时都可以对其他module可见。</td>
</tr>
<tr>
<td><code>compileOnly</code></td>
<td><code>provided</code></td>
<td>依赖项仅在编译时对模块可用，并且在编译或运行时对其消费者不可用。 此配置的行为类似于<code>provided</code>（现在已弃用）。</td>
<td>使用<code>compileOnly</code>方式来依赖项目或库，该库仅在编译时有效可用。</td>
</tr>
<tr>
<td><code>runtimeOnly</code></td>
<td><code>apk</code></td>
<td>依赖项仅在运行时对模块及其消费者可用。 此配置的行为类似于<code>apk</code>（现在已弃用）。</td>
<td>使用<code>runtimeOnly</code>方式来依赖项目或库，该库仅在运行时有效可用。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>最后留个 DSL 的查询地址：<a href="https://docs.gradle.org/current/dsl/index.html" target="_blank" rel="noopener">https://docs.gradle.org/current/dsl/index.html</a></p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/skymxc/p/buildscript.html" target="_blank" rel="noopener">https://www.cnblogs.com/skymxc/p/buildscript.html</a></p>
<p><a href="https://www.jianshu.com/p/d183c3b554e5" target="_blank" rel="noopener">https://www.jianshu.com/p/d183c3b554e5</a></p>
<p><a href="https://docs.gradle.org/" target="_blank" rel="noopener">https://docs.gradle.org/</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>图解TCP/IP协议</title>
    <url>/2019/10/16/%E5%9B%BE%E8%A7%A3TCP-IP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="TCP-IP-协议族"><a href="#TCP-IP-协议族" class="headerlink" title="TCP/IP 协议族"></a>TCP/IP 协议族</h1><p>Internet 的核心协议就是 TCP/IP，广泛应用于局域网和广域网，目前已有20+年发展史，是现用国际通行标准。TCP/IP 是个协议族，包含有多种协议，网络模型及分层如图所示</p>
<a id="more"></a>
<p><img src="1.jpg" alt></p>
<h1 id="TCP-IP-五层网络模型"><a href="#TCP-IP-五层网络模型" class="headerlink" title="TCP/IP 五层网络模型"></a>TCP/IP 五层网络模型</h1><p><strong>应用层：</strong>应用程序通过TCP/IP互联网络后发送、接受数据。选择所需服务类型，按照传输层要求组织数据，向下传递报文序列或字节流2种类型。</p>
<p><strong>传输层：</strong>提供应用层间通信服务，又称端到端通信。提供可靠的数据传输服务，确保数据准确、有序送达目的地。数据发送后需对方回送确认信息，有丢失的数据需发送方重发分组。传输的对象是传输层分组。</p>
<p><strong>网络层：</strong>又称<strong>IP层</strong>，负责机器间通信，接收到传输层请求后，向目的地传送信息分组。此分组会被封装进IP数据报中，由路由选择算法决定直送目的地或发给路由，然后将数据向下传递给网络接口层。接收到数据报时，检验正确性，由路由选择算法决定本地处理或转发，若目的地属于本机所在网络，就把数据报的报头剥去，选择适当的传输层协议向上传递分组。</p>
<p><strong>连接层：</strong>又称<strong>数据链路层</strong>，处于TCP/IP协议层之下，负责接收IP数据报并将数据报通过选定网络发送出去</p>
<p><strong>硬件层：</strong>处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等 物理可见部分（还包括连接器等一切传输媒介）</p>
<h1 id="TCP-IP-内含协议职责"><a href="#TCP-IP-内含协议职责" class="headerlink" title="TCP/IP 内含协议职责"></a>TCP/IP 内含协议职责</h1><p><img src="2.jpg" alt></p>
<h1 id="TCP-IP-协议传输数据流程"><a href="#TCP-IP-协议传输数据流程" class="headerlink" title="TCP/IP 协议传输数据流程"></a>TCP/IP 协议传输数据流程</h1><p>传输控制协议（Transmission Control Protocol,TCP）是 Internet 传输层协议，提供面向连接的可靠传输服务，可靠性由重发技术保证。TCP 报文首部的大小一定是4字节的倍数，其中固定首部大小为20字节且不变</p>
<p><img src="3.jpg" alt></p>
<p>TCP 数据包示意图</p>
<p>ACK：确认位，当它的值为1时，确认号才是有效的<br>SYN：同步请求，TCP连接中连接双方协商初始的序号<br>RST：复位，TCP连接中数据传输发生异常需要重新发送<br>FIN ：通信结束后，当它的值为1时拆除连接</p>
<p><strong>TCP 三次握手建立连接</strong></p>
<p>第一次握手：建立连接时，客户端发送SYN包（syn=i）到服务器，并进入SYN_SEND状态，等待服务器确认。SYN表示同步序列编码（Synchronize Sequence Numbers）</p>
<p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=i+1），同时自己也发送一个SYN包（seq=j），即SYN+ACK包，此时服务器进入SYN_RECV状态</p>
<p>第三次握手：客户端收到服务器的SYN+ACK的包后，向服务器发送确认包ACK(j+1)，此包发送完毕，客户端与服务器进入ESTABLISHED状态，完成三次握手</p>
<p><img src="4.jpg" alt></p>
<p><strong>TCP 正常数据传输过程</strong></p>
<p>本图表示传输2个数据报的过程。主机A向B发送第一个 N 字节的数据包，SEQ为 i ，主机B收到后需要立即向主机A发送确认ACK包，ACK = i + N +1 ，这样主机A才可确认数据传输成功。第二个数据包传输时，SEQ数值 = R，主机B收到后立即回传ACK，此时ACK = R + N + 1，之后数据包传输的过程持续此流程，需要注意的是发送方只有收到目标方的确认包后才会清除缓冲区中的数据</p>
<p>ACK确认位 = SEQ数据编号 + 传递的字节数N + 1。第一个字节的SEQ编号由本地随机产生，SEQ+N的作用是为了让主机A确认发送给主机B的数据是否全部接收 / 是否出现丢失</p>
<p><img src="5.jpg" alt></p>
<p><strong>TCP 数据重传与快重传</strong></p>
<ul>
<li><strong>数据重传</strong>：主机A向主机B传送数据，但中间发生错误，主机B未能收到。经过一段时间后，主机A未收到主机B的ACK确认包，故主机A再次重传此数据包。主机A每次发送数据时都会启动一个定时器，规定时间没收到响应包则启动重传</li>
<li><strong>快重传</strong>：重传发生在超时之后，但当主机A收到3个以上重复的ACK，其实就说明有数据丢失，也需要重传，此时重传定时器还没有结束，所以叫快速重传</li>
</ul>
<p><img src="6.jpg" alt></p>
<p><strong>TCP 四次挥手结束连接</strong></p>
<p>第一次挥手：客户端发送一个FIN，用来关闭客户端到服务器的数据传送，客户端进入FIN_WAIT_1状态</p>
<p>第二次挥手：服务端收到FIN后，发送一个ACK给客户端，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），服务端进入CLOSE_WAIT状态</p>
<p>第三次挥手：服务端发送一个FIN，用来关闭服务端到客户端的数据传送，服务端进入LAST_ACK状态</p>
<p>第四次挥手：客户端收到FIN后，客户端进入TIME_WAIT状态，接着发送一个ACK给服务端，确认序号为收到序号+1，服务端进入CLOSED状态，完成四次挥手</p>
<p><img src="7.jpg" alt></p>
<h1 id="IP-协议数据传输流程"><a href="#IP-协议数据传输流程" class="headerlink" title="IP 协议数据传输流程"></a>IP 协议数据传输流程</h1><p>网络协议（Internet Protocol,IP）通常被认为提供的是无连接和不可靠的，但实际上，在网络性能良好的情况下，IP传送的数据能够完好无损的到达目的地</p>
<p>无连接是指没有确定目标系统是否已做好接收数据的准备之前就发送数据。不可靠是指目的系统不对成功完成接收到的分组进行确认</p>
<p><img src="8.jpg" alt></p>
<p><strong>IP 发送数据</strong></p>
<p>发送数据时，源计算机上的IP协议需要确定目的地是否在同一网络，若目的地在同一网络，使用直达通信，若不在同一网络，则需要通过网关或路由器完成通信：</p>
<p>主机A组装目的IP地址为主机B的数据报，之后进行路由选择，再将次数据报发送至默认路由器（由APR地址解析确定路由器，得到下一默认路由器IP地址与MAC地址的映射关系，然后以该MAC地址为帧的目的地址形成一个帧，并将IP数据报封装在帧的数据区，最后由具体的物理网络（以太网）完成数据报的真正传输）</p>
<p><strong>IP 转发数据</strong></p>
<p>路由器接收到主机A的数据帧后，去掉帧头并对其进行处理，发现此数据报的目的地非本地，需要将其转发，由路由选择算法及本地路由表确定下一跳路由器地址，通过ARP地址解析确定下一跳路由的IP地址与MAC地址的映射关系后，将该MAC地址作为数据帧的目的地将数据报封装为数据帧，通过以太网完成数据转发。重复此步骤直到第N个路由器与目的地直连，通过ARP地址解析确定目的主机的IP地址与MAC地址的映射关系，利用该MAC地址作为帧的目的地址，将IP数据报封装成帧，并由以太网实现数据的真正传递</p>
<p><strong>IP 接收数据</strong></p>
<p>主机B接收到数据帧后，解封该帧并对其进行处理，确定本机即为目的地址后，将数据报中封装的数据交由上层协议进行处理，随即逐层处理并上交直到应用层，完成此次通信</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>TCP/IP 五大重要特性</strong></p>
<p><strong>逻辑编址</strong>：通过IP地址+主机ID，确保计算机可寻</p>
<p><strong>路由选择</strong>：通过网络路径选择协议，确保数据包到达目的地</p>
<p><strong>域名解析</strong>：将域名映射为IP地址，使用域名一是便于记忆，二是域名相对固定不变</p>
<p><strong>错误检测</strong>：确保分组交换的可靠性传递，确认数据正常接收</p>
<p><strong>流量控制</strong>：监测网络流量，防止网络拥塞出现</p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程之瀑布模型</title>
    <url>/2019/10/03/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B9%8B%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>软件工程（software engineering）的本质：用工程化的方法去规范软件开发，让项目可以按时完成、成本可控、质量有保障。</p>
<p>而瀑布模型则算是现代工程软件的起源，软件工程的发展，很多都是构建于瀑布模型基础之上的。</p>
<a id="more"></a>
<h1 id="瀑布模型的诞生"><a href="#瀑布模型的诞生" class="headerlink" title="瀑布模型的诞生"></a>瀑布模型的诞生</h1><p>为了解决软件危机中的这些问题，在 1970 年，Winston Royce 博士借鉴了其他工程领域的思想，比如建筑工程，提出了瀑布开发模型，指出软件开发应有完整之周期，并将软件开发过程分成了若干阶段。像瀑布一样，从上往下，完成一个阶段继续下一个阶段。</p>
<p><img src="pubumoxing.jpeg" alt></p>
<p>瀑布模型把整个项目过程分成了六个主要阶段：</p>
<ul>
<li><p>一、问题的定义及规划</p>
<p>这个阶段是需求方和开发方共同确定软件开发目标，同时还要做可行性研究，以确定项目可行。这个阶段会产生需求文档和可行性研究报告。</p>
</li>
<li><p>二、需求分析</p>
<p>对需求方提出的所有需求，进行详细的分析。这个阶段需要和客户反复确认，以保证能充分理解客户需求。最终形成需求分析文档。</p>
</li>
<li><p>三、软件设计</p>
<p>根据需求分析的结果，对整个软件系统进行抽象和设计，如系统框架设计，数据库设计等等。最终行程架构设计文档。</p>
</li>
<li><p>四、程序编码</p>
<p>将架构设计和界面设计的结果转换成计算机能运行的程序代码。</p>
</li>
<li><p>五、软件测试</p>
<p>在编码完成后，对可运行的结果对照需求分析文档进行严密的测试。如果测试发现问题，需要进行修复。最终测试完成后，形成测试报告。</p>
</li>
<li><p>六、运行维护</p>
<p>在软件开发完成，正式运行上线后，需要继续维护，修复错误和增加功能，交付时要提供说明文档。</p>
</li>
</ul>
<blockquote>
<p>瀑布模型在提出后，因为其简单可行，切实有效，马上就在很多软件项目中应用起来，一直到 2000 年前后，都是最主流的软件开发模型，即使到现在，你也能在很多软件项目中看到它的影子。</p>
<p><strong>也是从那时开始，有了“软件生命周期”(Software Life Cycle,SLC) 的概念。</strong></p>
</blockquote>
<h1 id="瀑布模型进行开发项目"><a href="#瀑布模型进行开发项目" class="headerlink" title="瀑布模型进行开发项目"></a>瀑布模型进行开发项目</h1><p>虽然现在瀑布模型已经不是最主流的开发模式。</p>
<p><strong>但是不管什么软件项目，不管采用什么开发模式，有四种活动是必不可少的，那就是需求、设计、编码和测试。而这四项活动，都是起源自瀑布模型，也是瀑布模型中核心的部分。</strong></p>
<p>这里使用案例来直观理解一下用瀑布模型进行开发整个软件的过程。</p>
<p><strong>问题的定义及项目规划阶段</strong></p>
<p>公司老板打算做一个游戏领域的社交网站，问题很明确，就是一个社交网站，并且用户能按照游戏来交友。至于可行性分析，总多社交是已经很火的事情了，似乎是可行的。那么就立项了。</p>
<p>然后老板就问项目经理，这样的一个网站，大概需要多久做得出来？项目经理回答，如此复杂的网站大概需要半年出来一个版本，老板说半年太久了，给你三个月吧，最后讨价还价，决定四个月上线。</p>
<p>于是项目经理按照四个月开始了倒推项目计划：</p>
<blockquote>
<p>需求分析——2周</p>
<p>软件设计——4周</p>
<p>程序编码——6周</p>
<p>软件测试——4周</p>
</blockquote>
<p><strong>需求分析的阶段</strong></p>
<p>在项目立项后，产品经理首先和老板充分的沟通，了解老板的想法是什么，要做一个什么样的网站。在了解老板的想法后，产品经理对市场上同类的社交网站进行了调研，然后用原型工具设计了网站的原型。原型虽然很简陋，但是从原型可以看出来，项目要做成什么样子，便于确认需求。</p>
<p>原型拿给老板看后，老板再根据自己的想法提一些反馈，这样反复沟通确认，在原型设计确认清楚后，产品经理开始撰写产品设计文档，将原型设计落实到文档，将整个网站划分成不同的功能模块，例如用户注册、登录、添加好友等，确定每个功能模块需要哪些功能。</p>
<p>这个阶段产品经理是最忙的，那这时候其他人在干嘛呢？其他人都还挺轻松的，架构师研究网上流行的社交网站都采用什么架构，程序员、测试看看技术文档。</p>
<p>虽然最终确定了产品设计文档，但是因为中间反复确认的时间过长，原定 2 周能完成的需求分析，最后拖到了 3 周。项目经理一看，最终上线时间点没法延，那就只好压缩编码时间了，不行加加班！</p>
<p>项目计划变成了：</p>
<blockquote>
<p>需求分析——3周</p>
<p>软件设计——4周</p>
<p>程序编码——5周</p>
<p>软件测试——4周</p>
</blockquote>
<p><strong>软件设计</strong></p>
<p>产品经理的产品设计文档确定后，架构师开始做架构设计，UI 设计师开始设计 UI，测试经理开始针对产品设计文档写测试用例，产品经理还要进一步设计交互。</p>
<p>由于前期原型设计工作做的好，所以 UI 设计还是很顺利的，主风格定下来以后，各个界面就是细节的确认了。</p>
<p>因为产品设计文档写的详细，输入输出很清楚，测试用例也进展顺利。</p>
<p>至于架构设计这边，架构师很有经验，先把整体架构确定，写了个技术方案文档，和大家一起开会讨论，几次后确认了整体技术方案。按照功能模块一拆分，把其中一个功能模块做了一个样板，然后把各个子模块分给开发人员，大家一起协助做详细设计，然后再分别确认。</p>
<p>大家都如火如荼地忙起来了。如果一切顺利的话，软件设计 4 周应该能完成，可以进入编码阶段了。但是软件设计进行到第 3 周的时候，老板的想法发生了一些变化。</p>
<p>因为市场上已经有了游戏社交的网站，而且运营结果不算太好，而网页游戏正流行，如果我们的平台能接入网页游戏，这会是个不错的机会。</p>
<p>于是需求变更了，我们要能和其他网页游戏的用户系统对接，这个需求最开始是没有提出来，也没有考虑的。</p>
<p>项目经理考虑再三，决定还是接受这个需求变更，但是希望能多一些时间，老板没同意，认为时间点很重要，哪怕砍一点功能，牺牲一点质量也要如期上线。但就算这时候砍功能，设计工作还是少不了多少。</p>
<p>于是产品经理重新修改相应原型，再确认，再重新修改产品设计文档。变更完后，UI 设计的相关页面重新修改设计、测试人员修改测试用例，最苦的是架构师，当初没有考虑到要和其他用户系统对接，现在用户系统的设计都要重新考虑了。</p>
<p>于是为了赶进度，项目组开始加班，即使如此，软件设计阶段也推迟到了第 5 周才勉强完成。</p>
<p>项目计划又变了：</p>
<blockquote>
<p>需求分析——3周</p>
<p>软件设计——5周</p>
<p>程序编码——5周</p>
<p>软件测试——3周</p>
</blockquote>
<p><strong>程序编码</strong></p>
<p>于进入编码阶段了，为了保证进度，加班还在继续，哪怕前期做了大量的设计，真到编码的时候还是有好多没有考虑到的，同时各个模块之间还存在相互依赖，有时候虽然自己功能开发完成，还需要等待其他人的功能完成才能调试，所以 5 周时间很快就过去了，而程序还不能完整地跑起来。</p>
<p>其实中间还有个小插曲，老板觉得还要加上支付的功能，但是项目经理觉得这个阶段改需求已经不可能了，以辞职为威胁总算顶回去了，打算放在下个版本加上。</p>
<p>终于到第 6 周的时候，有了一个勉强可以测试的版本。</p>
<p>项目计划现在变成了：</p>
<blockquote>
<p>需求分析——3周</p>
<p>软件设计——5周</p>
<p>程序编码——6周</p>
<p>软件测试——2周</p>
</blockquote>
<p><strong>软件测试</strong></p>
<p>留给测试的时间只有两周了，但是前期实在 bug 太多，两周测试时间过去，软件质量还是很糟糕，完全无法正常使用，于是项目不得不延期，一直延期了 4 周后，才算具备上线条件。</p>
<p>所以最终的项目计划差不多是：</p>
<blockquote>
<p>需求分析——3周</p>
<p>软件设计——5周</p>
<p>程序编码——6周</p>
<p>软件测试——6周</p>
</blockquote>
<p>与原定计划延迟了4周。</p>
<p><strong>运行维护</strong></p>
<p>网站上线后，好在前期并没有多少用户，但是线上 Bug 还是不少，需要继续修复线上发现的 Bug。</p>
<h1 id="瀑布模型的优缺点"><a href="#瀑布模型的优缺点" class="headerlink" title="瀑布模型的优缺点"></a>瀑布模型的优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>简单易行。</li>
<li>可以按照阶段检查，能及时发现问题。</li>
<li>前一个阶段完成后，就可以重点关注下一个阶段。</li>
<li>有很好的分工协作。</li>
<li>对质量有保障。</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>难以响应需求的变更，当需求发生改变时，越到后期代价越大。</li>
<li>工作量分布不均衡。例如前期开发、测试人员无法参与，而后期开发、测试人员又特别忙碌。</li>
<li>前期进度受阻，会一直压缩后续阶段时间，导致延期或影响质量。</li>
<li>一直到最后阶段才能看到结果。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>瀑布模型的出现，也解决了软件项目开发中的几个重要问题。</p>
<ul>
<li><strong>让软件开发过程有序可控。</strong>瀑布模型的每个阶段都有明确的任务，每个阶段都有明确的交付产物，都有相应的里程碑。这些让整个过程更可控，而且能及早发现问题。</li>
<li><strong>让分工协作变成可能。</strong>瀑布模型的六个阶段，也让软件开发产生相应的基础分工：项目经理、产品经理、架构师、软件工程师、测试工程师、运维工程师。</li>
<li><strong>质量有保障。</strong>瀑布模型每个阶段都需要交付相应的文档，而文档的撰写和评审，可以帮助在动手之前把问题沟通清楚，想清楚。瀑布模型在编码结束后，会有严密的测试，只有测试验收通过后，才能上线发布。这些措施都让软件的质量更有保障。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>极客时间 ——《软件工程之美》</p>
]]></content>
      <categories>
        <category>架构之路</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>github和git基操</title>
    <url>/2019/09/25/github%E5%92%8Cgit%E5%9F%BA%E6%93%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一些Git 和 GitHub基操。</p>
<a id="more"></a>
<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><h2 id="快捷键-t-和-w"><a href="#快捷键-t-和-w" class="headerlink" title="快捷键: t 和 w"></a>快捷键: t 和 w</h2><p>在你的源码浏览页面，按 <strong>t</strong> 可以快速进入模糊文件名搜索模式：</p>
<p><img src="1.png" alt></p>
<p>在你仓库主页，按 <strong>w</strong> 可以快速进行分支过滤：</p>
<p><img src="2.png" alt></p>
<p>在任意 GitHub 页面中，按 <strong>?</strong> 展示当前页面可用的快捷键：</p>
<p><img src="3.png" alt></p>
<h2 id="忽略空格-w-1"><a href="#忽略空格-w-1" class="headerlink" title="忽略空格: ?w=1"></a>忽略空格: ?w=1</h2><p>在任意的 diff URL 添加 <strong>?w=1</strong> 用来整理缩进:</p>
<p><img src="4.jpg" alt></p>
<h2 id="按范围过滤提交记录-master-time-master"><a href="#按范围过滤提交记录-master-time-master" class="headerlink" title="按范围过滤提交记录: master@{time}..master"></a>按范围过滤提交记录: master@{time}..master</h2><p>你可以创建一个对比页面通过使用 URL github.com/user/repo/compare/{range}。范围 (range) 可以是两个 SHA 例如 sha1…sha2 或者两个分支名称例如 master…my-branch。范围同时也非常智能的支持使用时间作为关注点。你可以通过 master@{1.day.ago}…master 过滤从昨天开始的提交。例如：链接，<a href="https://github.com/rails/rails/compare/master@{1.day.ago}…master" target="_blank" rel="noopener">https://github.com/rails/rails/compare/master@{1.day.ago}…master</a> 显示 Rails 项目中全部昨天开始的提交记录和变化：</p>
<p><img src="5.jpg" alt></p>
<p>##按作者过滤提交记录: ?author=github_handle</p>
<p>你可以通过在对比页面URL中增加 ?author=github_handle 来按作者过滤提交记录。例如：链接 <a href="https://github.com/dynjs/dynjs/commits/master?author=jingweno" target="_blank" rel="noopener">https://github.com/dynjs/dynjs/commits/master?author=jingweno</a> 显示 jingweno 对 <strong>Dynjs</strong> 的提交记录：</p>
<p><img src="6.jpg" alt></p>
<h2 id="diff-和-patch"><a href="#diff-和-patch" class="headerlink" title=".diff 和 .patch"></a>.diff 和 .patch</h2><p>在比较页面、合并请求页面或者评论页面的URL后增加 .diff 或者 .patch，可以得到 diff 或者 patch 的文本格式。例如：链接 <a href="https://github.com/rails/rails/compare/master@{1.day.ago}…master.patch" target="_blank" rel="noopener">https://github.com/rails/rails/compare/master@{1.day.ago}…master.patch</a> 显示Rails项目中全部昨天开始的提交记录和变化的文本格式：</p>
<p><img src="7.jpg" alt></p>
<h2 id="链接行"><a href="#链接行" class="headerlink" title="链接行"></a>链接行</h2><p>在文件展示页面，点击某行或者通过按 SHIFT 选择多行，URL 会有相应的改变。如果你要给你的队友分享一段代码是非常方便的：</p>
<p><img src="8.jpg" alt></p>
<h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><p>在合并请求、问题、或者任何评论中，sha和问题码(例如：#1)会被自动链接。并且，你也可以链接其它仓库的 sha 或者问题码，格式：<code>user/repo@sha1</code> 或者 <code>user/repo#1</code>。下面是一个评论中通过sha自动链接的例子：</p>
<p><img src="9.jpg" alt></p>
<h2 id="hub"><a href="#hub" class="headerlink" title="hub"></a>hub</h2><p>Hub 是 GitHub的命令行。它提供了Git和Github之间的集成。一个最有用的命令就是在命令行输入 hub pull-request 创建pull request。详见 <strong>readme.</strong>（<a href="https://github.com/defunkt/hub#commands）。" target="_blank" rel="noopener">https://github.com/defunkt/hub#commands）。</a></p>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h2><p><img src="Git工作流程.webp" alt></p>
<p>以上包括一些简单而常用的命令，但是先不关心这些，先来了解下面这4个专有名词。</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<p><strong>工作区</strong></p>
<p>程序员进行开发改动的地方，是你当前看到的，也是最新的。</p>
<p>平常我们开发就是拷贝远程仓库中的一个分支，基于该分支进行开发。在开发过程中就是对工作区的操作。</p>
<p><strong>暂存区</strong></p>
<p>.git目录下的index文件, 暂存区会记录<code>git add</code>添加文件的相关信息(文件名、大小、timestamp…)，不保存文件实体, 通过id指向每个文件实体。可以使用<code>git status</code>查看暂存区的状态。暂存区标记了你当前工作区中，哪些内容是被git管理的。</p>
<p>当你完成某个需求或功能后需要提交到远程仓库，那么第一步就是通过<code>git add</code>先提交到暂存区，被git管理。</p>
<p><strong>本地仓库</strong></p>
<p>保存了对象被提交 过的各个版本，比起工作区和暂存区的内容，它要更旧一些。</p>
<p><code>git commit</code>后同步index的目录树到本地仓库，方便从下一步通过<code>git push</code>同步本地仓库与远程仓库的同步。</p>
<p><strong>远程仓库</strong></p>
<p>远程仓库的内容可能被分布在多个地点的处于协作关系的本地仓库修改，因此它可能与本地仓库同步，也可能不同步，但是它的内容是最旧的。</p>
<h2 id="常用Git命令"><a href="#常用Git命令" class="headerlink" title="常用Git命令"></a>常用Git命令</h2><p><img src="gitcommandtable.jpeg" alt></p>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>add相关命令很简单，主要实现将工作区修改的内容提交到暂存区，交由git管理。</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>git add .</strong></th>
<th><strong>添加当前目录的所有文件到暂存区</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>git add </strong></td>
<td><strong>添加指定目录到暂存区，包括子目录</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>git add </strong></td>
<td><strong>添加指定文件到暂存区</strong></td>
</tr>
</tbody>
</table>
<h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p>commit相关命令也很简单，主要实现将暂存区的内容提交到本地仓库，并使得当前分支的HEAD向后移动一个提交点。</p>
<table>
<thead>
<tr>
<th><strong>git commit -m </strong></th>
<th><strong>提交暂存区到本地仓库,message代表说明信息</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>git commit  -m </strong></td>
<td><strong>提交暂存区的指定文件到本地仓库</strong></td>
</tr>
<tr>
<td><strong>git commit –amend -m </strong></td>
<td><strong>使用一次新的commit，替代上一次提交</strong></td>
</tr>
</tbody>
</table>
<h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><p>涉及到协作，自然会涉及到分支，关于分支，大概有展示分支，切换分支，创建分支，删除分支这四种操作。</p>
<table>
<thead>
<tr>
<th><strong>git branch</strong></th>
<th><strong>列出所有本地分支</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>git branch -r</strong></td>
<td><strong>列出所有远程分支</strong></td>
</tr>
<tr>
<td><strong>git branch -a</strong></td>
<td><strong>列出所有本地分支和远程分支</strong></td>
</tr>
<tr>
<td><strong>git branch </strong></td>
<td><strong>新建一个分支，但依然停留在当前分支</strong></td>
</tr>
<tr>
<td><strong>git checkout -b </strong></td>
<td><strong>新建一个分支，并切换到该分支</strong></td>
</tr>
<tr>
<td><strong>git branch –track </strong></td>
<td><strong>新建一个分支，与指定的远程分支建立追踪关系</strong></td>
</tr>
<tr>
<td><strong>git checkout </strong></td>
<td><strong>切换到指定分支，并更新工作区</strong></td>
</tr>
<tr>
<td><strong>git branch -d </strong></td>
<td><strong>删除分支</strong></td>
</tr>
<tr>
<td><strong>git push origin –delete </strong></td>
<td><strong>删除远程分支</strong></td>
</tr>
</tbody>
</table>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>merge命令把不同的分支合并起来。如上图，在实际开放中，我们可能从master分支中切出一个分支，然后进行开发完成需求，中间经过R3,R4,R5的commit记录，最后开发完成需要合入master中，这便用到了merge。</p>
<table>
<thead>
<tr>
<th><strong>git fetch </strong></th>
<th><strong>merge之前先拉一下远程仓库最新代码</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>git merge </strong></td>
<td><strong>合并指定分支到当前分支</strong></td>
</tr>
</tbody>
</table>
<p>一般在merge之后，会出现conflict，需要针对冲突情况，手动解除冲突。主要是因为两个用户修改了同一文件的同一块区域。如下图所示，需要手动解除。</p>
<p><img src="手动解除.webp" alt></p>
<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p>rebase又称为衍合，是合并的另外一种选择。</p>
<p>在开始阶段，我们处于new分支上，执行<code>git rebase dev</code>，那么new分支上新的commit都在master分支上重演一遍，最后checkout切换回到new分支。这一点与merge是一样的，合并前后所处的分支并没有改变。<code>git rebase dev</code>，通俗的解释就是new分支想站在dev的肩膀上继续下去。rebase也需要手动解决冲突。</p>
<blockquote>
<p>如果你想保留完整的历史记录，并且想要避免重写commit history的风险，你应该选择使用git merge</p>
</blockquote>
<h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><p>reset命令把当前分支指向另一个位置，并且相应的变动工作区和暂存区。</p>
<table>
<thead>
<tr>
<th><strong>git reset —soft </strong></th>
<th>只改变提交点，暂存区和工作目录的内容都不改变</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>git reset —mixed </strong></td>
<td><strong>改变提交点，同时改变暂存区的内容</strong></td>
</tr>
<tr>
<td><strong>git reset —hard </strong></td>
<td><strong>暂存区、工作区的内容都会被修改到与提交点完全一致的状态</strong></td>
</tr>
<tr>
<td><strong>git reset –hard HEAD</strong></td>
<td><strong>让工作区回到上次提交时的状态</strong></td>
</tr>
</tbody>
</table>
<h3 id="revert"><a href="#revert" class="headerlink" title="revert"></a>revert</h3><p>git revert用一个新提交来消除一个历史提交所做的任何修改。</p>
<p><strong>revert与reset的区别</strong></p>
<ul>
<li>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit。</li>
<li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，减少冲突。但是git reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入，产生很多冲突。关于这一点，不太理解的可以看这篇文章。</li>
<li>git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li>
</ul>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>上传本地仓库分支到远程仓库分支，实现同步。</p>
<table>
<thead>
<tr>
<th>git push <remote><branch></branch></remote></th>
<th>上传本地指定分支到远程仓库</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>git push  –force</strong></td>
<td><strong>强行推送当前分支到远程仓库，即使有冲突</strong></td>
</tr>
<tr>
<td><strong>git push  –all</strong></td>
<td><strong>推送所有分支到远程仓库</strong></td>
</tr>
</tbody>
</table>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><table>
<thead>
<tr>
<th>git status</th>
<th>显示有变更的文件</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>git log</strong></td>
<td><strong>显示当前分支的版本历史</strong></td>
</tr>
<tr>
<td><strong>git diff</strong></td>
<td><strong>显示暂存区和工作区的差异</strong></td>
</tr>
<tr>
<td><strong>git diff HEAD</strong></td>
<td><strong>显示工作区与当前分支最新commit之间的差异</strong></td>
</tr>
<tr>
<td><strong>git cherry-pick </strong></td>
<td><strong>选择一个commit，合并进当前分支</strong></td>
</tr>
</tbody>
</table>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Git 是一个设计良好的工具。Git操作常用的命令都在这里了。了解它可以直接让你更有效率并成为一个更有才华的程序员。GitHub，在另一个方面，在 Git 基础上提供便利的团队合作特性。有能力使用 GitHub 也会提高你日常效率。</p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS之安装服务器上的IPA包</title>
    <url>/2019/09/11/IOS%E4%B9%8B%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84IPA%E5%8C%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果想要将导出的ad-hoc包或者企业级别开发者账号才能够打包的in-house的ipa包通过自己服务器上下载安装的话，还需要一些简单的配置。</p>
<a id="more"></a>
<h1 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h1><p>准备文件：一个plist文件，ipa安装包，网页下载页面（可不需要），<code>57*57</code>像素icon与<code>512*512</code>像素icon。</p>
<p>这里利用github来进行测试打包发布应用。github仓库测试完就会删除，需要自行进行准备。</p>
<p>由于本人没有企业级别的开发者账号，只能通过打包ad-hoc包来进行测试。ad-hoc包如果profile签名文件中没有安装在已有的测试设备上是无法安装使用的。而企业级别的in-house包只需要信任即可。</p>
<blockquote>
<p>plist文件在IOS7之后仅支持部署在https。</p>
</blockquote>
<h2 id="plist文件"><a href="#plist文件" class="headerlink" title="plist文件"></a>plist文件</h2><p>一个plist模版：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">key</span>&gt;</span>assets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>ipa安装包路径<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>display-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>57*57像素icon路径<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>full-size-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>512*512像素icon路径<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">key</span>&gt;</span>metadata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>cn.sweetlover.jytools<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>software<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>jytools<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者在打包的时候一并使用xcode生成</p>
<p><img src="plist.png" alt></p>
<p>next后，填写完即可。</p>
<p><img src="plist2.png" alt></p>
<p>导出后会看到一个manifest.plist文件就是所需要用到的文件。</p>
<blockquote>
<p>在生成的时候可以随便填写一些https的域名即可，但是真正发布时候还是需要修改好配置。</p>
</blockquote>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p><strong>可以先上传ipa包和icon文件上传到github，获取到下载路径之后填写到plist文件当中，然后再将plist文件上传到github。</strong></p>
<p>Demo完整plist文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">key</span>&gt;</span>assets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>https://github.com/hackycy/mitaoquan/raw/master/jytools.ipa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>display-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>https://github.com/hackycy/mitaoquan/raw/master/icon-57.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>full-size-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">string</span>&gt;</span>https://github.com/hackycy/mitaoquan/raw/master/icon-512.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">key</span>&gt;</span>metadata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>net.cn.sweetlover.mitaoquan<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>software<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">string</span>&gt;</span>mitao<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>github目录：</p>
<p><img src="public.png" alt></p>
<p>获取plist文件的路径，通过</p>
<p><img src="public2.png" alt></p>
<p>案例中获取的plist文件路径为<code>https://raw.githubusercontent.com/hackycy/mitaoquan/master/manifest.plist</code></p>
<p>最后通过<code>itms-services://?action=download-manifest&amp;url=</code>后面拼接上plist的url即可。</p>
<p><strong>demo中为<code>itms-services://?action=download-manifest&amp;url=https://raw.githubusercontent.com/hackycy/mitaoquan/master/manifest.plist</code></strong></p>
<blockquote>
<p>前端可以直接通过location.href或者a标签等跳转该链接即可安装。本地测试可以直接用safari打开上面的地址即可安装</p>
</blockquote>
<p>这里直接本地测试，复制该链接到safari直接打开安装。</p>
<p><img src="public3.png" alt></p>
<p><img src="public4.png" alt></p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>通过<code>itms-services</code>协议，在safari浏览器可以直接在ios设备上安装应用程序。<code>itms-services</code>协议需要一个plist配置文件。<code>itms-services://?action=download-manifest&amp;url=</code>是固定不变的，url根据环境变化。</p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS之App Store完整上架流程</title>
    <url>/2019/08/20/IOS%E4%B9%8BApp-Store%E5%AE%8C%E6%95%B4%E4%B8%8A%E6%9E%B6%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近在处理App Store上架的问题，和Android的打包流程比起来的确比较棘手些，因为涉及到很多的一些概念，现在也完整的梳理并记录一下。</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>发布上架都需要一个苹果开发者账号，免费的账号是有诸多限制的。</p>
<p><strong>苹果开发者帐号体系</strong></p>
<p><strong>Apple Developer：</strong>直接在<a href="https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.apple.com%2F" target="_blank" rel="noopener">Apple Developer</a>登录，同意Apple Developer协议后的账号，免费，只可以使用Xcode进行真机调试，Xcode 7之后苹果推出的功能</p>
<p><strong>Apple Developer Program：</strong>分个人和组织类型，费用都是每年 99 美元，可以使用Xcode进行真机调试，打包Ad-Hoc测试，在App Store发布App</p>
<p><strong>Apple Developer Enterprise Program：</strong>企业账号，费用是每年 299 美元，可以使用Xcode进行真机调试，打包Ad-Hoc测试，打包In-House App，但不能在App Store发布App</p>
<p>不同安装方式对应的证书类型</p>
<ul>
<li>非App Store<ul>
<li>Development（真机调试）：iOS App Development</li>
<li>Ad Hoc：iOS Distribution (App Store and Ad Hoc)</li>
<li>Enterprise：iOS Distribution (In-House and Ad Hoc)</li>
</ul>
</li>
<li>App Store：iOS Distribution (App Store and Ad Hoc)</li>
</ul>
<p>在iOS的项目中，只要不是运行在模拟器上，都会涉及到开发者帐号、证书、<code>Provisioning Profile</code>这些概念。</p>
<p><strong>免费账号的限制：</strong></p>
<ul>
<li>创建的<code>Provisioning Profile</code>有效期只有7天</li>
<li>在7天内最多注册10个Bundle Id</li>
<li>只能同时注册3台iOS设备</li>
<li>在同一台iOS设备上，只能同时安装3个使用免费账号签名的App。当该设备上已经存在3个App，则无法安装任何免费账号签名的任何App，就算是那3个App其中一个也不行，只能先把其中一个删除</li>
</ul>
<blockquote>
<p>以下介绍是以我的Apple Developer Program个人账号来进行演示</p>
</blockquote>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>证书、加密等原理这里不作介绍，主要讲解一些IOS所必要的概念。</p>
<h2 id="certSigningRequest"><a href="#certSigningRequest" class="headerlink" title=".certSigningRequest"></a>.certSigningRequest</h2><p>在<code>Mac</code>中的<code>钥匙串访问</code>里的 <code>证书助理 -&gt; 从证书颁发机构请求证书</code>：</p>
<p><img src="certSigningRequest.png" alt></p>
<p>最后会创建出一个<code>.certSigningRequest</code>文件，其实这个过程就是创建了一对公私钥</p>
<p><img src="certSigningRequest2.png" alt></p>
<ul>
<li>其中<code>.certSigningRequest</code>文件保存着<ul>
<li>申请者信息申请者的公钥</li>
<li>摘要算法</li>
<li>公钥加密算法</li>
</ul>
</li>
<li>私钥保存在 <code>keychain</code>中</li>
</ul>
<h2 id="AppleWWDRCA证书"><a href="#AppleWWDRCA证书" class="headerlink" title="AppleWWDRCA证书"></a>AppleWWDRCA证书</h2><p><code>iOS</code>以及 <code>mac OS</code>（在安装 Xcode 时）将自动安装 <code>AppleWWDRCA.cer</code>这个中间证书（Intermediate Certificates），它实际上就是 iOS（开发）证书的证书，即根证书（Apple Root Certificate）。</p>
<h2 id="iOS-App-Development证书"><a href="#iOS-App-Development证书" class="headerlink" title="iOS App Development证书"></a>iOS App Development证书</h2><p>iOS的开发证书，在开发阶段进行真机测试时需要用到的证书。可以在苹果开发网站上手动创建，需要上传<code>.certSigningRequest</code>文件；或者使用Xcode自动创建。</p>
<h2 id="iOS-Distribution证书"><a href="#iOS-Distribution证书" class="headerlink" title="iOS Distribution证书"></a>iOS Distribution证书</h2><p>iOS的发布证书，可以用于进行 <code>Ad Hoc</code> 测试、打包上传到 <code>App Store</code> 或者打包成 <code>Enterprisee（In-House）</code> 类型供企业内部使用。可以在苹果开发网站上手动创建，需要上传<code>.certSigningRequest</code>文件；或者使用Xcode自动创建。</p>
<h2 id="p12"><a href="#p12" class="headerlink" title=".p12"></a>.p12</h2><p>在<code>Mac</code>的<code>钥匙串访问</code>里选择一张证书，右击该证书，选择<code>导出&quot;xxxxx&quot;</code>，然后设置密码，可以导出该证书对应的<code>.p12</code>文件。<code>.p12</code>文件包含个人信息、公钥和私钥，也就是<code>证书 + 私钥</code>。iOS类型的每种证书同时存在数量有限制，而证书是依靠<code>mac OS</code>上的<code>.certSigningRequest</code>文件创建的，所以正常情况下，每种类型的证书只能在有限的Mac电脑上使用，如果需要在更多不同的Mac电脑上进行App开发、测试、签名，可以导出对应<code>.p12</code>文件代替证书来使用。</p>
<p><img src="p12.png" alt></p>
<h2 id="Provisioning-Profile"><a href="#Provisioning-Profile" class="headerlink" title="Provisioning Profile"></a>Provisioning Profile</h2><p><code>Provisioning Profile</code>的文件格式为<code>.mobileprovision</code>，里面包含着</p>
<ul>
<li>可以使用的证书</li>
<li>App ID，由 TeamID 和 BundleID 组合而成，类似于 <code>A1B2C3D4.com.domain.appName</code>形式</li>
<li>可安装该App的设备列表的UDID</li>
<li>Entitlements，授权文件，列出了App可以进行哪些行为</li>
<li>以上信息的签名</li>
</ul>
<p>在苹果开发网站上手动创建，或者使用Xcode自动创建。</p>
<h2 id="ipa"><a href="#ipa" class="headerlink" title=".ipa"></a>.ipa</h2><p><code>.ipa</code>文件是iOS上的App安装文件，其实它只是一个压缩包，等同于<code>.zip</code>格式，用<code>mac OS</code>自带的<code>归档实用工具</code>可以直接对它解压，可以看到里面的内容</p>
<p><img src="ipa.png" alt></p>
<h2 id="app"><a href="#app" class="headerlink" title=".app"></a>.app</h2><p>右击<code>.app</code>文件，选择<code>显示包内容</code>，可以看到里面的内容</p>
<p><img src="app.png" alt></p>
<p><code>.app</code>文件主要包含三部分：</p>
<ul>
<li><code>Mach-O</code>格式的二进制可执行文件，这个是一个App最重要的文件，我们编写的<code>Objective-C</code>、<code>Swift</code>代码都被编译在里面</li>
<li>资源文件，包括：<code>.bundle</code>文件，<code>.framework</code>文件，<code>.dylib</code>文件，<code>.nib</code>文件，图片文件，音视频文件，字体文件等所有项目用到的文件</li>
<li><code>CodeResources</code>，签名信息</li>
<li><code>embedded.mobileprovision</code>文件，或者<code>entitlements</code>文件<ul>
<li>对于没有上传App Store的<code>.app</code>文件，里面会包含<code>embedded.mobileprovision</code>文件，没有<code>entitlements</code>文件</li>
<li>App Store下载的<code>.app</code>文件，里面会包含<code>.entitlements</code>文件，没有<code>embedded.mobileprovision</code>文件</li>
</ul>
</li>
</ul>
<h1 id="Automatic-signing"><a href="#Automatic-signing" class="headerlink" title="Automatic signing"></a>Automatic signing</h1><p>在Xcode 7之前，只有加入到Apple Developer Program（即付费）才能进行真机调试，Xcode 7之后苹果推出了<code>Automatic signing</code>功能，只要在Xcode上登陆Apple ID，就会自动管理证书和Provisioning Profile，同时没有加入Apple Developer Program的账号也能进行真机调试。</p>
<p><img src="automanagesigning.png" alt></p>
<p>勾选Xcode中的<code>AutoMatically manager signing</code>，选择对应的<code>Team</code>后，无论是加入Apple Developer Program的账号（即付费账号）还是Apple Developer的账号（即免费账号）：</p>
<ul>
<li>如果Xcode没有帮该账号自动生成过<code>iOS App Development</code>类型的证书， 无论在苹果后台是否已经存在其他<code>iOS App Development</code>类型的证书，都会生成一张新的<code>iOS App Development</code>类型证书，证书名称的格式是：开发者账号名称(当前Mac电脑名称)， 如：Brian Hui (Daniels的MacBook Pro)，同时会保存在当前Mac电脑的<code>keychain</code>中</li>
<li>免费账号无法进入苹果的管理证书后台，但可以猜测出在苹果后台也会存在该证书</li>
<li>如果Xcode没有帮该App的Bundle ID自动生成过对应的<code>Provisioning Profile</code>，就会使用上面那张证书生成一个<code>Provisioning Profile</code>，保存在<code>~/Library/MobileDevice/Provisioning Profiles</code>，但在苹果后台则不会存在这个<code>Provisioning Profile</code></li>
<li>如果在<code>钥匙串访问</code>中删除了那张证书，Xcode会提示你的账号有<code>iOS App Development</code>类型的证书，但这台电脑没有安装，需要先把那张证书<code>Revoke</code>，<code>Revoke</code>后会再次重复前面的步骤，生成新的证书和<code>Provisioning Profile</code></li>
<li>如果在<code>~/Library/MobileDevice/Provisioning Profiles</code>里面，删除了该<code>Provisioning Profile</code>文件，Xcode会马上重新生成<code>Provisioning Profile</code></li>
</ul>
<p>在使用Xcode的<code>Automatic signing</code>功能的前提下，进行<code>Archive</code>，然后<code>Distribute App</code>的时候，选择非<code>Development</code>的选项，再选择AutoMatically manager signing</p>
<ul>
<li>如果本地存在<code>iOS Distribution</code>类型的证书，则会直接进行重签名</li>
<li>如果没有存在<code>iOS Distribution</code>类型的证书，而苹果的后台有，则会告诉你，该账号存在<code>iOS Distribution</code>类型的证书，但这台电脑没有安装，请联系创建人拿到备份（.p12文件）进行安装，当你安装了该证书（或者.p12文件），则会直接进行重签名</li>
<li>如果没有存在<code>iOS Distribution</code>类型的证书，而苹果的后台也没有，则Xcode会询问你是否需要生成<code>iOS Distribution</code>类型的证书，如果选择需要，则会自动生成<code>iOS Distribution</code>类型的证书，并且建议你保存在本地，证书名称的格式是：Team Name， 如：Hutchison Telephone (Macau) Company Limited，同时使用这张证书生成一个<code>Provisioning Profile</code>，保存在<code>~/Library/MobileDevice/Provisioning Profiles</code>，但在苹果后台则不会存在这个`Provisioning Profile。</li>
</ul>
<h2 id="Xcode对Provisioning-Profile的验证"><a href="#Xcode对Provisioning-Profile的验证" class="headerlink" title="Xcode对Provisioning Profile的验证"></a>Xcode对Provisioning Profile的验证</h2><p>Xcode怎么把App和证书、<code>Provisioning Profile</code>绑定在一起呢？什么时候需要一张新的证书，什么时候需要一个新的<code>Provisioning Profile</code>？</p>
<p>Bundle ID是App的唯一标识，App和证书、<code>Provisioning Profile</code>绑定在一起，其实就是Bundle ID和证书、<code>Provisioning Profile</code>绑定在一起，两种情况：</p>
<h3 id="Automatic-signing-1"><a href="#Automatic-signing-1" class="headerlink" title="Automatic signing"></a>Automatic signing</h3><p>Bundle ID与开发者账号绑定。使用<code>Automatic signing</code>时，选择开发者账号（Team）后，Xcode会根据开发者账号去本地检索是否存在该账号对应的<code>Provisioning Profile</code>，再验证是否存在与该Bundle ID匹配的<code>Provisioning Profile</code>，再根据<code>Provisioning Profile</code>去本地检索是否存在对应的证书，都验证通过，则会设置成功。如果不存在<code>Provisioning Profile</code>，则会判断该Bundle ID是否已经被其他账号注册，如果已经被其他账号注册，则整个流程失败，需要选择对应的账号。如果该Bundle ID没有被其他账号注册或者账号已经对应上，则按照文章前面所说的步骤，最后生成<code>Provisioning Profile</code>。</p>
<h3 id="没有使用Automatic-signing"><a href="#没有使用Automatic-signing" class="headerlink" title="没有使用Automatic signing"></a>没有使用Automatic signing</h3><p>需要手动选择<code>Provisioning Profile</code>，当选择了其中一个<code>Provisioning Profile</code>时，则会分别验证Bundle ID是否对应、<code>Provisioning Profile</code>是否过期、是否存在对应的证书、App的权限是否对应、证书的类型和<code>Code Signing Identity</code>设置是否对应，如果都通过验证，则会设置成功。</p>
<h1 id="App-Store上架打包流程"><a href="#App-Store上架打包流程" class="headerlink" title="App Store上架打包流程"></a>App Store上架打包流程</h1><p>xcode构建好一个bundle id为<code>cn.sweetlover.uploadstore</code>的项目，假设已为一个正常的项目APP。</p>
<blockquote>
<p>空demo的APP是无法构建成功的。</p>
</blockquote>
<p>准备好一个开发者账号，并登陆<a href="https://developer.apple.com/" target="_blank" rel="noopener">苹果开发者官网</a>，选择<code>Certificates, IDs &amp; Profiles</code>：</p>
<p><img src="appstore2.png" alt></p>
<h2 id="创建APP-ID"><a href="#创建APP-ID" class="headerlink" title="创建APP ID"></a>创建APP ID</h2><p>选择<code>Identifiers</code>，创建一个APP ID：</p>
<p><img src="appstore5.png" alt></p>
<p>这里创建一个BundleID为<code>cn.sweetlover.uploadstore</code>，BundleID格式这里不细讲了。</p>
<p><img src="appstore3.png" alt></p>
<p>下面的选择是想要让你APP所接入的能力，例如常用的推送功能</p>
<p><img src="appstore4.png" alt></p>
<p>选择继续，并注册后，会看到<code>Identifiers</code>会出现你刚刚创建的APP ID：</p>
<p><img src="appstore6.png" alt></p>
<h2 id="注册测试设备"><a href="#注册测试设备" class="headerlink" title="注册测试设备"></a>注册测试设备</h2><p>选择<code>Devices</code>，添加</p>
<p><img src="appstore7.png" alt></p>
<p>填写设备名称和UDID即可，UDID可以使用ITunes查看。</p>
<p><img src="appstore8.png" alt></p>
<h2 id="创建CSR"><a href="#创建CSR" class="headerlink" title="创建CSR"></a>创建CSR</h2><p>打开<code>Mac</code>-&gt;<code>钥匙串访问</code>-&gt;<code>证书助理</code>-&gt;<code>从证书颁发机构请求证书..</code>，填写，并选择存储到磁盘</p>
<p><img src="appstore10.png" alt></p>
<p><img src="appstore11.png" alt></p>
<h2 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h2><p>选择<code>Certificates</code>，添加</p>
<h3 id="创建开发证书"><a href="#创建开发证书" class="headerlink" title="创建开发证书"></a>创建开发证书</h3><p>选择<code>IOS App Development</code>，并继续</p>
<p><img src="appstore9.png" alt></p>
<p>上传CSR文件，即选择我们刚刚创建好的CSR文件。并继续</p>
<p><img src="appstore12.png" alt></p>
<p>创建好后，选择下载证书，双击安装：</p>
<p><img src="appstore13.png" alt></p>
<p>打开钥匙串访问即可看到我们刚刚安装好的证书</p>
<p><img src="appstore14.png" alt></p>
<p>发布证书就创建完毕了。</p>
<h3 id="创建发布证书"><a href="#创建发布证书" class="headerlink" title="创建发布证书"></a>创建发布证书</h3><p>重复上述创建开发证书的步骤，只不过选项发生变化：</p>
<p><img src="appstore15.png" alt></p>
<p>最后下载安装，看到钥匙串访问出现证书即可</p>
<p><img src="appstore16.png" alt></p>
<h2 id="创建Profiles"><a href="#创建Profiles" class="headerlink" title="创建Profiles"></a>创建Profiles</h2><p>选择<code>Profiles</code></p>
<h3 id="创建开发Provisioning-Profile"><a href="#创建开发Provisioning-Profile" class="headerlink" title="创建开发Provisioning Profile"></a>创建开发Provisioning Profile</h3><p>选择<code>IOS App Development</code>，并继续</p>
<p><img src="appstore17.png" alt></p>
<p>选择好我们之前创建的APP ID，如<code>cn.sweetlover.uploadstore</code>，并继续</p>
<p><img src="appstore18.png" alt></p>
<p>选择开发证书，并继续</p>
<p><img src="appstore19.png" alt></p>
<p>选择测试设备，并继续</p>
<p><img src="appstore20.png" alt></p>
<p>填写Provisioning Profile Name，并选择生成</p>
<p><img src="appstore21.png" alt></p>
<p>下载并双击安装：</p>
<p><img src="appstore22.png" alt></p>
<p><img src="appstore24.png" alt></p>
<p>xcode签名方式选择手动以便查看：</p>
<p><img src="appstore23.png" alt></p>
<h3 id="创建发布Provisioning-Profile"><a href="#创建发布Provisioning-Profile" class="headerlink" title="创建发布Provisioning Profile"></a>创建发布Provisioning Profile</h3><p>重复上述创建开发证书的步骤，只不过选项发生变化：</p>
<p><img src="appstore25.png" alt></p>
<p>xcode：</p>
<p><img src="appstore26.png" alt></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果不安装证书，选择profile，xcode会报错缺少证书文件：</p>
<p><img src="appstore27.png" alt></p>
<h2 id="App-Store-Connect发布"><a href="#App-Store-Connect发布" class="headerlink" title="App Store Connect发布"></a>App Store Connect发布</h2><h3 id="APP创建"><a href="#APP创建" class="headerlink" title="APP创建"></a>APP创建</h3><p>点击<code>Account</code>登陆后点击<code>App Store Connect</code>，选择<code>我的App</code></p>
<p><img src="appstore1.png" alt></p>
<p>新建APP，填写好资料，并创建，创建后进入APP，编辑APP应用信息和定价情况</p>
<p><img src="appstore28.png" alt></p>
<p><img src="appstore30.png" alt></p>
<h3 id="版本提交"><a href="#版本提交" class="headerlink" title="版本提交"></a>版本提交</h3><p>首次提交会出现以下界面，填写好里面所需要的资料，里面都可按照提示进行编写。</p>
<p><img src="appstore32.png" alt></p>
<p>如果已经发布了，需要继续发版本，则点击</p>
<p><img src="appstore33.png" alt></p>
<p>由于首次提交还未上架过，所以按钮是置灰的状态，无法点击。</p>
<h2 id="Xcode-Archive构建版本"><a href="#Xcode-Archive构建版本" class="headerlink" title="Xcode Archive构建版本"></a>Xcode Archive构建版本</h2><p>进入<code>Xcode</code>选择<code>Product</code>-&gt;<code>Archive</code>，注意不要选中到模拟器，要选中<code>Generic IOS Device</code>。因为上架的包不是针对某种设备来进行Archive的。</p>
<p><img src="appstore34.png" alt></p>
<p>出现以下界面，选择Distrubite App，如果Archive过多次版本也会出现以往的版本。</p>
<p><img src="appstore35.png" alt></p>
<p>选择IOS App Store</p>
<p><img src="appstore36.png" alt></p>
<p>这里直接选择上传，也可以选择导出成IPA，使用Application Loader进行发布。</p>
<p><img src="appstore37.png" alt></p>
<p>next~</p>
<p><img src="appstore38.png" alt></p>
<p>选择好发布的证书和profile文件</p>
<p><img src="appstore39.png" alt></p>
<p>选择上传即可。</p>
<p><img src="appstore40.png" alt></p>
<p>经过一段漫长的时间等待后，回到App Store Connect的页面中，可能需要一段时间等到，建置版本后出现按钮即可选择构建好的版本。</p>
<p><img src="appstore41.png" alt></p>
<p>填写好所需要的资料就可以提交审核了。</p>
<h1 id="关于Application-Loader"><a href="#关于Application-Loader" class="headerlink" title="关于Application Loader"></a>关于Application Loader</h1><p>打开<code>Xcode</code> -&gt; <code>Open Developer Tool</code> -&gt; <code>Application Loader</code>，登陆你的APP ID。</p>
<p><img src="applicationloader.png" alt></p>
<p>密码登陆非APPLE ID的密码，需要登录appleid.apple.com上，输入AppleID密码后会产生一个密码，去<code>Application Loader</code>中输入产生的密码即可。</p>
<p><img src="applicationloader2.png" alt></p>
<h1 id="关于TestFlight"><a href="#关于TestFlight" class="headerlink" title="关于TestFlight"></a>关于TestFlight</h1><p>等上传构建版本处理完成后，一般会显示缺少出口合规证明。点击黄色提示那，在弹出的页面选择否，点击开始内部测试。</p>
<p><img src="testflight.png" alt></p>
<p>选择App Store connect用户选项，点击测试员旁边+号，选择测试的苹果账号！</p>
<p><img src="testflight2.png" alt></p>
<p>然后手机端下载TestFlight后，兑换邀请码即可。</p>
<h1 id="App审核指南"><a href="#App审核指南" class="headerlink" title="App审核指南"></a>App审核指南</h1><p>App Store Review Guidelines：<a href="https://developer.apple.com/app-store/review/guidelines/" target="_blank" rel="noopener">https://developer.apple.com/app-store/review/guidelines/</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>QPS、TPS、PV、UV、GMV、IP、RPS概念解释</title>
    <url>/2019/08/20/QPS%E3%80%81TPS%E3%80%81PV%E3%80%81UV%E3%80%81GMV%E3%80%81IP%E3%80%81RPS%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前看到一些QPS、TPS、PV等的一些名词，也还没清楚它们的意思，查了一下资料并记录一下。</p>
<a id="more"></a>
<h1 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a><strong>QPS</strong></h1><p>Queries Per Second，每秒查询数。每秒能够响应的查询次数。</p>
<p>QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。每秒的响应请求数，也即是最大吞吐能力。</p>
<h1 id="TPS"><a href="#TPS" class="headerlink" title="TPS"></a><strong>TPS</strong></h1><p>Transactions Per Second 的缩写，每秒处理的事务数目。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数，最终利用这些信息作出的评估分。</p>
<p>TPS 的过程包括：客户端请求服务端、服务端内部处理、服务端返回客户端。</p>
<p>例如，访问一个 Index 页面会请求服务器 3 次，包括一次 html，一次 css，一次 js，那么访问这一个页面就会产生一个“T”，产生三个“Q”。</p>
<h1 id="PV"><a href="#PV" class="headerlink" title="PV"></a><strong>PV</strong></h1><p>（page view）即页面浏览量，通常是衡量一个网络新闻频道或网站甚至一条网络新闻的主要指标。户每一次对网站中的每个页面访问均被记录 1 次。用户对同一页面的多次刷新，访问量累计。</p>
<p>根据这个特性，刷网站的 PV 就很好刷了。</p>
<p>与 PV 相关的还有 <strong>RV</strong>，即重复访问者数量（repeat visitors）。</p>
<h1 id="UV"><a href="#UV" class="headerlink" title="UV"></a><strong>UV</strong></h1><p>访问数（Unique Visitor）指独立访客访问数，统计1天内访问某站点的用户数(以 cookie 为依据)，一台电脑终端为一个访客。</p>
<h1 id="IP"><a href="#IP" class="headerlink" title="IP"></a><strong>IP</strong></h1><p>（Internet Protocol）独立 IP 数，是指 1 天内多少个独立的 IP 浏览了页面，即统计不同的 IP 浏览用户数量。同一 IP 不管访问了几个页面，独立 IP 数均为 1；不同的 IP 浏览页面，计数会加 1。IP 是基于用户广域网 IP 地址来区分不同的访问者的，所以，多个用户（多个局域网 IP）在同一个路由器（同一个广域网 IP）内上网，可能被记录为一个独立 IP 访问者。如果用户不断更换 IP，则有可能被多次统计。</p>
<h1 id="GMV"><a href="#GMV" class="headerlink" title="GMV"></a><strong>GMV</strong></h1><p>是 Gross Merchandise Volume 的简称。只要是订单，不管消费者是否付款、卖家是否发货、是否退货，都可放进 GMV 。</p>
<h1 id="RPS"><a href="#RPS" class="headerlink" title="RPS"></a><strong>RPS</strong></h1><p>代表吞吐率，即 Requests Per Second 的缩写。吞吐率是服务器并发处理能力的量化描述，单位是 reqs/s，指的是某个并发用户数下单位时间内处理的请求数。<br>某个并发用户数下单位时间内能处理的最大的请求数，称之为最大吞吐率。</p>
<blockquote>
<p>有人把 RPS 说等效于 QPS。其实可以看作同一个统计方式，只是叫法不同而已。RPS/QPS，可以使用 apche ab 工具进行测量。</p>
</blockquote>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>QPS、TPS、PV、UV、GMV、IP、RPS</tag>
      </tags>
  </entry>
  <entry>
    <title>Android SharedPreferences使用</title>
    <url>/2019/08/13/Android-SharedPreferences%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Sharedpreferences是Android平台上一个轻量级的存储类，用来保存应用程序的各种配置信息，其本质是一个以“键-值”对的方式保存数据的xml文件，其文件保存在<code>/data/data/${pkg}/shared_prefs</code>目录下。在全局变量上看，其优点是不会产生Application 、 静态变量的OOM（out of memory）和空指针问题，其缺点是效率没有上面的两种方法高。<strong>SharedPreferences实现是线程安全的，但不是进程安全的。</strong></p>
<a id="more"></a>
<h1 id="获取SharedPreferences"><a href="#获取SharedPreferences" class="headerlink" title="获取SharedPreferences"></a>获取SharedPreferences</h1><p>使用 SharedPreferences 来存储数据，首先需要获取到 SharedPreferences 对象。Android中主要提供了两种方法用于得到 SharedPreferences 对象。</p>
<h2 id="Context-类中的-getSharedPreferences-方法："><a href="#Context-类中的-getSharedPreferences-方法：" class="headerlink" title="Context 类中的 getSharedPreferences()方法："></a>Context 类中的 getSharedPreferences()方法：</h2><p>此方法接收两个参数，第一个参数用于指定 SharedPreferences 文件的名称，如果指定的文件不存在则会创建一个，第二个参数用于指定操作模式，主要有以下几种模式可以选择。<code>MODE_PRIVATE</code> 是默认的操作模式，和直接传入 0 效果是相同的。<br><code>MODE_WORLD_READABLE</code> 和 <code>MODE_WORLD_WRITEABLE</code> 这两种模式已在 Android 4.2 版本中被废弃。</p>
<ul>
<li><strong>Context.MODE_PRIVATE：</strong>为默认操作模式,代表该文件是私有数据,只能被应用本身访问,在该模式下,写入的内容会覆盖原文件的内容；</li>
<li><strong>Context.MODE_APPEND：</strong>模式会检查文件是否存在,存在就往文件追加内容,否则就创建新文件；</li>
<li><strong>Context.MODE_WORLD_READABLE：</strong>表示当前文件可以被其他应用读取；</li>
<li><strong>Context.MODE_WORLD_WRITEABLE：</strong>表示当前文件可以被其他应用写入；</li>
</ul>
<h2 id="PreferenceManager-类中的-getDefaultSharedPreferences-方法："><a href="#PreferenceManager-类中的-getDefaultSharedPreferences-方法：" class="headerlink" title="PreferenceManager 类中的 getDefaultSharedPreferences()方法："></a>PreferenceManager 类中的 getDefaultSharedPreferences()方法：</h2><p>这是一个静态方法，它接收一个 Context 参数，并自动使用当前应用程序的包名作为前缀来命名 SharedPreferences 文件。<del>[已废弃]</del></p>
<h1 id="SharedPreferences的使用"><a href="#SharedPreferences的使用" class="headerlink" title="SharedPreferences的使用"></a>SharedPreferences的使用</h1><p>SharedPreferences对象本身只能获取数据而不支持存储和修改,存储修改是通过SharedPreferences.edit()获取的内部接口Editor对象实现。</p>
<h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences(<span class="string">"user"</span>, Context.MODE_PRIVATE);</span><br><span class="line">SharedPreferences.Editor editor = sp.edit();</span><br><span class="line">editor.putBoolean(<span class="string">"isBoy"</span>, <span class="keyword">true</span>);</span><br><span class="line">editor.putString(<span class="string">"username"</span>, <span class="string">"xiaohong"</span>);</span><br><span class="line">editor.putInt(<span class="string">"wage"</span>, <span class="number">6000</span>);</span><br><span class="line">editor.commit();</span><br></pre></td></tr></table></figure>
<h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences(<span class="string">"user"</span>, Context.MODE_PRIVATE);</span><br><span class="line">String username = sp.getString(<span class="string">"username"</span>, <span class="string">""</span>);</span><br><span class="line"><span class="keyword">boolean</span> isBoy = sp.getBoolean(<span class="string">"isBoy"</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">int</span> wage = sp.getInt(<span class="string">"wage"</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<h2 id="删除指定数据"><a href="#删除指定数据" class="headerlink" title="删除指定数据"></a>删除指定数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences(<span class="string">"user"</span>, Context.MODE_PRIVATE);</span><br><span class="line">SharedPreferences.Editor editor = sp.edit();</span><br><span class="line">editor.remove(<span class="string">"wage"</span>);</span><br><span class="line">editor.commit();</span><br></pre></td></tr></table></figure>
<h2 id="清空数据"><a href="#清空数据" class="headerlink" title="清空数据"></a>清空数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences(<span class="string">"user"</span>, Context.MODE_PRIVATE);</span><br><span class="line">SharedPreferences.Editor editor = sp.edit();</span><br><span class="line">editor.clear();</span><br><span class="line">editor.commit();</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：如果在 Fragment 中使用SharedPreferences 时，需要放在onAttach(Activity activity)里面进行SharedPreferences的初始化，否则会报空指针 即 getActivity()会可能返回null ！</p>
<h2 id="读写其他应用的SharedPreferences"><a href="#读写其他应用的SharedPreferences" class="headerlink" title="读写其他应用的SharedPreferences"></a>读写其他应用的SharedPreferences</h2><p> 1. 在创建SharedPreferences时，指定MODE_WORLD_READABLE模式，表明该SharedPreferences数据可以被其他程序读取；<br> 2. 创建其他应用程序对应的Context；<br> 3. 使用其他程序的Context获取对应的SharedPreferences；<br> 4. 如果是写入数据，使用Editor接口即可，所有其他操作均和前面一致；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//这里的com.example.mpreferences 就是应用的包名</span></span><br><span class="line">  Context mcontext = createPackageContext(<span class="string">"com.example.mpreferences"</span>, CONTEXT_IGNORE_SECURITY);</span><br><span class="line">  SharedPreferences msharedpreferences = mcontext.getSharedPreferences(<span class="string">"name_preference"</span>, MODE_PRIVATE);</span><br><span class="line">  <span class="keyword">int</span> count = msharedpreferences.getInt(<span class="string">"count"</span>, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="SharedPreferences-Editor对象中commit和apply的区别"><a href="#SharedPreferences-Editor对象中commit和apply的区别" class="headerlink" title="SharedPreferences.Editor对象中commit和apply的区别"></a>SharedPreferences.Editor对象中commit和apply的区别</h1><ul>
<li>apply没有返回值而commit返回boolean表明修改是否提交成功 ；</li>
<li>commit是把内容同步提交到硬盘的，而apply先立即把修改提交到内存，然后开启一个异步的线程提交到硬盘，并且如果提交失败，你不会收到任何通知。</li>
<li>所有commit提交是同步过程，效率会比apply异步提交的速度慢，在不关心提交结果是否成功的情况下，优先考虑apply方法。</li>
<li>apply是使用异步线程写入磁盘，commit是同步写入磁盘。所以我们在主线程使用的commit的时候，需要考虑是否会出现ANR问题。（不适合大量数据存储）</li>
</ul>
<h1 id="查看Sharedpreferencesd-保存数据的xml文件"><a href="#查看Sharedpreferencesd-保存数据的xml文件" class="headerlink" title="查看Sharedpreferencesd 保存数据的xml文件"></a>查看Sharedpreferencesd 保存数据的xml文件</h1><p>模拟器下直接打开打开AS，找到窗口右下角的<code>Device File Explorer</code>进行查看：</p>
<p><img src="file.png" alt></p>
<blockquote>
<p>真机环境下需要root。</p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://juejin.im/post/5adc444df265da0b886d00bc" target="_blank" rel="noopener">https://juejin.im/post/5adc444df265da0b886d00bc</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS之NSUserDefaults</title>
    <url>/2019/08/12/IOS%E4%B9%8BNSUserDefaults/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p><code>NSUserDefaults</code>类提供了一个与默认系统交互的编程接口。默认系统允许应用程序自定义其行为以匹配用户的首选项。例如，您可以允许用户指定其首选的测量单位或媒体播放速度。应用程序通过为用户默认数据库中的一组参数指定值来存储这些首选项。这些参数被称为默认值，因为它们通常用于确定应用程序启动时的默认状态或默认情况下的行为方式。在运行时，使用<code>NSUserDefaults</code>对象从用户的默认数据库中读取应用程序使用的默认值。nsUserDefaults缓存信息，以避免每次需要默认值时都必须打开用户的默认数据库。当您设置默认值时，它会在您的进程内同步更改，并异步更改为持久存储和其他进程。</p>
<a id="more"></a>
<p><img src="overview.png" alt></p>
<p>如果是一些大型数据，毫无疑问是用一些SQLite或者FMDB等来存储大量数据。但是又一些轻量级别的数据，例如用户的信息、用户的偏好设置，使用该类是最为简单方便的。它通过键值对的方式来来存储一系列的偏好设置来把对象存储/读取相应的<code>plist</code>文件中。那么既然是一个<code>plist</code>，则NSUserDefaults能够存储的数据类型有<a href="https://developer.apple.com/documentation/foundation/nsdata?language=objc" target="_blank" rel="noopener"><code>NSData</code></a>, <a href="https://developer.apple.com/documentation/foundation/nsstring?language=objc" target="_blank" rel="noopener"><code>NSString</code></a>, <a href="https://developer.apple.com/documentation/foundation/nsnumber?language=objc" target="_blank" rel="noopener"><code>NSNumber</code></a>, <a href="https://developer.apple.com/documentation/foundation/nsdate?language=objc" target="_blank" rel="noopener"><code>NSDate</code></a>, <a href="https://developer.apple.com/documentation/foundation/nsarray?language=objc" target="_blank" rel="noopener"><code>NSArray</code></a>, 和<a href="https://developer.apple.com/documentation/foundation/nsdictionary?language=objc" target="_blank" rel="noopener"><code>NSDictionary</code></a>。如果需要存储某些不支持的类型，可以先将其归档为NSData类型再进行存储。</p>
<p><strong>NSUserDefaults</strong>是一个单例类，在整个程序运行过程中只有一个实例对象，同时也是线程安全的。获取方式：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSUserDefaults</span> *defaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br></pre></td></tr></table></figure>
<h1 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h1><p>存储一些默认支持的数据类型：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储数据</span></span><br><span class="line">[defaults setObject:<span class="string">@"hackycy"</span> forKey:<span class="string">@"username"</span>];</span><br><span class="line">[defaults setInteger:<span class="number">22</span> forKey:<span class="string">@"age"</span>];</span><br><span class="line">[defaults setBool:<span class="literal">YES</span> forKey:<span class="string">@"isBoy"</span>];</span><br><span class="line">[defaults setFloat:<span class="number">1.73</span> forKey:<span class="string">@"mmForHeight"</span>];</span><br><span class="line">[defaults setURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://hackycy.github.io"</span>] forKey:<span class="string">@"blog"</span>];</span><br><span class="line">[defaults setDouble:<span class="number">7500</span> forKey:<span class="string">@"wage"</span>];</span><br></pre></td></tr></table></figure>
<p><strong>更多方法</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Setting Default Values</span></span><br><span class="line">- setObject:forKey:</span><br><span class="line"><span class="comment">//Sets the value of the specified default key.</span></span><br><span class="line"></span><br><span class="line">- setFloat:forKey:</span><br><span class="line"><span class="comment">//Sets the value of the specified default key to the specified float value.</span></span><br><span class="line"></span><br><span class="line">- setDouble:forKey:</span><br><span class="line"><span class="comment">//Sets the value of the specified default key to the double value.</span></span><br><span class="line"></span><br><span class="line">- setInteger:forKey:</span><br><span class="line"><span class="comment">//Sets the value of the specified default key to the specified integer value.</span></span><br><span class="line"></span><br><span class="line">- setBool:forKey:</span><br><span class="line"><span class="comment">//Sets the value of the specified default key to the specified Boolean value.</span></span><br><span class="line"></span><br><span class="line">- setURL:forKey:</span><br><span class="line"><span class="comment">//Sets the value of the specified default key to the specified URL.</span></span><br></pre></td></tr></table></figure>
<h1 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h1><p>从上面存储的数据中读取并打印：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取数据   </span></span><br><span class="line"><span class="built_in">NSString</span> *username = [defaults stringForKey:<span class="string">@"username"</span>];</span><br><span class="line"><span class="built_in">NSInteger</span> age = [defaults integerForKey:<span class="string">@"age"</span>];</span><br><span class="line"><span class="built_in">BOOL</span> isBoy = [defaults boolForKey:<span class="string">@"isBoy"</span>];</span><br><span class="line"><span class="keyword">float</span> mmForHeight = [defaults floatForKey:<span class="string">@"mmForHeight"</span>];</span><br><span class="line"><span class="built_in">NSURL</span> *blog = [defaults URLForKey:<span class="string">@"blog"</span>];</span><br><span class="line"><span class="keyword">double</span> wage = [defaults doubleForKey:<span class="string">@"wage"</span>];</span><br><span class="line"><span class="built_in">NSData</span> *imageData = [defaults objectForKey:<span class="string">@"avatar"</span>];</span><br><span class="line"><span class="keyword">self</span>.imageView.image = [<span class="built_in">UIImage</span> imageWithData:imageData];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"username : %@, age : %lu, isBoy : %@, mmForHeight : %f, blog : %@, wage : %f"</span>, username, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)age, isBoy ? <span class="string">@"boy"</span> : <span class="string">@"girl"</span>, mmForHeight, blog, wage);</span><br></pre></td></tr></table></figure>
<p><strong>更多方法</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Getting Default Values</span></span><br><span class="line">- objectForKey:</span><br><span class="line"><span class="comment">//Returns the object associated with the specified key.</span></span><br><span class="line"></span><br><span class="line">- URLForKey:</span><br><span class="line"><span class="comment">//Returns the URL associated with the specified key.</span></span><br><span class="line"></span><br><span class="line">- arrayForKey:</span><br><span class="line"><span class="comment">//Returns the array associated with the specified key.</span></span><br><span class="line"></span><br><span class="line">- dictionaryForKey:</span><br><span class="line"><span class="comment">//Returns the dictionary object associated with the specified key.</span></span><br><span class="line"></span><br><span class="line">- stringForKey:</span><br><span class="line"><span class="comment">//Returns the string associated with the specified key.</span></span><br><span class="line"></span><br><span class="line">- stringArrayForKey:</span><br><span class="line"><span class="comment">//Returns the array of strings associated with the specified key.</span></span><br><span class="line"></span><br><span class="line">- dataForKey:</span><br><span class="line"><span class="comment">//Returns the data object associated with the specified key.</span></span><br><span class="line"></span><br><span class="line">- boolForKey:</span><br><span class="line"><span class="comment">//Returns the Boolean value associated with the specified key.</span></span><br><span class="line"></span><br><span class="line">- integerForKey:</span><br><span class="line"><span class="comment">//Returns the integer value associated with the specified key.</span></span><br><span class="line"></span><br><span class="line">- floatForKey:</span><br><span class="line"><span class="comment">//Returns the float value associated with the specified key.</span></span><br><span class="line"></span><br><span class="line">- doubleForKey:</span><br><span class="line"><span class="comment">//Returns the double value associated with the specified key.</span></span><br><span class="line"></span><br><span class="line">- dictionaryRepresentation</span><br><span class="line"><span class="comment">//Returns a dictionary that contains a union of all key-value pairs in the domains in the search list.</span></span><br></pre></td></tr></table></figure>
<h1 id="registerDefaults"><a href="#registerDefaults" class="headerlink" title="registerDefaults"></a>registerDefaults</h1><p>先让我们来看一种情况：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> isNeedShowGuide = [defaults boolForKey:<span class="string">@"isNeedShowGuide"</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, isNeedShowGuide ? <span class="string">@"YES"</span> : <span class="string">@"NO"</span>);</span><br></pre></td></tr></table></figure>
<p>LOG：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span><span class="number">-08</span><span class="number">-13</span> <span class="number">11</span>:<span class="number">54</span>:<span class="number">29.402946</span>+<span class="number">0800</span> nsuserdefaultdemo[<span class="number">4616</span>:<span class="number">174076</span>] <span class="literal">NO</span></span><br></pre></td></tr></table></figure>
<p>当我们APP首次启动时需要进入一个引导页，通过该<code>isNeedShowGuide</code>来判断是否进入引导页，而首次进入是需要YES的情况下进入引导页，后续将值设置为NO。但是通过打印该值时获取到的不是我们想要的值，因为该值如果设置过才会运行正确。但是没有设置过该值也没有该默认值则默认返回的是NO。</p>
<p>那么这里就需要用到<code>registerDefaults</code>方法了：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] registerDefaults:@&#123;</span><br><span class="line">    <span class="string">@"isNeedShowGuide"</span> : @YES</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>我们在获取<code>isNeedShowGuide</code>之前先调用了<code>registerDefaults</code>方法设置了它的默认值，后面获取的时候即使没有再设置值也会获取到默认设置的值，就不会出现上述获取默认值尴尬的情况了。</p>
<p>当然我们也可以先默认保存一个plist文件在项目目录中来设置默认值来方便读取，来减少代码量：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *plistUrl = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"DefaultPreferences"</span> withExtension:<span class="string">@"plist"</span>];</span><br><span class="line"><span class="built_in">NSDictionary</span> *defaultPreferences = [<span class="built_in">NSDictionary</span> dictionaryWithContentsOfURL:plistUrl];</span><br><span class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] registerDefaults:defaultPreferences];</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><code>registerDefaults</code> 设置的默认值是不会持久化存储的，也就是说我们每次启动 APP 的时候，都需要这样设置一遍。所以<code>application:didFinishLaunchingWithOptions</code>是最合适的地方。</p>
<h1 id="NSUserDefaults域"><a href="#NSUserDefaults域" class="headerlink" title="NSUserDefaults域"></a>NSUserDefaults域</h1><p>NSUserDefaults 还有一个 Domain 的概念，当我们调用 <code>[NSUserDefaults standardUserDefaults]</code>方法时，就会初始化 <code>NSUserDefaults</code>， 并且它默认会包含 5 个 Domain， 分别是：</p>
<ul>
<li><strong>NSArgumentDomain</strong>：最高优先权</li>
<li><strong>Application</strong>：它存储着你app通过<code>NSUserDefaults set...forKey</code>添加的设置</li>
<li><strong>NSGlobalDomain</strong>：存储着系统的设置</li>
<li><strong>Languages</strong>：包括地区、日期等</li>
<li><strong>NSRegistrationDomain</strong>：仅有较低的优先权，只有在应用域没有找到值时才从注册域去寻找。</li>
</ul>
<p>来解释一下，比如调用了下面的一个方法：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setBool:<span class="literal">NO</span> forKey:<span class="string">@"isNeedShowGuide"</span>];</span><br></pre></td></tr></table></figure>
<p>这句话会将设置的key和值存储在了<code>Application</code>域中，但 <code>NSUserDefaults</code> 还包括了其他 4 个域，如果我们每次调用读取数据的方法的时候，例如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] boolForKey:<span class="string">@"isNeedShowGuide"</span>]</span><br></pre></td></tr></table></figure>
<p>那么其实底层的就会进行一次搜索，搜索顺序为：</p>
<p><code>NSArgumentDomain</code> -&gt; <code>Application</code> -&gt; <code>NSGlobalDomain</code> -&gt; <code>Languages</code> -&gt; <code>NSRegistrationDomain</code></p>
<p>而之前举的例子来说，我们并没有通过<code>setBool:forkey:</code>方法来设置该值，所以<code>Application</code>域中并没有该值，但是我们使用了<code>registerDefaults</code>将它设置到了<code>NSRegistrationDomain</code>域中。</p>
<p>所以按照<code>NSUserDefaults</code> 的默认搜索顺序，就会找到最后 <code>NSRegistrationDomain</code> 域中的那个 <code>isNeedShowGuide</code>， 也就是我们所谓的默认值 YES 了。</p>
<h1 id="存储路径"><a href="#存储路径" class="headerlink" title="存储路径"></a>存储路径</h1><p>NSUserDefaults 数据存放在沙盒 <code>Library/Preferences/</code> 目录下，一个以你包名命名的<code>.plist</code>文件。</p>
<p>通过代码获取路径后：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *path = <span class="built_in">NSHomeDirectory</span>();</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"path : %@"</span>, path);</span><br></pre></td></tr></table></figure>
<p>将路径复制到Finder中，前往：</p>
<p><img src="cunchu.png" alt></p>
<h1 id="关于synchronize方法"><a href="#关于synchronize方法" class="headerlink" title="关于synchronize方法"></a>关于synchronize方法</h1><p>该方法是为了强制存储，但其实是没有必要的，该方法系统会默认调用。</p>
<blockquote>
<p>Waits for any pending asynchronous updates to the defaults database and returns; this method is unnecessary and shouldn’t be used.</p>
<p>等待默认数据库的任何挂起的异步更新并返回; 此方法是不必要的，不应使用。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://developer.apple.com/documentation/foundation/nsuserdefaults?language=objc" target="_blank" rel="noopener">https://developer.apple.com/documentation/foundation/nsuserdefaults?language=objc</a></p>
<p><a href="http://swiftcafe.io/post/nsuserdefaults" target="_blank" rel="noopener">http://swiftcafe.io/post/nsuserdefaults</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>Android TextView更换字体</title>
    <url>/2019/08/07/Android-TextView%E6%9B%B4%E6%8D%A2%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在开发UI时有时会涉及到TextView设置字体样式，TextView中在xml下仅可以设置自带的字体样式：</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:typeface="monospace"</span><br></pre></td></tr></table></figure>
<p>自带有四种文字类型，分别是：</p>
<ul>
<li>monospace</li>
<li>normal</li>
<li>sans</li>
<li>serif</li>
</ul>
<p>看看运行效果后的样式：</p>
<p><img src="systtf.png" alt></p>
<p>有时候UI需要设定特定字体的时候，我们可以给在代码中TextView设置特定的字体。</p>
<p>比如我们随便下载一些字体：<a href="https://www.sentyfont.com/download.htm" target="_blank" rel="noopener">https://www.sentyfont.com/download.htm</a></p>
<p>放在Assets目录下：</p>
<p><img src="demo1.png" alt></p>
<blockquote>
<p>注意留意目录结构，demo将字体文件放在了fonts目录下</p>
</blockquote>
<p>然后在代码中设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TextView tv = findViewById(R.id.tv);</span><br><span class="line">Typeface tf = Typeface.createFromAsset(<span class="keyword">this</span>.getAssets(), <span class="string">"fonts/HanyiSentyVimalkirti.ttf"</span>);</span><br><span class="line">tv.setTypeface(tf);</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="demo2.png" alt></p>
<blockquote>
<p>字体文件otf等都支持。</p>
<p>字体包过大可以将使用到的字提取出来，不用将所有字体都打包成一个ttf。</p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 软键盘imeOptions事件响应</title>
    <url>/2019/07/31/Android-%E8%BD%AF%E9%94%AE%E7%9B%98imeOptions%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在一些登陆，搜索的过程中，输入框在用户输入完后点击软键盘的回车、搜索等的按钮即可完成登陆或者搜索的功能，不必要再让用户再次点击页面上的登陆或者搜索按钮才能够进行操作。</p>
<a id="more"></a>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>用图来说话吧，下图是一个高德地图的一个搜索框：</p>
<p><img src="demo.png" alt></p>
<p>你们会发现并没有搜索按钮，而是在键盘的右下角有一个小图标(放大镜图标或者搜索字样)，这代表的是搜索的动作，点击后就可以进行搜索。</p>
<p>而在一个浏览器下的一个输入框时，软键盘也会有相对应的变化，如下图：</p>
<p><img src="demo2.png" alt></p>
<p>填写网址后点击软键盘的转到即可到达输入的网页。</p>
<h1 id="imeOptions"><a href="#imeOptions" class="headerlink" title="imeOptions"></a>imeOptions</h1><p>上面概述上的两个功能使得EditText拥有图标变化的能力就是<code>android:imeOptions</code>属性。</p>
<p>而EditorInfo类源码中一共提供了以下属性供我们选择</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IME_ACTION_DONE = <span class="number">6</span>; <span class="comment">//对应actionDone</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IME_ACTION_GO = <span class="number">2</span>;  <span class="comment">//对应actionGo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IME_ACTION_NEXT = <span class="number">5</span>;  <span class="comment">//对应actionNext</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IME_ACTION_NONE = <span class="number">1</span>;  <span class="comment">//对应actionNone</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IME_ACTION_PREVIOUS = <span class="number">7</span>;  <span class="comment">//对应actionPrevious</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IME_ACTION_SEARCH = <span class="number">3</span>;  <span class="comment">//对应actionSearch</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IME_ACTION_SEND = <span class="number">4</span>;  <span class="comment">//对应actionSearch</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IME_ACTION_UNSPECIFIED = <span class="number">0</span>;  <span class="comment">//对应actionUnspecified</span></span><br></pre></td></tr></table></figure>
<p>我们在xml中编写对应的EditText，来直接演示下理解它们的实用意义：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/actionGo"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:imeOptions</span>=<span class="string">"actionGo"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:hint</span>=<span class="string">"actionGo"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/actionSearch"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:imeOptions</span>=<span class="string">"actionSearch"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:hint</span>=<span class="string">"actionSearch"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/actionNext"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:imeOptions</span>=<span class="string">"actionNext"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:hint</span>=<span class="string">"actionNext"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/actionNone"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:imeOptions</span>=<span class="string">"actionNone"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:hint</span>=<span class="string">"actionNone"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/actionDone"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:imeOptions</span>=<span class="string">"actionDone"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:hint</span>=<span class="string">"actionDone"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/actionSend"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:imeOptions</span>=<span class="string">"actionSend"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:hint</span>=<span class="string">"actionSend"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/actionPrevious"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:imeOptions</span>=<span class="string">"actionPrevious"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:hint</span>=<span class="string">"actionPrevious"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/actionUnspecified"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:imeOptions</span>=<span class="string">"actionUnspecified"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:hint</span>=<span class="string">"actionUnspecified"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="demo3.png" alt></p>
<blockquote>
<p><strong>注意：该属性必须配置<code>android:singleLine=&quot;true&quot;</code>属性或者配合<code>android:maxLines=&quot;1&quot;</code>与<code>android:inputType=&quot;number&quot;</code>结合使用。缺一不可。即便singleLine已经被废弃，又或者单纯使用maxLines是无效的。</strong></p>
</blockquote>
<p>对EditText指定不同的imeOptions之后，就需要实现OnEditorActionListener 中的onEditorAction()方法，然后根据不同的动作执行进行响应。 </p>
<p>对于actionDone、actionNext和actionPrevious，系统都自己进行了部分处理。 </p>
<ul>
<li>actionDone：隐藏输入法 </li>
<li>actionNext：跳到下一个EditText </li>
<li>actionPrevious：跳到上一个EditText</li>
</ul>
<p>我们使用案例中实现以一个搜索的例子实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText actionSearch;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        actionSearch = findViewById(R.id.actionSearch);</span><br><span class="line"></span><br><span class="line">        actionSearch.setOnEditorActionListener(<span class="keyword">new</span> TextView.OnEditorActionListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onEditorAction</span><span class="params">(TextView textView, <span class="keyword">int</span> actionId, KeyEvent keyEvent)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(actionId == EditorInfo.IME_ACTION_SEARCH) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(actionSearch.getText().toString().isEmpty()) &#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"内容不能为空"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"您搜索的内容是："</span> + actionSearch.getText().toString(), Toast.LENGTH_SHORT).show();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//只负责搜索事件处理，其他处理交回到系统的默认处理</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="demo4.png" alt></p>
<blockquote>
<p>部分第三方的输入法，对EditorInfo支持的不一样，有的功能实现了，但是对应的图标没有修改过来，有的干脆功能就没有实现。</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>actionDone</code>  - 完成 - 对应 <code>EditorInfo.IME_ACTION_DONE</code><br><code>actionGo</code> - 前进 - 对应 <code>EditorInfo.IME_ACTION_GO</code><br><code>actionNext</code> - 下一项 - 对应 <code>EditorInfo.IME_ACTION_NEXT</code><br><code>actionNone</code> - 无动作 - 对应 <code>EditorInfo.IME_ACTION_NONE</code><br><code>actionPrevious</code> - 上一项 - 对应 <code>EditorInfo.IME_ACTION_PREVIOUS</code><br><code>actionSearch</code> - 搜索 - 对应 <code>EditorInfo.IME_ACTION_SEARCH</code><br><code>actionUnspecified</code> - 未指定 - <code>对应 EditorInfo.IME_ACTION_UNSPECIFIED</code><br><code>actionSend</code> - 发送 - 对应 <code>EditorInfo.IME_ACTION_SEND</code></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/liuweiballack/article/details/46708697" target="_blank" rel="noopener">https://blog.csdn.net/liuweiballack/article/details/46708697</a></p>
<p><a href="https://www.jianshu.com/p/d5c419bb4e19" target="_blank" rel="noopener">https://www.jianshu.com/p/d5c419bb4e19</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>EditText</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS之UITableView使用</title>
    <url>/2019/07/18/IOS%E4%B9%8BUITableView%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>iOS的<code>UITableView</code>显示单列垂直滚动内容。表格中的每一行都包含一段应用内容。例如，“联系人”应用程序在单独的行中显示每个联系人的姓名，“设置”应用程序的主页面显示可用的设置组。您可以将表配置为显示单个长行列表，也可以将相关行分组为多个部分，以便更轻松地导航内容。</p>
<a id="more"></a>
<p><img src="tableviewpreview.png" alt></p>
<h1 id="UITableView"><a href="#UITableView" class="headerlink" title="UITableView"></a><a href="https://developer.apple.com/documentation/uikit/uitableview" target="_blank" rel="noopener">UITableView</a></h1><p><code>UITableView</code>管理表的基本外观，提供显示实际内容的单元格（对象）。标准单元格配置显示文本和图像的简单组合，但您可以定义显示所需内容的自定义单元格。您还可以提供页眉和页脚视图，以便为单元格组提供其他信息。</p>
<p><code>UITableView</code>有两种风格：<code>UITableViewStylePlain</code>和<code>UITableViewStyleGrouped</code>。这两者操作起来其实并没有本质区别，只是后者按分组样式显示前者按照普通样式显示而已。大家先看一下两者的应用：</p>
<p><img src="groupandnonggroup.png" alt></p>
<p><strong>UITableView的层次结构</strong></p>
<p><img src="tableviewintro.png" alt></p>
<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><h3 id="创建表视图"><a href="#创建表视图" class="headerlink" title="创建表视图"></a>创建表视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">init</span>(frame: <span class="type">CGRect</span>, style: <span class="type">UITableView</span>.<span class="type">Style</span>)</span><br><span class="line"><span class="comment">//初始化并返回具有给定框架和样式的表视图对象。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">init</span>?(coder: <span class="type">NSCoder</span>)</span><br></pre></td></tr></table></figure>
<h3 id="提供表格的数据和单元格"><a href="#提供表格的数据和单元格" class="headerlink" title="提供表格的数据和单元格"></a>提供表格的数据和单元格</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataSource: <span class="type">UITableViewDataSource?</span></span><br><span class="line"><span class="comment">//充当表视图数据源的对象。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prefetchDataSource: <span class="type">UITableViewDataSourcePrefetching?</span></span><br><span class="line"><span class="comment">//充当表视图的预取数据源的对象，接收即将到来的单元数据要求的通知。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">UITableViewDataSource</span></span></span><br><span class="line"><span class="class">//您用于管理数据并为表视图提供单元格的对象采用的方法。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">protocol</span> <span class="title">UITableViewDataSourcePrefetching</span></span></span><br><span class="line"><span class="class">//一种协议，提供表视图数据要求的预先警告，允许您尽早启动可能长时间运行的数据操作。</span></span><br></pre></td></tr></table></figure>
<h3 id="重用表视图单元格"><a href="#重用表视图单元格" class="headerlink" title="重用表视图单元格"></a>重用表视图单元格</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">register</span><span class="params">(UINib?, forCellReuseIdentifier: String)</span></span></span><br><span class="line"><span class="comment">//注册包含具有指定标识符下的表视图的单元格的nib对象。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">register</span><span class="params">(AnyClass?, forCellReuseIdentifier: String)</span></span></span><br><span class="line"><span class="comment">//注册用于创建新表格单元格的类。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dequeueReusableCell</span><span class="params">(withIdentifier: String, <span class="keyword">for</span>: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span></span><br><span class="line"><span class="comment">//返回指定重用标识符的可重用表视图单元对象，并将其添加到表中。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dequeueReusableCell</span><span class="params">(withIdentifier: String)</span></span> -&gt; <span class="type">UITableViewCell?</span></span><br><span class="line"><span class="comment">//返回按其标识符定位的可重用表视图单元对象。</span></span><br></pre></td></tr></table></figure>
<h3 id="重用部分页眉和页脚"><a href="#重用部分页眉和页脚" class="headerlink" title="重用部分页眉和页脚"></a>重用部分页眉和页脚</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">register</span><span class="params">(UINib?, forHeaderFooterViewReuseIdentifier: String)</span></span></span><br><span class="line"><span class="comment">//使用指定标识符下的表视图注册包含页眉或页脚的nib对象。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">register</span><span class="params">(AnyClass?, forHeaderFooterViewReuseIdentifier: String)</span></span></span><br><span class="line"><span class="comment">//注册一个类，用于创建新的表头或页脚视图。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dequeueReusableHeaderFooterView</span><span class="params">(withIdentifier: String)</span></span> -&gt; <span class="type">UITableViewHeaderFooterView?</span></span><br><span class="line"><span class="comment">//返回由其标识符定位的可重用页眉或页脚视图。</span></span><br></pre></td></tr></table></figure>
<h3 id="管理与表的交互"><a href="#管理与表的交互" class="headerlink" title="管理与表的交互"></a>管理与表的交互</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> delegate: <span class="type">UITableViewDelegate?</span></span><br><span class="line"><span class="comment">//充当表视图委托的对象。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">UITableViewDelegate</span></span></span><br><span class="line"><span class="class">//管理选择，配置节页眉和页脚，删除和重新排序单元格以及在表格视图中执行其他操作的方法。</span></span><br></pre></td></tr></table></figure>
<h3 id="配置表的外观"><a href="#配置表的外观" class="headerlink" title="配置表的外观"></a>配置表的外观</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> style: <span class="type">UITableView</span>.<span class="type">Style</span></span><br><span class="line"><span class="comment">//表格视图的样式。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UITableView</span>.<span class="title">Style</span></span></span><br><span class="line"><span class="class">//表视图样式的常量。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">tableHeaderView</span>: <span class="title">UIView</span>?</span></span><br><span class="line"><span class="class">//显示在表格内容上方的视图。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">tableFooterView</span>: <span class="title">UIView</span>?</span></span><br><span class="line"><span class="class">//显示在表格内容下方的视图。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">backgroundView</span>: <span class="title">UIView</span>?</span></span><br><span class="line"><span class="class">//表视图的背景视图。</span></span><br></pre></td></tr></table></figure>
<h3 id="配置单元格高度和布局"><a href="#配置单元格高度和布局" class="headerlink" title="配置单元格高度和布局"></a>配置单元格高度和布局</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rowHeight: <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//表视图中每行的默认高度（以磅为单位）。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> estimatedRowHeight: <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//表视图中行的估计高度。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cellLayoutMarginsFollowReadableWidth: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示单元格边距是否从可读内容指南的宽度派生。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> insetsContentViewsToSafeArea: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示表视图是否将其内容视图重新定位在当前安全区域内。</span></span><br></pre></td></tr></table></figure>
<h3 id="配置页眉和页脚高度"><a href="#配置页眉和页脚高度" class="headerlink" title="配置页眉和页脚高度"></a>配置页眉和页脚高度</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sectionHeaderHeight: <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//表视图中节标题的高度。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sectionFooterHeight: <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//表格视图中部分页脚的高度。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> estimatedSectionHeaderHeight: <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//表视图中节标题的估计高度。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> estimatedSectionFooterHeight: <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//表格视图中部分页脚的估计高度。</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义分隔符外观"><a href="#自定义分隔符外观" class="headerlink" title="自定义分隔符外观"></a>自定义分隔符外观</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> separatorStyle: <span class="type">UITableViewCell</span>.<span class="type">SeparatorStyle</span></span><br><span class="line"><span class="comment">//用作分隔符的表格单元格的样式。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCell</span>.<span class="title">SeparatorStyle</span></span></span><br><span class="line"><span class="class">//用作分隔符的单元格样式。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">separatorColor</span>: <span class="title">UIColor</span>?</span></span><br><span class="line"><span class="class">//表视图中分隔符行的颜色。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">separatorEffect</span>: <span class="title">UIVisualEffect</span>?</span></span><br><span class="line"><span class="class">//应用于表分隔符的效果。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">separatorInset</span>: <span class="title">UIEdgeInsets</span></span></span><br><span class="line"><span class="class">//单元格分隔符的默认插入。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">separatorInsetReference</span>: <span class="title">UITableView</span>.<span class="title">SeparatorInsetReference</span></span></span><br><span class="line"><span class="class">//应该如何解释分隔符插入值的指示符。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">enum</span> <span class="title">UITableView</span>.<span class="title">SeparatorInsetReference</span></span></span><br><span class="line"><span class="class">//指示如何解释表视图的分隔符插入值的常量。</span></span><br></pre></td></tr></table></figure>
<h3 id="获取行数和节数"><a href="#获取行数和节数" class="headerlink" title="获取行数和节数"></a>获取行数和节数</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfRows</span><span class="params">(inSection: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="comment">//返回指定节中的行数（表格单元格）。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numberOfSections: <span class="type">Int</span></span><br><span class="line"><span class="comment">//表视图中的节数。</span></span><br></pre></td></tr></table></figure>
<h3 id="获取单元格和基于节的视图"><a href="#获取单元格和基于节的视图" class="headerlink" title="获取单元格和基于节的视图"></a>获取单元格和基于节的视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cellForRow</span><span class="params">(at: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell?</span></span><br><span class="line"><span class="comment">//返回指定索引路径的表格单元格。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">headerView</span><span class="params">(forSection: Int)</span></span> -&gt; <span class="type">UITableViewHeaderFooterView?</span></span><br><span class="line"><span class="comment">//返回与指定节相关联的标题视图。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">footerView</span><span class="params">(forSection: Int)</span></span> -&gt; <span class="type">UITableViewHeaderFooterView?</span></span><br><span class="line"><span class="comment">//返回与指定节相关联的页脚视图。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexPath</span><span class="params">(<span class="keyword">for</span>: UITableViewCell)</span></span> -&gt; <span class="type">IndexPath?</span></span><br><span class="line"><span class="comment">//返回表示给定表视图单元格的行和部分的索引路径。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexPathForRow</span><span class="params">(at: CGPoint)</span></span> -&gt; <span class="type">IndexPath?</span></span><br><span class="line"><span class="comment">//返回标识给定点处的行和节的索引路径。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexPathsForRows</span><span class="params">(<span class="keyword">in</span>: CGRect)</span></span> -&gt; [<span class="type">IndexPath</span>]?</span><br><span class="line"><span class="comment">//索引路径数组，每个索引路径表示由给定矩形包围的行。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> visibleCells: [<span class="type">UITableViewCell</span>]</span><br><span class="line"><span class="comment">//表视图中可见的表格单元格。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexPathsForVisibleRows: [<span class="type">IndexPath</span>]?</span><br><span class="line"><span class="comment">//索引路径数组，每个索引路径标识表视图中的可见行。</span></span><br></pre></td></tr></table></figure>
<h3 id="选择行"><a href="#选择行" class="headerlink" title="选择行"></a>选择行</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> indexPathForSelectedRow: <span class="type">IndexPath?</span></span><br><span class="line"><span class="comment">//标识所选行的行和部分的索引路径。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indexPathsForSelectedRows: [<span class="type">IndexPath</span>]?</span><br><span class="line"><span class="comment">//表示所选行的索引路径。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectRow</span><span class="params">(at: IndexPath?, animated: Bool, scrollPosition: UITableView.ScrollPosition)</span></span></span><br><span class="line"><span class="comment">//选择由索引路径标识的表视图中的行，可选择将行滚动到表视图中的某个位置。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deselectRow</span><span class="params">(at: IndexPath, animated: Bool)</span></span></span><br><span class="line"><span class="comment">//取消选择由索引路径标识的给定行，并选择为取消选择设置动画。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allowsSelection: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，用于确定用户是否可以选择行。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allowsMultipleSelection: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，用于确定用户是否可以在编辑模式之外选择多个行。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allowsSelectionDuringEditing: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，用于确定用户在表视图处于编辑模式时是否可以选择单元格。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allowsMultipleSelectionDuringEditing: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，控制用户是否可以在编辑模式下同时选择多个单元格。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">let</span> <span class="title">selectionDidChangeNotification</span>: <span class="title">NSNotification</span>.<span class="title">Name</span></span></span><br><span class="line"><span class="class">//发布表视图中的选定行发生更改时发布。</span></span><br></pre></td></tr></table></figure>
<h3 id="插入，删除和移动行和节"><a href="#插入，删除和移动行和节" class="headerlink" title="插入，删除和移动行和节"></a>插入，删除和移动行和节</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertRows</span><span class="params">(at: [IndexPath], with: UITableView.RowAnimation)</span></span></span><br><span class="line"><span class="comment">//在表视图中插入由索引路径数组标识的位置的行，并提供动画插入的选项。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteRows</span><span class="params">(at: [IndexPath], with: UITableView.RowAnimation)</span></span></span><br><span class="line"><span class="comment">//删除索引路径数组指定的行，并带有为删除设置动画的选项。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertSections</span><span class="params">(IndexSet, with: UITableView.RowAnimation)</span></span></span><br><span class="line"><span class="comment">//在表视图中插入一个或多个部分，并提供动画插入的选项。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteSections</span><span class="params">(IndexSet, with: UITableView.RowAnimation)</span></span></span><br><span class="line"><span class="comment">//删除表视图中的一个或多个部分，并带有为删除设置动画的选项。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UITableView</span>.<span class="title">RowAnimation</span></span></span><br><span class="line"><span class="class">//插入或删除行时使用的动画类型。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">func</span> <span class="title">moveRow</span>(<span class="title">at</span>: <span class="title">IndexPath</span>, <span class="title">to</span>: <span class="title">IndexPath</span>)</span></span><br><span class="line"><span class="class">//将指定位置的行移动到目标位置。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">func</span> <span class="title">moveSection</span>(<span class="title">Int</span>, <span class="title">toSection</span>: <span class="title">Int</span>)</span></span><br><span class="line"><span class="class">//将节移动到表视图中的新位置。</span></span><br></pre></td></tr></table></figure>
<h3 id="对行和节执行批量更新"><a href="#对行和节执行批量更新" class="headerlink" title="对行和节执行批量更新"></a>对行和节执行批量更新</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">performBatchUpdates</span><span class="params">(<span class="params">(<span class="params">()</span></span></span></span> -&gt; <span class="type">Void</span>)?, completion: ((<span class="type">Bool</span>) -&gt; <span class="type">Void</span>)?)</span><br><span class="line"><span class="comment">//动画多个插入，删除，重新加载和移动操作作为一组。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">beginUpdates</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">//开始一系列方法调用，插入，删除或选择表视图的行和部分。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">endUpdates</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">//结束一系列方法调用，插入，删除，选择或重新加载表视图的行和部分。</span></span><br></pre></td></tr></table></figure>
<h3 id="配置表索引"><a href="#配置表索引" class="headerlink" title="配置表索引"></a>配置表索引</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sectionIndexMinimumDisplayRowCount: <span class="type">Int</span></span><br><span class="line"><span class="comment">//用于在表的右边缘显示索引列表的表行数。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sectionIndexColor: <span class="type">UIColor?</span></span><br><span class="line"><span class="comment">//用于表视图索引文本的颜色。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sectionIndexBackgroundColor: <span class="type">UIColor?</span></span><br><span class="line"><span class="comment">//用于表视图的节索引背景的颜色。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sectionIndexTrackingBackgroundColor: <span class="type">UIColor?</span></span><br><span class="line"><span class="comment">//用于表视图的索引背景区域的颜色。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">let</span> <span class="title">indexSearch</span>: <span class="title">String</span></span></span><br><span class="line"><span class="class">//用于将放大镜图标添加到表视图的节索引的常量。</span></span><br></pre></td></tr></table></figure>
<h3 id="重新加载表视图"><a href="#重新加载表视图" class="headerlink" title="重新加载表视图"></a>重新加载表视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hasUncommittedUpdates: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示表视图的外观是否包含未在其数据源中反映的更改。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reloadData</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">//重新加载表视图的行和部分。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reloadRows</span><span class="params">(at: [IndexPath], with: UITableView.RowAnimation)</span></span></span><br><span class="line"><span class="comment">//使用给定的动画效果重新加载指定的行。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reloadSections</span><span class="params">(IndexSet, with: UITableView.RowAnimation)</span></span></span><br><span class="line"><span class="comment">//使用给定的动画效果重新加载指定的部分。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reloadSectionIndexTitles</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">//重新加载表视图右侧索引栏中的项目。</span></span><br></pre></td></tr></table></figure>
<h3 id="管理拖动交互"><a href="#管理拖动交互" class="headerlink" title="管理拖动交互"></a>管理拖动交互</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dragDelegate: <span class="type">UITableViewDragDelegate?</span></span><br><span class="line"><span class="comment">//委托对象管理从表视图中拖动项目。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">UITableViewDragDelegate</span></span></span><br><span class="line"><span class="class">//用于从表视图启动拖动的界面。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">hasActiveDrag</span>: <span class="title">Bool</span></span></span><br><span class="line"><span class="class">//一个布尔值，指示是否从表视图中提升行并且尚未删除。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">dragInteractionEnabled</span>: <span class="title">Bool</span></span></span><br><span class="line"><span class="class">//一个布尔值，指示表视图是否支持应用之间的拖放。</span></span><br></pre></td></tr></table></figure>
<h3 id="管理丢弃交互"><a href="#管理丢弃交互" class="headerlink" title="管理丢弃交互"></a>管理丢弃交互</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dropDelegate: <span class="type">UITableViewDropDelegate?</span></span><br><span class="line"><span class="comment">//管理将内容删除到表视图中的委托对象。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">UITableViewDropDelegate</span></span></span><br><span class="line"><span class="class">//用于处理的接口在表视图中丢弃。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">hasActiveDrop</span>: <span class="title">Bool</span></span></span><br><span class="line"><span class="class">//一个布尔值，指示表视图当前是否正在跟踪放置会话。</span></span><br></pre></td></tr></table></figure>
<h3 id="滚动表视图"><a href="#滚动表视图" class="headerlink" title="滚动表视图"></a>滚动表视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollToRow</span><span class="params">(at: IndexPath, at: UITableView.ScrollPosition, animated: Bool)</span></span></span><br><span class="line"><span class="comment">//滚动表视图，直到索引路径标识的行位于屏幕上的特定位置。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scrollToNearestSelectedRow</span><span class="params">(at: UITableView.ScrollPosition, animated: Bool)</span></span></span><br><span class="line"><span class="comment">//滚动表格视图，以便最接近表格视图中指定位置的选定行位于该位置。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UITableView</span>.<span class="title">ScrollPosition</span></span></span><br><span class="line"><span class="class">//表格视图中的位置（顶部，中间，底部），滚动给定行。</span></span><br></pre></td></tr></table></figure>
<h3 id="将表置于编辑模式"><a href="#将表置于编辑模式" class="headerlink" title="将表置于编辑模式"></a>将表置于编辑模式</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setEditing</span><span class="params">(Bool, animated: Bool)</span></span></span><br><span class="line"><span class="comment">//切换表格视图进出编辑模式。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isEditing: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，用于确定表视图是否处于编辑模式。</span></span><br></pre></td></tr></table></figure>
<h3 id="获取表格的绘图区域"><a href="#获取表格的绘图区域" class="headerlink" title="获取表格的绘图区域"></a>获取表格的绘图区域</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rect</span><span class="params">(forSection: Int)</span></span> -&gt; <span class="type">CGRect</span></span><br><span class="line"><span class="comment">//返回表视图的指定部分的绘图区域。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rectForRow</span><span class="params">(at: IndexPath)</span></span> -&gt; <span class="type">CGRect</span></span><br><span class="line"><span class="comment">//返回由索引路径标识的行的绘图区域。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rectForFooter</span><span class="params">(inSection: Int)</span></span> -&gt; <span class="type">CGRect</span></span><br><span class="line"><span class="comment">//返回指定节的页脚的绘图区域。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rectForHeader</span><span class="params">(inSection: Int)</span></span> -&gt; <span class="type">CGRect</span></span><br><span class="line"><span class="comment">//返回指定节的标题的绘图区域。</span></span><br></pre></td></tr></table></figure>
<h3 id="记住最后一个聚焦的单元格"><a href="#记住最后一个聚焦的单元格" class="headerlink" title="记住最后一个聚焦的单元格"></a>记住最后一个聚焦的单元格</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> remembersLastFocusedIndexPath: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示表视图是否应自动将焦点返回到上一个焦点索引路径处的单元格。</span></span><br></pre></td></tr></table></figure>
<h1 id="UITableViewCell"><a href="#UITableViewCell" class="headerlink" title="UITableViewCell"></a><a href="https://developer.apple.com/documentation/uikit/uitableviewcell" target="_blank" rel="noopener">UITableViewCell</a></h1><p>UITableViewCell对象是管理单个表行内容的专用视图类型。您主要使用单元格来组织和显示应用程序的自定义内容，但UITableViewCell提供了一些特定的自定义以支持与表相关的行为：</p>
<ul>
<li><p>将选定内容或突出显示颜色应用于单元格。</p>
</li>
<li><p>添加标准附件视图，如详细信息或披露控制。</p>
</li>
<li><p>将单元格置于可编辑状态。</p>
</li>
<li><p>缩进单元格内容以在表中创建可视层次结构。</p>
</li>
</ul>
<blockquote>
<p>A <code>UITableViewCell</code> object is a specialized type of view that manages the content of a single table row. You use cells primarily to organize and present your app’s custom content, but <code>UITableViewCell</code> provides some specific customizations to support table-related behaviors, including:</p>
<ul>
<li>Applying a selection or highlight color to the cell.</li>
<li>Adding standard accessory views, such as a detail or disclosure control.</li>
<li>Putting the cell into an editable state.</li>
<li>Indenting the cell’s content to create a visual hierarchy in your table.</li>
</ul>
<p>Your app’s content occupies most of the cell’s bounds, but the cell may adjust that space to make room for other content. Cells display accessory views on the trailing edge of their content area. When you put your table into edit mode, the cell adds a delete control to the leading edge of its content area, and optionally swaps out an accessory view for a reorder control.</p>
</blockquote>
<p><strong>UITableViewCellStyle/UITableViewCell.CellStyle</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UITableViewCell</span> </span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">CellStyle</span> : <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> `<span class="keyword">default</span>`  <span class="comment">//具有文本标签（黑色和左对齐）和可选图像视图的单元格的简单样式。</span></span><br><span class="line">        <span class="keyword">case</span> value1			<span class="comment">//单元格样式，单元格左侧带有标签，左对齐和黑色文本; 在右侧是一个标签，蓝色文字较小，右对齐。“设置”应用程序使用此样式的单元格。</span></span><br><span class="line">        <span class="keyword">case</span> value2			<span class="comment">//单元格样式，单元格左侧带有标签，文本右对齐，蓝色; 在单元格的右侧是另一个标签，其中较小的文本是左对齐和黑色。电话/联系人应用程序使用此样式的单元格。</span></span><br><span class="line">        <span class="keyword">case</span> subtitle 	<span class="comment">//单元格的样式，顶部带有左对齐标签，下面带有左对齐标签，带有较小的灰色文本。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UITableViewCellStyle</span>) &#123;</span><br><span class="line">    <span class="built_in">UITableViewCellStyleDefault</span>,    </span><br><span class="line">    <span class="built_in">UITableViewCellStyleValue1</span>,        </span><br><span class="line">    <span class="built_in">UITableViewCellStyleValue2</span>,        </span><br><span class="line">    <span class="built_in">UITableViewCellStyleSubtitle</span>    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="cellstyle.png" alt></p>
<p><strong>Cell的层次结构</strong></p>
<p><img src="cellintro.png" alt></p>
<h2 id="类方法-1"><a href="#类方法-1" class="headerlink" title="类方法"></a>类方法</h2><h3 id="创建表视图单元格"><a href="#创建表视图单元格" class="headerlink" title="创建表视图单元格"></a>创建表视图单元格</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">init</span>(style: <span class="type">UITableViewCell</span>.<span class="type">CellStyle</span>, reuseIdentifier: <span class="type">String?</span>)</span><br><span class="line"><span class="comment">//使用样式和重用标识符初始化表格单元格并将其返回给调用者。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCell</span>.<span class="title">CellStyle</span></span></span><br><span class="line"><span class="class">//各种样式细胞的枚举。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">init</span>?(<span class="title">coder</span>: <span class="title">NSCoder</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="重用"><a href="#重用" class="headerlink" title="重用"></a>重用</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reuseIdentifier: <span class="type">String?</span></span><br><span class="line"><span class="comment">//用于标识可重用单元的字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareForReuse</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">//准备一个可重用的单元格以供表视图委托重用。</span></span><br></pre></td></tr></table></figure>
<h3 id="指定标准单元格样式的内容"><a href="#指定标准单元格样式的内容" class="headerlink" title="指定标准单元格样式的内容"></a>指定标准单元格样式的内容</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> textLabel: <span class="type">UILabel?</span></span><br><span class="line"><span class="comment">//用于表格单元格主要文本内容的标签。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> detailTextLabel: <span class="type">UILabel?</span></span><br><span class="line"><span class="comment">//表格单元格的辅助标签（如果存在）。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imageView: <span class="type">UIImageView?</span></span><br><span class="line"><span class="comment">//表格单元格的图像视图。</span></span><br></pre></td></tr></table></figure>
<h3 id="访问单元格对象的视图"><a href="#访问单元格对象的视图" class="headerlink" title="访问单元格对象的视图"></a>访问单元格对象的视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> contentView: <span class="type">UIView</span></span><br><span class="line"><span class="comment">//单元格对象的内容视图。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> backgroundView: <span class="type">UIView?</span></span><br><span class="line"><span class="comment">//该视图用作单元格的背景。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> selectedBackgroundView: <span class="type">UIView?</span></span><br><span class="line"><span class="comment">//视图在选中时用作单元格的背景。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> multipleSelectionBackgroundView: <span class="type">UIView?</span></span><br><span class="line"><span class="comment">//当表视图允许多行选择时，用于选定单元格的背景视图。</span></span><br></pre></td></tr></table></figure>
<h3 id="管理附件视图"><a href="#管理附件视图" class="headerlink" title="管理附件视图"></a>管理附件视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> accessoryType: <span class="type">UITableViewCell</span>.<span class="type">AccessoryType</span></span><br><span class="line"><span class="comment">//单元应使用的标准附件视图的类型（正常状态）。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> accessoryView: <span class="type">UIView?</span></span><br><span class="line"><span class="comment">//在单元格的右侧（正常状态）使用的视图，通常用作控件。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> editingAccessoryType: <span class="type">UITableViewCell</span>.<span class="type">AccessoryType</span></span><br><span class="line"><span class="comment">//单元格应在表格视图的编辑状态中使用的标准附件视图的类型。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> editingAccessoryView: <span class="type">UIView?</span></span><br><span class="line"><span class="comment">//在编辑模式下，通常用作单元格右侧控件的视图。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCell</span>.<span class="title">AccessoryType</span></span></span><br><span class="line"><span class="class">//单元使用的标准附件控件的类型。</span></span><br></pre></td></tr></table></figure>
<h3 id="管理单元格选择和突出显示"><a href="#管理单元格选择和突出显示" class="headerlink" title="管理单元格选择和突出显示"></a>管理单元格选择和突出显示</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> selectionStyle: <span class="type">UITableViewCell</span>.<span class="type">SelectionStyle</span></span><br><span class="line"><span class="comment">//细胞的选择方式。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCell</span>.<span class="title">SelectionStyle</span></span></span><br><span class="line"><span class="class">//选定单元格的样式。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">isSelected</span>: <span class="title">Bool</span></span></span><br><span class="line"><span class="class">//一个布尔值，指示是否选择了单元格。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">func</span> <span class="title">setSelected</span>(<span class="title">Bool</span>, <span class="title">animated</span>: <span class="title">Bool</span>)</span></span><br><span class="line"><span class="class">//设置单元格的选定状态，可选地为状态之间的过渡设置动画。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">isHighlighted</span>: <span class="title">Bool</span></span></span><br><span class="line"><span class="class">//一个布尔值，指示单元格是否突出显示。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">func</span> <span class="title">setHighlighted</span>(<span class="title">Bool</span>, <span class="title">animated</span>: <span class="title">Bool</span>)</span></span><br><span class="line"><span class="class">//设置单元格的突出显示状态，可选地为状态之间的过渡设置动画。</span></span><br></pre></td></tr></table></figure>
<h3 id="编辑单元格"><a href="#编辑单元格" class="headerlink" title="编辑单元格"></a>编辑单元格</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isEditing: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示单元格是否处于可编辑状态。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setEditing</span><span class="params">(Bool, animated: Bool)</span></span></span><br><span class="line"><span class="comment">//切换接收器进入和退出编辑模式。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> editingStyle: <span class="type">UITableViewCell</span>.<span class="type">EditingStyle</span></span><br><span class="line"><span class="comment">//单元格的编辑样式。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCell</span>.<span class="title">EditingStyle</span></span></span><br><span class="line"><span class="class">//单元格使用的编辑控件。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">showingDeleteConfirmation</span>: <span class="title">Bool</span></span></span><br><span class="line"><span class="class">//一个布尔值，指示单元格当前是否显示删除确认按钮。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">var</span> <span class="title">showsReorderControl</span>: <span class="title">Bool</span></span></span><br><span class="line"><span class="class">//一个布尔值，用于确定单元格是否显示重新排序控件。</span></span><br></pre></td></tr></table></figure>
<h3 id="拖动行"><a href="#拖动行" class="headerlink" title="拖动行"></a>拖动行</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userInteractionEnabledWhileDragging: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示用户在拖动单元格时是否可以与单元格进行交互。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dragStateDidChange</span><span class="params">(UITableViewCell.DragState)</span></span></span><br><span class="line"><span class="comment">//通知单元格其拖动状态已更改。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCell</span>.<span class="title">DragState</span></span></span><br><span class="line"><span class="class">//指示拖动操作中涉及的行的当前状态的常量。</span></span><br></pre></td></tr></table></figure>
<h3 id="适应状态转变"><a href="#适应状态转变" class="headerlink" title="适应状态转变"></a>适应状态转变</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">willTransition</span><span class="params">(to: UITableViewCell.StateMask)</span></span></span><br><span class="line"><span class="comment">//被调用以通知单元格它将要转换到新的单元状态。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">didTransition</span><span class="params">(to: UITableViewCell.StateMask)</span></span></span><br><span class="line"><span class="comment">//被调用以通知单元格它已转换到新的单元状态。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UITableViewCell</span>.<span class="title">StateMask</span></span></span><br><span class="line"><span class="class">//常量用于在状态之间转换时确定单元格的新状态。</span></span><br></pre></td></tr></table></figure>
<h3 id="管理内容缩进"><a href="#管理内容缩进" class="headerlink" title="管理内容缩进"></a>管理内容缩进</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> indentationLevel: <span class="type">Int</span></span><br><span class="line"><span class="comment">//单元格内容的缩进级别。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> indentationWidth: <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//单元格内容的每个缩进级别的宽度。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shouldIndentWhileEditing: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，用于控制表视图处于编辑模式时是否缩进单元格背景。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> separatorInset: <span class="type">UIEdgeInsets</span></span><br><span class="line"><span class="comment">//在单元格下方绘制的分隔线的插入值。</span></span><br></pre></td></tr></table></figure>
<h3 id="管理焦点"><a href="#管理焦点" class="headerlink" title="管理焦点"></a>管理焦点</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> focusStyle: <span class="type">UITableViewCell</span>.<span class="type">FocusStyle</span></span><br><span class="line"><span class="comment">//聚焦时的外观。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCell</span>.<span class="title">FocusStyle</span></span></span><br><span class="line"><span class="class">//聚焦的风格。</span></span><br></pre></td></tr></table></figure>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">UITableViewCell</span>.<span class="title">SeparatorStyle</span></span></span><br><span class="line"><span class="class">用作分隔符的单元格样式。</span></span><br></pre></td></tr></table></figure>
<h1 id="UITableViewDelegate"><a href="#UITableViewDelegate" class="headerlink" title="UITableViewDelegate"></a><a href="https://developer.apple.com/documentation/uikit/uitableviewdelegate" target="_blank" rel="noopener">UITableViewDelegate</a></h1><p><code>UITableViewDelegate</code>用来管理选择，配置节页眉和页脚，删除和重新排序单元格以及在表格视图中执行其他操作的方法。例如：</p>
<ul>
<li>创建和管理自定义页眉和页脚视图。</li>
<li>指定行，页眉和页脚的自定义高度。</li>
<li>提供高度估计以获得更好的滚动支持。</li>
<li>缩进行内容。</li>
<li>响应行选择。</li>
<li>响应表行中的滑动和其他操作。</li>
<li>支持编辑表格的内容。</li>
</ul>
<h2 id="协议方法："><a href="#协议方法：" class="headerlink" title="协议方法："></a><strong>协议方法：</strong></h2><h3 id="配置表视图行"><a href="#配置表视图行" class="headerlink" title="配置表视图行"></a>配置表视图行</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, willDisplay: UITableViewCell, forRowAt: IndexPath)</span></span></span><br><span class="line"><span class="comment">//告诉委托表视图是否要为特定行绘制单元格。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, indentationLevelForRowAt: IndexPath)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="comment">//要求委托者返回给定部分中某行的缩进级别。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, shouldSpringLoadRowAt: IndexPath, with: UISpringLoadedInteractionContext)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="comment">//被调用以允许您微调表中行的弹簧加载行为。</span></span><br></pre></td></tr></table></figure>
<h3 id="响应行选择"><a href="#响应行选择" class="headerlink" title="响应行选择"></a>响应行选择</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, willSelectRowAt: IndexPath)</span></span> -&gt; <span class="type">IndexPath?</span></span><br><span class="line"><span class="comment">//告诉委托者即将选择指定的行。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, didSelectRowAt: IndexPath)</span></span></span><br><span class="line"><span class="comment">//告诉委托者现在选择了指定的行。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, willDeselectRowAt: IndexPath)</span></span> -&gt; <span class="type">IndexPath?</span></span><br><span class="line"><span class="comment">//告诉委托者即将取消选择指定的行。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, didDeselectRowAt: IndexPath)</span></span></span><br><span class="line"><span class="comment">//告诉代理现在取消选择指定的行。</span></span><br></pre></td></tr></table></figure>
<h3 id="提供自定义页眉和页脚视图"><a href="#提供自定义页眉和页脚视图" class="headerlink" title="提供自定义页眉和页脚视图"></a>提供自定义页眉和页脚视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, viewForHeaderInSection: Int)</span></span> -&gt; <span class="type">UIView?</span></span><br><span class="line"><span class="comment">//要求委托使视图对象显示在表视图的指定部分的标题中。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, viewForFooterInSection: Int)</span></span> -&gt; <span class="type">UIView?</span></span><br><span class="line"><span class="comment">//要求委托使视图对象显示在表视图的指定部分的页脚中。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, willDisplayHeaderView: UIView, forSection: Int)</span></span></span><br><span class="line"><span class="comment">//告诉委托表该表即将显示指定节的标题视图。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, willDisplayFooterView: UIView, forSection: Int)</span></span></span><br><span class="line"><span class="comment">//告诉代理该表即将显示指定部分的页脚视图。</span></span><br></pre></td></tr></table></figure>
<h3 id="提供页眉，页脚和行高"><a href="#提供页眉，页脚和行高" class="headerlink" title="提供页眉，页脚和行高"></a>提供页眉，页脚和行高</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, heightForRowAt: IndexPath)</span></span> -&gt; <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//询问代理用于指定位置的行的高度。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, heightForHeaderInSection: Int)</span></span> -&gt; <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//询问代理用于特定部分标题的高度。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, heightForFooterInSection: Int)</span></span> -&gt; <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//询问代理用于特定部分的页脚的高度。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">let</span> <span class="title">automaticDimension</span>: <span class="title">CGFloat</span></span></span><br><span class="line"><span class="class">//表示给定维度的默认值的常量。</span></span><br></pre></td></tr></table></figure>
<h3 id="估计表格内容的高度"><a href="#估计表格内容的高度" class="headerlink" title="估计表格内容的高度"></a>估计表格内容的高度</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, estimatedHeightForRowAt: IndexPath)</span></span> -&gt; <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//询问代理指定位置中行的估计高度。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, estimatedHeightForHeaderInSection: Int)</span></span> -&gt; <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//询问代理特定部分标题的估计高度。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, estimatedHeightForFooterInSection: Int)</span></span> -&gt; <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//询问代理特定部分的页脚估计高度。</span></span><br></pre></td></tr></table></figure>
<h3 id="管理附件视图-1"><a href="#管理附件视图-1" class="headerlink" title="管理附件视图"></a>管理附件视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, accessoryButtonTappedForRowWith: IndexPath)</span></span></span><br><span class="line"><span class="comment">//告诉代理用户点击了指定行的详细信息按钮。</span></span><br></pre></td></tr></table></figure>
<h3 id="响应行动作"><a href="#响应行动作" class="headerlink" title="响应行动作"></a>响应行动作</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, leadingSwipeActionsConfigurationForRowAt: IndexPath)</span></span> -&gt; <span class="type">UISwipeActionsConfiguration?</span></span><br><span class="line"><span class="comment">//返回要在行的前沿显示的滑动操作。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, trailingSwipeActionsConfigurationForRowAt: IndexPath)</span></span> -&gt; <span class="type">UISwipeActionsConfiguration?</span></span><br><span class="line"><span class="comment">//返回要在行的后缘显示的滑动操作。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, shouldShowMenuForRowAt: IndexPath)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="comment">//询问代理是否应该为某一行显示编辑菜单。 --弃用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, canPerformAction: Selector, forRowAt: IndexPath, withSender: <span class="keyword">Any</span>?)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="comment">//询问代理是否编辑菜单应省略给定行的复制或粘贴命令。-- 弃用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, performAction: Selector, forRowAt: IndexPath, withSender: <span class="keyword">Any</span>?)</span></span></span><br><span class="line"><span class="comment">//告知委托对给定行的内容执行复制或粘贴操作。-- 弃用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, editActionsForRowAt: IndexPath)</span></span> -&gt; [<span class="type">UITableViewRowAction</span>]?</span><br><span class="line"><span class="comment">//询问代理是否响应指定行中的滑动而显示的操作。</span></span><br></pre></td></tr></table></figure>
<h3 id="管理表格视图亮点"><a href="#管理表格视图亮点" class="headerlink" title="管理表格视图亮点"></a>管理表格视图亮点</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, shouldHighlightRowAt: IndexPath)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="comment">//询问代理是否应突出显示指定的行。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, didHighlightRowAt: IndexPath)</span></span></span><br><span class="line"><span class="comment">//告诉代理指出的行已突出显示。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, didUnhighlightRowAt: IndexPath)</span></span></span><br><span class="line"><span class="comment">//告诉委托，突出显示已从指定索引路径的行中删除。</span></span><br></pre></td></tr></table></figure>
<h3 id="编辑表行"><a href="#编辑表行" class="headerlink" title="编辑表行"></a>编辑表行</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, willBeginEditingRowAt: IndexPath)</span></span></span><br><span class="line"><span class="comment">//告诉代理表视图即将进入编辑模式。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, didEndEditingRowAt: IndexPath?)</span></span></span><br><span class="line"><span class="comment">//告诉代理表视图已离开编辑模式。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, editingStyleForRowAt: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span>.<span class="type">EditingStyle</span></span><br><span class="line"><span class="comment">//向代表询问表视图中特定位置的行的编辑样式。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, titleForDeleteConfirmationButtonForRowAt: IndexPath)</span></span> -&gt; <span class="type">String?</span></span><br><span class="line"><span class="comment">//更改删除确认按钮的默认标题。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, shouldIndentWhileEditingRowAt: IndexPath)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="comment">//询问代理在表视图处于编辑模式时是否应缩进指定行的背景。</span></span><br></pre></td></tr></table></figure>
<h3 id="重新排序表行"><a href="#重新排序表行" class="headerlink" title="重新排序表行"></a>重新排序表行</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, targetIndexPathForMoveFromRowAt: IndexPath, toProposedIndexPath: IndexPath)</span></span> -&gt; <span class="type">IndexPath</span></span><br><span class="line"><span class="comment">//要求委托者返回一个新的索引路径以重新定位建议的行移动。</span></span><br></pre></td></tr></table></figure>
<h3 id="跟踪删除视图"><a href="#跟踪删除视图" class="headerlink" title="跟踪删除视图"></a>跟踪删除视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, canFocusRowAt: IndexPath)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="comment">//询问代理是否指定索引路径的单元格本身是可聚焦的。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, shouldUpdateFocusIn: UITableViewFocusUpdateContext)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="comment">//询问代理是否允许发生上下文指定的焦点更新。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, didUpdateFocusIn: UITableViewFocusUpdateContext, with: UIFocusAnimationCoordinator)</span></span></span><br><span class="line"><span class="comment">//告诉委托者刚刚发生了上下文指定的焦点更新。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">indexPathForPreferredFocusedView</span><span class="params">(<span class="keyword">in</span>: UITableView)</span></span> -&gt; <span class="type">IndexPath?</span></span><br><span class="line"><span class="comment">//向委托询问首选焦点视图的表视图的索引路径。</span></span><br></pre></td></tr></table></figure>
<h1 id="UITableViewDataSource"><a href="#UITableViewDataSource" class="headerlink" title="UITableViewDataSource"></a>UITableViewDataSource</h1><p><code>UITableViewDataSource</code>用于管理数据并为表视图提供单元格的对象采用的方法。</p>
<p><code>UITableView</code>仅管理其数据的表示; 他们不管理数据本身。要管理数据，请为表提供数据源对象，即实现协议的对象。数据源对象响应来自表的与数据相关的请求。它还可以直接管理表格的数据，或与应用程序的其他部分协调以管理该数据。</p>
<ul>
<li>指定表中的节和行数。</li>
<li>为表的每一行提供单元格。</li>
<li>为节标题和页脚提供标题。</li>
<li>配置表的索引（如果有）。</li>
<li>响应需要更改基础数据的用户或表启动的更新。</li>
</ul>
<p><strong>指定行和节的位置</strong></p>
<p><code>UITableView</code>使用<code>NSIndexPath</code>对象的<code>row</code>和<code>section</code>属性来进行单元格的位置定位。行索引和节索引是从零开始的，所以第一节位于索引0，第二节位于索引1，依此类推。同样，每个节的第一行位于索引0处，这意味着您需要节值和行值来唯一标识行。如果表没有节，则只需要行值。</p>
<p><img src="rowandsection.png" alt></p>
<p><strong>该协议必须实现两个方法</strong></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Return the number of rows for the table.     </span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Provide a cell object for each row.</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">   <span class="comment">// Fetch a cell of the appropriate type.</span></span><br><span class="line">   <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"cellTypeIdentifier"</span>, <span class="keyword">for</span>: indexPath)</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Configure the cell’s contents.</span></span><br><span class="line">   cell.textLabel!.text = <span class="string">"Cell text"</span></span><br><span class="line">       </span><br><span class="line">   <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用此协议的其他方法为表启用特定功能。例如，您必须实现该方法以启用行的滑动到删除功能。<a href="https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614871-tableview" target="_blank" rel="noopener"><code>tableView(_:commit:forRowAt:)</code></a></p>
</blockquote>
<h2 id="协议方法"><a href="#协议方法" class="headerlink" title="协议方法"></a><strong>协议方法</strong></h2><h3 id="提供行数和节数"><a href="#提供行数和节数" class="headerlink" title="提供行数和节数"></a>提供行数和节数</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, numberOfRowsInSection: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="comment">//告诉数据源返回表视图的给定部分中的行数。-- 需要。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span>: UITableView)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="comment">//要求数据源返回表视图中的节数。</span></span><br></pre></td></tr></table></figure>
<h3 id="提供单元格，页眉和页脚"><a href="#提供单元格，页眉和页脚" class="headerlink" title="提供单元格，页眉和页脚"></a>提供单元格，页眉和页脚</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, cellForRowAt: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span></span><br><span class="line"><span class="comment">//要求单元格的数据源插入表视图的特定位置。-- 需要。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, titleForHeaderInSection: Int)</span></span> -&gt; <span class="type">String?</span></span><br><span class="line"><span class="comment">//向数据源询问表视图的指定部分的标题的标题。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, titleForFooterInSection: Int)</span></span> -&gt; <span class="type">String?</span></span><br><span class="line"><span class="comment">//向数据源询问表视图的指定部分的页脚标题。</span></span><br></pre></td></tr></table></figure>
<h3 id="插入或删除表格行"><a href="#插入或删除表格行" class="headerlink" title="插入或删除表格行"></a>插入或删除表格行</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, commit: UITableViewCell.EditingStyle, forRowAt: IndexPath)</span></span></span><br><span class="line"><span class="comment">//要求数据源提交插入或删除接收器中的指定行。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, canEditRowAt: IndexPath)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="comment">//要求数据源验证给定行是否可编辑。</span></span><br></pre></td></tr></table></figure>
<h3 id="重新排序表行-1"><a href="#重新排序表行-1" class="headerlink" title="重新排序表行"></a>重新排序表行</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, canMoveRowAt: IndexPath)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="comment">//询问数据源是否可以将给定行移动到表视图中的另一个位置。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, moveRowAt: IndexPath, to: IndexPath)</span></span></span><br><span class="line"><span class="comment">//告知数据源将表视图中特定位置的行移动到另一个位置。</span></span><br></pre></td></tr></table></figure>
<h3 id="配置索引"><a href="#配置索引" class="headerlink" title="配置索引"></a>配置索引</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sectionIndexTitles</span><span class="params">(<span class="keyword">for</span>: UITableView)</span></span> -&gt; [<span class="type">String</span>]?</span><br><span class="line"><span class="comment">//要求数据源返回表视图部分的标题。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(UITableView, sectionForSectionIndexTitle: String, at: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="comment">//要求数据源返回具有给定标题和节标题索引的节的索引。</span></span><br></pre></td></tr></table></figure>
<h1 id="UITableViewController"><a href="#UITableViewController" class="headerlink" title="UITableViewController"></a>UITableViewController</h1><p>一个用于专门管理UITableView的控制器。</p>
<p>当接口由表视图和很少或没有其他内容组成时，子类UITableViewController。表视图控制器已经采用了管理表视图内容和响应更改所需的协议。此外，UITableViewController实现以下行为：</p>
<ul>
<li>它自动加载存档在故事板或NIB文件中的表视图。使用TableView属性访问表视图。</li>
<li>它将表视图的数据源和委托设置为self。</li>
<li>它实现了<code>viewWillAppear(_:)</code>方法，并在第一次出现时自动为其表视图重新加载数据。每次显示表视图时，它都会清除其选择（有动画或无动画，具体取决于请求）；您可以通过更改<code>ClearSSelectionOnView</code>将显示属性中的值来禁用此行为。</li>
<li>它实现了<code>viewDidAppear(_:)</code>，并在表视图第一次出现时自动闪烁滚动指示器。</li>
<li>它实现<code>setEditing(_:animated:)</code>方法，并在用户点击导航栏中的编辑完成按钮时自动切换表的编辑模式。</li>
<li>它会自动调整其表视图的大小，以适应屏幕键盘的外观或消失。</li>
</ul>
<p>为所管理的每个表视图创建UITableViewController的自定义子类。初始化表视图控制器时，必须指定表视图的样式（普通或分组）。您还必须重写数据源和委托方法，以便用数据填充表。您可以重写<code>loadView()</code>或任何其他超类方法，但如果这样做，请确保调用该方法的超类实现，通常作为第一个方法调用。</p>
<h1 id="UITableView的静态单元格"><a href="#UITableView的静态单元格" class="headerlink" title="UITableView的静态单元格"></a>UITableView的静态单元格</h1><p>静态单元格：不会随数据的改变而改变，当在storyboard中创建好后，显示的数据内容和模板样式都固定不变。需要修改，只能在storyboard中修改。</p>
<p><strong>在storyboard文件中配置静态表：</strong></p>
<ol>
<li>将<a href="https://developer.apple.com/documentation/uikit/uitableviewcontroller" target="_blank" rel="noopener"><code>UITableViewController</code></a>对象添加到故事板。</li>
<li>选择表视图控制器的表视图。</li>
<li>将表视图的“内容”属性（在“属性”检查器中）更改为<code>Static Cells</code>。</li>
<li>使用表视图的Sections属性指定表的节数。</li>
<li>将每个部分的Row属性设置为所需的行数。</li>
<li>使用所需的视图和内容配置每个单元格。</li>
</ol>
<p><strong>注意</strong>：不能通过在UIView中拖拽UITableView的方式来使用静态单元格，需要创建新的UITableViewController，并在属性中将content改为Static Cells。否则会报该错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error: Static table views are only valid when embedded <span class="keyword">in</span> UITableViewController instances [12]</span><br></pre></td></tr></table></figure>
<p>使用静态数据的表视图需要一个<a href="https://developer.apple.com/documentation/uikit/uitableviewcontroller" target="_blank" rel="noopener"><code>UITableViewController</code></a>对象来管理该数据。</p>
<p><strong>单元格Cell的Accessory属性</strong></p>
<p>通过设置单元格的Accessory属性来改变单元格右侧的图标样式，该属性名称为accessoryType，它是一个UITableViewCellAccessoryType类型的枚举，枚举量主要有以下几种：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UITableViewCellAccessoryNone</span></span><br><span class="line">  <span class="comment">//单元格右侧没有标志</span></span><br><span class="line"><span class="built_in">UITableViewCellAccessoryDisclosureIndicator</span></span><br><span class="line">  <span class="comment">//单元格右侧有向右的小箭头标志</span></span><br><span class="line"><span class="built_in">UITableViewCellAccessoryDetailDisclosureButton</span></span><br><span class="line">  <span class="comment">//单元格右侧有一个详细信息标志和一个向右小箭头标志</span></span><br><span class="line"><span class="built_in">UITableViewCellAccessoryCheckmark</span></span><br><span class="line">  <span class="comment">//单元格右侧有一个对勾标志</span></span><br><span class="line"><span class="built_in">UITableViewCellAccessoryDetailButton</span></span><br><span class="line">  <span class="comment">//单元格右侧有一个详细信息标志</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过cell的<code>accessoryView</code>属性来自定义辅助指示视图,优先级比<code>accessoryType</code>高</p>
<p>关于它的使用：如果某个界面从加载完毕后就始终不会变化，则可以使用静态单元格。否则应使用动态单元格。静态单元格是在storyboard中创建的，但是它仍然是可以交互的。</p>
</blockquote>
<h2 id="案例1：仿一下微信我的"><a href="#案例1：仿一下微信我的" class="headerlink" title="案例1：仿一下微信我的"></a>案例1：仿一下微信我的</h2><p><img src="wechatme.jpeg" alt></p>
<p>在storyboard中创建一个UItableViewController，并将TableView的类型设置为<code>static cells</code>,并设置节数：</p>
<p><img src="staticlizi1.png" alt></p>
<p>将TableVIew的样式设置为Group：</p>
<p><img src="staticlizi6.png" alt></p>
<p>添加<code>TableViewCell</code>：</p>
<p><img src="staticlizi2.png" alt></p>
<p>设置<code>TableViewCell</code>的样式，案例设置为Basic即可。</p>
<p><img src="staticlizi3.png" alt></p>
<p>设置标题，图片，配置每节中的行数。设置完后的样式：</p>
<p><img src="staticlizi4.png" alt></p>
<p>也可以配置一下section header的高度</p>
<p><img src="staticlizi5.png" alt></p>
<p>如果需要设置小箭头则可以选择Accessory属性</p>
<p><img src="staticlizi8.png" alt></p>
<p>运行效果：</p>
<p><img src="staticlizi7.png" alt></p>
<h2 id="案例2：仿设置"><a href="#案例2：仿设置" class="headerlink" title="案例2：仿设置"></a>案例2：仿设置</h2><p>我们通常会在一些app中看到一些设置界面，一般都会使用静态单元格来实现，但是来看下面一个例子，</p>
<p><img src="staticlizi22.png" alt></p>
<p>可以看到推送按钮是经过一些动态变化的，那么如何用静态单元格实现呢，来仿造一下。</p>
<p>在storyboard中，使用UITableViewController进行图中的设置</p>
<p><img src="staticlizi23.png" alt></p>
<p>然后新建一个SettingTableViewController，在storyboard中将controller指向该类，实现代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SettingTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">var</span> cell: <span class="type">UITableViewCell!</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="keyword">let</span> settingswitch = <span class="type">UISwitch</span>(frame: .zero)</span><br><span class="line">        settingswitch.isOn = <span class="literal">true</span></span><br><span class="line">        cell.detailTextLabel?.isHidden = settingswitch.isOn</span><br><span class="line">        settingswitch.addTarget(<span class="keyword">self</span>, action: #selector(onSwitch(sender:)), <span class="keyword">for</span>: <span class="type">UIControl</span>.<span class="type">Event</span>.valueChanged)</span><br><span class="line">        cell.accessoryView = settingswitch</span><br><span class="line">        <span class="comment">// Uncomment the following line to preserve selection between presentations</span></span><br><span class="line">        <span class="comment">// self.clearsSelectionOnViewWillAppear = false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Uncomment the following line to display an Edit button in the navigation bar for this view controller.</span></span><br><span class="line">        <span class="comment">// self.navigationItem.rightBarButtonItem = self.editButtonItem</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">onSwitch</span><span class="params">(sender: UISwitch)</span></span> &#123;</span><br><span class="line">        cell.detailTextLabel?.isHidden = sender.isOn</span><br><span class="line">        <span class="keyword">if</span> sender.isOn &#123;</span><br><span class="line">            cell.detailTextLabel?.text = <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cell.detailTextLabel?.text = <span class="string">"你可能错过重要通知，点击打开"</span></span><br><span class="line">        &#125;</span><br><span class="line">        cell.layoutSubviews()</span><br><span class="line"><span class="comment">//        print(cell.detailTextLabel?.text)</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="staticlizi24.png" alt></p>
<h1 id="UITableView的动态单元格"><a href="#UITableView的动态单元格" class="headerlink" title="UITableView的动态单元格"></a>UITableView的动态单元格</h1><p>使用表格（<strong>UITableView</strong>）时，我们可以选择其采用静态单元格（<strong>Static Cell</strong>）还是动态单元格（<strong>Dynamic Cell</strong>）。前者使用方便，但是后者更加灵活。上面已经把一些需要用到的协议，类已经介绍了一遍。这里我们用案例来实战一遍。</p>
<p>假如这里我们有一批英雄联盟英雄的数据，存放在项目里，是一个plist文件。</p>
<p><img src="dataplist.png" alt></p>
<p>建立一个模型Hero类</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">var</span> icon: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">var</span> intro: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">var</span> url: <span class="type">String?</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(dict: [<span class="type">String</span>: <span class="type">AnyObject</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = dict[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">        <span class="keyword">self</span>.icon = dict[<span class="string">"icon"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">        <span class="keyword">self</span>.intro = dict[<span class="string">"intro"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">        <span class="keyword">self</span>.url = dict[<span class="string">"url"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里不使用<code>UITableViewController</code>，我们使用<code>UIViewController</code>来建立一个<code>UITableViewController</code>。并实现<code>UITableViewDelegate</code>, <code>UITableViewDataSource</code>协议。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DymViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span></span></span><br></pre></td></tr></table></figure>
<p>新建一个<code>UITableView</code>成员变量，并在viewDIdLoad初始化。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> tableview: <span class="type">UITableView!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">  <span class="comment">//如果不指定tableView的样式，则默认使用UITableViewStylePlain样式。</span></span><br><span class="line">  <span class="keyword">self</span>.tableview = <span class="type">UITableView</span>(frame: <span class="keyword">self</span>.view.frame, style: <span class="type">UITableView</span>.<span class="type">Style</span>.plain);</span><br><span class="line">  <span class="keyword">self</span>.tableview.delegate = <span class="keyword">self</span>;</span><br><span class="line">  <span class="keyword">self</span>.tableview.dataSource = <span class="keyword">self</span>;</span><br><span class="line">  <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.tableview)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建一个data类来管理用于展示UITableView的数据类</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data: [<span class="type">Hero</span>] &#123;</span><br><span class="line">  <span class="keyword">let</span> plistdata = <span class="type">NSArray</span>(contentsOfFile: <span class="type">Bundle</span>.main.path(forResource: <span class="string">"heros"</span>, ofType: <span class="string">"plist"</span>)!)!</span><br><span class="line">  <span class="keyword">var</span> heros: [<span class="type">Hero</span>] = [<span class="type">Hero</span>]()</span><br><span class="line">  <span class="keyword">var</span> hero: <span class="type">Hero</span></span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> plistdata &#123;</span><br><span class="line">    hero = <span class="type">Hero</span>(dict: item <span class="keyword">as</span>! [<span class="type">String</span>: <span class="type">AnyObject</span>])</span><br><span class="line">    heros.append(hero)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> heros</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现UITableVIewDataSource重要的两个协议方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data.<span class="built_in">count</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">  <span class="comment">//创建样式为Basic的UItableViewCell</span></span><br><span class="line">  <span class="keyword">let</span> cell = <span class="type">UITableViewCell</span>(style: <span class="type">UITableViewCell</span>.<span class="type">CellStyle</span>.subtitle, reuseIdentifier: <span class="literal">nil</span>)</span><br><span class="line">  cell.imageView?.image = <span class="type">UIImage</span>(named: data[indexPath.row].icon!)</span><br><span class="line">  cell.textLabel?.text = data[indexPath.row].name</span><br><span class="line">  cell.detailTextLabel?.text = data[indexPath.row].intro</span><br><span class="line">  <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="dymlizi1.png" alt></p>
<blockquote>
<p>性能优化在这里不考虑</p>
</blockquote>
<p><strong>但是英雄也有分类，比如有战士、法师、射手等的分类，我们再修改一下plist的文件。</strong></p>
<p><img src="dymlizi2.png" alt></p>
<p>再新建一个plist存放归类的译文。</p>
<p><img src="dymlizi3.png" alt></p>
<p>新建一个DymGroupViewController，这里不在原来代码修改。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DymGroupViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span></span></span><br></pre></td></tr></table></figure>
<p>新建一个<code>UITableView</code>成员变量，并在viewDIdLoad初始化。这里注意，TableView的样式要做改变。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> tableview: <span class="type">UITableView!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">  <span class="comment">//如果不指定tableView的样式，则默认使用UITableViewStylePlain样式。</span></span><br><span class="line">  <span class="keyword">self</span>.tableview = <span class="type">UITableView</span>(frame: <span class="keyword">self</span>.view.frame, style: <span class="type">UITableView</span>.<span class="type">Style</span>.grouped);</span><br><span class="line">  <span class="keyword">self</span>.tableview.delegate = <span class="keyword">self</span>;</span><br><span class="line">  <span class="keyword">self</span>.tableview.dataSource = <span class="keyword">self</span>;</span><br><span class="line">  <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.tableview)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的数据获取也有很大的改动</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分类key数组：例如Support、Tank</span></span><br><span class="line"><span class="keyword">var</span> categoryname: [<span class="type">String</span>] &#123;</span><br><span class="line">  <span class="keyword">let</span> plistdata = <span class="type">NSDictionary</span>(contentsOfFile: <span class="type">Bundle</span>.main.path(forResource: <span class="string">"category"</span>, ofType: <span class="string">"plist"</span>)!)!</span><br><span class="line">  <span class="keyword">return</span> plistdata.allKeys <span class="keyword">as</span>! [<span class="type">String</span>]</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//对应分类key数组的译文：例如Support对应辅助，Tank对应坦克</span></span><br><span class="line"><span class="keyword">var</span> categoryvalue: [<span class="type">String</span>] &#123;</span><br><span class="line">  <span class="keyword">let</span> plistdata = <span class="type">NSDictionary</span>(contentsOfFile: <span class="type">Bundle</span>.main.path(forResource: <span class="string">"category"</span>, ofType: <span class="string">"plist"</span>)!)!</span><br><span class="line">  <span class="keyword">return</span> plistdata.allValues <span class="keyword">as</span>! [<span class="type">String</span>]</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//所有英雄数据的存放，并分类存放了英雄的分类，即用key来存放对应一个英雄的列表数组</span></span><br><span class="line"><span class="keyword">var</span> data: [<span class="type">String</span>: <span class="type">Array</span>&lt;<span class="type">Hero</span>&gt;] &#123;</span><br><span class="line">  <span class="keyword">let</span> plistdata = <span class="type">NSDictionary</span>(contentsOfFile: <span class="type">Bundle</span>.main.path(forResource: <span class="string">"herosgroup"</span>, ofType: <span class="string">"plist"</span>)!)!</span><br><span class="line">  <span class="keyword">var</span> rd: [<span class="type">String</span>: <span class="type">Array</span>&lt;<span class="type">Hero</span>&gt;] = [<span class="type">String</span>: <span class="type">Array</span>&lt;<span class="type">Hero</span>&gt;]()</span><br><span class="line">  <span class="keyword">var</span> heros: [<span class="type">Hero</span>]</span><br><span class="line">  <span class="keyword">for</span> (items,value) <span class="keyword">in</span> plistdata &#123;</span><br><span class="line">    heros = [<span class="type">Hero</span>]()</span><br><span class="line">    <span class="keyword">var</span> hero: <span class="type">Hero</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> value <span class="keyword">as</span>! [[<span class="type">String</span>: <span class="type">AnyObject</span>]] &#123;</span><br><span class="line">      hero = <span class="type">Hero</span>(dict: item)</span><br><span class="line">      heros.append(hero)</span><br><span class="line">    &#125;</span><br><span class="line">    rd[items <span class="keyword">as</span>! <span class="type">String</span>] = heros</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置好对应的section数和对应section数的行数，并设置section header的标题。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对数据进行分组展示</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> categoryname.<span class="built_in">count</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对应每个分组下的英雄列表数量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data[categoryname[section]]!.<span class="built_in">count</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//列表的展示</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> cell: <span class="type">UITableViewCell</span> = <span class="type">UITableViewCell</span>(style: <span class="type">UITableViewCell</span>.<span class="type">CellStyle</span>.subtitle, reuseIdentifier: <span class="literal">nil</span>)</span><br><span class="line">  <span class="keyword">let</span> hero = data[categoryname[indexPath.section]]![indexPath.row]</span><br><span class="line">  cell.imageView?.image = <span class="type">UIImage</span>(named: hero.icon!)</span><br><span class="line">  cell.textLabel?.text = hero.name</span><br><span class="line">  cell.detailTextLabel?.text = hero.intro</span><br><span class="line">  <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, titleForHeaderInSection section: Int)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> categoryvalue[section]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="dymlizi4.png" alt></p>
<p>到这一步后，我们会发现点击列表没有反应，我们来实现一下跳转到网页，英雄数据里面有一个url属性就是跳转的地址。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(indexPath.row, indexPath.section)</span><br><span class="line">  <span class="keyword">let</span> url = <span class="type">URL</span>(string: data[categoryname[indexPath.section]]![indexPath.row].url!)!</span><br><span class="line">  <span class="type">UIApplication</span>.shared.openURL(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跳转后效果：</p>
<p><img src="dymlizi5.png" alt></p>
<h1 id="自定义UITableViewCell"><a href="#自定义UITableViewCell" class="headerlink" title="自定义UITableViewCell"></a>自定义UITableViewCell</h1><h2 id="静态单元格中使用自定义Cell"><a href="#静态单元格中使用自定义Cell" class="headerlink" title="静态单元格中使用自定义Cell"></a>静态单元格中使用自定义Cell</h2><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.apple.com/documentation/uikit/uitableview" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uitableview</a></p>
<p><a href="https://developer.apple.com/documentation/uikit/uitableviewdatasource" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uitableviewdatasource</a></p>
<p><a href="https://developer.apple.com/documentation/uikit/uitableviewdelegate" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uitableviewdelegate</a></p>
<p><a href="https://developer.apple.com/documentation/uikit/uitableviewcell" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/uitableviewcell</a></p>
<p><a href="https://developer.apple.com/documentation/uikit/views_and_controls/table_views/filling_a_table_with_data" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/views_and_controls/table_views/filling_a_table_with_data</a></p>
<p><a href="https://developer.apple.com/documentation/uikit/views_and_controls/table_views/configuring_the_cells_for_your_table" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/views_and_controls/table_views/configuring_the_cells_for_your_table</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode报错修复Multiple commands produce</title>
    <url>/2019/07/13/Xcode%E6%8A%A5%E9%94%99%E4%BF%AE%E5%A4%8DMultiple-commands-produce/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Xcode版本：10.2.1</strong></p>
<p>今天导入了一个Demo项目，出现了<strong>Multiple commands produce</strong>错误，记录下解决办法。</p>
<a id="more"></a>
<p>Xcode10使用了一个的新创建系统，比之前的提供更好的可靠性与创建性能，而且可以获取项目配置问题（默认设置新创建系统）</p>
<blockquote>
<p>Build System</p>
<p>Again, Xcode 10 uses a new build system. The new build system provides improved reliability and build performance, and it catches project configuration problems that the legacy build system does not.<br>The legacy build system is still available in Xcode 10. To use the legacy build system, select it in the File &gt; Project/Workspace Settings sheet. Projects configured to use the legacy build system will display an orange hammer icon in the Activity View.</p>
</blockquote>
<p>在苹果文档中，提及Xcode10中的关于旧项目New Build System更改适配中提及到以下两点</p>
<blockquote>
<p>The new build system has stricter checks for cycles between elements in the build in order to prevent unnecessary rebuilds.</p>
<p>It is an error for any individual file in the build to be produced by more than one build command. For example, if two targets each declare the same output file from a shell script phase, factor out the declaration of the output file into a single target.</p>
</blockquote>
<p>New Build System会对构建中的元素循环进行严格的检查，避免不必要的重建，这个也是错误出现的原因。</p>
<p><strong>错误信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error: Multiple commands produce <span class="string">'/Users/zjyzy/Library/Developer/Xcode/DerivedData/UMengComDemo-eisszriydfvwtlgnymkievxxjndx/Build/Products/Debug-iphonesimulator/UMengComDemo.app/Info.plist'</span>:</span><br><span class="line">1) Target <span class="string">'UMengComDemo'</span> (project <span class="string">'UMengComDemo'</span>) has copy <span class="built_in">command</span> from <span class="string">'/Users/zjyzy/WorkPlace/xcode/AllDemo/test/MultiFunctioniOSDemo/UMengComDemo/Info.plist'</span> to <span class="string">'/Users/zjyzy/Library/Developer/Xcode/DerivedData/UMengComDemo-eisszriydfvwtlgnymkievxxjndx/Build/Products/Debug-iphonesimulator/UMengComDemo.app/Info.plist'</span></span><br><span class="line">2) Target <span class="string">'UMengComDemo'</span> (project <span class="string">'UMengComDemo'</span>) has process <span class="built_in">command</span> with output <span class="string">'/Users/zjyzy/Library/Developer/Xcode/DerivedData/UMengComDemo-eisszriydfvwtlgnymkievxxjndx/Build/Products/Debug-iphonesimulator/UMengComDemo.app/Info.plist'</span></span><br></pre></td></tr></table></figure>
<p><strong>解决方案</strong></p>
<ul>
<li><p>不使用<code>New Build System</code></p>
<p>打开<code>Xcode</code> &gt; <code>File</code> &gt; <code>Project Setting</code></p>
<p><img src="fix1.png" alt></p>
<p>将<code>Build System</code>选项选择为<code>Legacy Build System</code>即可。</p>
</li>
<li><p>根据出错信息，在新创建系统模式下，去除多余的引用重建</p>
<p><img src="fix2.png" alt></p>
<p>在<code>target</code> -&gt; <code>Build phase</code> &gt; <code>Copy Bundle Resource</code> 中找到<code>info.plist</code>，移除掉<code>info.plist</code>即可。</p>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/fdb1421f3c8b" target="_blank" rel="noopener">https://www.jianshu.com/p/fdb1421f3c8b</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode报错修复SWIFT_VERSION '3.0' is unsupported, supported versions are:4.0,4.2,5.0</title>
    <url>/2019/07/13/Xcode%E6%8A%A5%E9%94%99%E4%BF%AE%E5%A4%8DSWIFT-VERSION-3-0-is-unsupported-supported-versions-are-4-0-4-2-5-0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Xcode版本：10.2.1</strong></p>
<p>今天导入了一个Demo项目，出现了SWIFT_VERSION ‘3.0’ is unsupported, supported versions are: 4.0, 4.2, 5.0.错误，记录下解决办法。</p>
<a id="more"></a>
<p><img src="errorpic.png" alt></p>
<p><img src="errorpic2.png" alt></p>
<p><strong>解决方法：</strong></p>
<p>找到发生错误的Target：</p>
<p><img src="fix1.png" alt></p>
<p><img src="fix2.png" alt></p>
<p>步骤： <code>${Target}</code> &gt;<code>Build Settings</code> &gt; <code>Swift Compiler - Language</code> &gt; <code>Swift Language Version</code>选择支持的版本即可。</p>
<p><img src="fix3.png" alt></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/bdfcb8759dee" target="_blank" rel="noopener">https://www.jianshu.com/p/bdfcb8759dee</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>Android O应用图标适配</title>
    <url>/2019/07/13/Android-O%E5%BA%94%E7%94%A8%E5%9B%BE%E6%A0%87%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Android 8.0现在已经很普及了，甚至有的厂商已经开始升级到Android P，至少我的三星上个星期也是7月初就开始推送Android P让我更新自己的手机系统了，那么应用图标的适配就肯定是板上钉钉的事情了。</p>
<a id="more"></a>
<h1 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h1><p><strong>手机应用图标的历史</strong>：其实要从苹果开始讲起。在上世纪80年代，苹果还在设计Lisa和Macintosh电脑的时候，乔布斯就是个圆角矩形的狂热支持者。当时苹果的工程师写出了一套绝妙的算法，可以在电脑上绘制出圆和椭圆，所有观看者都被震惊了，除了乔布斯，因为乔布斯觉得圆和椭圆虽然也不错，但是如果能绘制出带圆角的矩形就更好了。当时那位工程师觉得这是不可能实现的，而且也完全用不着圆角矩形，能满足基本的绘图需求就可以了。乔布斯愤怒地拉着他走了3条街，指出大街上各种应用圆角矩形的例子，最后那位工程师第二天就做出了绘制圆角矩形的功能。</p>
<p>因此，在2007年一代iPhone诞生的时候，所有应用程序的图标都毫不出乎意料地使用了圆角矩形图标，即使是第三方应用也被强制要求使用圆角矩形图标，并且这一规则一直延续到了今天的iOS 11当中，如下图所示：</p>
<p><img src="iosicon.jpg" alt></p>
<p>相反，Android系统在设计的时候就不喜欢苹果这样的封闭与强制，而是选择了自由与开放，对应用图标的形状不做任何强制要求，开发者们可以自由进行选择：</p>
<p><img src="androidicon.jpg" alt></p>
<p>可以看到，在Android上，应用图标可以是方形、圆形、圆角矩形、或者是其他任意不规则图形。</p>
<p>本来就是两家公司不同的设计理念，也说不上孰高孰低。但由于Android操作系统是开源的，国内一些手机厂商在定制操作系统的时候就把这一特性给改了。比如小米手机，就选择了向苹果靠拢，强制要求应用图标圆角化。如果某些应用的图标不是圆角矩形的呢？小米系统会自动给它加上一个圆角的效果，如下图所示：</p>
<p><img src="miicon.jpg" alt></p>
<p>小米的这种做法看上去是向苹果学习，但实际上是相当恶心的。因为谁都可以看出来，这种自动添加的圆角矩形非常丑，因此很多公司就索性直接将应用的图标都设计成圆角矩形的，正好Android和iOS都用同一套图标还省事了。</p>
<p>但是这就让Google不开心了，这不是变向强制要求开发者必须将图标设计成圆角矩形吗？于是在去年的Google I/O大会上，Google点名批评了小米的这种做法，说其违反了Android自由和开放的理念。</p>
<p>除了变向强制要求应用图标圆角化，小米的这种处理方式还有一个弊端，就是如果应用图标的圆角弧度和小米系统要求的不同，那么会出现异常丑陋的效果。</p>
<p><img src="miicon2.webp" alt></p>
<p>该问题也存在了非常之久，Google多年来对此也是睁一只眼闭一只眼。终于在Android 8.0系统中，Google下定决心要好好整治一下Android应用图标的规范性了。</p>
<blockquote>
<p>原文来自郭林</p>
</blockquote>
<h1 id="8-0系统的应用图标适配"><a href="#8-0系统的应用图标适配" class="headerlink" title="8.0系统的应用图标适配"></a>8.0系统的应用图标适配</h1><p>这个问题对于Google来说还是挺难解决的。因为Google一直在强调自由与开放，那么小米强制要求所有应用图标都必须圆角化也是人家的自由呀，你不准人家这么干是不是本身就违背了自由和开放的理念呢？当然我们在这里讨论这个，有点像讨论先有鸡还是先有蛋的感觉，不过Google还是想出了一套完美的解决方案。</p>
<p>从Android 8.0系统开始，应用程序的图标被分为了两层：前景层和背景层。也就是说，我们在设计应用图标的时候，需要将前景和背景部分分离，前景用来展示应用图标的Logo，背景用来衬托应用图标的Logo。需要注意的是，背景层在设计的时候只允许定义颜色和纹理，但是不能定义形状。</p>
<p>那么应用图标的形状由谁来定义呢？Google将这个权利就交给手机厂商了。不是有些手机厂商喜欢学习苹果的圆角图标吗？没问题，由于应用图标的设计分为了两层，手机厂商只需要在这两层之上再盖上一层mask，这个mask可以是圆角矩形、圆形或者是方形等等，视具体手机厂商而定，就可以瞬间让手机上的所有应用图标都变成相同的规范。原理示意图如下：</p>
<p><img src="oicon.gif" alt></p>
<p>可以看到，这里背景层是一张蓝色的网格图，前景层是一张Android机器人Logo图，然后盖上一层圆形的mask，最终就裁剪出了一张圆形的应用图标。</p>
<p>官方命名为Adaptive Icons。</p>
<blockquote>
<p>如果你的APP中的targetSdkVersion是低于26的，那么就可以不用进行应用图标适配，Android 8.0系统仍然是向下兼容的。但是如果你将targetSdkVersion指定到了26或者更高，那么Android系统就会认为你的APP已经做好了8.0系统的适配工作，当然包括了应用图标的适配。(图标会有点丑)</p>
</blockquote>
<h1 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h1><p>Android Studio 3.0以上的版本中已经内置了8.0系统应用图标适配的功能。</p>
<p>新建一个项目，并查看app的gradle是否已经将targetSdkVersion设置为26。</p>
<p>在查看一下AndroidManifest.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"IconDemo"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">  //.....</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们需要关注的点是android:icon这个属性，通过这个属性，我们将应用的图标指定为了mipmap目录下的ic_launcher文件。</p>
<blockquote>
<p>还有一个android:roundIcon属性，这是一个只适用在Android 7.1系统上的过渡版本，很快就被8.0系统的应用图标适配所替代了，我们不用去管它。</p>
</blockquote>
<p><img src="shipei1.png" alt></p>
<p>在和以前版本不一样的地方就在于多了一个<code>mipmap-anydpi-v26</code>的目录，该目录会使得Android 8.0或以上系统的手机，都会使用这个目录下的ic_launcher来作为图标。</p>
<p>mipmap-anydpi-v26目录下的ic_launcher并不是一张图片，而是一个XML文件，我们打开这个文件看一下，代码如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">adaptive-icon</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">background</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_launcher_background"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreground</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_launcher_foreground"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">adaptive-icon</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是一个8.0系统应用图标适配的标准写法，在<code>&lt;adaptive-icon&gt;</code>标签中定义一个<code>&lt;background&gt;</code>标签用于指定图标的背景层，定义一个<code>&lt;foreground&gt;</code>标签用于指定图标的前景层。</p>
<p>再打开ic_launcher_background和ic_launcher_foreground后，发现他们只是一个使用SVG格式绘制出来的带纹理的底图。</p>
<blockquote>
<p>SVG格式的图片都是使用AI、PS等图像编辑软件制作之后导出的，基本没有人可以手工编写SVG图片。</p>
</blockquote>
<p>一般项目中也可以使用PNG、JPG等格式的图片，或者是一个背景色也可以。</p>
<p><img src="runprev.png" alt></p>
<p>这就是一个前景层盖在背景层上，然后再被圆形mask进行裁剪之后的效果。</p>
<h1 id="开始适配"><a href="#开始适配" class="headerlink" title="开始适配"></a>开始适配</h1><p>这里的话拿推特的图标作为例子，案例图在下方：</p>
<p><img src="tuite.png" alt></p>
<p><img src="tuite_forge.png" alt></p>
<p>背景色用PS提取出来的颜色值是#1da2f2。</p>
<p>图标已经准备好了，我们开始做图标适配了，回到项目中，然后按下Windows：Ctrl+Shift+A / Mac：command+shft+A 快捷键，并输入Image Asset，如下所示：</p>
<p><img src="imageassets.png" alt></p>
<p>当然也可以对着app(module)目录下右键新建</p>
<p><img src="imageassetsother.png" alt></p>
<p>点击回车键打开Asset Studio编辑器，在这里就可以进行应用图标适配了。</p>
<p><img src="adapter1.png" alt></p>
<p>这个Asset Studio编辑器非常简单好用，一学就会。左边是操作区域，右边是预览区域。</p>
<p>先来看操作区域，第一行的<code>Icon Type</code>中选择<code>Adaptive and Legacy</code>，表示同时创建兼容8.0系统以及老版本系统的应用图标。第二行的Name用于指定应用图标的名称，这里也保持默认即可。接下来的三个页签，<code>Foreground Layer</code>用于编辑前景层，<code>Background Layer</code>用于编辑背景层，<code>Legacy</code>用于编辑老版本系统的图标。</p>
<p>再来看预览区域，这个就十分简单了，用于预览应用图标的最终效果。在预览区域中给出了可能生成的图标形状，包括圆形、圆角矩形、方形等等。</p>
<p><strong>注意每个预览图标中都有一个圆圈，这个圆圈叫作安全区域，必须要保证图标的前景层完全处于安全区域当中才行，否则可能会出现图标被手机厂商的mask裁剪掉的情况。</strong></p>
<p>放一张GIF操作过程：(PS:图比较大，不太懂的压缩)</p>
<p><img src="demo.gif" alt></p>
<p>Android Studio会自动帮我们生成适配8.0系统的应用图标，以及适配老版本系统的应用图标。</p>
<p>来看看运行效果：</p>
<p><img src="demo2.png" alt></p>
<p>这里适配就完成啦。</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>Asset Studio自动生成的ic_launcher图标和ic_launcher_round分辨率比较低，在vivo厂商上架应用过程中被提示出将其替换为高清图标，按照vivo提示替换即可。</p>
<h1 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Layer Name - 图层名称</span><br><span class="line">Resize - 制定大小</span><br><span class="line">Round Icon - 仅针对android 7.1 icon处理</span><br><span class="line">Google Play Store Icon - 在google play商店中展示图标</span><br><span class="line">Icon Type - Launcher Icons(Legacy only)</span><br><span class="line">Asset Type - 资源类型，可选图片，剪切画，文本</span><br><span class="line">Path - 资源路径</span><br><span class="line">Name - 如果您不想使用默认名称，可以键入一个新名称。如果资源名称已在项目中存在（向导底部出现错误提示），它将被覆盖。名称只能包含小写字符、下划线和数字。</span><br><span class="line">Trim - 要调整源资产中图标图形与边框之间的边距，请选择 Yes。此操作将移除透明空间，同时保留纵横比。要保持源资产不变，请选择 No。默认值为：No</span><br><span class="line">Padding - 如果您想要调整全部四侧的源资产内边距，请移动滑块。选择 -10% 和 50% 之间的值。如果您也选择了 Trim，则首先会进行剪裁。默认值为：0%</span><br><span class="line">Foreground - 要更改 Clip Art 或 Text 图标的前景色，请点击字段。在 Select Color 对话框中，指定颜色，然后点击 Choose。字段中会显示新值。默认值为：000000</span><br><span class="line">Background - 要更改背景色，请点击字段。在 Select Color 对话框中，指定颜色，然后点击 Choose。字段中会显示新值。默认值为：FFFFFF</span><br><span class="line">Scaling - 要适合图标大小，请选择 Crop 或 Shrink to Fit。选择裁剪，图像边缘会被剪切；选择缩减，图像边缘不会被剪切。源资产仍然不合适时，如果需要，您可以调整内边距。默认值为：Shrink to Fit</span><br><span class="line">Shape - 要为您的源资产添加背景，请选择形状，选项包括圆、正方形、竖直矩形或水平矩形。要想使用透明的背景，请选择 None。默认值为：Square</span><br><span class="line">Effect - 如果您想要为正方形或矩形的右上角添加折角效果，请选择 DogEar。如果不需要，请选择 None。默认值为：None</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.android.com/studio/write/image-asset-studio?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/studio/write/image-asset-studio?hl=zh-cn</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://medium.com/google-design/understanding-android-adaptive-icons-cee8a9de93e2" target="_blank" rel="noopener">https://medium.com/google-design/understanding-android-adaptive-icons-cee8a9de93e2</a></p>
<p><a href="https://mp.weixin.qq.com/s/WxgHJ1stBjokPi6lTUd1Mg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/WxgHJ1stBjokPi6lTUd1Mg</a></p>
<p><a href="https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive" target="_blank" rel="noopener">https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Android Studio——No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android错误</title>
    <url>/2019/07/12/%E8%A7%A3%E5%86%B3Android-Studio%E2%80%94%E2%80%94No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mips64el-linux-android%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天导入了一个比较老一些的项目，AS一直提示出该错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">No toolchains found <span class="keyword">in</span> the NDK toolchains folder <span class="keyword">for</span> ABI with prefix: mips64el-linux-android</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>查了网上一些解决办法，可用的办法是该办法：</p>
<p><strong>解决方案1：</strong></p>
<ol>
<li>修改build.gradle中的Gradle Build Tool版本，改为3.1以及以上版本</li>
<li>将Android Studio升级到3.1以及以上版本</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    classpath <span class="string">'com.android.tools.build:gradle:3.2.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>问题原因：</strong></p>
<p>NDK的更新记录里有一段话：</p>
<blockquote>
<p>This version of the NDK is incompatible with the Android Gradle plugin<br>version 3.0 or older. If you see an error like<br><code>No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android</code>,<br>update your project file to [use plugin version 3.1 or newer]. You will also<br>need to upgrade to Android Studio 3.1 or newer.</p>
</blockquote>
<p>即新版本的NDK与3.0及以前旧版的Android Gradle plugin插件不兼容</p>
<p><strong>解决方案2</strong></p>
<p>找到NDK的配置目录<code>File</code>-&gt;<code>Project Structure</code>-&gt;<code>SDK Location</code></p>
<p><img src="ndklocaltion.png" alt></p>
<p>打开命令行，进入到Android NDK Location目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/zjyzy/Library/Android/sdk/ndk-bundle</span><br></pre></td></tr></table></figure>
<p>在进入到toolchains目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> toolchains</span><br></pre></td></tr></table></figure>
<p>输入，即配置软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -sf aarch64-linux-android-4.9 mips64el-linux-android</span><br></pre></td></tr></table></figure>
<blockquote>
<p>或者ln -s arm-linux-androideabi-4.9 mipsel-linux-android</p>
</blockquote>
<p>即可解决。</p>
<blockquote>
<p>删除则直接使用命令<code>rm -rf mips64el-linux-android</code></p>
</blockquote>
<p><strong>解决方案3</strong></p>
<p>去Android官网下载，方案未尝试。</p>
<p>放个别人的链接：<a href="https://blog.csdn.net/qq_24118527/article/details/82867864" target="_blank" rel="noopener">https://blog.csdn.net/qq_24118527/article/details/82867864</a></p>
<p><strong>解决方案4</strong></p>
<blockquote>
<p>升级到Android Studio 3.1.2版本后，原有的NDK由r16升级到r17，因为r17不再支持mips，导致<code>ndk-bundle/toolchains/mips64el-linux-android-4.9/prebuilt/linux-x86_64/bin/mips64el-linux-android-strip</code> 找不到, 导致编译报：<strong>Error:org.gradle.process.internal.ExecException: A problem occurred starting process ‘command ‘…\ndk-bundle\toolchains\aarch64-linux-android-4.9\prebuilt\windows-x86_64\bin\aarch64-linux-android-strip’’</strong>。</p>
</blockquote>
<p>网上找到的解决办法是删掉NDK或者降级使用r16的NDK，这其实是治标不治本的，这里的解决办法是在<code>build.gradle</code>脚本里排除mips</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ndk &#123;</span><br><span class="line">            <span class="comment">//支持的CPU架构，如armeabi、x86、mips等</span></span><br><span class="line">            abiFilters <span class="string">"armeabi"</span>, <span class="string">"x86"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    packagingOptions &#123;</span><br><span class="line">        doNotStrip <span class="string">'*/mips/*.so'</span></span><br><span class="line">        doNotStrip <span class="string">'*/mips64/*.so'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参阅：<a href="https://stackoverflow.com/questions/42739916/aarch64-linux-android-strip-file-missing" target="_blank" rel="noopener">https://stackoverflow.com/questions/42739916/aarch64-linux-android-strip-file-missing</a></p>
<p><strong>总结</strong></p>
<p>其实主要是因为项目中NDK17及以上版本和NDK16版本不再兼容了，如果旧项目编译不通过并且还需要支持mips可以重新再下载一次NDK16的环境。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS之UIViewController</title>
    <url>/2019/07/10/IOS%E4%B9%8BUIViewController/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>UIViewController（视图控制器），顾名思义，是 MVC 设计模式中的控制器部分。UIViewController 在 UIKit 中主要功能是用于控制画面的切换，其中的 <code>view</code> 属性（UIView 类型）管理整个画面的外观。</p>
<a id="more"></a>
<h1 id="UIViewController生命周期"><a href="#UIViewController生命周期" class="headerlink" title="UIViewController生命周期"></a>UIViewController生命周期</h1><p>用网上拿来的一张图：</p>
<p><img src="lifecycle.jpg" alt></p>
<p>ViewController 生命周期的第一步是初始化。不过具体调用的方法还有所不同。如果使用 StoryBoard 来创建 ViewController，我们不需要显式地去初始化，Storyboard 会自动使用 <code>initWithCoder:</code> 进行初始化。如果不使用 StoryBoard，我们可以使用 <code>init:</code> 函数进行初始化，<code>init:</code> 函数在实现过程中还会调用 <code>initWithNibName:bundle:</code>。 </p>
<blockquote>
<p>尽量避免在 VC 外部调用 <code>initWithNibName:bundle:</code>，而是把它放在 VC 的内部（参考<a href="https://stackoverflow.com/questions/2224077/when-should-i-initialize-a-view-controller-using-initwithnibname" target="_blank" rel="noopener">这里</a>）。</p>
</blockquote>
<p>初始化完成后，VC 的生命周期会经过下面几个函数：</p>
<ul>
<li><p>(void)loadView</p>
<p>此时，控制器的 view 还未初始化，可以通过重写这个方法自定义控制器的 View，如果这样做，那就不能调用<code>[super loadView]</code>（上面代码调用是为了方便打印，不然屏幕就是黑的）。</p>
</li>
<li><p>(void)viewDidLoad</p>
<p>在控制器的生命周期中，它只会被调用一次，此时，view 已经初始化好，非常适合做一些页面的初始化任务。由于此时 view 的 bounds 尚未确定，所以不适合写 frame 类型的布局代码，但是给视图添加约束没有影响。</p>
</li>
<li><p>(void)viewWillAppear</p>
<p>它会在控制器的视图将要出现在屏幕中时被调用，在控制器生命周期中可能会被调用多次。在此处，适合做一些与视图出现相关联的任务，例如改变状态栏的方向、风格。</p>
</li>
<li><p>(void)viewWillLayoutSubviews</p>
<p>当 view 的子视图即将布局时，此方法会被调用，触发的条件是：</p>
<ul>
<li>view 被添加到视图层次中</li>
<li>view 的 bounds 发生了改变</li>
<li>调用了 <code>- setNeedsLayout</code>方法</li>
<li>调用了 <code>- layoutIfNeeded</code>方法</li>
</ul>
<p>这个方法是写 frame 布局代码的好地方，将 view 的子视图布局好，每次 view 大小发生改变时，其子视图布局也会相应改变。</p>
</li>
<li><p>(void)viewDidLayoutSubviews</p>
<p>当 view 的子视图已经布局时，此方法会被调用，触发条件同上。</p>
</li>
<li><p>(void)viewDidAppear</p>
<p>它会在控制器的视图出现在屏幕后被调用，此时，view 的 bounds 已经确定，不过在这里写布局相关代码，可能会反映到屏幕上。</p>
</li>
<li><p>(void)viewWillDisappear</p>
<p>视图即将从屏幕中消失时触发。</p>
</li>
<li><p>(void)viewDidDisappear</p>
<p>视图从屏幕中消失后触发。</p>
</li>
</ul>
<p>代码测试一下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)loadView</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> loadView];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromSelector</span>(_cmd));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromSelector</span>(_cmd));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromSelector</span>(_cmd));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillLayoutSubviews</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillLayoutSubviews];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromSelector</span>(_cmd));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLayoutSubviews</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLayoutSubviews];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromSelector</span>(_cmd));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidAppear:animated];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromSelector</span>(_cmd));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromSelector</span>(_cmd));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidDisappear:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromSelector</span>(_cmd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Demo[3268:99911] loadView</span><br><span class="line">Demo[3268:99911] viewDidLoad</span><br><span class="line">Demo[3268:99911] viewWillAppear:</span><br><span class="line">Demo[3268:99911] viewWillLayoutSubviews</span><br><span class="line">Demo[3268:99911] viewDidLayoutSubviews</span><br><span class="line">Demo[3268:99911] viewDidAppear:</span><br></pre></td></tr></table></figure>
<p>这是单个控制器情况下，我们在假设现在有一个 AViewController(简称 Avc) 和 BViewController (简称 Bvc)，通过 navigationController 的 push 实现 Avc 到 Bvc 的跳转，下面是各个方法的执行执行顺序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A viewDidLoad  </span><br><span class="line">A viewWillAppear  </span><br><span class="line">A viewDidAppear  </span><br><span class="line">B viewDidLoad  </span><br><span class="line">A viewWillDisappear  </span><br><span class="line">B viewWillAppear  </span><br><span class="line">A viewDidDisappear  </span><br><span class="line">B viewDidAppear</span><br></pre></td></tr></table></figure>
<p>如果再从 Bvc 跳回 Avc，会产生下面的执行顺序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">B viewWillDisappear  </span><br><span class="line">A viewWillAppear  </span><br><span class="line">B viewDidDisappear  </span><br><span class="line">A viewDidAppear</span><br></pre></td></tr></table></figure>
<p>可见 viewDidLoad 只会调用一次，再第二次跳回 Avc 的时候，AViewController 仍然存在于内存中，也就不需要 load 了。</p>
<p>注意上面的生命周期中都没有提到有关 ViewController 销毁的内容，在 iOS 4 &amp; 5 中 ViewController 中有一个 <code>viewDidUnload</code> 方法。当内存不足，应用收到 Memory warning 时，系统会自动调用当前没在界面上的 ViewController 的 <code>viewDidUnload</code>方法。 通常情况下，这些未显示在界面上的 ViewController 是 UINavigationController Push 栈中未在栈顶的 ViewController，以及 UITabBarViewController 中未显示的子 ViewController。这些 View Controller 都会在 Memory Warning 事件发生时，被系统自动调用 <code>viewDidUnload</code>方法。</p>
<blockquote>
<p>从 iOS 6 开始，viewDidUnload 方法被废弃掉了，应用受到 memory warning 时也不会再调用 viewDidUnload 方法。我们可以通过重载 <code>- (void)didReceiveMemoryWarning</code> 和 <code>-(void)dealloc</code> 来进行清理工作。</p>
</blockquote>
<h1 id="控制器-View-的创建和生命周期"><a href="#控制器-View-的创建和生命周期" class="headerlink" title="控制器 View 的创建和生命周期"></a>控制器 View 的创建和生命周期</h1><p><img src="viewlife.png" alt></p>
<p>图中控制器view的加载过程中有两个很重要的方法：一个是loadView，另外一个是viewDidLoad。</p>
<p><strong>loadView方法</strong><br>作用：loadView方法是用来负责创建UIViewController的view。</p>
<p>首先判断下有没有指定storyboard或者xib,如果指定,就会加载它们描述的控制器的view,如果没有指定,创建一个空的view。<br>什么时候调用：每次访问UIViewController的view，当view为nil，就会调用loadView方法。</p>
<p><strong>viewDidLoad</strong></p>
<p>作用：一般我们会在这里做界面上的初始化操作，比如往view中添加一些子视图等。<br>什么时候调用：每当view创建完毕的时候，最终都会调用viewDidLoad方法。</p>
<blockquote>
<ol>
<li>通过storyboard创建的控制器，或者通过xib创建的控制器的view，系统会帮我们加载控制器的view，具体内部实现可以看<a href="https://link.juejin.im/?target=http%3A%2F%2Fwww.jianshu.com%2Fp%2Faf2a6a438a0a" target="_blank" rel="noopener">iOS-UIWindow详解</a>，在此不在赘述</li>
<li><code>ViewController *vc = [[ViewController alloc]init];</code><br>底层也会调用<code>-(instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil</code>方法。<br>(1).判断下有没有指定nibName,如果指定了,就会去加载指定的xib<br>(2).如果没有指定,就会判断下有没有跟控制器类名同名的xib,有,就会去加载<br>(3).判断下有没有跟控制器类名同名的xib,但是后缀不带Controller的xib,如果有,就会去加载<br>(4).如果没有任何xib描述控制器的view,就不会加载xib。会创建一个颜色为clearColor的view。</li>
</ol>
</blockquote>
<h1 id="控制器view加载的几种方式"><a href="#控制器view加载的几种方式" class="headerlink" title="控制器view加载的几种方式"></a>控制器view加载的几种方式</h1><h2 id="通过storyboard加载"><a href="#通过storyboard加载" class="headerlink" title="通过storyboard加载"></a>通过storyboard加载</h2><p>当控制器通过storyboard加载时，需要指定storyboard的名称，控制器view最终就是storyboard所描述的样子，这个比较简单，不做详细阐述</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIStoryboard</span> *storyboard = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"TestViewController"</span> bundle:<span class="literal">nil</span>];</span><br><span class="line">TestViewController *testVC = [storyboard instantiateInitialViewController];</span><br><span class="line">[<span class="keyword">self</span>.navigationController pushViewController:testVC animated:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要记住在 attributes inspector中将 Is Initial View Controller选项勾上</p>
</blockquote>
<p>或者获取指定Storyboard中Storyboard ID的某个ViewController，例如：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIStoryboard</span> *sb = [<span class="built_in">UIStoryboard</span> storyboardWithName:<span class="string">@"Main"</span> bundle:<span class="literal">nil</span>];</span><br><span class="line">SBIDTableViewController *mtvc = [sb instantiateViewControllerWithIdentifier:<span class="string">@"sbid"</span>];</span><br></pre></td></tr></table></figure>
<h2 id="通过xib加载"><a href="#通过xib加载" class="headerlink" title="通过xib加载"></a>通过xib加载</h2><p>当控制器view通过xib加载的时候，可能会出现三种情况</p>
<p><strong>1、指定xib名称</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event&#123;</span><br><span class="line">  TestViewController *testVC = [[TestViewController alloc] initWithNibName:<span class="string">@"OtherViewController"</span> bundle:<span class="literal">nil</span>];</span><br><span class="line">  [<span class="keyword">self</span>.navigationController pushViewController:testVC animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们指定了xib的名称，loadView方法就会去加载对应的xib</p>
<p><strong>2、不指定xib名称</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event&#123;</span><br><span class="line">  TestViewController *testVC = [[TestViewController alloc] init];</span><br><span class="line">  [<span class="keyword">self</span>.navigationController pushViewController:testVC animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当没有指定xib名称，分两种情况：如果有控制器同名的xib则加载，例如TestViewController会加载TestViewController.xib。如果没有与控制器同名的xib文件时，会加载前缀与控制器名相同而不带controller的xib（TestView.xib）</p>
<p><strong>3、不通过sb\xib加载</strong></p>
<p>把xib和sb文件都删除掉，什么都不加载。则会默认创建一个UIView，虽然显示为黑色，但其实该颜色是UIWindow的。</p>
<p><img src="zindex1.png" alt></p>
<p><strong>4、重写loadView方法</strong></p>
<p>重写控制器的loadView方法:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)loadView&#123;</span><br><span class="line">  <span class="keyword">self</span>.view = [[<span class="built_in">UIImageView</span> alloc] init];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制器view加载出来的时候就是我们设置的UIImageView。如果重写该方法里面什么也不写，和不通过sb\xib加载方式的运行结果相同。不过两者区别是这种方式并没有创建UIView。</p>
<p><img src="zindex2.png" alt></p>
<p><strong>结论：</strong></p>
<ul>
<li>重写loadView方法，则会根据重写的loadView方法创建view</li>
<li>控制器通过storyboard加载，则根据storyboard的描述创建view</li>
<li>控制器view通过xib加载，则根据nibName对应的xib创建view</li>
<li>没有指定nibName，则根据与控制器同名的xib创建view</li>
<li>没有同名的xib，则根据与控制器名前缀相同不带controller的xib创建view</li>
<li>如果都没有，则创建一个空白的xib</li>
<li>storyboard加载的是控制器及控制器view，而xib加载的仅仅只是控制器的view</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/UIViewController.html" target="_blank" rel="noopener">https://hit-alibaba.github.io/interview/iOS/Cocoa-Touch/UIViewController.html</a></p>
<p><a href="http://blog.devtang.com/blog/2013/05/18/goodbye-viewdidunload/" target="_blank" rel="noopener">http://blog.devtang.com/blog/2013/05/18/goodbye-viewdidunload/</a></p>
<p><a href="https://www.jianshu.com/p/23a83706d773" target="_blank" rel="noopener">https://www.jianshu.com/p/23a83706d773</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>Android应用内禁止屏幕截图</title>
    <url>/2019/07/09/Android%E5%BA%94%E7%94%A8%E5%86%85%E7%A6%81%E6%AD%A2%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一个晚上在看了一下微信的收付款功能，想截个图，突然发现提示了一句<strong>由于受安全政策限制，无法截取屏幕截图</strong>，再研究了一下手机的其他APP，中国建设银行APP上也有该提示，出于好奇，查阅了一下该功能的实现方式。</p>
<a id="more"></a>
<p>该功能的实现方式很简单，就是在<code>setContentView</code>前加上一句代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);</span><br></pre></td></tr></table></figure>
<p><img src="demo.jpeg" alt></p>
<p>Google官方对于<a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE" target="_blank" rel="noopener">FLAG_SECURE</a>的解释：</p>
<blockquote>
<p>Display flag: Indicates that the display has a secure video output and supports compositing secure surfaces.</p>
<p>If this flag is set then the display device has a secure video output and is capable of showing secure surfaces. It may also be capable of showing <code>protected buffers</code>.</p>
<p>If this flag is not set then the display device may not have a secure video output; the user may see a blank region on the screen instead of the contents of secure surfaces or protected buffers.</p>
<p>Secure surfaces are used to prevent content rendered into those surfaces by applications from appearing in screenshots or from being viewed on non-secure displays. Protected buffers are used by secure video decoders for a similar purpose.</p>
<p>An application creates a window with a secure surface by specifying the <code>WindowManager.LayoutParams#FLAG_SECURE</code>window flag. Likewise, an application creates a <code>SurfaceView</code> with a secure surface by calling <code>SurfaceView#setSecure</code> before attaching the secure view to its containing window.</p>
<p>An application can use the absence of this flag as a hint that it should not create secure surfaces or protected buffers on this display because the content may not be visible. For example, if the flag is not set then the application may choose not to show content on this display, show an informative error message, select an alternate content stream or adopt a different strategy for decoding content that does not rely on secure surfaces or protected buffers.</p>
<p><strong>See also:</strong></p>
<ul>
<li><code>getFlags()</code></li>
</ul>
<p>Constant Value: 2 (0x00000002)</p>
</blockquote>
<p>在设置了该FLAG后，发现该FLAG还可以实现以下功能：</p>
<ul>
<li>阻止屏幕截图</li>
<li>在任务切换界面中（Recent apps）只显示应用名字和图标，不会显示APP具体内容。</li>
</ul>
<p><strong>参考资料</strong></p>
<p><a href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE" target="_blank" rel="noopener">https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE</a></p>
<p><a href="https://developer.android.com/reference/android/view/Display.html#FLAG_SECURE" target="_blank" rel="noopener">https://developer.android.com/reference/android/view/Display.html#FLAG_SECURE</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS之UIAlertController使用</title>
    <url>/2019/07/08/IOS%E4%B9%8BUIAlertController%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当应用需要向用户提示一些重要信息或者提示用户进行选择时，可以使用警告框(Alert)或者操作表(Action Sheet)来进行提示用户。下图中左侧是警告框，右侧是操作表。</p>
<a id="more"></a>
<p><img src="tip.png" alt></p>
<p>自iOS 8开始，Apple用继承自<code>UIViewController</code>的<code>UIAlertController</code>取代了<code>UIAlertView</code>和<code>UIAlertSheet</code>。</p>
<p>警报控制器（UIAlertController）虽然有警告框和操作表两种形式，但其创建步骤是一样的。如下所示：</p>
<ol>
<li>创建<code>UIAlertController</code>，指定警报控制器样式。</li>
<li>向警报控制器添加按钮。</li>
<li>显示<code>UIAlertController</code>。</li>
</ol>
<blockquote>
<p>“ UIAlertView is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleAlert instead.”</p>
<p>“UIActionSheet is deprecated. Use UIAlertController with a preferredStyle of UIAlertControllerStyleActionSheet instead. “</p>
</blockquote>
<h1 id="创建警告框"><a href="#创建警告框" class="headerlink" title="创建警告框"></a>创建警告框</h1><h2 id="创建警告控制器"><a href="#创建警告控制器" class="headerlink" title="创建警告控制器"></a>创建警告控制器</h2><p>创建<code>UIAlertController</code>很简单，不需要设置代理或者指定按钮</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"标题"</span> message:<span class="string">@"这是message"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIAlertControllerStyle</span>) &#123;</span><br><span class="line">    <span class="built_in">UIAlertControllerStyleActionSheet</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">UIAlertControllerStyleAlert</span></span><br><span class="line">&#125; <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">8</span>_0);</span><br></pre></td></tr></table></figure>
<p>这里的<code>preferredStyle:</code>参数有<code>UIAlertControllerStyleAlert</code>和<code>UIAlertControllerStyleActionSheet</code>两种，这里我们要创建的是<em>Alert View</em>，所以使用第一种。</p>
<h2 id="添加按钮"><a href="#添加按钮" class="headerlink" title="添加按钮"></a>添加按钮</h2><p><code>UIAlertAction</code>对象由标题、样式和用户单击该按钮时运行的代码块三部分组成。<code>UIAlertActionStyle</code>有三种样式。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIAlertActionStyle</span>) &#123;</span><br><span class="line">    <span class="comment">// 常规样式</span></span><br><span class="line">    <span class="built_in">UIAlertActionStyleDefault</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 取消样式</span></span><br><span class="line">    <span class="built_in">UIAlertActionStyleCancel</span>,</span><br><span class="line">    <span class="comment">// 警示样式，按钮字体为红色</span></span><br><span class="line">    <span class="built_in">UIAlertActionStyleDestructive</span></span><br><span class="line">&#125; <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">8</span>_0);</span><br></pre></td></tr></table></figure>
<p>创建代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIAlertAction</span> *sure = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"确定"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"确定"</span>);</span><br><span class="line">    &#125;];</span><br><span class="line"><span class="built_in">UIAlertAction</span> *cancel = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"取消"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"取消"</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">[alert addAction:sure];</span><br><span class="line">[alert addAction:cancel];</span><br></pre></td></tr></table></figure>
<h2 id="显示警告框"><a href="#显示警告框" class="headerlink" title="显示警告框"></a>显示警告框</h2><p>显示alert</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span> presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="alert.png" alt></p>
<p>如果再添加一个reset按钮并设置成<code>UIAlertActionStyleDestructive</code>样式，再看看效果</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="built_in">UIAlertAction</span> *reset = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"Reset"</span> style:<span class="built_in">UIAlertActionStyleDestructive</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Reset Action"</span>);</span><br><span class="line">&#125;];</span><br><span class="line">[alert addAction:reset];</span><br><span class="line"><span class="comment">//show</span></span><br><span class="line">[<span class="keyword">self</span> presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p><img src="alert2.png" alt></p>
<p>只要上面有<code>UIAlertActionStyleCancel</code>样式的按钮，该按钮总是在最底部，其他按钮顺序由添加顺序决定。如果包含<code>UIAlertActionStyleDestructive</code>样式的按钮，一般先添加，以便在第一个位置显示。每一个警报控制器只能包含一个<em>Cancel</em>按钮，如果你添加了两个或多个，在运行时会抛出<code>NSInternalInconsistencyException</code>的异常。</p>
<blockquote>
<p><strong>UIAlertActionStyleDefault 和 UIAlertActionStyleCancel 的区别</strong></p>
<p>添加UIAlertActionStyleCancel样式后，在UIAlertAction只有两个时，UIAlertActionStyleCancel样式的action都会按苹果的默认风格把取消按钮放在左边；</p>
<p>添加UIAlertActionStyleCancel样式后，在UIAlertAction有三个及其以上的时候，UIAlertActionStyleCancel样式的action会显示在最下面。</p>
<p>而添加UIAlertActionStyleDefault样式时，与你addAction到alertController上的顺序有关。</p>
<p><strong>UIAlertActionStyleDestructive 警示样式</strong></p>
<p>警示样式的按钮会变成红色。根据苹果官方的定义，“警示”样式的按钮是用在可能会改变或删除数据的操作上，因此用了红色的醒目标识来警示用户。</p>
</blockquote>
<h2 id="创建带输入框的警告框"><a href="#创建带输入框的警告框" class="headerlink" title="创建带输入框的警告框"></a>创建带输入框的警告框</h2><p><code>UIAlerController</code>的另一个用途是我们可以向警报控制器中添加任意数量的<code>UITextField</code>作为警报控制器内容视图中的一部分。</p>
<p>比如这里用一个登录框来进行举例：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取UIAlertController实例</span></span><br><span class="line"><span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"登录框"</span> message:<span class="string">@"请输入用户名和密码"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line"><span class="comment">//创建UIAlertAction</span></span><br><span class="line"><span class="built_in">UIAlertAction</span> *sure = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"登陆"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">		<span class="comment">//获取textField实例，根据添加的顺序获取</span></span><br><span class="line">		<span class="built_in">UITextField</span> *loginname = alert.textFields.firstObject;</span><br><span class="line">		<span class="built_in">UITextField</span> *pwd = alert.textFields.lastObject;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"name:%@,  pwd:%@"</span>, loginname.text, pwd.text);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="built_in">UIAlertAction</span> *cancel = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"取消"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"取消"</span>);        </span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">//添加到UIAlertController实例</span></span><br><span class="line">[alert addAction:sure];</span><br><span class="line">[alert addAction:cancel];</span><br><span class="line"><span class="comment">//添加TextField</span></span><br><span class="line">[alert addTextFieldWithConfigurationHandler:^(<span class="built_in">UITextField</span> * _Nonnull textField) &#123;</span><br><span class="line">   [textField setPlaceholder:<span class="string">@"name"</span>];</span><br><span class="line">&#125;];</span><br><span class="line">[alert addTextFieldWithConfigurationHandler:^(<span class="built_in">UITextField</span> * _Nonnull textField) &#123;</span><br><span class="line">    [textField setPlaceholder:<span class="string">@"password"</span>];</span><br><span class="line">    textField.secureTextEntry = <span class="literal">YES</span>;</span><br><span class="line">&#125;];</span><br><span class="line">[<span class="keyword">self</span> presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="alerttextfield.png" alt></p>
<h1 id="创建操作表Action-Sheet"><a href="#创建操作表Action-Sheet" class="headerlink" title="创建操作表Action Sheet"></a>创建操作表Action Sheet</h1><p>操作表一般用于为用户提供一组可供选择的操作选项，如删除、恢复等。一般根据设备尺寸大小决定呈现形式，在iPhone上，操作表由底部滑出；在iPad上，操作表以弹出框（popover)形式出现。</p>
<p>创建操作表的方法与警告框类似，唯一不同在于<code>preferredStyle:</code>参数的选择。在<code>showActionSheet:</code>方法中创建操作表。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIAlertController</span> *sheet = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"标题"</span> message:<span class="string">@"这是message"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleActionSheet</span>];</span><br></pre></td></tr></table></figure>
<p>添加Action Sheet的按钮和添加警告框的按钮代码行为是一致的。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UIAlertAction</span> *sure = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"确定"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"确定"</span>);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="built_in">UIAlertAction</span> *reset = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"重置"</span> style:<span class="built_in">UIAlertActionStyleDestructive</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"重置"</span>);</span><br><span class="line">&#125;];</span><br><span class="line"><span class="built_in">UIAlertAction</span> *cancel = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"取消"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">		<span class="built_in">NSLog</span>(<span class="string">@"取消"</span>);</span><br><span class="line">&#125;];</span><br><span class="line">[sheet addAction:sure];</span><br><span class="line">[sheet addAction:cancel];</span><br><span class="line">[sheet addAction:reset];</span><br><span class="line"><span class="comment">//show</span></span><br><span class="line">[<span class="keyword">self</span> presentViewController:sheet animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="actionsheet.png" alt></p>
<p>如果<code>Action Sheet</code>中有取消按钮，取消按钮每次都会在底部显示，其他按钮会按照添加的顺序显示。在Action Sheet内不能添加文本框。如果你添加了文本框，在运行时会抛出下面的异常提醒：</p>
<blockquote>
<p>Terminating app due to uncaught exception ‘NSInternalInconsistencyException’, reason: ‘Text fields can only be added to an alert controller of style UIAlertControllerStyleAlert’</p>
</blockquote>
<p>如上面说到的，在iPad中Action Sheet以弹出框的形式呈现。弹出框总是需要一个锚点，锚点可以是源视图，也可以是按钮。在这个demo中，我们用按钮触发弹出框，所以这里将把按钮作为锚点。<code>showActionSheet:</code>方法更新后如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//inner click func</span></span><br><span class="line"><span class="comment">//(IBAction)actionsheet:(UIButton *)sender</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="built_in">UIPopoverPresentationController</span> *popover = sheet.popoverPresentationController;</span><br><span class="line"><span class="keyword">if</span> (popover) &#123;</span><br><span class="line">		popover.sourceView = sender;</span><br><span class="line">		popover.sourceRect = sender.bounds;</span><br><span class="line">		popover.permittedArrowDirections = <span class="built_in">UIPopoverArrowDirectionAny</span>;        </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">[<span class="keyword">self</span> presentViewController:sheet animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p>如果在iPad中没有添加上面方法，运行时会出现下面崩溃提示：</p>
<blockquote>
<p>Terminating app due to uncaught exception ‘NSGenericException’, reason: ‘Your application has presented a UIAlertController (&lt;UIAlertController: 0x7f88c85221f0&gt;) of style UIAlertControllerStyleActionSheet. The modalPresentationStyle of a UIAlertController with this style is UIModalPresentationPopover. You must provide location information for this popover through the alert controller’s popoverPresentationController. You must provide either a sourceView and sourceRect or a barButtonItem.  If this information is not known when you present the alert controller, you may provide it in the UIPopoverPresentationControllerDelegate method -prepareForPopoverPresentation.’</p>
</blockquote>
<p>现在，Action Sheet以触发它的按钮为锚点，以弹出框形式展现。</p>
<p><img src="actionsheetipad.png" alt></p>
<blockquote>
<p>当Action Sheet以弹出框形式展现时，<code>UIKit</code>会取消显示<em>Cancel</em>按钮。此时，点击popover以外任何区域和点击<em>Cancel</em>按钮效果一致，同时会调用取消按钮的完成处理程序。</p>
</blockquote>
<h1 id="退出警告控制器"><a href="#退出警告控制器" class="headerlink" title="退出警告控制器"></a>退出警告控制器</h1><p>警报控制器会在用户点击按钮后自动消失，但在app进入后台时，警告框和选择表并不会自动退出。此时，我们需要通过代码实现退出警报控制器。</p>
<p>在<strong>通知中心</strong>进行注册，当接收到app进入后台的通知时退出警报控制器。更新后的<code>viewDidLoad</code>如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// app 进入后台后隐藏警报控制器</span></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserverForName:<span class="built_in">UIApplicationDidEnterBackgroundNotification</span> object:<span class="literal">nil</span> queue:<span class="literal">nil</span> usingBlock:^(<span class="built_in">NSNotification</span> * _Nonnull note) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.presentedViewController dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 移除观察者</span></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIApplicationDidEnterBackgroundNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>记得移除观察者，否则会引起崩溃。</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>下面总结下Alert View和Action Sheet的异同。</p>
<p>警告框Alert View：</p>
<ul>
<li>一般显示在当前视图控制器的中心，点击警告框以外区域不能隐藏警告控制器。</li>
<li>可以添加任意数量文本框。</li>
<li>有一个或两个按钮时，横向排布，如果有<em>Cancel</em>按钮，则<em>Cancel</em>按钮显示在左侧；有两个以上按钮时，竖列排布，如果有<em>Cancel</em>按钮，则<em>Cancel</em>按钮显示在最底部。其他按钮按照添加顺序排布。</li>
</ul>
<p>操作表Action Sheet：</p>
<ul>
<li>在iPhone中自下而上滑出显示在当前控制器的底部，点击action sheet以外区域可以隐藏<code>UIAlertController</code>。</li>
<li>在iPad中以popover方式、以源视图为锚点显示，点击选择表以外的区域可以隐藏警告控制器。</li>
<li>不能添加文本框。</li>
<li>按钮竖列排布，在iPhone中，<em>Cancel</em>按钮默认在底部显示；在iPad中，<em>Cancel</em>按钮默认不显示。</li>
</ul>
<p><code>UIAlertController</code>类只能原样使用，不支持子类化。该类的视图层次结构是私有的，不能修改。最后，需要注意的是，警告框和操作表向用户显示信息时会中断应用的当前流程，请只在需要的时候使用，切勿滥用。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/7606b6514ec4" target="_blank" rel="noopener">https://www.jianshu.com/p/7606b6514ec4</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>Android系统剪贴板使用</title>
    <url>/2019/07/04/Android%E7%B3%BB%E7%BB%9F%E5%89%AA%E8%B4%B4%E6%9D%BF%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近公司业务用到了关于Android系统剪贴板的使用，所以记录一下剪贴板的使用。</p>
<a id="more"></a>
<h1 id="ClipboardManager介绍"><a href="#ClipboardManager介绍" class="headerlink" title="ClipboardManager介绍"></a>ClipboardManager介绍</h1><p>当需要使用到ClipboardManager时，需要把数据放在一个ClipData里，然后在把这个数据对象放在系统的剪贴板里面。</p>
<p><strong>ClipData有三种形式：</strong></p>
<ul>
<li>Text：文字字符串。文字是直接放在clip对象中，然后放在剪贴板里；粘贴这个字符串的时候直接从剪贴板拿到这个对象，把字符串放入你的应用存储中。</li>
<li>URI：一个Uri对象。表示任何形式的URI。这种形式主要用于从一个content provider中复制复杂的数据。复制的时候把一个<code>Uri</code> 对象放在一个clip对象中，然后再放在剪贴板里；粘贴的时候取出这个clip对象，得到Uri，把它解析为一个数据资源比如content provider，然后从资源中复制数据到应用存储中。</li>
<li>Intent：Intent对象。这支持了复制应用快捷方式。复制的时候把Intent对象放在clip对象中，再放入剪贴板；粘贴数据时，从clip对象中得到Intent对象，放入应用存储区域中。</li>
</ul>
<blockquote>
<p>注意：剪贴板里每次仅会持有一个ClipData对象，当应用再放入另一个ClipData对象进来时，前一个就消失了。</p>
</blockquote>
<h1 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h1><h2 id="ClipboardManager"><a href="#ClipboardManager" class="headerlink" title="ClipboardManager"></a>ClipboardManager</h2><p>ClipboardManager代表了系统的剪贴板，可以通过<code>(ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE)</code>系统服务来获取。</p>
<p>全名为<strong>android.text.ClipboardManager</strong>从API 11开始就废弃了。</p>
<p>取而代之的是它的子类：<strong>android.content.ClipboardManager</strong> (since API Level 11)。</p>
<h2 id="ClipData-ClipDescription-and-ClipData-Item"><a href="#ClipData-ClipDescription-and-ClipData-Item" class="headerlink" title="ClipData, ClipDescription, and ClipData.Item"></a>ClipData, ClipDescription, and ClipData.Item</h2><p>前面说的clip对象就是<strong>ClipData</strong>类的对象，其中包含了一个 <code>ClipDescription</code>对象和一个或多个<code>ClipData.Item</code>对象。</p>
<p><strong>ClipDescription</strong>对象中包含了一个数组，描述clip对象的MIME类型。</p>
<p><strong>ClipData.Item</strong>对象中包含文字、URI或者Intent数据。<strong>一个clip对象中可以包含一个或多个Item对象</strong>。</p>
<p>比如你想要复制list中的多项数据，你可以为list中的每一项创建一个<strong>ClipData.Item</strong>对象，然后把它们放进一个<strong>ClipData</strong>对象中，这样就一次性把多项数据都放在了剪贴板中。</p>
<blockquote>
<p>注意ClipData这个类是API 11才有的。</p>
</blockquote>
<h2 id="ClipData中的简洁方法"><a href="#ClipData中的简洁方法" class="headerlink" title="ClipData中的简洁方法"></a>ClipData中的简洁方法</h2><ul>
<li><p><strong>ClipData</strong>类中有一些静态的简洁方法，用于创建只有一个<strong>ClipData.Item</strong>和一条简单描述( <code>ClipDescription</code>)的ClipData对象。</p>
</li>
<li><p>newPlainText(label, text)返回ClipData对象，数据是文字text，描述是label，MIME类型是<code>MIMETYPE_TEXT_PLAIN</code>。</p>
</li>
<li><p>newUri(resolver, label, URI)</p>
</li>
<li><p>newIntent(label, intent)</p>
</li>
<li>newHtmlText(label,text, htmlText)</li>
<li>newRawUri(label, uri)</li>
</ul>
<blockquote>
<p>newHtmlText method need Call requires API level 16</p>
</blockquote>
<h1 id="ClipboardFramework架构图"><a href="#ClipboardFramework架构图" class="headerlink" title="ClipboardFramework架构图"></a>ClipboardFramework架构图</h1><p><img src="clipboardframework.png" alt></p>
<h1 id="ClipboardManager使用"><a href="#ClipboardManager使用" class="headerlink" title="ClipboardManager使用"></a>ClipboardManager使用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取剪贴板服务：</span></span><br><span class="line">ClipboardManager manager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);</span><br><span class="line"><span class="comment">//然后把数据放在ClipData对象中</span></span><br><span class="line">ClipData data = ClipData.newPlainText(<span class="string">"label"</span>, <span class="string">"this is clipboard data"</span>);       </span><br><span class="line">manager.setPrimaryClip(data);</span><br></pre></td></tr></table></figure>
<p>上面的代码就可以将文字放到剪贴板了，然后找个输入框“粘贴”就行啦。</p>
<blockquote>
<p>如果需要自由复制TextView等控件的文字，只要在该控件上添加<code>android:textIsSelectable=&quot;true&quot;</code>或者使用代码设置<code>setTextIsSelectable(true)</code>即可。</p>
</blockquote>
<p><strong>URI:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Creates a Uri based on a base Uri and a record ID based on the contact's last name</span></span><br><span class="line"><span class="comment">// Declares the base URI string</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTACTS = <span class="string">"content://com.example.contacts"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declares a path string for URIs that you use to copy data</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COPY_PATH = <span class="string">"/copy"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declares the Uri to paste to the clipboard</span></span><br><span class="line">Uri copyUri = Uri.parse(CONTACTS + COPY_PATH + <span class="string">"/"</span> + lastName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a new URI clip object. The system uses the anonymous getContentResolver() object to</span></span><br><span class="line"><span class="comment">// get MIME types from provider. The clip object's label is "URI", and its data is</span></span><br><span class="line"><span class="comment">// the Uri previously created.</span></span><br><span class="line">ClipData clip = ClipData.newUri(getContentResolver(),<span class="string">"URI"</span>,copyUri);</span><br></pre></td></tr></table></figure>
<p><strong>Intent:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Creates the Intent</span></span><br><span class="line">Intent appIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, com.example.demo.myapplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a clip object with the Intent in it. Its label is "Intent" and its data is</span></span><br><span class="line"><span class="comment">// the Intent object created previously</span></span><br><span class="line">ClipData clip = ClipData.newIntent(<span class="string">"Intent"</span>,appIntent);</span><br></pre></td></tr></table></figure>
<h1 id="获取剪贴板内容"><a href="#获取剪贴板内容" class="headerlink" title="获取剪贴板内容"></a>获取剪贴板内容</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClipboardManager manager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);</span><br><span class="line"></span><br><span class="line">String resultString = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查剪贴板是否有内容</span></span><br><span class="line"><span class="keyword">if</span>(manager.hasPrimaryClip())&#123;</span><br><span class="line">		ClipData clipData = manager.getPrimaryClip();</span><br><span class="line">		<span class="keyword">int</span> count = clipData.getItemCount();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line"></span><br><span class="line">				ClipData.Item item = clipData.getItemAt(i);</span><br><span class="line">				CharSequence str = item.coerceToText(MainActivity.<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">				resultString += str;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line">Log.e(<span class="string">"TAG"</span>, resultString);</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li><p>任何时间，都只有一个clip对象在剪贴板里。新的复制操作都会覆盖前一个clip对象，因为用户可能从你的应用中退出，从其他应用中拷贝一个东西，所以你不能假定用户在你的应用中拷贝的上一个东西一定还放在剪贴板里。</p>
</li>
<li><p>一个clip对象，即ClipData中的多个<code>ClipData.Item</code> 对象是为了支持多选项的复制粘贴，而不是为了支持单选的多种形式。你通常需要clip对象中的所有的项目，即<a href="http://developer.android.com/reference/android/content/ClipData.Item.html" target="_blank" rel="noopener">ClipData.Item</a>有一样的形式，比如都是文字，都是URI或都是Intent，而不是混合各种形式。</p>
</li>
<li><p>当你提供数据时，你可以提供不同的MIME表达方式。将你支持的MIME类型加入到<strong>ClipDescription</strong>中去，然后在你的content provider中实现它。</p>
</li>
<li><p>从剪贴板得到数据时，你的应用有责任检查可用的MIME类型，然后决定使用哪一个。即便有一个clip对象在剪贴板中并且用户要求粘贴，你的应用有可能不需要进行粘贴操作。你应该在MIME类型兼容的时候执行粘贴操作。你可以选择使用 <code>coerceToText()</code>方法将粘贴的内容转换为文字。如果你的应用支持多种类型，你可以让用户自己选用哪一个。</p>
</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://developer.android.com/guide/topics/text/copy-paste.html" target="_blank" rel="noopener">http://developer.android.com/guide/topics/text/copy-paste.html</a></p>
<p><a href="https://www.cnblogs.com/zhujiabin/p/7605553.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhujiabin/p/7605553.html</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android返回不销毁Activity，直接进入后台</title>
    <url>/2019/07/03/Android%E8%BF%94%E5%9B%9E%E4%B8%8D%E9%94%80%E6%AF%81Activity%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BF%9B%E5%85%A5%E5%90%8E%E5%8F%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近打开闲鱼，微信，发现他们点击返回到桌面的时候，他们的activity并没有直接销毁，还是依然保留在返回之前浏览的界面。查了一下资料，的确有可以操作的办法。</p>
<a id="more"></a>
<h1 id="isTaskRoot"><a href="#isTaskRoot" class="headerlink" title="isTaskRoot()"></a>isTaskRoot()</h1><p><code>isTaskRoot()</code>方法用来判断该Activity是否为任务栈中的根Activity，即启动应用的第一个Activity。</p>
<h1 id="moveTaskToBack"><a href="#moveTaskToBack" class="headerlink" title="moveTaskToBack()"></a>moveTaskToBack()</h1><p><code>moveTaskToBack()</code>方法用于将activity退到后台，而不是直接finish掉。</p>
<p>从生命周期来说，会执行<code>onPause</code>、<code>onStop</code>，但不会执行<code>onDestroy</code> 。恢复的时候也一样，会执行<code>onStart</code>、<code>onResume</code>，但不会执行<code>onCreate</code>。</p>
<p>参数nonRoot表示的含义是此方法对非根activity是否有效：</p>
<ul>
<li>true表示对所有activity均有效，</li>
<li>false表示只对根activity有效。</li>
</ul>
<p>返回值：该activity被退出到后台或者他已经在后台了返回true，否则返回false</p>
<h1 id="官方文档："><a href="#官方文档：" class="headerlink" title="官方文档："></a>官方文档：</h1><blockquote>
<p>public boolean moveTaskToBack (boolean nonRoot)<br>Since: API Level 1Move the task containing this activity to the back of the activity stack. The activity’s order within the task is unchanged.<br>Parameters:<br>nonRoot If false then this only works if the activity is the root of a task; if true it will work for any activity in a task.<br>Returns:<br>If the task was moved (or it was already at the back) true is returned, else false.</p>
</blockquote>
<h1 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h1><p>重写<code>onBackPressed</code>或者<code>onKeyDown</code>事件等来监听返回键事件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getKeyCode() == KeyEvent.KEYCODE_BACK) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isTaskRoot()) &#123;</span><br><span class="line">                moveTaskToBack(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.voidcn.com/article/p-wbosovty-bru.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-wbosovty-bru.html</a></p>
<p><a href="http://www.voidcn.com/article/p-poscpyhl-bn.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-poscpyhl-bn.html</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA For Mac 快捷键</title>
    <url>/2019/06/30/IntelliJ-IDEA-For-Mac-%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="IntelliJ-IDEA-For-Mac-快捷键"><a href="#IntelliJ-IDEA-For-Mac-快捷键" class="headerlink" title="IntelliJ IDEA For Mac 快捷键"></a>IntelliJ IDEA For Mac 快捷键</h1><blockquote>
<p>建议将 Mac 系统中与 IntelliJ IDEA 冲突的快捷键取消或更改，不建议改 IntelliJ IDEA 的默认快捷键</p>
</blockquote>
<a id="more"></a>
<h4 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h4><ul>
<li><code>⌘</code> Command</li>
<li><code>⇧</code> Shift</li>
<li><code>⌥</code> Option</li>
<li><code>⌃</code> Control</li>
<li><code>↩︎</code> Return/Enter</li>
<li><code>⌫</code> Delete</li>
<li><code>⌦</code> 向前删除键（Fn+Delete）</li>
<li><code>↑</code> 上箭头</li>
<li><code>↓</code> 下箭头</li>
<li><code>←</code> 左箭头</li>
<li><code>→</code> 右箭头</li>
<li><code>⇞</code> Page Up（Fn+↑）</li>
<li><code>⇟</code> Page Down（Fn+↓）</li>
<li><code>Home</code> Fn + ←</li>
<li><code>End</code> Fn + →</li>
<li><code>⇥</code> 右制表符（Tab键）</li>
<li><code>⇤</code> 左制表符（Shift+Tab）</li>
<li><code>⎋</code> Escape (Esc)</li>
</ul>
<h4 id="一、Editing（编辑）"><a href="#一、Editing（编辑）" class="headerlink" title="一、Editing（编辑）"></a>一、Editing（编辑）</h4><ul>
<li><code>⌃Space</code> 基本的代码补全（补全任何类、方法、变量）</li>
<li><code>⌃⇧Space</code> 智能代码补全（过滤器方法列表和变量的预期类型）</li>
<li><code>⌘⇧↩</code> 自动结束代码，行末自动添加分号</li>
<li><code>⌘P</code> 显示方法的参数信息</li>
<li><code>⌃J, Mid. button click</code> 快速查看文档</li>
<li><code>⇧F1</code> 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li>
<li><code>⌘+鼠标放在代码上</code> 显示代码简要信息</li>
<li><code>⌘F1</code> 在错误或警告处显示具体描述信息</li>
<li><code>⌘N, ⌃↩, ⌃N</code> 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>
<li><code>⌃O</code> 覆盖方法（重写父类方法）</li>
<li><code>⌃I</code> 实现方法（实现接口中的方法）</li>
<li><code>⌘⌥T</code> 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li>
<li><code>⌘/</code> 注释/取消注释与行注释</li>
<li><code>⌘⌥/</code> 注释/取消注释与块注释</li>
<li><code>⌥↑</code> 连续选中代码块</li>
<li><code>⌥↓</code> 减少当前选中的代码块</li>
<li><code>⌃⇧Q</code> 显示上下文信息</li>
<li><code>⌥↩</code> 显示意向动作和快速修复代码</li>
<li><code>⌘⌥L</code> 格式化代码</li>
<li><code>⌃⌥O</code> 优化import</li>
<li><code>⌃⌥I</code> 自动缩进线</li>
<li><code>⇥ / ⇧⇥</code> 缩进代码 / 反缩进代码</li>
<li><code>⌘X</code> 剪切当前行或选定的块到剪贴板</li>
<li><code>⌘C</code> 复制当前行或选定的块到剪贴板</li>
<li><code>⌘V</code> 从剪贴板粘贴</li>
<li><code>⌘⇧V</code> 从最近的缓冲区粘贴</li>
<li><code>⌘D</code> 复制当前行或选定的块</li>
<li><code>⌘⌫</code> 删除当前行或选定的块的行</li>
<li><code>⌃⇧J</code> 智能的将代码拼接成一行</li>
<li><code>⌘↩</code> 智能的拆分拼接的行</li>
<li><code>⇧↩</code> 开始新的一行</li>
<li><code>⌘⇧U</code> 大小写切换</li>
<li><code>⌘⇧] / ⌘⇧[</code> 选择直到代码块结束/开始</li>
<li><code>⌥⌦</code> 删除到单词的末尾（⌦键为Fn+Delete）</li>
<li><code>⌥⌫</code> 删除到单词的开头</li>
<li><code>⌘+ / ⌘-</code> 展开 / 折叠代码块</li>
<li><code>⌘⇧+</code> 展开所以代码块</li>
<li><code>⌘⇧-</code> 折叠所有代码块</li>
<li><code>⌘W</code> 关闭活动的编辑器选项卡</li>
</ul>
<h4 id="二、Search-Replace（查询-替换）"><a href="#二、Search-Replace（查询-替换）" class="headerlink" title="二、Search/Replace（查询/替换）"></a>二、Search/Replace（查询/替换）</h4><ul>
<li><code>Double ⇧</code> 查询任何东西</li>
<li><code>⌘F</code> 文件内查找</li>
<li><code>⌘G</code> 查找模式下，向下查找</li>
<li><code>⌘⇧G</code> 查找模式下，向上查找</li>
<li><code>⌘R</code> 文件内替换</li>
<li><code>⌘⇧F</code> 全局查找（根据路径）</li>
<li><code>⌘⇧R</code> 全局替换（根据路径）</li>
<li><code>⌘⇧S</code> 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>
<li><code>⌘⇧M</code> 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>
</ul>
<h4 id="三、Usage-Search（使用查询）"><a href="#三、Usage-Search（使用查询）" class="headerlink" title="三、Usage Search（使用查询）"></a>三、Usage Search（使用查询）</h4><ul>
<li><code>⌥F7 / ⌘F7</code> 在文件中查找用法 / 在类中查找用法</li>
<li><code>⌘⇧F7</code> 在文件中突出显示的用法</li>
<li><code>⌘⌥F7</code> 显示用法</li>
<li><code>⌘⇧I</code> 查看定义的类,快速查看</li>
</ul>
<h4 id="四、Compile-and-Run（编译和运行）"><a href="#四、Compile-and-Run（编译和运行）" class="headerlink" title="四、Compile and Run（编译和运行）"></a>四、Compile and Run（编译和运行）</h4><ul>
<li><code>⌘F9</code> 编译Project</li>
<li><code>⌘⇧F9</code> 编译选择的文件、包或模块</li>
<li><code>⌃⌥R</code> 弹出 Run 的可选择菜单</li>
<li><code>⌃⌥D</code> 弹出 Debug 的可选择菜单</li>
<li><code>⌃R</code> 运行</li>
<li><code>⌃D</code> 调试</li>
<li><code>⌃⇧R, ⌃⇧D</code> 从编辑器运行上下文环境配置</li>
</ul>
<h4 id="五、Debugging（调试）"><a href="#五、Debugging（调试）" class="headerlink" title="五、Debugging（调试）"></a>五、Debugging（调试）</h4><ul>
<li><code>F8</code> 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li>
<li><code>F7</code> 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li>
<li><code>⇧F7</code> 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li>
<li><code>⇧F8</code> 跳出</li>
<li><code>⌥F9</code> 运行到光标处，如果光标前有其他断点会进入到该断点</li>
<li><code>⌥F8</code> 计算表达式（可以更改变量值使其生效）</li>
<li><code>⌘⌥R</code> 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li>
<li><code>⌘F8</code> 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li>
<li><code>⌘⇧F8</code> 查看断点信息</li>
<li></li>
</ul>
<h4 id="六、Navigation（导航）"><a href="#六、Navigation（导航）" class="headerlink" title="六、Navigation（导航）"></a>六、Navigation（导航）</h4><ul>
<li><code>⌘O</code> 查找类文件</li>
<li><code>⌘⇧O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠<code>/</code></li>
<li><code>⌘⌥O</code> 前往指定的变量 / 方法</li>
<li><code>⌃← / ⌃→</code> 左右切换打开的编辑tab页</li>
<li><code>F12</code> 返回到前一个工具窗口</li>
<li><code>⎋</code> 从工具窗口进入代码文件窗口</li>
<li><code>⇧⎋</code> 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>
<li><code>⌘⇧F4</code> 关闭活动run/messages/find/… tab</li>
<li><code>⌘L</code> 在当前文件跳转到某一行的指定处</li>
<li><code>⌘E</code> 显示最近打开的文件记录列表</li>
<li><code>⌘⌥← / ⌘⌥→</code> 退回 / 前进到上一个操作的地方</li>
<li><code>⌘⇧⌫</code> 跳转到最后一个编辑的地方</li>
<li><code>⌥F1</code> 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>
<li><code>⌘B / ⌘ 鼠标点击</code> 进入光标所在的方法/变量的接口或是定义处</li>
<li><code>⌘⌥B</code> 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li>
<li><code>⌥ Space, ⌘Y</code> 快速打开光标所在方法、类的定义</li>
<li><code>⌃⇧B</code> 跳转到类型声明处</li>
<li><code>⌘U</code> 前往当前光标所在方法的父类的方法 / 接口定义</li>
<li><code>⌃↓ / ⌃↑</code> 当前光标跳转到当前文件的前一个/后一个方法名位置</li>
<li><code>⌘] / ⌘[</code> 移动光标到当前所在代码的花括号开始/结束位置</li>
<li><code>⌘F12</code> 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>
<li><code>⌃H</code> 显示当前类的层次结构</li>
<li><code>⌘⇧H</code> 显示方法层次结构</li>
<li><code>⌃⌥H</code> 显示调用层次结构</li>
<li><code>F2 / ⇧F2</code> 跳转到下一个/上一个突出错误或警告的位置</li>
<li><code>F4 / ⌘↓</code> 编辑/查看代码源</li>
<li><code>⌥ Home</code> 显示到当前文件的导航条</li>
<li><code>F3</code>选中文件/文件夹/代码行，添加/取消书签</li>
<li><code>⌥F3</code> 选中文件/文件夹/代码行，使用助记符添加/取消书签</li>
<li><code>⌃0...⌃9</code> 定位到对应数值的书签位置</li>
<li><code>⌘F3</code> 显示所有书签</li>
</ul>
<h4 id="七、Refactoring（重构）"><a href="#七、Refactoring（重构）" class="headerlink" title="七、Refactoring（重构）"></a>七、Refactoring（重构）</h4><ul>
<li><code>F5</code> 复制文件到指定目录</li>
<li><code>F6</code> 移动文件到指定目录</li>
<li><code>⌘⌫</code> 在文件上为安全删除文件，弹出确认框</li>
<li><code>⇧F6</code> 重命名文件</li>
<li><code>⌘F6</code> 更改签名</li>
<li><code>⌘⌥N</code> 一致性</li>
<li><code>⌘⌥M</code> 将选中的代码提取为方法</li>
<li><code>⌘⌥V</code> 提取变量</li>
<li><code>⌘⌥F</code> 提取字段</li>
<li><code>⌘⌥C</code> 提取常量</li>
<li><code>⌘⌥P</code> 提取参数</li>
</ul>
<h4 id="八、VCS-Local-History（版本控制-本地历史记录）"><a href="#八、VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="八、VCS/Local History（版本控制/本地历史记录）"></a>八、VCS/Local History（版本控制/本地历史记录）</h4><ul>
<li><code>⌘K</code> 提交代码到版本控制器</li>
<li><code>⌘T</code> 从版本控制器更新代码</li>
<li><code>⌥⇧C</code> 查看最近的变更记录</li>
<li><code>⌃C</code> 快速弹出版本控制器操作面板</li>
</ul>
<h4 id="九、Live-Templates（动态代码模板）"><a href="#九、Live-Templates（动态代码模板）" class="headerlink" title="九、Live Templates（动态代码模板）"></a>九、Live Templates（动态代码模板）</h4><ul>
<li><code>⌘⌥J</code> 弹出模板选择窗口，将选定的代码使用动态模板包住</li>
<li><code>⌘J</code> 插入自定义动态代码模板</li>
</ul>
<h4 id="十、General（通用）"><a href="#十、General（通用）" class="headerlink" title="十、General（通用）"></a>十、General（通用）</h4><ul>
<li><code>⌘1...⌘9</code> 打开相应编号的工具窗口</li>
<li><code>⌘S</code> 保存所有</li>
<li><code>⌘⌥Y</code> 同步、刷新</li>
<li><code>⌃⌘F</code> 切换全屏模式</li>
<li><code>⌘⇧F12</code> 切换最大化编辑器</li>
<li><code>⌥⇧F</code> 添加到收藏夹</li>
<li><code>⌥⇧I</code> 检查当前文件与当前的配置文件</li>
<li><code>§⌃, ⌃`</code> 快速切换当前的scheme（切换主题、代码样式等）</li>
<li><code>⌘,</code> 打开IDEA系统设置</li>
<li><code>⌘;</code> 打开项目结构对话框</li>
<li><code>⇧⌘A</code> 查找动作（可设置相关选项）</li>
<li><code>⌃⇥</code> 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li>
</ul>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Toolbar 使用详解</title>
    <url>/2019/06/27/Android-Toolbar-%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="初识Toolbar"><a href="#初识Toolbar" class="headerlink" title="初识Toolbar"></a>初识Toolbar</h1><p><strong>Toolbar</strong> 是在 Android 5.0 开始推出的一个 Material Design 风格的导航控件 ，Google 非常推荐大家使用 <strong>Toolbar</strong> 来作为Android客户端的导航栏，以此来取代之前的 <strong>Actionbar</strong> 。</p>
<a id="more"></a>
<p>与 <strong>Actionbar</strong> 相比，<strong>Toolbar</strong> 明显要灵活的多。它不像 <strong>Actionbar</strong> 一样，一定要固定在Activity的顶部，而是可以放到界面的任意位置。除此之外，在设计 <strong>Toolbar</strong> 的时候，Google也留给了开发者很多可定制修改的余地，这些可定制修改的属性在API文档中都有详细介绍，如：</p>
<ul>
<li><strong>设置导航栏图标；</strong></li>
<li><strong>设置App的logo；</strong></li>
<li><strong>支持设置标题和子标题；</strong></li>
<li><strong>支持添加一个或多个的自定义控件；</strong></li>
<li><strong>支持Action Menu；</strong></li>
</ul>
<h1 id="使用Toolbar"><a href="#使用Toolbar" class="headerlink" title="使用Toolbar"></a>使用Toolbar</h1><p>前面提到 <strong>Toolbar</strong> 是在 Android 5.0 才开始加上的，Google 为了将这一设计向下兼容，自然也少不了要推出兼容版的 <strong>Toolbar</strong> 。为此，我们需要在工程中引入 <strong>appcompat-v7</strong> 的兼容包，使用 <strong>android.support.v7.widget.Toolbar</strong> 进行开发。但是由于<strong>support</strong>库现在google团队已经不在维护了，最新版本好像是28点多，已经迁移到了<strong>AndroidX</strong>，所以该篇文章使用<strong>AndroidX</strong>，只是包名相对的变化了，使用和v7包没有多大变化。</p>
<p>先来看看运行效果</p>
<p><img src="toolbar_show.png" alt="Toolbar演示"></p>
<p>按照效果图，从左到右分别是我们前面提及到的 <strong>导航栏图标</strong>、<strong>App的logo</strong>、<strong>标题和子标题</strong>、<strong>自定义控件</strong>、以及 <strong>ActionMenu</strong> 。接着，我们来看下布局文件和代码实现。</p>
<p>首先，在布局文件 <code>activity_main.xml</code>中添加进我们需要的 Toolbar 控件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"textview"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.appcompat.widget.Toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接着创建一个<code>toolbar_menu.xml</code>菜单项</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_search"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@android:drawable/ic_input_add"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"menu_search"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_notification"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@android:drawable/ic_delete"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"menu_notifications"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_item1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"item_01"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_item2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"item_02"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>我的activity继承自AppCompatActivity，并不是原生sdk内部的，因此不能使用<code>android:showAsAction</code>，否则会报错。所以需要使用自定义的命名空间app。</p>
<p>ifRoom表示有空间则显示，never表示从不显示，而是会通过overflowwindow显示。</p>
</blockquote>
<p>最后在<code>MainActivity</code>中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Toolbar mToolbar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mToolbar = findViewById(R.id.toolbar);</span><br><span class="line"></span><br><span class="line">        mToolbar.setTitle(<span class="string">"标题"</span>);</span><br><span class="line">        mToolbar.setSubtitle(<span class="string">"子标题"</span>);</span><br><span class="line">        mToolbar.setNavigationIcon(android.R.drawable.ic_menu_info_details);</span><br><span class="line">        mToolbar.setLogo(android.R.drawable.ic_menu_view);</span><br><span class="line">        setSupportActionBar(mToolbar); <span class="comment">//最后设置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">/**</span></span><br><span class="line"><span class="comment">  		菜单栏目</span></span><br><span class="line"><span class="comment">  	*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.toolbar_menu, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更改主题：</p>
<p>为了能够正常使用ToolBar，我们需要隐藏原来的ActionBar，这个可以在主题中修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者继承某个父类:<code>Theme.AppCompat.Light.NoActionBar</code></p>
<p>也可以在代码中</p>
<p>如果是<code>AppCompatActivity</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">supportRequestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line"><span class="comment">//setContentView之前调用，否则报错</span></span><br></pre></td></tr></table></figure>
<p>如果是<code>Activity</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后运行就可以有上面图中的效果啦。</p>
</blockquote>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>如果你想修改标题和子标题的字体大小、颜色等，可以调用<strong>setTitleTextColor</strong>、<strong>setTitleTextAppearance</strong>、<strong>setSubtitleTextColor</strong>、<strong>setSubtitleTextAppearance</strong> 这些API；</li>
<li>自定义的View位于 <strong>title</strong>、<strong>subtitle</strong> 和 <strong>actionmenu</strong> 之间，这意味着，如果 <strong>title</strong> 和 <strong>subtitle</strong> 都在，且 <strong>actionmenu选项</strong> 太多的时候，留给自定义View的空间就越小；</li>
<li><strong>导航图标</strong> 和 <strong>app logo</strong> 的区别在哪？如果你只设置 <strong>导航图标</strong>（ or <strong>app logo</strong>） 和 <strong>title</strong>、<strong>subtitle</strong>，会发现 <strong>app logo</strong> 和 <strong>title</strong>、<strong>subtitle</strong> 的间距比较小，看起来不如 <strong>导航图标</strong> 与 它们两搭配美观；</li>
<li><strong>Toolbar</strong> 和其他控件一样，很多属性设置方法既支持代码设置，也支持在xml中设置</li>
<li><strong>如果只是当成一个普通控件使用，即不调用<code>setSupportActionBar(mToolbar);</code>方法，可以使用<code>mToolbar.inflateMenu</code>方法来设置菜单。</strong></li>
</ul>
<h1 id="其他样式修改"><a href="#其他样式修改" class="headerlink" title="其他样式修改"></a>其他样式修改</h1><h2 id="修改Toolbar-popup-menu样式"><a href="#修改Toolbar-popup-menu样式" class="headerlink" title="修改Toolbar popup menu样式"></a>修改Toolbar popup menu样式</h2><p>点击右上角的三个点，会弹出一个popup menu，如下所示：</p>
<p><img src="popup_show.png" alt></p>
<p>可以看到弹出菜单的样式是白底黑字，那么有没有办法改变它的背景颜色呢，使得菜单显示为黑底白字。这肯定是有的。</p>
<p>在<code>styles.xml</code>文件中新建一个主题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- toolbar弹出菜单样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ToolbarPopupTheme"</span> <span class="attr">parent</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark"</span>&gt;</span>   </span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackground"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到这个主题的parent是直接继承自<code>ThemeOverlay.AppCompat.Dark</code>，是支持包的一个主题，并且我们在内部声明了<code>android:colorBackground</code>这个属性，我们只要更改这个属性就能变更菜单的背景颜色了。接下来我们在布局文件中引入这个主题，这也很简单，为toolbar添加额外的属性如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">app:popupTheme="@style/ToolbarPopupTheme"</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="popup_show2.png" alt></p>
<h2 id="修改Toolbar-popup-menu-弹出位置"><a href="#修改Toolbar-popup-menu-弹出位置" class="headerlink" title="修改Toolbar popup menu 弹出位置"></a>修改Toolbar popup menu 弹出位置</h2><p>在上图看到，弹出的菜单的位置是过于偏上的，我们可以修改它的位置，让它在toolbar的下面，这样看起来也美观一些：</p>
<p>修改<code>styles.xml</code>文件，添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- toolbar弹出菜单样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ToolbarPopupTheme"</span> <span class="attr">parent</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackground"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"actionOverflowMenuStyle"</span>&gt;</span>@style/OverflowMenuStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span> </span></span><br><span class="line"><span class="xml">  	<span class="comment">&lt;!--新增一个item，用于控制menu--&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"OverflowMenuStyle"</span> <span class="attr">parent</span>=<span class="string">"Widget.AppCompat.Light.PopupMenu.Overflow"</span>&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"overlapAnchor"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">  	<span class="comment">&lt;!--把该属性改为false即可使menu位置位于toolbar之下--&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>布局文件中引用该主题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">app:popupTheme="@style/ToolbarPopupTheme"</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="popup_show3.png" alt></p>
<h2 id="修改Action-Menu-Item-的文字颜色"><a href="#修改Action-Menu-Item-的文字颜色" class="headerlink" title="修改Action Menu Item 的文字颜色"></a>修改Action Menu Item 的文字颜色</h2><p>在<code>styles.xml</code>文件中，在popup menu的主题添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- toolbar弹出菜单样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ToolbarPopupTheme"</span> <span class="attr">parent</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark"</span>&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackground"</span>&gt;</span>#000000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"actionOverflowMenuStyle"</span>&gt;</span>@style/OverflowMenuStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!--新增一个item，用于控制menu--&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>布局文件中引用该主题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">app:popupTheme="@style/ToolbarPopupTheme"</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="popup_show4.png" alt></p>
<h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><h2 id="设置监听事件不生效"><a href="#设置监听事件不生效" class="headerlink" title="设置监听事件不生效"></a>设置监听事件不生效</h2><p>看一下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initToolbar</span><span class="params">()</span></span>&#123;</span><br><span class="line">		mToolbar = findViewById(R.id.toolbar);</span><br><span class="line">		mToolbar.setTitle(<span class="string">""</span>);</span><br><span class="line">		mToolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">						<span class="comment">//。。。</span></span><br><span class="line">				&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		mToolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">						<span class="comment">//。。。</span></span><br><span class="line">						<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		setSupportActionBar(mToolbar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码正常设置监听但是就是监听事件就是没有触发，查询后，监听事件必须在<code>setSupportActionBar(mToolbar);</code>之后设置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initToolbar</span><span class="params">()</span></span>&#123;</span><br><span class="line">		mToolbar = findViewById(R.id.toolbar);</span><br><span class="line">		mToolbar.setTitle(<span class="string">""</span>);</span><br><span class="line">		setSupportActionBar(mToolbar);</span><br><span class="line">  	mToolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">						<span class="comment">//。。。</span></span><br><span class="line">				&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		mToolbar.setOnMenuItemClickListener(<span class="keyword">new</span> Toolbar.OnMenuItemClickListener() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">						<span class="comment">//。。。</span></span><br><span class="line">						<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调换一下位置即可正常运行。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上都是一些基本的使用，Toolbar控件的使用还是很灵活的，还有很多一些高级技巧，比如配合上状态栏变成沉浸式，或者配合<code>CoordinatorLayout</code>等实现更炫的效果。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.jianshu.com/p/79604c3ddcae" target="_blank" rel="noopener">https://www.jianshu.com/p/79604c3ddcae</a></p>
<p><a href="https://www.jianshu.com/p/ae0013a4f71a" target="_blank" rel="noopener">https://www.jianshu.com/p/ae0013a4f71a</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Activity 的4种启动模式</title>
    <url>/2019/06/20/Activity-%E7%9A%844%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>启动模式简单地说就是Activity启动时的策略，在<code>AndroidManifest.xml</code>中的标签的<code>android:launchMode</code>属性设置；启动模式有4种，分别为standard、singleTop、singleTask、singleInstance；</p>
<a id="more"></a>
<ul>
<li>standard 标准模式，每次都新建一个实例对象</li>
<li>singleTop 如果在任务栈顶发现了相同的实例则重用，否则新建并压入栈顶</li>
<li>singleTask 如果在任务栈中发现了相同的实例，将其上面的任务终止并移除，重用该实例。否则新建实例并入栈</li>
<li>singleInstance 允许不同应用，进程线程等共用一个实例，无论从何应用调用该实例都重用</li>
</ul>
<h1 id="任务栈"><a href="#任务栈" class="headerlink" title="任务栈"></a>任务栈</h1><p>每个应用都有一个任务栈，是用来存放Activity的，功能类似于函数调用的栈，先后顺序代表了Activity的出现顺序；比如Activity1–&gt;Activity2–&gt;Activity3,则任务栈为：</p>
<p><img src="taskstack.gif" alt></p>
<h1 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h1><h2 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h2><p><img src="standard.gif" alt></p>
<p>每次激活Activity时(startActivity)，都创建Activity实例，并放入任务栈；</p>
<p>但是每次都新建一个实例的话真是过于浪费，为了优化应该尽量考虑余下三种方式。</p>
<h2 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h2><p><img src="singleTop.gif" alt></p>
<p>每次扫描栈顶，如果在任务栈顶发现了相同的实例则重用，否则新建并压入栈顶。</p>
<p>在<code>AndroidManifest.xml</code>中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SingleTopActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/singletop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h2><p><img src="singleTask.gif" alt></p>
<p>与singleTop的区别是singleTask会扫描整个任务栈并制定策略。上效果图：</p>
<p>使用时需要小心因为会将之前入栈的实例之上的实例全部移除，需要格外小心逻辑。</p>
<p>在<code>AndroidManifest.xml</code>中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SingleTopActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/singletop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h2><p><img src="singleInstance.gif" alt></p>
<p>这个的理解可以这么看：在微信里点击“用浏览器打开”一个朋友圈，然后切到QQ再用浏览器开一个网页，再跑到哪里再开一个页面。每次我们都在Activity中试图启动另一个浏览器Activity，但是在浏览器端看来，都是调用了同一个自己。因为使用了singleInstance模式，不同应用调用的Activity实际上是共享的。</p>
<p>在<code>AndroidManifest.xml</code>中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SingleTopActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/singletop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://hit-alibaba.github.io/interview/Android/basic/Android中Activity启动模式详解" target="_blank" rel="noopener">http://www.cnblogs.com/fanchangfa/archive/2012/08/25/2657012.html</a></li>
<li><a href="http://www.cnblogs.com/meizixiong/archive/2013/07/03/3170591.html" target="_blank" rel="noopener">Android入门：Activity四种启动模式</a></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS之UIApplication</title>
    <url>/2019/06/20/IOS%E4%B9%8BUIApplication/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>UIApplication 的核心作用是提供了 iOS 程序运行期间的控制和协作工作。</p>
<p>每一个程序在运行期必须有且仅有一个<code>UIApplication</code>（或则其子类）的一个实例。在程序开始运行的时候，<code>UIApplicationMain</code> 函数是程序进入点，这个函数做了很多工作，其中一个重要的工作就是创建一个 <code>UIApplication</code> 的单例实例。在你的代码中你，你可以通过调用 <code>[UIApplication sharedApplication]</code>来得到这个单例实例的指针。</p>
<a id="more"></a>
<p>UIApplication 的一个主要工作是处理用户事件，它会起一个队列，把所有用户事件都放入队列，逐个处理，在处理的时候，它会发送当前事件 到一个合适的处理事件的目标控件。此外，UIApplication 实例还维护一个在本应用中打开的 window 列表（UIWindow 实例），这样它就 可以接触应用中的任何一个 UIView 对象。UIApplication 实例会被赋予一个代理对象，以处理应用程序的生命周期事件（比如程序启动和关闭）、系统事件（比如来电、记事项警告）等等。</p>
<h1 id="UIApplicaion-生命周期"><a href="#UIApplicaion-生命周期" class="headerlink" title="UIApplicaion 生命周期"></a>UIApplicaion 生命周期</h1><p>一个 UIApplication 可以有如下几种状态：</p>
<ul>
<li><code>Not running（未运行）</code>程序没启动</li>
<li><code>Inactive（未激活）</code>程序在前台运行，不过没有接收到事件。在没有事件处理情况下程序通常停留在这个状态</li>
<li><code>Active（激活）</code>程序在前台运行而且接收到了事件。这也是前台的一个正常的模式</li>
<li><code>Background（后台）</code> 程序在后台而且能执行代码，大多数程序进入这个状态后会在在这个状态上停留一会。时间到之后会进入挂起状态 (Suspended)。有的程序经过特殊的请求后可以长期处于 Background 状态</li>
<li><code>Suspended（挂起）</code>程序在后台不能执行代码。系统会自动把程序变成这个状态而且不会发出通知。当挂起时，程序还是停留在内存中的，当系统内存低时，系统就把挂起的程序清除掉，为前台程序提供更多的内存。</li>
</ul>
<p>常见的代理方法有</p>
<ol>
<li><p><code>(void)applicationWillResignActive:(UIApplication *)application</code></p>
<p>说明：当应用程序将要入非活动状态执行，在此期间，应用程序不接收消息或事件，比如来电话了</p>
</li>
<li><p><code>(void)applicationDidBecomeActive:(UIApplication *)application</code></p>
<p>说明：当应用程序入活动状态执行，这个刚好跟上面那个方法相反</p>
</li>
<li><p><code>(void)applicationDidEnterBackground:(UIApplication *)application</code></p>
<p>说明：当程序被推送到后台的时候调用。所以要设置后台继续运行，则在这个函数里面设置即可</p>
</li>
<li><p><code>(void)applicationWillEnterForeground:(UIApplication *)application</code></p>
<p>说明：当程序从后台将要重新回到前台时候调用，这个刚好跟上面的那个方法相反。</p>
</li>
<li><p><code>(void)applicationWillTerminate:(UIApplication *)application</code></p>
<p>说明：当程序将要退出是被调用，通常是用来保存数据和一些退出前的清理工作。这个需要设置 UIApplicationExitsOnSuspend 的键值。</p>
</li>
<li><p><code>(void)applicationDidReceiveMemoryWarning:(UIApplication *)application</code></p>
<p>说明：iPhone 设备只有有限的内存，如果为应用程序分配了太多内存操作系统会终止应用程序的运行，在终止前会执行这个方法，通常可以在这里进行内存清理工作防止程序被终止</p>
</li>
<li><p><code>(void)applicationSignificantTimeChange:(UIApplication*)application</code></p>
<p>说明：当系统时间发生改变时执行</p>
</li>
<li><p><code>(void)applicationDidFinishLaunching:(UIApplication*)application</code></p>
<p>说明：当程序载入后执行</p>
</li>
</ol>
<h1 id="应用入口"><a href="#应用入口" class="headerlink" title="应用入口"></a>应用入口</h1><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application willFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：这两个方法的作用几乎完全一样，只是执行顺序有先后。AppDelegate类默认出现的是<code>application: didFinishLaunchingWithOptions:</code>，一般情况下只需要处理这个方法就可以了。</p>
<p><code>didFinishLaunchingWithOptions</code>函数的参数launchOptions是一个NSDictionary类型的对象，存储的是程序启动的原因。</p>
<p><code>didFinishLaunchingWithOptions</code>函数的返回值是一个BOOL类型，将决定是否处理URL资源，如果返回YES，则会由<code>application:openURL:sourceApplication:annotation:</code>方法处理URL。如果应用程序有一个远程通知启动，返回值会被忽略。</p>
<blockquote>
<p>P.s. 如果同时出现了<code>application: willFinishLaunchingWithOptions:</code>和<code>application: didFinishLaunchingWithOptions:</code>，那么这两个方法都要返回YES，才会处理URL资源。</p>
</blockquote>
<h2 id="启动原因"><a href="#启动原因" class="headerlink" title="启动原因"></a>启动原因</h2><ul>
<li><p><strong>用户直接启动</strong><br>lauchOptions内无数据</p>
</li>
<li><p><strong>其他应用程序通过openURL:启动</strong><br>lauchOptions字典内存储:<br>@{UIApplicationLaunchOptionsURLKey:启动URL(NSURL),<br>UIApplicationLaunchOptionsSourceApplicationKey:启动源程序的bundleID(NSString)}</p>
</li>
<li><p><strong>本地通知启动</strong><br>lauchOptions字典内存储：<br>@{UIApplicationLaunchOptionsLocalNotificationKey:启动应用程序的本地通知对象（UILocalNotification）}</p>
</li>
<li><p><strong>远程通知启动</strong><br> @{UIApplicationLaunchOptionsRemoteNotificationKey:启动应用程序的的远程通知信息userInfo（NSDictionary）}</p>
</li>
<li><p><strong>其他的key还有</strong><br> UIApplicationLaunchOptionsAnnotationKey,<br> UIApplicationLaunchOptionsLocationKey,<br> UIApplicationLaunchOptionsNewsstandDownloadsKey</p>
<blockquote>
<p>程序launchOptions中的可能键值可以参考UIApplication Class Reference的”Launch Options Keys”。</p>
</blockquote>
</li>
</ul>
<p>例子：在<code>didFinishLaunchingWithOptions:</code>创建UIWindow</p>
<blockquote>
<p>先把指定的Main Interface中mian删除掉</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="comment">//创建窗口对象</span></span><br><span class="line">    <span class="keyword">self</span>.window = [[<span class="built_in">UIWindow</span> alloc]initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</span><br><span class="line">    <span class="comment">//创建窗口的根控制器，并且赋值</span></span><br><span class="line">    <span class="built_in">UIViewController</span> *rootVc = [[<span class="built_in">UIViewController</span> alloc]init];</span><br><span class="line">    <span class="keyword">self</span>.window.rootViewController = rootVc;</span><br><span class="line">    <span class="comment">//显示窗口</span></span><br><span class="line">    [<span class="keyword">self</span>.window makeKeyAndVisible];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="App-生命周期示意图"><a href="#App-生命周期示意图" class="headerlink" title="App 生命周期示意图"></a>App 生命周期示意图</h1><p><img src="lifecycle.jpg" alt></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>纯HTML+CSS实现轮播图</title>
    <url>/2019/06/19/%E7%BA%AFHTML-CSS%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一种纯HTML+CSS实现的轮播图，但由于没有JS不支持实现用户进行左右滑动。</p>
<a id="more"></a>
<h1 id="DOM结构搭建"><a href="#DOM结构搭建" class="headerlink" title="DOM结构搭建"></a>DOM结构搭建</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide-container middle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide-wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>a</span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.slide-container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="dom.png" alt></p>
<h1 id="图片并排显示"><a href="#图片并排显示" class="headerlink" title="图片并排显示"></a>图片并排显示</h1><p>可以看到正常文档流图片是向下排列的，如何让他们实现并排显示呢，可能会想到使用float，但是最简单的办法是使用flex布局。给<code>slide-wrap</code>容器指定为Flex布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.slide-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="dom2.png" alt></p>
<p>为什么<code>slide-wrap</code>要给予500%的宽度，因为该列有五张图片，一张图片刚好占满一个父容器。</p>
<h1 id="实现点击轮播效果"><a href="#实现点击轮播效果" class="headerlink" title="实现点击轮播效果"></a>实现点击轮播效果</h1><p>不用JS如何实现轮播图切换效果呢？我们先实现轮播图的小点点。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.navigation</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> white solid;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  	<span class="attribute">cursor</span>: pointer;</span><br><span class="line">		<span class="attribute">transition</span>: <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inner slide-wrap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为什么使用label来实现指示器呢，这里就关键用到了它的for属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inner slide-wrap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">id</span>=<span class="string">"r1"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">id</span>=<span class="string">"r2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">id</span>=<span class="string">"r3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">id</span>=<span class="string">"r4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"r"</span> <span class="attr">id</span>=<span class="string">"r5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">"r1"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">"r2"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">"r3"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">"r4"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"bar"</span> <span class="attr">for</span>=<span class="string">"r5"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name="r"]</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用label和input:radio进行关联起来后，点击的label就相当于选择了某个单选按钮，默认第一个单选按钮为选中状态，切换到第二个时，我们将第一张图向容器左边挪百分之20%的宽度(因为一共有五张图，一张图就占20%的宽度)，就可以看到切花成了第二张图，以此类推。看看代码的实现：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#r1</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r2</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r3</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r4</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">60%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r5</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">80%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击指示器切换轮播图就完成啦。</p>
<h1 id="自动轮播效果"><a href="#自动轮播效果" class="headerlink" title="自动轮播效果"></a>自动轮播效果</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.s1</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: loop <span class="number">12s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> loop &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    15% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 停留1500ms */</span></span><br><span class="line">    20% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">20%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 切换500ms 位移-20% */</span></span><br><span class="line">    35% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">20%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    40% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">40%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    55% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">40%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    60% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">60%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    75% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">60%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    80% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">80%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    95% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">80%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 复位到第一张图片 */</span></span><br></pre></td></tr></table></figure>
<p>CSS3的动画属性就不过多介绍了，但是自动轮播和点击是相冲突的，但是这是一种纯CSS轮播图的一种实现思路，不需JS的实现。挺好玩的。</p>
<p>源码已放置GitHub：<a href="https://github.com/hackycy/Html-Css-Carousel" target="_blank" rel="noopener">https://github.com/hackycy/Html-Css-Carousel</a></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript必知必会</title>
    <url>/2019/05/29/JavaScript%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaScript基本介绍"><a href="#JavaScript基本介绍" class="headerlink" title="JavaScript基本介绍"></a>JavaScript基本介绍</h1><ul>
<li>JS的用途：Javascript可以实现浏览器端、服务器端(nodejs)。。。</li>
<li><p>浏览器端JS由以下三个部分组成：</p>
<ul>
<li><p>ECMAScript：基础语法(数据类型、运算符、函数。。。)</p>
</li>
<li><p>BOM(浏览器对象模型)：window、location、history、navigator。。。</p>
</li>
<li><p>DOM(文档对象模型)：div、p、span。。。</p>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li>ECMAScript又名es，有以下重大版本：<ul>
<li>旧时代：<ul>
<li>es1.0。。。es3.1</li>
</ul>
</li>
<li>新时代：<ul>
<li>es5</li>
<li>es6(es2015)</li>
<li>es7(es2016)、es8(es2017)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="JavaScript基本数据类型和复杂数据类型"><a href="#JavaScript基本数据类型和复杂数据类型" class="headerlink" title="JavaScript基本数据类型和复杂数据类型"></a>JavaScript基本数据类型和复杂数据类型</h1><p>一句总结，使用排除法，除掉基本数据类型都是复杂数据类型即<code>字符串</code>、<code>数字</code>、<code>布尔值</code>、<code>null</code>、<code>undefined</code>、<code>Symbol</code>其余都是对象类型。复杂数据类型例如<code>Date</code>、<code>Array</code>等。</p>
<h1 id="对象的基本使用"><a href="#对象的基本使用" class="headerlink" title="对象的基本使用"></a>对象的基本使用</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> person = &#123;</span></span><br><span class="line"><span class="javascript">                    name : <span class="string">"张三"</span>,</span></span><br><span class="line">                    age : 18,</span><br><span class="line"><span class="javascript">                    say : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">'i am from china'</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">//获取属性</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.name);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.age);</span></span><br><span class="line">            person.say();</span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">//设置属性</span></span></span><br><span class="line"><span class="javascript">            person.address = <span class="string">"中国广东广州"</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.address);</span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">//清除属性</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">delete</span> person.address;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">delete</span> person.adc  <span class="comment">//无意义,但是也不会报错</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(person.address);</span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">//delete只能删除对象的属性,而不能删除变量</span></span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="comment">//清空对象</span></span></span><br><span class="line">            person=&#123;&#125;;</span><br><span class="line"><span class="javascript">            <span class="comment">//将person变为null</span></span></span><br><span class="line"><span class="javascript">            person = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//两者意义不一样</span></span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">张三</span><br><span class="line">18</span><br><span class="line">i am from china</span><br></pre></td></tr></table></figure></p>
<p>对象是键值对的集合：对象是由属性和方法构成的 (ps：也有说法为：对象里面皆属性，认为方法也是一个属性)</p>
<ul>
<li>name是属性    age是属性</li>
<li>say是方法</li>
</ul>
<h2 id="获取属性的方式"><a href="#获取属性的方式" class="headerlink" title="获取属性的方式"></a>获取属性的方式</h2><h3 id="语法"><a href="#语法" class="headerlink" title=".语法"></a>.语法</h3><ul>
<li><code>person.age</code>获取age属性</li>
<li><code>person.say</code>获取到一个方法</li>
</ul>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="[]语法"></a>[]语法</h3><ul>
<li><code>person[&quot;name&quot;]</code>等价于person.age</li>
<li><code>person[&quot;say&quot;]</code>等价于person.say</li>
</ul>
<h3 id="2种方式的差异："><a href="#2种方式的差异：" class="headerlink" title="2种方式的差异："></a>2种方式的差异：</h3><ul>
<li><p>.语法更方便，但是坑比较多(有局限性)，比如：</p>
<ul>
<li>.后面不能使用js中的关键字、保留字(class、this、function。。。)</li>
<li>.后面不能使用数字<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">obj.this=<span class="number">5</span>; <span class="comment">//语法错误</span></span><br><span class="line">obj<span class="number">.0</span>=<span class="number">10</span>;   <span class="comment">//语法错误</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>[]使用更广泛</p>
<ul>
<li>o1[变量name]</li>
<li>[“class”]、[“this”]都可以随意使用 <code>obj[&quot;this&quot;]=10</code></li>
<li>[0]、[1]、[2]也可以使用       <ul>
<li><code>obj[3]=50 = obj[&quot;3&quot;]=50</code>     </li>
<li>思考：为什么obj[3]=obj[“3”]</li>
</ul>
</li>
<li>甚至还可以这样用：[“[object Array]”]<ul>
<li>jquery里面就有这样的实现</li>
</ul>
</li>
<li>也可以这样用：[“{abc}”]<ul>
<li>给对象添加了{abc}属性</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h2><ul>
<li><code>student[&quot;gender&quot;]=&quot;男&quot;</code>    等价于：    <code>student.gender=&quot;男&quot;</code><ul>
<li>含义：如果student对象中没有gender属性，就添加一个gender属性，值为”男”</li>
<li>如果student对象中有gender属性，就修改gender属性的值为”男”</li>
</ul>
</li>
<li>案例1：<code>student.isFemale=true</code></li>
<li>案例2：<code>student[&quot;children&quot;]=[1,2,5]</code></li>
<li>案例3：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">student.toShanghai=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"正在去往上海的路上"</span>)   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h2><ul>
<li><code>delete student[&quot;gender&quot;]</code>      </li>
<li><code>delete student.gender</code></li>
</ul>
<h2 id="属性简写"><a href="#属性简写" class="headerlink" title="属性简写"></a>属性简写</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; a &#125;; <span class="comment">// &#123; a: 10 &#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.name = name;</span><br><span class="line">                <span class="keyword">this</span>.age = age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">40</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(person);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>person就是根据【Person构造函数】创建出来的对象</p>
<blockquote>
<p>任何函数都可以当成构造函数</p>
</blockquote>
<p>例如<code>function CreateFunc(){ }</code></p>
<p>只要把一个函数通过new的方式来进行调用，我们就把这一次函数的调用方式称之为：构造函数的调用</p>
<ul>
<li>new CreateFunc(); 此时CreateFunc就是一个构造函数</li>
<li>CreateFunc();     此时的CreateFunc并不是构造函数</li>
</ul>
<p>关于new Object()，new Object()等同于对象字面量{}</p>
<h2 id="构造函数的执行过程"><a href="#构造函数的执行过程" class="headerlink" title="构造函数的执行过程"></a>构造函数的执行过程</h2><p><code>var person = new Person()</code></p>
<ul>
<li>创建一个对象，称之为这个Person构造函数的实例，<code>p1</code></li>
<li>创建一个内部对象，<code>this</code>，将<code>this</code>指向该实例</li>
<li>执行函数内部的代码，其中，操作<code>this</code>的部分就是操作了该实例</li>
<li>返回值<ul>
<li>如果函数没有返回值，没有<code>return</code>语句，那么就会返回构造函数的实例<code>p1</code></li>
<li>如果函数返回了一个基本数据类型的值，那么就会返回本次构造函数的实例<code>p1</code></li>
<li>如果函数返回了一个复杂数据类型的值，那么本次函数的返回值就是该值。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1=<span class="keyword">new</span> fn();    <span class="comment">//f1就是fn的实例</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f2=<span class="keyword">new</span> fn2();   <span class="comment">//f2是fn2构造函数的实例</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]; </span><br><span class="line">    <span class="comment">//数组是一个对象类型的值，</span></span><br><span class="line">    <span class="comment">//所以数组是一个复杂数据类型的值</span></span><br><span class="line">    <span class="comment">//--&gt;本次构造函数的真正返回值就是该数组</span></span><br><span class="line">    <span class="comment">//--&gt;不再是fn3构造函数的实例</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f3=<span class="keyword">new</span> fn3();   <span class="comment">//f3还是fn3的实例吗？错</span></span><br><span class="line"><span class="comment">//f3值为[1,3,5]</span></span><br></pre></td></tr></table></figure>
<h1 id="JS中的继承"><a href="#JS中的继承" class="headerlink" title="JS中的继承"></a>JS中的继承</h1><p>JS中的继承和其他语言不太一样。JS中的继承是你可以通过某种方式让某个对象访问到其他对象中的属性、方法，那么这种方式就可以称之为继承。而并不是简单的所谓的<code>Xxx extends Parent</code></p>
<h2 id="为什么要使用继承"><a href="#为什么要使用继承" class="headerlink" title="为什么要使用继承"></a>为什么要使用继承</h2><ul>
<li>有些对象会有方法(动作、行为)，而这些方法都是函数，如果把这些方法和函数都放在构造函数中声明就会导致内存的浪费<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"你好"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1=<span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> p2=<span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p1.say === p2.say);   <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="继承的方式"><a href="#继承的方式" class="headerlink" title="继承的方式"></a>继承的方式</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><h4 id="原型链继承第一种方式"><a href="#原型链继承第一种方式" class="headerlink" title="原型链继承第一种方式"></a>原型链继承第一种方式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然这样写没有问题，但是方法一旦过多，代码的冗余将会非常的多。</p>
<h4 id="原型链继承第二种方式"><a href="#原型链继承第二种方式" class="headerlink" title="原型链继承第二种方式"></a>原型链继承第二种方式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Person.prototype = &#123;</span><br><span class="line">	<span class="keyword">constructor</span>:Person,</span><br><span class="line">	say:function()&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">	run:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'running'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<br>1、一般情况下，应该先改变原型对象，再创建对象。<br>2、对于新原型，一般会添加一个constructor属性，从而不破坏原来的原型对象结构。</p>
</blockquote>
<h3 id="拷贝继承（也称混入继承：mixin）"><a href="#拷贝继承（也称混入继承：mixin）" class="headerlink" title="拷贝继承（也称混入继承：mixin）"></a>拷贝继承（也称混入继承：mixin）</h3><p>场景：有时候想使用某个对象中的属性，但是又不想直接破坏它，于是就可以创建这个对象的拷贝<br>类似于jQuery中的<code>$.extend</code>，编写Jquery插件的必经之路</p>
<p>来看一个例子<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    age : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = o1;</span><br><span class="line"></span><br><span class="line">o2.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o1.age); <span class="comment">//结果输出18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、修改了o2对象的age属性</span></span><br><span class="line"><span class="comment">//2、由于o2对象跟o1对象是同一个对象</span></span><br><span class="line"><span class="comment">//3、所以此时o1对象的age属性也被修改了</span></span><br></pre></td></tr></table></figure></p>
<p>这里涉及到一个知识点<code>深拷贝和浅拷贝</code>，</p>
<ul>
<li>深拷贝只是拷贝一层属性，没有内部对象</li>
<li>深拷贝其实是利用了递归的原理，将对象的若干层属性拷贝出来。</li>
<li>上述例子中只是一个浅拷贝。</li>
</ul>
<p><em>那么什么场景下适合使用拷贝继承</em><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'张三'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o4 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'李四'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>实现1<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'张三'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cp = &#123;&#125;;</span><br><span class="line">cp.gender = o3.gender;</span><br><span class="line">cp.grade = o3.gender;</span><br><span class="line">cp.name = o3.name;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(cp); <span class="comment">//&#123;gender: "男", grade: "男", name: "张三"&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样的方式可以说在开发中就是写死的，毫无重用性。</p>
<ul>
<li>实现2<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'张三'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">target,source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        target[key] = source[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line">extend(target, o3);</span><br><span class="line"><span class="built_in">console</span>.log(target); <span class="comment">//&#123;gender: "男", grade: "初三", name: "张三"&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>如果很多时候需要用到拷贝继承，无疑封装成一个函数来进行复用是很好的。</p>
<p>在es6中也有了<code>对象扩展运算符</code>，仿佛就是为了拷贝继承而生的:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o3 = &#123;</span><br><span class="line">    gender : <span class="string">'男'</span>,</span><br><span class="line">    grade : <span class="string">'初三'</span>,</span><br><span class="line">    name : <span class="string">'张三'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = &#123; ...o3 &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(target);<span class="comment">//&#123;gender: "男", grade: "初三", name: "张三"&#125;</span></span><br><span class="line"><span class="keyword">var</span> target2 = &#123; ...o3, <span class="attr">age</span>:<span class="number">20</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(target2);<span class="comment">//&#123;gender: "男", grade: "初三", name: "张三", age: 20&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>可以说简单到令人发指的操作，当然也会存在兼容问题啦，这里不涉及es6，单纯扯一下。</p>
<h3 id="原型式继承（道格拉斯在蝴蝶书中提出的）"><a href="#原型式继承（道格拉斯在蝴蝶书中提出的）" class="headerlink" title="原型式继承（道格拉斯在蝴蝶书中提出的）"></a>原型式继承（道格拉斯在蝴蝶书中提出的）</h3><ul>
<li>使用场景<ul>
<li>可以创建一个纯洁的对象，对象中什么属性都没有</li>
<li>创建一个继承自某个父对象的字对象</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建空对象</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(o1); <span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(o1.__proto__) <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//继承父对象</span></span><br><span class="line"><span class="keyword">var</span> parent = &#123;</span><br><span class="line">	age : <span class="number">50</span>,</span><br><span class="line">	name : <span class="string">"爸爸"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Object</span>.create(parent);</span><br><span class="line"><span class="built_in">console</span>.log(s1); <span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.__proto__); <span class="comment">//&#123;age: 50, name: "爸爸"&#125;</span></span><br></pre></td></tr></table></figure>
<p>可以看得出一些区别，所谓的纯洁对象，真的很纯。这个使用也很方便。</p>
<h3 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h3><p>场景：适用于2种构造函数之间有相似的逻辑的情况。<br>原理：函数的call、apply调用方式（函数的调用方式在文章后面讲解）</p>
<p>场景举例：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.gender=gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender,say</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">    <span class="keyword">this</span>.gender=gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>局限性：<code>Animal</code>（父类的构造函数）的构造函数必须完全适用于<code>Person</code>（子类的构造函数）</p>
</blockquote>
<p>借用构造函数实现<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name=name;</span><br><span class="line">            <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,say</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// this.name=name;</span></span><br><span class="line">            <span class="comment">// this.age=age;</span></span><br><span class="line">            <span class="comment">// this.gender=gender;</span></span><br><span class="line">    Animal.apply(<span class="keyword">this</span>, [name, age]); </span><br><span class="line">            <span class="comment">//等同与下面语句</span></span><br><span class="line">            <span class="comment">//Animal.call(this, name, age);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">18</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'say'</span>);</span><br><span class="line">&#125;)) <span class="comment">//&#123;name: "张三", age: 18, say: ƒ&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="and-so-on"><a href="#and-so-on" class="headerlink" title="and so on"></a>and so on</h3><p>还有寄生继承，寄生组合继承，这里举例出以上几条常用的，其余这里就不再一一细数了。</p>
<h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>概念：JS中的对象可能会有父对象，父对象中可能还会有父对象，就是祖宗十九代了。<br>根本：继承</p>
<pre><code>- 属性：对象中几乎都会有一个`__proto__`的一个属性，指向他的父对象
- 意义，可以访问到父对象中的相关属性和方法
</code></pre><p>根对象：<code>Object.prototype</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="built_in">console</span>.log(cat.__proto__); </span><br><span class="line"><span class="comment">//等同于 Animal.prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(cat.__proto__.__proto__);</span><br><span class="line"><span class="comment">//等同于 Object.prototype</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>函数对象都有<code>prototype</code>（原型对象）；而普通对象则只有<code>__proto__</code>（原型指针）</p>
</blockquote>
<h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><p>概念：就是一个变量可以使用的范围。</p>
<ul>
<li>最外层作用域：全局作用域</li>
<li>通过函数创建出一个独立的作用域，其中函数还可以嵌套，所以作用域也可以嵌套。</li>
</ul>
<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><ul>
<li>由于作用域是相对于变量而言的，而如果存在多级作用域，这个变量又来自于哪里？这个问题就需要好好地探究一下了，我们把这个变量的查找过程称之为变量的作用域链</li>
<li>作用域链的意义：查找变量（确定变量来自于哪里，变量是否可以访问）</li>
<li>简单来说，作用域链可以用以下几句话来概括：(或者说：确定一个变量来自于哪个作用域)<ul>
<li>查看当前作用域，如果当前作用域声明了这个变量，就确定结果</li>
<li>查找当前作用域的上级作用域，也就是当前函数的上级函数，看看上级函数中有没有声明</li>
<li>再查找上级函数的上级函数，直到全局作用域为止</li>
<li>如果全局作用域中也没有，我们就认为这个变量未声明(xxx is not defined)</li>
</ul>
</li>
</ul>
<p>例子1：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>; <span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(age); <span class="comment">//可访问</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">"zhangsan"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">console</span>.log(name); <span class="comment">//可访问</span></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">//不能访问</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">//可访问</span></span><br></pre></td></tr></table></figure></p>
<p>例子2：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gender  = <span class="string">"男"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(gender); <span class="comment">//可以访问</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(gender); <span class="comment">//可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">&#125;)();</span><br><span class="line">f();</span><br></pre></td></tr></table></figure></p>
<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>一个经典的例子<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line">f(); <span class="comment">//2</span></span><br><span class="line">f(); <span class="comment">//3</span></span><br><span class="line">f(); <span class="comment">//4</span></span><br></pre></td></tr></table></figure></p>
<p>可以看出a的输出并没有一直输出3，而是2、3、4，而产生的原因是因为<code>fn</code>函数执行完毕后，匿名函数的引用导致没有释放a变量，而作用域中保留了最新的a变量的值，闭包问题就产生了。</p>
<blockquote>
<p>闭包不仅仅只是说要返回一个函数，还可以是一个对象</p>
</blockquote>
<h2 id="闭包的内存释放"><a href="#闭包的内存释放" class="headerlink" title="闭包的内存释放"></a>闭包的内存释放</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            a++;</span><br><span class="line">            <span class="built_in">console</span>.log(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> q1=f1();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//要想释放q1里面保存的a，只能通过释放q1</span></span><br><span class="line">    q1=<span class="literal">null</span>;    <span class="comment">//q1=undefined</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h2><ul>
<li>模块化</li>
<li>防止变量被破坏</li>
</ul>
<p>举例：模块化的应用参考Vue.js中的源码</p>
<p>防止变量被破坏，运用场景</p>
<p>举例：KTV中的最低消费，最低消费的数值不能够暴露出去让别人随便修改，这样会脏了数据，返回一个对象暴露方法来进行业务操作，而不是进行直接操作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//场景举例</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">KTV</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//最低消费1000</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> leastPrice = <span class="number">1000</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sale = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//消费</span></span></span><br><span class="line"><span class="javascript">                pay:<span class="function"><span class="keyword">function</span>(<span class="params">pr</span>)</span>&#123;</span></span><br><span class="line">                    sale += pr;</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="comment">//结账</span></span></span><br><span class="line"><span class="javascript">                settlement:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                    if(sale&lt;leastPrice)&#123;</span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"您未达到最低消费，请继续消费"</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"欢迎下次光临"</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p1 = KTV();</span></span><br><span class="line">        p1.pay(100);</span><br><span class="line"><span class="javascript">        p1.settlement(); <span class="comment">//您未达到最低消费，请继续消费</span></span></span><br><span class="line">        p1.pay(1000);</span><br><span class="line"><span class="javascript">        p1.settlement(); <span class="comment">//欢迎下次光临</span></span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是如果需要进行修改最低消费，场景：老板的朋友进行消费，需要修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//场景举例</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">KTV</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//最低消费1000</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> leastPrice = <span class="number">1000</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sale = <span class="number">0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//消费</span></span></span><br><span class="line"><span class="javascript">                pay:<span class="function"><span class="keyword">function</span>(<span class="params">pr</span>)</span>&#123;</span></span><br><span class="line">                    sale += pr;</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="comment">//结账</span></span></span><br><span class="line"><span class="javascript">                settlement:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                    if(sale&lt;leastPrice)&#123;</span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"您未达到最低消费，请继续消费"</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"欢迎下次光临"</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="comment">//传入工号，和修改最低消费值</span></span></span><br><span class="line"><span class="javascript">                edit:<span class="function"><span class="keyword">function</span>(<span class="params">id,lp</span>)</span>&#123;</span></span><br><span class="line">                    if(id == 888)&#123;</span><br><span class="line">                        leastPrice = lp;</span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"你不是管理员，无法修改"</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p1 = KTV();</span></span><br><span class="line">        p1.pay(100);</span><br><span class="line"><span class="javascript">        p1.settlement(); <span class="comment">//您未达到最低消费，请继续消费</span></span></span><br><span class="line"><span class="javascript">        p1.edit(<span class="number">100</span>, <span class="number">200</span>); <span class="comment">//你不是管理员，无法修改</span></span></span><br><span class="line"><span class="javascript">        p1.edit(<span class="number">888</span>, <span class="number">100</span>); <span class="comment">//欢迎下次光临</span></span></span><br><span class="line">        p1.settlement();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>闭包的运用防止变量被破坏，暴露出方法来间接修改数值，防止出现脏数据。<br>闭包中也有作用域链的相关运用。</p>
<h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><p>从 ES5 开始，函数内部可以设定为严格模式。</p>
<p>严格模式主要有以下限制。</p>
<ul>
<li>变量必须声明后再使用</li>
<li>函数的参数不能有同名属性，否则报错</li>
<li>不能使用<code>with</code>语句</li>
<li>不能对只读属性赋值，否则报错</li>
<li>不能使用前缀 0 表示八进制数，否则报错</li>
<li>不能删除不可删除的属性，否则报错</li>
<li>不能删除变量<code>delete prop</code>，会报错，只能删除属性<code>delete global[prop]</code></li>
<li><code>eval</code>不会在它的外层作用域引入变量</li>
<li><code>eval</code>和<code>arguments</code>不能被重新赋值</li>
<li><code>arguments</code>不会自动反映函数参数的变化</li>
<li>不能使用<code>arguments.callee</code></li>
<li>不能使用<code>arguments.caller</code></li>
<li>禁止<code>this</code>指向全局对象</li>
<li>不能使用<code>fn.caller</code>和<code>fn.arguments</code>获取函数调用的堆栈</li>
<li>增加了保留字（比如<code>protected</code>、<code>static</code>和<code>interface</code>）</li>
</ul>
<p>上面这些限制，模块都必须遵守。由于严格模式是 ES5 引入的，不属于 ES6，所以请参阅相关 ES5 书籍，本书不再详细介绍了。</p>
<p>其中，尤其需要注意<code>this</code>的限制。ES6 模块之中，顶层的<code>this</code>指向<code>undefined</code>，即不应该在顶层代码使用<code>this</code>。</p>
<h1 id="函数的四种调用方式"><a href="#函数的四种调用方式" class="headerlink" title="函数的四种调用方式"></a>函数的四种调用方式</h1><p>为什么要区分函数的调用方式呢？是因为在ES6前，函数内部的this是由该函数的调用方式决定的，函数内部的this跟大小写、书写位置无关。</p>
<h2 id="函数调用方式"><a href="#函数调用方式" class="headerlink" title="函数调用方式"></a>函数调用方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(); <span class="comment">//Window</span></span><br></pre></td></tr></table></figure>
<p>可以看到打印的this指向的是window对象。</p>
<p>在看第二种情况</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;</span><br><span class="line">         say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = p.say;</span><br><span class="line">s(); <span class="comment">//Window</span></span><br><span class="line"></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = Person.prototype.say;</span><br><span class="line">f1(); <span class="comment">//Window</span></span><br></pre></td></tr></table></figure>
<p>this的指向还是window对象。</p>
<p>而在严格模式下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">        'use strict'</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = p.say;</span><br><span class="line">s(); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f1 = Person.prototype.say;</span><br><span class="line">f1(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以看到，如果是以函数方式来调用，函数内部的this将指向window对象。而在严格模式下，由于函数调用方式this都是指向顶层对象，而严格模式禁止this指向顶层对象，所以this都是undefined</p>
</blockquote>
<h2 id="方法调用方式"><a href="#方法调用方式" class="headerlink" title="方法调用方式"></a>方法调用方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//这里不讨论age和say方法中的this</span></span><br><span class="line">         <span class="keyword">this</span>.age = <span class="number">10</span>;</span><br><span class="line">         <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.say(); <span class="comment">//Person</span></span><br></pre></td></tr></table></figure>
<p>this指向了p1对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line">p2.say(); <span class="comment">//Person</span></span><br></pre></td></tr></table></figure>
<p>this指向了p2对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p3 = &#123;</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">p3.say(); <span class="comment">//p2</span></span><br></pre></td></tr></table></figure>
<p>this指向了p3对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tom = &#123;</span><br><span class="line">    c: clear,</span><br><span class="line">    length: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tom.c(); <span class="comment">//20</span></span><br></pre></td></tr></table></figure>
<p>可以看到c函数还是使用方法调用的方式来调用的，c指向了clear函数，所以函数体中的this指向了tom，所以打印了20.</p>
<blockquote>
<p>可以看到，使用方法方法调用的this会指向调用该方法的对象。</p>
</blockquote>
<h2 id="构造函数调用方式"><a href="#构造函数调用方式" class="headerlink" title="构造函数调用方式"></a>构造函数调用方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(); <span class="comment">//p1</span></span><br></pre></td></tr></table></figure>
<p>通过new关键字来调用的，那么这种方式就是构造函数的调用方式，这种方式创建的函数内部this将指向该构造函数的实例对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _init=jQuery.prototype.init;</span><br><span class="line">        <span class="comment">//如果函数返回了一个复杂数据类型的值，那么本次函数的返回值就是该值。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> _init();</span><br><span class="line">    &#125;</span><br><span class="line">    jQuery.prototype=&#123;</span><br><span class="line">        <span class="keyword">constructor</span>:jQuery,</span><br><span class="line">        length:100,</span><br><span class="line">        init:function()&#123;</span><br><span class="line">            <span class="comment">//this指向init构造函数的实例</span></span><br><span class="line">            <span class="comment">//--&gt;1、首先查看本身有没有length属性</span></span><br><span class="line">            <span class="comment">//--&gt;2、如果本身没有该属性，那么去它的原型对象中查找</span></span><br><span class="line">            <span class="comment">//--&gt;3、如果原型对象中没有，那么就去原型对象的原型对象中查找，最终一直找到根对象（Object.prototype）</span></span><br><span class="line">            <span class="comment">//--&gt;4、最终都没有找到的话，我们认为该对象并没有该属性，如果获取该属性的值：undefined</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> jQuery(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<p>上述说了this指向该构造函数的实例对象，可以访问自身实例的属性和方法，这里返回了<code>init.prototype</code>的属性，但是这并不是<code>Jquery.prototype</code>的属性，所以打印的是<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改了init函数的默认原型，指向新原型</span></span><br><span class="line">jQuery.prototype.init.prototype = jQuery.prototype;</span><br></pre></td></tr></table></figure>
<p>如果我们修改了<code>init.prototype</code>指向了<code>jQuery.prototype</code>，那么再运行上述代码，<code>this.length</code>打印的值将是100。</p>
<h2 id="上下文调用方式"><a href="#上下文调用方式" class="headerlink" title="上下文调用方式"></a>上下文调用方式</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fcall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fcall.call(<span class="keyword">this</span>); <span class="comment">//Window</span></span><br><span class="line">fcall.call([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]); <span class="comment">//[1, 3, 5]</span></span><br><span class="line">fcall.call(<span class="number">1</span>); <span class="comment">//Number</span></span><br><span class="line">fcall.call(<span class="string">"abc"</span>); <span class="comment">//String</span></span><br><span class="line">fcall.call(<span class="literal">true</span>); <span class="comment">//Boolean</span></span><br><span class="line">fcall.call(<span class="literal">null</span>); <span class="comment">//Window</span></span><br><span class="line">fcall.call(<span class="keyword">new</span> fcall()); <span class="comment">//fcall</span></span><br><span class="line">fcall.call(&#123;<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">height</span>:<span class="number">1000</span>&#125;); <span class="comment">//&#123;age: 20, height: 1000&#125;</span></span><br><span class="line">fcall.call(<span class="literal">undefined</span>); <span class="comment">//Window</span></span><br></pre></td></tr></table></figure>
<p>call方法的第一个参数就决定了函数内部this的指向。<br>如果第一个参数的类型是：</p>
<ul>
<li>对象类型：那么this将指向该对象</li>
<li>如果是<code>undefined</code>,<code>null</code>，那么this将指向Window</li>
<li>如果是普通的数据类型比如<code>&quot;abc&quot;</code>,<code>1</code>,<code>true</code>则会转换成对应构造函数的实例（装箱），例如<code>String</code>,<code>Number</code>,<code>Boolean</code>。</li>
</ul>
<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>apply和call方法调用方式可以完全相同，只是后面传参数时有异同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a+<span class="string">" "</span>+b+<span class="string">" "</span>+c);</span><br><span class="line">&#125;</span><br><span class="line">toString.call(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>)   <span class="comment">//"1 3 5"</span></span><br><span class="line">toString.apply(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>])<span class="comment">//"1 3 5"</span></span><br></pre></td></tr></table></figure>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>bind是es5中才有的(IE9+)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.age); <span class="comment">//undefined</span></span><br><span class="line">        &#125;, <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.run();</span><br></pre></td></tr></table></figure>
<p>以前这样书写时，可能会定义一个另外的变量来指向this</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _that = <span class="keyword">this</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(_that.age); <span class="comment">//10</span></span><br><span class="line">        &#125;, <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.run();</span><br></pre></td></tr></table></figure>
<p>但是现在可以使用bind来实现了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout((<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.age); <span class="comment">//10</span></span><br><span class="line">        &#125;).bind(<span class="keyword">this</span>), <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.run();</span><br></pre></td></tr></table></figure>
<p>可以发现，使用bind方式后this的指向将改为了obj。</p>
<p>更直观的了解bind方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">speed</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.speed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> speedOther = speed.bind(&#123; <span class="attr">speed</span>: <span class="number">20</span> &#125;);</span><br><span class="line">speedOther(); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<p>speed.bind方法执行后会产生了一个新的函数，新的函数体内与原来的是一样的，但是唯一的不同就是this的指向改为了<code>{ speed: 20 }</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">    name:<span class="string">"西瓜"</span>,</span><br><span class="line">    drink:(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//this指向了：&#123; name:"橙汁" &#125;</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;).bind(&#123; <span class="attr">name</span>:<span class="string">"橙汁"</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line">obj.drink();    <span class="comment">//"橙汁"</span></span><br></pre></td></tr></table></figure>
<h3 id="三者的区别"><a href="#三者的区别" class="headerlink" title="三者的区别"></a>三者的区别</h3><p>call\apply是立刻执行了这个函数，并且在执行过程中绑定了this的值，而bind并没有立刻执行这个函数，而是产生了一个新的函数，新的函数绑定了this的值。</p>
<h2 id="ES6中的箭头函数"><a href="#ES6中的箭头函数" class="headerlink" title="ES6中的箭头函数"></a>ES6中的箭头函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line">div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"你好"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line">div.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"你好"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>有一个参数的箭头函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"abc"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于：</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"abc"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>有2个及更多参数的箭头函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f=<span class="function">(<span class="params">a,b,c</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"abc"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>箭头函数和普通匿名函数有哪些不同？</strong></p>
<ul>
<li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li>
<li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li>
<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li>
<li>（不常用）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。 </li>
<li>generator函数现在经常用async替代</li>
</ul>
<h1 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h1><ul>
<li>typeof <ul>
<li>typeof只能判断：数字、字符串、布尔值、undefined、函数</li>
</ul>
</li>
<li><code>Object.prototype.toString.call()</code><ul>
<li>5  <code>[object Number]</code></li>
<li>“abc”<code>[object String]</code></li>
<li>true <code>[object Boolean]</code></li>
<li>null <code>[object Null]</code></li>
<li>undefined <code>[object Undefined]</code></li>
<li>[1,3,5] <code>[object Array]</code></li>
<li>function(){} <code>[object Function]</code></li>
<li>new Date()   <code>[object Date]</code></li>
<li>/abc/       <code>[object RegExp]</code></li>
</ul>
</li>
<li>Array.isArray()  es5中提出来的检测数组</li>
<li>isNaN()   </li>
<li>isInfinity()</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5移动端自适应方案——手淘flexible方案</title>
    <url>/2019/05/28/HTML5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94%E6%89%8B%E6%B7%98flexible%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前文讲过了[HTML5移动端自适应方案——媒体查询-rem方案]，基于媒体查询方式的响应式有优点也有缺点：</p>
<p>优点：兼容性好，@media在ie9以上是支持的，PC和MOBILE是同一套代码的，不用分开。</p>
<p>缺点：要写得css相对另外两个多很多，而且各个断点都要做好。css样式会稍微大点，更麻烦。</p>
<a id="more"></a>
<blockquote>
<p>本文中不涉及一些viewport、dpr、em、rem等的概念介绍，详细了解可以再查看本博客中另一篇文章有具体讲解这些概念。</p>
</blockquote>
<p>所以这里介绍另一种使用Flexible实现手淘H5页面的终端适配。</p>
<h1 id="lib-flexible使用"><a href="#lib-flexible使用" class="headerlink" title="lib-flexible使用"></a>lib-flexible使用</h1><p>GitHub:<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">https://github.com/amfe/lib-flexible</a></p>
<p><a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener"><code>lib-flexible</code></a>是一个制作H5适配的开源库，可以<a href="https://github.com/amfe/lib-flexible/archive/master.zip" target="_blank" rel="noopener">点击这里</a>下载相关文件，获取需要的JavaScript和CSS文件。</p>
<p>或者阿里CDN</p>
<blockquote>
<p>建议使用经典版本0.3.2 <a href="https://github.com/amfe/lib-flexible/tree/master" target="_blank" rel="noopener">github</a></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://g.tbcdn.cn/mtb/lib-flexible/&#123;&#123;version&#125;&#125;/??flexible_css.js,flexible.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将代码中的<code></code>换成对应的版本号<code>0.3.4</code>。</p>
<p>在Web页面的<code>&lt;head&gt;&lt;/head&gt;</code>中添加对应的<code>flexible_css.js,flexible.js</code>文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build/flexible.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//cdn</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://g.tbcdn.cn/mtb/lib-flexible/0.3.4/??flexible_css.js,flexible.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>另外强烈建议对JS做<strong>内联处理</strong>，在所有资源加载之前执行这个JS。执行这个JS后，会在<code>&lt;html&gt;</code>元素上增加一个<code>data-dpr</code>属性，以及一个<code>font-size</code>样式。JS会根据不同的设备添加不同的<code>data-dpr</code>值，比如说<code>2</code>或者<code>3</code>，同时会给<code>html</code>加上对应的<code>font-size</code>的值，比如说<code>75px</code>。</p>
<p>如此一来，页面中的元素，都可以通过<code>rem</code>单位来设置。他们会根据<code>html</code>元素的<code>font-size</code>值做相应的计算，从而实现屏幕的适配效果。</p>
<p>除此之外，在引入<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener"><code>lib-flexible</code></a>需要执行的JS之前，可以手动设置<code>meta</code>来控制<code>dpr</code>值，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"flexible"</span> <span class="attr">content</span>=<span class="string">"initial-dpr=2"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中<code>initial-dpr</code>会把<code>dpr</code>强制设置为给定的值。如果手动设置了<code>dpr</code>之后，不管设备是多少的<code>dpr</code>，都会强制认为其<code>dpr</code>是你设置的值。<strong>在此不建议手动强制设置<code>dpr</code>，因为在Flexible中，只对iOS设备进行<code>dpr</code>的判断，对于Android系列，始终认为其<code>dpr</code>为<code>1</code>。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!dpr &amp;&amp; !scale) &#123;</span><br><span class="line">    <span class="keyword">var</span> isAndroid = win.navigator.appVersion.match(<span class="regexp">/android/gi</span>);</span><br><span class="line">    <span class="keyword">var</span> isIPhone = win.navigator.appVersion.match(<span class="regexp">/iphone/gi</span>);</span><br><span class="line">    <span class="keyword">var</span> devicePixelRatio = win.devicePixelRatio;</span><br><span class="line">    <span class="keyword">if</span> (isIPhone) &#123;</span><br><span class="line">        <span class="comment">// iOS下，对于2和3的屏，用2倍的方案，其余的用1倍方案</span></span><br><span class="line">        <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">3</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">3</span>)) &#123;                </span><br><span class="line">            dpr = <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (devicePixelRatio &gt;= <span class="number">2</span> &amp;&amp; (!dpr || dpr &gt;= <span class="number">2</span>))&#123;</span><br><span class="line">            dpr = <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dpr = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 其他设备下，仍旧使用1倍的方案</span></span><br><span class="line">        dpr = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    scale = <span class="number">1</span> / dpr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Flexible实现自适应"><a href="#Flexible实现自适应" class="headerlink" title="Flexible实现自适应"></a>Flexible实现自适应</h1><p>图片素材：</p>
<p><img src="designpsd.jpeg" alt></p>
<p><img src="grayscale.jpeg" alt></p>
<p><img src="haibao.jpg" alt></p>
<p>该设计图是按照iPhone6作为基准设计尺寸，iPhone6的分辨率为<code>750px * 1334px</code>，iPhone6的DPR为2，则CSS像素则缩小为设计稿尺寸的<code>1/2</code>。既设计稿量出某宽为20px，则css像素则转为为10px。</p>
<blockquote>
<p>理想适口的缩放比为1的情况下</p>
</blockquote>
<p>首先按照设计稿尺寸还原页面，为了方便理解，首先使用px还原页面，在iPhone6下显示设计。</p>
<p>实现代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            -webkit-tap-highlight-color: transparent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        html,body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        html,body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f5294c</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* background-color: #f5294c; */</span></span></span><br><span class="line">            min-width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.header</span> <span class="selector-tag">h1</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> &#123;</span></span><br><span class="line">            padding: 0 5px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            padding: 5px 0;</span><br><span class="line">            display: table-cell;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.left</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">            width: 88px;</span><br><span class="line">            height: 88px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            display: table-cell;</span><br><span class="line">            padding: 5px 8px 0 8px;</span><br><span class="line">            vertical-align: top;</span><br><span class="line">            width: 100%;</span><br><span class="line">            font-size: 13px;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 1<span class="selector-class">.25</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> &#123;</span></span><br><span class="line">            margin: 9px 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#f32a4c</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">            font-size: 10px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f32a4c</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fffffd</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.intro</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#ffb09b</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.buy</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 9px;</span><br><span class="line">            bottom: 7px;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 1<span class="selector-class">.25</span>;</span></span><br><span class="line">            font-size: 13px;</span><br><span class="line">            padding: 5px 18px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f42a4b</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fefffc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.buy</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fefffc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 海报 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/haibao.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里不做过多的页面美化。预览一下</p>
<p><img src="preview.png" alt></p>
<p>在head中配置flexible</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/amfe-flexible/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>把视觉稿中的px换算成rem</strong></p>
<p>之前提到设计稿是以iPhone6为基准的，即<code>750px * 1334px</code>的设计稿。而iPhone6中DPR为2，所以iPhone6下的布局视口宽度为375。</p>
<blockquote>
<p>理想适口的缩放比为1的情况下</p>
</blockquote>
<p>而Flexible的方案就是将视觉稿分成<strong>100份</strong>，每一份成为<code>a</code>，同时<code>1rem</code>单位被认定为<code>10a</code>，针对该设计稿可以算出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1a = 3.75px</span><br><span class="line">1rem = 37.5px</span><br></pre></td></tr></table></figure>
<p>则我们将设计稿分成10a，则整个宽度为10rem，所以对应的<code>&lt;html&gt;</code>的<code>font-size</code>则为37.5px。</p>
<p>得到了基准值后，只需要原始的<code>px值</code><strong>（CSS像素）</strong>除以<code>rem基准值</code>即可。例如一个<code>75px * 75px</code>即转换成<code>2rem * 2rem</code>。</p>
<p>我们统一将页面内的px值统一换算成rem，来浏览一下适配效果：</p>
<p><img src="flexibleshipei.gif" alt></p>
<p><strong>如何快速换算</strong></p>
<ul>
<li><p>编辑器</p>
<p>在开发中总不能让自己一个一个的去计算，编辑器可以有一键转换px2rem的插件，sb3有cssrem，vscode有px to rem。</p>
</li>
<li><p>CSS处理器，可以使用Less或者Sass实现快速转换</p>
</li>
<li><p>PostCSS(px2rem)</p>
<p>除了Sass这样的CSS处理器这外，手淘团队的大神还开发了一款<code>npm</code>的工具<a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="noopener">px2rem</a>。安装好<a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="noopener">px2rem</a>之后，可以在项目中直接使用。也可以使用<a href="http://www.w3cplus.com/blog/tags/516.html" target="_blank" rel="noopener">PostCSS</a>。使用PostCSS插件<a href="https://www.npmjs.com/package/postcss-px2rem" target="_blank" rel="noopener">postcss-px2rem</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var postcss = require(&apos;gulp-postcss&apos;);</span><br><span class="line">var px2rem = require(&apos;postcss-px2rem&apos;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;, function() &#123;</span><br><span class="line">    var processors = [px2rem(&#123;remUnit: 75&#125;)];</span><br><span class="line">    return gulp.src(&apos;./src/*.css&apos;)</span><br><span class="line">        .pipe(postcss(processors))</span><br><span class="line">        .pipe(gulp.dest(&apos;./dest&apos;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>除了在Gulp中配置外，还可以使用其他的配置方式，详细的介绍可以<a href="https://www.npmjs.com/package/postcss-px2rem" target="_blank" rel="noopener">点击这里</a>进行了解。</p>
<p>配置完成之后，在实际使用时，你只要像下面这样使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.selector &#123;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 64px; /*px*/</span><br><span class="line">    font-size: 28px; /*px*/</span><br><span class="line">    border: 1px solid #ddd; /*no*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>px2rem</code>处理之后将会变成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.selector &#123;</span><br><span class="line">    width: 2rem;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line">&#125;</span><br><span class="line">[data-dpr=&quot;1&quot;] .selector &#123;</span><br><span class="line">    height: 32px;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">[data-dpr=&quot;2&quot;] .selector &#123;</span><br><span class="line">    height: 64px;</span><br><span class="line">    font-size: 28px;</span><br><span class="line">&#125;</span><br><span class="line">[data-dpr=&quot;3&quot;] .selector &#123;</span><br><span class="line">    height: 96px;</span><br><span class="line">    font-size: 42px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在整个开发中有了这些工具之后，完全不用担心<code>px</code>值转<code>rem</code>值影响开发效率。</p>
</li>
</ul>
<h1 id="文本字号不建议使用rem"><a href="#文本字号不建议使用rem" class="headerlink" title="文本字号不建议使用rem"></a>文本字号不建议使用rem</h1><p>前面大家都见证了如何使用<code>rem</code>来完成H5适配。那么文本又将如何处理适配。是不是也通过<code>rem</code>来做自动适配。</p>
<p>显然，我们在iPhone3G和iPhone4的Retina屏下面，希望看到的文本字号是相同的。也就是说，我们<strong>不希望文本在Retina屏幕下变小</strong>，另外，我们<strong>希望在大屏手机上看到更多文本</strong>，以及，现在绝大多数的字体文件都自带一些点阵尺寸，通常是<code>16px</code>和<code>24px</code>，所以我们<strong>不希望出现13px和15px这样的奇葩尺寸</strong>。</p>
<p>如此一来，就决定了在制作H5的页面中，<code>rem</code>并不适合用到段落文本上。所以在Flexible整个适配方案中，考虑文本还是使用<code>px</code>作为单位。只不过使用<code>[data-dpr]</code>属性来区分不同<code>dpr</code>下的文本字号大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1rem</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.4rem</span>;</span><br><span class="line">    font-size: 12px; // 默认写上dpr为1的fontSize</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-dpr="2"]</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-dpr="3"]</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">36px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了能更好的利于开发，在实际开发中，我们可以定制一个<a href="https://github.com/W3cplus/Sass-Resources/blob/master/mixins/_font-dpr.scss" target="_blank" rel="noopener"><code>font-dpr()</code></a>这样的Sass混合宏：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> font-dpr(<span class="variable">$font-size</span>)&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$font-size</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-attr">[data-dpr="2"]</span> &amp; &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="variable">$font-size</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-attr">[data-dpr="3"]</span> &amp; &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="variable">$font-size</span> * <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了这样的混合宏之后，在开发中可以直接这样使用：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">include</span> font-dpr(<span class="number">16px</span>);</span><br></pre></td></tr></table></figure>
<p>当然这只是针对于描述性的文本，比如说段落文本。但有的时候文本的字号也需要分场景的，比如在项目中有一个slogan,业务方希望这个slogan能根据不同的终端适配。针对这样的场景，完全可以使用<code>rem</code>给slogan做计量单位。</p>
<blockquote>
<p>注意，如果需要该功能版本的请使用0.3.2版本，既主分支版本或者使用cdn版本</p>
</blockquote>
<h1 id="Flexible原理"><a href="#Flexible原理" class="headerlink" title="Flexible原理"></a>Flexible原理</h1><p>flexible的核心代码很简单：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement  </span><br><span class="line"><span class="comment">// set 1rem = viewWidth / 10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rem = docEl.clientWidth / <span class="number">10</span></span><br><span class="line">  docEl.style.fontSize = rem + <span class="string">'px'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setRemUnit()</span><br></pre></td></tr></table></figure>
<p>上面的代码中，将<code>html</code>节点的<code>font-size</code>设置为页面<code>clientWidth</code>(布局视口)的<code>1/10</code>，即<code>1rem</code>就等于页面布局视口的<code>1/10</code>，所以这就是为什么上面所说的px换算rem的代码实现。</p>
<p>里面还有一些监听页面大小变化，布局可以自适应:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reset rem unit on page resize</span></span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, setRemUnit)</span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">     setRemUnit()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p>以及设置data-dpr</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">docEl.setAttribute(<span class="string">'data-dpr'</span>, dpr);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>完整源码请查看主分支版本中的js</p>
<p>由于<code>viewport</code>单位得到众多浏览器的兼容，lib-flexible这个过渡方案已经被官方弃用，但是其原理还是需要去理解的。因为vh、vw的方案原理都是大致相同的。</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>移动端适配</tag>
      </tags>
  </entry>
  <entry>
    <title>Android UI适配指南</title>
    <url>/2019/05/22/Android-UI%E9%80%82%E9%85%8D%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在Android开发中，由于Android碎片化严重，屏幕分辨率千奇百怪，而想要在各种分辨率的设备上显示基本一致的效果，适配成本越来越高。虽然Android官方提供了dp单位来适配，但其在各种奇怪分辨率下表现却不尽如人意。</p>
<a id="more"></a>
<p><img src="fenbutu.png" alt></p>
<p><strong>Android屏幕分辨率分布图</strong></p>
<p><img src="afenbutu.png" alt></p>
<p><strong>对比IOS屏幕分辨率分布图</strong></p>
<p><img src="ifenbutu.png" alt></p>
<p>所以Android的屏幕适配已经为重中之重的话题。</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>屏幕尺寸、屏幕分辨率、屏幕像素密度</p>
<p>屏幕尺寸：屏幕对角线长度，单位是英寸，我们常说的多少多少寸，比如4.7存手机、5.7存手机，指的就是这个。</p>
<p>屏幕分辨率：如 1920×1080，是指在手机屏幕的像素点的个数，单位是px，1px = 1 像素点，一般是纵向像素 × 横向像素，意味着高有 1920 个像素点，宽有 1080 个像素点。</p>
<p>屏幕像素密度：是指每英寸上的像素点数，单位是 dpi（dotper inch）。像素密度和屏幕尺寸和屏幕分辨率有关，它是由对角线的像素点数除以屏幕的大小得到的，关系如下：</p>
<p><img src="dpicalc.png" alt></p>
<p>单一变化条件下，屏幕尺寸越小、分辨率越高，像素密度越大，反之越小。</p>
<blockquote>
<p>与PPI的概念和计算方式是相同的</p>
</blockquote>
<ul>
<li><p>dp：是Android 特有的，意为密度无关像素，Google 发布的 BASELINE（基准线）为 160，以此为基准。</p>
</li>
<li><p>dip：Density Independent Pixels，同dp一个意思，目前废弃了，一般都写dp。</p>
</li>
<li><p>dpi：像素密度是屏幕上单位面积内的像素数，称为dpi（每英寸的点数）。 它与分辨率不同，后者是屏幕上像素的总数。</p>
</li>
<li><p>sp：Scale-IndependentPixels的缩写，可以根据文字大小首选项自动进行缩放。Google推荐我们使用12sp以上的大小，通常可以使用12sp，14sp，18sp，22sp，为避免精度损失，建议最好不要使用奇数和小数。</p>
</li>
<li><p>px：就是我们常说的像素</p>
</li>
<li><p>density：就这个单词本身直接翻译的意思而言，其也代表“密度”。但需要注意的是，在Android中，其实并非如此。注意我们这里指的是，通过代码<code>context.getResources().getDisplayMetrics().density</code>获取的“density”值。而通过该方法获取到的该值，实际上是等价于“dpi / 160”的一个结果值。</p>
</li>
</ul>
<h1 id="dp直接适配"><a href="#dp直接适配" class="headerlink" title="dp直接适配"></a>dp直接适配</h1><p>dp的概念是谷歌官方提出的适配的一种方式。</p>
<p>在android中的dp在渲染前会将dp转为px，计算公式：</p>
<ul>
<li>px = density * dp;</li>
<li>density = dpi / 160;</li>
<li>px = dp * (dpi / 160);</li>
</ul>
<p>而dpi是根据屏幕真实的分辨率和尺寸来计算的，每个设备都可能不一样的。</p>
<p>而因为Android碎片化非常严重的原因就导致了dpi的值非常乱，根本没有规律可循，即使dp适配可以做到80%的适配，但是效果还是差强人意。</p>
<p>我们用案例来看一下对比：</p>
<p><img src="avd.png" alt></p>
<p>这里创建了两个个模拟器，同样的分辨率<code>480 * 800</code>两种类别的设备，同样的放一张图片，布局代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_adapterimg"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@mipmap/img"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"300dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="p480dpshipei.png" alt></p>
<p>同样的代码，设置为300dp，但是两台机型却表现得不尽人意。这里就要涉及到上面一些公式的概念进行换算了，因为最终都会转换成px，我们来换算一下：</p>
<p><strong>480*800 5.1寸机型下</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpi = √(480^2 * 800^2)/ 5.1 = 182.93</span><br><span class="line">px = 300 * (183 / 160) = 342</span><br></pre></td></tr></table></figure>
<p>其余相同计算方式，对照表格：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">480*800/5.1</th>
<th style="text-align:center">480*800/4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">dpi</td>
<td style="text-align:center">182.93</td>
<td style="text-align:center">233.24</td>
</tr>
<tr>
<td style="text-align:center">density</td>
<td style="text-align:center">1.14</td>
<td style="text-align:center">1.46</td>
</tr>
<tr>
<td style="text-align:center">px</td>
<td style="text-align:center">342</td>
<td style="text-align:center">438</td>
</tr>
</tbody>
</table>
<blockquote>
<p>上述计算结果均为保留小数点后两位</p>
</blockquote>
<p>但是计算的结果真的是这样吗，我们使用代码来获取一下控件的高和宽</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ImageView iv_adapterimg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        iv_adapterimg = findViewById(R.id.iv_adapterimg);</span><br><span class="line"></span><br><span class="line">        iv_adapterimg.getViewTreeObserver().addOnPreDrawListener(<span class="keyword">new</span> ViewTreeObserver.OnPreDrawListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreDraw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.e(<span class="string">"logImageViewInfo"</span>, <span class="string">"Height: "</span> + iv_adapterimg.getHeight() + <span class="string">" / Width: "</span> + iv_adapterimg.getWidth());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        logDisplayInfo();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logDisplayInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String TAG = <span class="string">"logDisplayInfo"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通常我们在使用DisplayMetrics时，都是直接获取内部变量来使用。所以下面直接列出各个内部变量。</span></span><br><span class="line"></span><br><span class="line">        DisplayMetrics dm = <span class="keyword">new</span> DisplayMetrics();</span><br><span class="line">        getWindowManager().getDefaultDisplay().getMetrics(dm);</span><br><span class="line"></span><br><span class="line">        Log.e(TAG, <span class="string">"当前设备的系统dpi: "</span> + dm.densityDpi);</span><br><span class="line">        Log.e(TAG, <span class="string">"当前设备的density: "</span> + dm.density);</span><br><span class="line">        Log.e(TAG, <span class="string">"物理屏幕上 Y 轴方向每英寸的像素: "</span> + dm.ydpi);</span><br><span class="line">        Log.e(TAG, <span class="string">"物理屏幕上 X 轴方向每英寸的像素: "</span> + dm.xdpi);</span><br><span class="line">        Log.e(TAG, <span class="string">"屏幕高度的像素数量: "</span> + dm.heightPixels);</span><br><span class="line">        Log.e(TAG, <span class="string">"屏幕宽度的像素数量: "</span> + dm.widthPixels);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们查看一下Log输出：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">480*800/5.1</th>
<th style="text-align:center">480*800/4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Imageview height</td>
<td style="text-align:center">300</td>
<td style="text-align:center">450</td>
</tr>
<tr>
<td style="text-align:center">imageview width</td>
<td style="text-align:center">300</td>
<td style="text-align:center">450</td>
</tr>
<tr>
<td style="text-align:center">density</td>
<td style="text-align:center">1.0</td>
<td style="text-align:center">1.5</td>
</tr>
<tr>
<td style="text-align:center">dpi</td>
<td style="text-align:center">160</td>
<td style="text-align:center">240</td>
</tr>
<tr>
<td style="text-align:center">ydpi</td>
<td style="text-align:center">160.0</td>
<td style="text-align:center">240.0</td>
</tr>
<tr>
<td style="text-align:center">xdpi</td>
<td style="text-align:center">160.0</td>
<td style="text-align:center">240.0</td>
</tr>
<tr>
<td style="text-align:center">heightPixels</td>
<td style="text-align:center">800</td>
<td style="text-align:center">800</td>
</tr>
<tr>
<td style="text-align:center">widthPixels</td>
<td style="text-align:center">480</td>
<td style="text-align:center">480</td>
</tr>
</tbody>
</table>
<p>那么这为什么和我们计算的不一样呢，这里就要设计到系统dpi和物理dpi了，我们需要深究到其源码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//platform_frameworks_base/core/java/android/util/DisplayMetrics.java</span></span><br><span class="line"><span class="keyword">package</span> android.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.UnsupportedAppUsage;</span><br><span class="line"><span class="keyword">import</span> android.os.SystemProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A structure describing general information about a display, such as its</span></span><br><span class="line"><span class="comment"> * size, density, and font scaling.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;To access the DisplayMetrics members, initialize an object like this:&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt; DisplayMetrics metrics = new DisplayMetrics();</span></span><br><span class="line"><span class="comment"> * getWindowManager().getDefaultDisplay().getMetrics(metrics);&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayMetrics</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The device's current density.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * This value reflects any changes made to the device density. To obtain</span></span><br><span class="line"><span class="comment">     * the device's stable density, use &#123;<span class="doctag">@link</span> #DENSITY_DEVICE_STABLE&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span> This value should not be used.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> Use &#123;<span class="doctag">@link</span> #DENSITY_DEVICE_STABLE&#125; to obtain the stable</span></span><br><span class="line"><span class="comment">     *             device density or &#123;<span class="doctag">@link</span> #densityDpi&#125; to obtain the current</span></span><br><span class="line"><span class="comment">     *             density for a specific display.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DENSITY_DEVICE = getDeviceDensity();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The device's stable density.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * This value is constant at run time and may not reflect the current</span></span><br><span class="line"><span class="comment">     * display density. To obtain the current density for a specific display,</span></span><br><span class="line"><span class="comment">     * use &#123;<span class="doctag">@link</span> #densityDpi&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_DEVICE_STABLE = getDeviceDensity();</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDeviceDensity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// qemu.sf.lcd_density can be used to override ro.sf.lcd_density</span></span><br><span class="line">        <span class="comment">// when running in the emulator, allowing for dynamic configurations.</span></span><br><span class="line">        <span class="comment">// The reason for this is that ro.sf.lcd_density is write-once and is</span></span><br><span class="line">        <span class="comment">// set by the init process when it parses build.prop before anything else.</span></span><br><span class="line">        <span class="keyword">return</span> SystemProperties.getInt(<span class="string">"qemu.sf.lcd_density"</span>,</span><br><span class="line">                SystemProperties.getInt(<span class="string">"ro.sf.lcd_density"</span>, DENSITY_DEFAULT));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>深究其方法是一个native方法，在代码注释中提到的init的方法，深究源头</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> DisplayHardware::init(<span class="keyword">uint32_t</span> dpy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">///....省略</span></span><br><span class="line">  </span><br><span class="line"> 	<span class="comment">/* Read density from build-specific ro.sf.lcd_density property</span></span><br><span class="line"><span class="comment">     * except if it is overridden by qemu.sf.lcd_density.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (property_get(<span class="string">"qemu.sf.lcd_density"</span>, property, <span class="literal">NULL</span>) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (property_get(<span class="string">"ro.sf.lcd_density"</span>, property, <span class="literal">NULL</span>) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            LOGW(<span class="string">"ro.sf.lcd_density not defined, using 160 dpi by default."</span>);</span><br><span class="line">            <span class="built_in">strcpy</span>(property, <span class="string">"160"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* for the emulator case, reset the dpi values too */</span></span><br><span class="line">        mDpiX = mDpiY = atoi(property);</span><br><span class="line">    &#125;</span><br><span class="line">    mDensity = atoi(property) * (<span class="number">1.0f</span>/<span class="number">160.0f</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//....省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看其源码可以看出density的值是通过获取<code>ro.sf.lcd_density</code>配置的值，如果没有默认使用<code>DENSITY_DEFAULT</code>，其默认值有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_LOW = <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_MEDIUM = <span class="number">160</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_TV = <span class="number">213</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_HIGH = <span class="number">240</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_260 = <span class="number">260</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_280 = <span class="number">280</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_300 = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_XHIGH = <span class="number">320</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_340 = <span class="number">340</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_360 = <span class="number">360</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_400 = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_420 = <span class="number">420</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_440 = <span class="number">440</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_XXHIGH = <span class="number">480</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_560 = <span class="number">560</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_600 = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_XXXHIGH = <span class="number">640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DENSITY_DEFAULT = DENSITY_MEDIUM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DENSITY_DEFAULT_SCALE = <span class="number">1.0f</span> / DENSITY_DEFAULT;</span><br></pre></td></tr></table></figure>
<p>那么问题来了，<code>ro.sf.lcd_density</code>的值在哪里找到，其配置文件路径在手机的<code>/system/build.prop</code>文件中。</p>
<p>可以使用adb命令来将文件进行导出。但是要注意的是，avd模拟器下该文件没有<code>ro.sf.lcd_density</code>该配置项。但是可以在<code>emulator根目录下/config.ini</code>中的<code>hw.lcd.density</code>可以找到配置的值。</p>
<p>4寸模拟器下<code>config.ini</code>的<code>hw.lcd.density</code>值</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">hw.lcd.density</span>=<span class="number">240</span></span><br></pre></td></tr></table></figure>
<p>我们将4寸的模拟器的配置文件修改成160后查看打印日志:</p>
<p><img src="hw_log.png" alt></p>
<p>可以查看到日志的输出和上面原来的输出发生了改变，改成了自己配置的值。但是该选项只是avd模拟器环境下，真机或者一些游戏模拟器环境下都是在<code>/system/build.prop</code>配置文件中<code>ro.sf.lcd_density</code>的值。一般该值都是出厂时就编译好的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ro.sf.lcd_density=240</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是MUMU中读取<code>/system/build.prop</code>文件的读取的值，这里没有root的真机，无法演示真机环境，但原理相同。但是可以测试一下真机环境下，DPI是根据配置读取的，而非真实通过物理分辨率求出来的从而验证上述的结论。这里以三星s8手机为例，主屏分辨率2960*1440，尺寸5.8，求出dpi约为3.5，而依靠上述代码输出的值为4.5。</p>
</blockquote>
<p>所以dp都是使用系统定义的dpi来进行换算的。而非是说单纯的使用物理分辨率和尺寸来计算的。但依然如此，Android的碎片化还是让dp直接适配还是无法让人满意，尽管dp适配可以解决小部分的适配问题。</p>
<h1 id="宽高限定符适配"><a href="#宽高限定符适配" class="headerlink" title="宽高限定符适配"></a>宽高限定符适配</h1><p>为了高效的实现UI开发，出现了新的适配方案，我把它称作宽高限定符适配。简单说，就是穷举市面上所有的Android手机的宽高像素值：</p>
<p><img src="genvalue.png" alt></p>
<p>然后我们根据一个基准，为基准的意思就是,比如设计图的尺寸为<code>480 * 800</code>的分辨率，有个300*300px的ImageView，则</p>
<ul>
<li>宽度为480，将任何分辨率的宽度分为480份，每一份1px，取值为x1-x480。</li>
<li>高度为800，将任何分辨率的高度分为800份，每一份1px，取值为y1-y800。</li>
</ul>
<p>则对于540 * 860的分辨率来说</p>
<p><img src="layxcalc.png" alt></p>
<p>可以看到x1 = 540 / 基准 = 540 / 480 = 1.12 ;而其他分辨率的计算方式相同。</p>
<p>看一下使用该方式适配的对比结果，同样适用dp适配所使用的布局</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@mipmap/img"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"@dimen/x300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/y300"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改了ImageView的宽和高，适配结果为下图</p>
<p><img src="valueshipei.png" alt></p>
<p>再看看不同机型分辨率下的表现</p>
<p><img src="valueshipei2.png" alt></p>
<p>可以看到对比于使用dp方案来适配的结果要完美上许多。通过dimens引用去寻找该分辨率的文件夹下面对应的值。这样基本可以解决我们的适配问题。</p>
<p>那么重点来了，既然可以适配，但为什么很少人使用该方案呢，这就涉及到该方案的一个致命的缺点：那就是需要精准命中才能适配。如果values限定符下的分辨率没有对应上手机，则就只能用默认的values下的dimens文件了。如果使用默认尺寸，而又不同于设计稿的尺寸，就可以会发生UI变形。简单的说容错率太低了。</p>
<blockquote>
<p>生成的values文件夹下以哪个为基准也需要同样的拷贝一份基准值去默认values文件夹下作为默认值。</p>
</blockquote>
<p><strong>那么如何生成上述所说的文件夹呢，这里使用鸿洋大神给出的一份自动生成代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateValueFiles</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> baseW;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> baseH;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dirStr = <span class="string">"./res"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String WTemplate = <span class="string">"&lt;dimen name=\"x&#123;0&#125;\"&gt;&#123;1&#125;px&lt;/dimen&gt;\n"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String HTemplate = <span class="string">"&lt;dimen name=\"y&#123;0&#125;\"&gt;&#123;1&#125;px&lt;/dimen&gt;\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;0&#125;-HEIGHT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String VALUE_TEMPLATE = <span class="string">"values-&#123;0&#125;x&#123;1&#125;"</span>;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">/**</span></span><br><span class="line"><span class="comment">  	 * 需要适配的分辨率,格式为width,height;</span></span><br><span class="line"><span class="comment">  	*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUPPORT_DIMESION = <span class="string">"320,480;480,800;480,854;540,960;600,1024;720,1184;720,1196;720,1280;768,1024;800,1280;1080,1812;1080,1920;1440,2560;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String supportStr = SUPPORT_DIMESION;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenerateValueFiles</span><span class="params">(<span class="keyword">int</span> baseX, <span class="keyword">int</span> baseY, String supportStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baseW = baseX;</span><br><span class="line">        <span class="keyword">this</span>.baseH = baseY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.supportStr.contains(baseX + <span class="string">","</span> + baseY)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.supportStr += baseX + <span class="string">","</span> + baseY + <span class="string">";"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.supportStr += validateInput(supportStr);</span><br><span class="line"></span><br><span class="line">        System.out.println(supportStr);</span><br><span class="line"></span><br><span class="line">        File dir = <span class="keyword">new</span> File(dirStr);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dir.getAbsoluteFile());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> supportStr</span></span><br><span class="line"><span class="comment">     *            w,h_...w,h;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">validateInput</span><span class="params">(String supportStr)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String[] vals = supportStr.split(<span class="string">"_"</span>);</span><br><span class="line">        <span class="keyword">int</span> w = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> h = -<span class="number">1</span>;</span><br><span class="line">        String[] wh;</span><br><span class="line">        <span class="keyword">for</span> (String val : vals) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (val == <span class="keyword">null</span> || val.trim().length() == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                wh = val.split(<span class="string">","</span>);</span><br><span class="line">                w = Integer.parseInt(wh[<span class="number">0</span>]);</span><br><span class="line">                h = Integer.parseInt(wh[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"skip invalidate params : w,h = "</span> + val);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(w + <span class="string">","</span> + h + <span class="string">";"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] vals = supportStr.split(<span class="string">";"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String val : vals) &#123;</span><br><span class="line">            String[] wh = val.split(<span class="string">","</span>);</span><br><span class="line">            generateXmlFile(Integer.parseInt(wh[<span class="number">0</span>]), Integer.parseInt(wh[<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateXmlFile</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuffer sbForWidth = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sbForWidth.append(<span class="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</span>);</span><br><span class="line">        sbForWidth.append(<span class="string">"&lt;resources&gt;"</span>);</span><br><span class="line">        <span class="keyword">float</span> cellw = w * <span class="number">1.0f</span> / baseW;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"width : "</span> + w + <span class="string">","</span> + baseW + <span class="string">","</span> + cellw);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; baseW; i++) &#123;</span><br><span class="line">            sbForWidth.append(WTemplate.replace(<span class="string">"&#123;0&#125;"</span>, i + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>,</span><br><span class="line">                    change(cellw * i) + <span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        sbForWidth.append(WTemplate.replace(<span class="string">"&#123;0&#125;"</span>, baseW + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>,</span><br><span class="line">                w + <span class="string">""</span>));</span><br><span class="line">        sbForWidth.append(<span class="string">"&lt;/resources&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        StringBuffer sbForHeight = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sbForHeight.append(<span class="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</span>);</span><br><span class="line">        sbForHeight.append(<span class="string">"&lt;resources&gt;"</span>);</span><br><span class="line">        <span class="keyword">float</span> cellh = h *<span class="number">1.0f</span>/ baseH;</span><br><span class="line">        System.out.println(<span class="string">"height : "</span>+ h + <span class="string">","</span> + baseH + <span class="string">","</span> + cellh);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; baseH; i++) &#123;</span><br><span class="line">            sbForHeight.append(HTemplate.replace(<span class="string">"&#123;0&#125;"</span>, i + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>,</span><br><span class="line">                    change(cellh * i) + <span class="string">""</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        sbForHeight.append(HTemplate.replace(<span class="string">"&#123;0&#125;"</span>, baseH + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>,</span><br><span class="line">                h + <span class="string">""</span>));</span><br><span class="line">        sbForHeight.append(<span class="string">"&lt;/resources&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        File fileDir = <span class="keyword">new</span> File(dirStr + File.separator</span><br><span class="line">                + VALUE_TEMPLATE.replace(<span class="string">"&#123;0&#125;"</span>, h + <span class="string">""</span>)<span class="comment">//</span></span><br><span class="line">                .replace(<span class="string">"&#123;1&#125;"</span>, w + <span class="string">""</span>));</span><br><span class="line">        fileDir.mkdir();</span><br><span class="line"></span><br><span class="line">        File layxFile = <span class="keyword">new</span> File(fileDir.getAbsolutePath(), <span class="string">"lay_x.xml"</span>);</span><br><span class="line">        File layyFile = <span class="keyword">new</span> File(fileDir.getAbsolutePath(), <span class="string">"lay_y.xml"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(layxFile));</span><br><span class="line">            pw.print(sbForWidth.toString());</span><br><span class="line">            pw.close();</span><br><span class="line">            pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(layyFile));</span><br><span class="line">            pw.print(sbForHeight.toString());</span><br><span class="line">            pw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">change</span><span class="params">(<span class="keyword">float</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = (<span class="keyword">int</span>) (a * <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> temp / <span class="number">100f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">				<span class="comment">//基准分辨率</span></span><br><span class="line">        <span class="keyword">int</span> baseW = <span class="number">480</span>;</span><br><span class="line">        <span class="keyword">int</span> baseH = <span class="number">800</span>;</span><br><span class="line">        String addition = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (args.length &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                baseW = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">                baseH = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">                addition = args[<span class="number">2</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                baseW = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">                baseH = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                addition = args[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line"></span><br><span class="line">            System.err</span><br><span class="line">                    .println(<span class="string">"right input params : java -jar xxx.jar width height w,h_w,h_..._w,h;"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> GenerateValueFiles(baseW, baseH, addition).generate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于主流的分辨率我已经集成到了我们的程序中，当然对于特殊的，你可以通过参数指定。关于屏幕分辨率信息，可以通过该网站查询：<a href="http://screensiz.es/phone" target="_blank" rel="noopener">http://screensiz.es/phone</a></p>
</blockquote>
<h1 id="AndroidAutoLayout库适配"><a href="#AndroidAutoLayout库适配" class="headerlink" title="AndroidAutoLayout库适配"></a>AndroidAutoLayout库适配</h1><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FhongyangAndroid%2FAndroidAutoLayout" target="_blank" rel="noopener">鸿洋大佬的适配方案</a>的项目也来自于宽高限定符方案的启发。虽然该框架已经停止维护，但是许多老项目也在使用该方案。因为集成简单，并且不需要使用dp单位，而是定义好设计稿的尺寸后使用px单位即可完成适配。</p>
<p><strong>使用方法：</strong></p>
<ul>
<li>Android Studio</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.zhy:autolayout:1.4.5'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>AndroidManifest注册<code>设计稿</code>尺寸</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"design_width"</span> <span class="attr">android:value</span>=<span class="string">"768"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meta-data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"design_height"</span> <span class="attr">android:value</span>=<span class="string">"1280"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meta-data</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>集成<code>AutoLayoutActivity</code></li>
</ul>
<p>然后就可以在布局文件按照设计稿的尺寸来使用具体的像素值了。比如，设计稿上是96*96,那么我们可以直接写96px，APP运行时，框架会帮助我们根据不同手机的具体尺寸按比例伸缩。这是比宽高限定符更好的方案，因为解决了宽高限定符的容错率问题。</p>
<p>但是框架要在运行时会在onMeasure里面做变换，自定义的控件可能会被影响或限制，可能有些特定的控件，需要单独适配，这里面可能存在的暗坑是不可预见的。因为这是由框架来完成，并非系统完成。并且该库作者已经放弃维护了。</p>
<h1 id="smallestWidth适配"><a href="#smallestWidth适配" class="headerlink" title="smallestWidth适配"></a>smallestWidth适配</h1><p>smallestWidth适配也叫做sw限定符适配。值得是Android会识别屏幕可用宽度和高度的最小尺寸的dp值，然后再根据识别的结果去资源文件中寻找对应的限定符的文件夹下的资源文件。</p>
<p>这种机制上和上文提到的宽高限定符适配原理上是一样的。都是通过系统特定的规则选择对应的文件。</p>
<p><img src="genswvalue.png" alt></p>
<p>例如，比如一台手机的dpi为480，横向分辨率为1080px，根据公式px = dp(dpi/160)，横向的dp值是360dp。则系统就会自动去寻找<code>value-sw360dp</code>的文件夹以及对应的资源文件。</p>
<blockquote>
<p>理论条件下物理dp等于系统dp</p>
</blockquote>
<p>而该方案对比与宽高限定符适配方案最大的区别也是优点就是，该方案有更好的容错率。比如上述例子中，如果系统找不到<code>value-sw350dp</code>文件夹，则系统会向下寻找，比如找到离一个360最近的<code>value-sw320dp</code>文件夹。那么系统就会选择该文件下的资源文件。</p>
<p>例如设计稿同样为<code>480 * 800</code>,同样有一个<code>300 * 300</code>px的ImageView，例如在values-sw360dp文件夹下的dimen应该如何编写呢？360dp则意味着手机最小宽度为360dp，我们将360dp分成480份，每一个设计稿中的像素大概代表着手机的0.75dp。那么一个<code>300 * 300</code>px对应的dimen引用则为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"base_dpi"</span>&gt;</span>360dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">  //....</span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_0"</span>&gt;</span>0.00dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_1"</span>&gt;</span>0.75dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_300"</span>&gt;</span>225.00dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">  //...</span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>而这种dimens引用，在不同的<code>values-sw&lt;N&gt;</code>dp文件夹下的数值是不同的，比如values-sw400dp和values-sw420dp</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//400dp</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"base_dpi"</span>&gt;</span>400dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_0"</span>&gt;</span>0.00dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_1"</span>&gt;</span>0.83dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_2"</span>&gt;</span>1.67dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_3"</span>&gt;</span>2.50dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_4"</span>&gt;</span>3.33dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">//420dp</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"base_dpi"</span>&gt;</span>420dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_0"</span>&gt;</span>0.00dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_1"</span>&gt;</span>0.88dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_2"</span>&gt;</span>1.75dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_3"</span>&gt;</span>2.63dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"qb_px_4"</span>&gt;</span>3.50dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>计算完后，那么对应的布局文件编写代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_adapterimg"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@mipmap/img"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"@dimen/qb_px_300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/qb_px_300"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行一下来看看适配的效果：</p>
<p><img src="swvalueshipei.png" alt></p>
<p>smallestWidth的适配机制由系统保证，我们只需要针对这套规则生成对应的资源文件即可，不会出现什么难以解决的问题，也根本不会影响我们的业务逻辑代码，而且只要我们生成的资源文件分布合理，，即使对应的smallestWidth值没有找到完全对应的资源文件，它也能向下兼容，寻找最接近的资源文件。</p>
<p>当然该方案也有他的缺点，生成的文件夹越多，也就意味着生成的dimens文件的覆盖范围和尺寸范围越大，apk的安装包也会增加，宽高限定符适配方案也同样有着该缺点。</p>
<blockquote>
<p>smallestWidth适配方案有一个小问题，那就是它是在Android 3.2 以后引入的，Google的本意是用它来适配平板的布局文件（但是实际上显然用于diemns适配的效果更好），不过目前所有的项目应该最低支持版本应该都是4.0了（糗事百科这么老的项目最低都是4.0哦），所以，这问题其实也不重要了。</p>
</blockquote>
<p>当然，计算的方式肯定也不会是自己一点计算再编写， 附上生成的代码文件。<a href="https://github.com/ladingwu/dimens_sw" target="_blank" rel="noopener">代码链接</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateSWValueFiles</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 适配手机dp列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> DimenTypes &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//适配Android 3.2以上   大部分手机的sw值集中在  300-460之间</span></span><br><span class="line">        DP_sw__300(<span class="number">300</span>),  <span class="comment">// values-sw300</span></span><br><span class="line">        DP_sw__310(<span class="number">310</span>),</span><br><span class="line">        DP_sw__320(<span class="number">320</span>),</span><br><span class="line">        DP_sw__330(<span class="number">330</span>),</span><br><span class="line">        DP_sw__340(<span class="number">340</span>),</span><br><span class="line">        DP_sw__350(<span class="number">350</span>),</span><br><span class="line">        DP_sw__360(<span class="number">360</span>),</span><br><span class="line">        DP_sw__370(<span class="number">370</span>),</span><br><span class="line">        DP_sw__380(<span class="number">380</span>),</span><br><span class="line">        DP_sw__390(<span class="number">390</span>),</span><br><span class="line">        DP_sw__410(<span class="number">410</span>),</span><br><span class="line">        DP_sw__420(<span class="number">420</span>),</span><br><span class="line">        DP_sw__430(<span class="number">430</span>),</span><br><span class="line">        DP_sw__440(<span class="number">440</span>),</span><br><span class="line">        DP_sw__450(<span class="number">450</span>),</span><br><span class="line">        DP_sw__460(<span class="number">460</span>),</span><br><span class="line">        DP_sw__470(<span class="number">470</span>),</span><br><span class="line">        DP_sw__480(<span class="number">480</span>),</span><br><span class="line">        DP_sw__490(<span class="number">490</span>),</span><br><span class="line"></span><br><span class="line">        DP_sw__400(<span class="number">400</span>);</span><br><span class="line">        <span class="comment">// 想生成多少自己以此类推</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 屏幕最小宽度</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> swWidthDp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        DimenTypes(<span class="keyword">int</span> swWidthDp) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.swWidthDp = swWidthDp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSwWidthDp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> swWidthDp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSwWidthDp</span><span class="params">(<span class="keyword">int</span> swWidthDp)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.swWidthDp = swWidthDp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成SW工具类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MakeUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_HEADER = <span class="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_RESOURCE_START = <span class="string">"&lt;resources&gt;\r\n"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_RESOURCE_END = <span class="string">"&lt;/resources&gt;\r\n"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_DIMEN_TEMPLETE = <span class="string">"&lt;dimen name=\"qb_%1$spx_%2$d\"&gt;%3$.2fdp&lt;/dimen&gt;\r\n"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_BASE_DPI = <span class="string">"&lt;dimen name=\"base_dpi\"&gt;%ddp&lt;/dimen&gt;\r\n"</span>;</span><br><span class="line">        <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">720</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成的文件名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_NAME = <span class="string">"lay_sw.xml"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">px2dip</span><span class="params">(<span class="keyword">float</span> pxValue, <span class="keyword">int</span> sw,<span class="keyword">int</span> designWidth)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">float</span> dpValue =   (pxValue/(<span class="keyword">float</span>)designWidth) * sw;</span><br><span class="line">            BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(dpValue);</span><br><span class="line">            <span class="keyword">float</span> finDp = bigDecimal.setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).floatValue();</span><br><span class="line">            <span class="keyword">return</span> finDp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成所有的尺寸数据</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">makeAllDimens</span><span class="params">(DimenTypes type, <span class="keyword">int</span> designWidth)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">float</span> dpValue;</span><br><span class="line">            String temp;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sb.append(XML_HEADER);</span><br><span class="line">                sb.append(XML_RESOURCE_START);</span><br><span class="line">                <span class="comment">//备份生成的相关信息</span></span><br><span class="line">                temp = String.format(XML_BASE_DPI, type.getSwWidthDp());</span><br><span class="line">                sb.append(temp);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= MAX_SIZE; i++) &#123;</span><br><span class="line"></span><br><span class="line">                    dpValue = px2dip((<span class="keyword">float</span>) i,type.getSwWidthDp(),designWidth);</span><br><span class="line">                    temp = String.format(XML_DIMEN_TEMPLETE,<span class="string">""</span>, i, dpValue);</span><br><span class="line">                    sb.append(temp);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                sb.append(XML_RESOURCE_END);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成的目标文件夹</span></span><br><span class="line"><span class="comment">         * 只需传宽进来就行</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> type 枚举类型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> buildDir 生成的目标文件夹</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeAll</span><span class="params">(<span class="keyword">int</span> designWidth, DimenTypes type, String buildDir)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//生成规则</span></span><br><span class="line">                <span class="keyword">final</span> String folderName;</span><br><span class="line">                <span class="keyword">if</span> (type.getSwWidthDp() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//适配Android 3.2+</span></span><br><span class="line">                    folderName = <span class="string">"values-sw"</span> + type.getSwWidthDp() + <span class="string">"dp"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//生成目标目录</span></span><br><span class="line">                File file = <span class="keyword">new</span> File(buildDir + File.separator + folderName);</span><br><span class="line">                <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                    file.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//生成values文件</span></span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file.getAbsolutePath() + File.separator + XML_NAME);</span><br><span class="line">                fos.write(makeAllDimens(type,designWidth).getBytes());</span><br><span class="line">                fos.flush();</span><br><span class="line">                fos.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设计稿尺寸(将自己设计师的设计稿的宽度填入)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DESIGN_WIDTH = <span class="number">480</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设计稿的高度  （将自己设计师的设计稿的高度填入）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DESIGN_HEIGHT = <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//generater</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> smallest = DESIGN_WIDTH &gt; DESIGN_HEIGHT ? DESIGN_HEIGHT : DESIGN_WIDTH;  <span class="comment">//     求得最小宽度</span></span><br><span class="line">        DimenTypes[] values = DimenTypes.values();</span><br><span class="line">        <span class="keyword">for</span> (DimenTypes value : values) &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"dimens"</span>); <span class="comment">//当前项目路径</span></span><br><span class="line">            MakeUtils.makeAll(smallest, value, file.getAbsolutePath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主流dp也可以查询相关网站</p>
</blockquote>
<h1 id="今日头条适配方案"><a href="#今日头条适配方案" class="headerlink" title="今日头条适配方案"></a>今日头条适配方案</h1><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fd9QCoBP6kV9VSWvVldVVwA" target="_blank" rel="noopener">文章链接</a></p>
<p>该方案的思想来源就是修改density的值，强行把所有不同分辨率的手机的宽度改成一个统一的值。</p>
<p>上文提到dp适配的<code>DisplayMetrics</code>中的相关变量：</p>
<ul>
<li>DisplayMetrics#density 就是上述的density</li>
<li>DisplayMetrics#densityDpi 就是上述的dpi</li>
<li>DisplayMetrics#scaledDensity 字体的缩放因子，正常情况下和density相等，但是调节系统字体大小后会改变这个值</li>
</ul>
<p><strong>那么是不是所有的dp和px的转换都是通过 DisplayMetrics 中相关的值来计算的呢？</strong></p>
<p>首先来看看布局文件中dp的转换，最终都是调用 <code>TypedValue#applyDimension(int unit, float value, DisplayMetrics metrics)</code>来进行转换:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">applyDimension</span><span class="params">(<span class="keyword">int</span> unit, <span class="keyword">float</span> value,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       DisplayMetrics metrics)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (unit) &#123;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_PX:</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_DIP:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.density;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_SP:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.scaledDensity;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_PT:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi * (<span class="number">1.0f</span>/<span class="number">72</span>);</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_IN:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi;</span><br><span class="line">        <span class="keyword">case</span> COMPLEX_UNIT_MM:</span><br><span class="line">            <span class="keyword">return</span> value * metrics.xdpi * (<span class="number">1.0f</span>/<span class="number">25.4f</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里用到的DisplayMetrics正是从Resources中获得的。</p>
<p>再看看图片的decode，<code>BitmapFactory#decodeResourceStream</code>方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeResourceStream</span><span class="params">(@Nullable Resources res, @Nullable TypedValue value,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable InputStream is, @Nullable Rect pad, @Nullable Options opts)</span> </span>&#123;</span><br><span class="line">        validate(opts);</span><br><span class="line">        <span class="keyword">if</span> (opts == <span class="keyword">null</span>) &#123;</span><br><span class="line">            opts = <span class="keyword">new</span> Options();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (opts.inDensity == <span class="number">0</span> &amp;&amp; value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> density = value.density;</span><br><span class="line">            <span class="keyword">if</span> (density == TypedValue.DENSITY_DEFAULT) &#123;</span><br><span class="line">                opts.inDensity = DisplayMetrics.DENSITY_DEFAULT;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (density != TypedValue.DENSITY_NONE) &#123;</span><br><span class="line">                opts.inDensity = density;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (opts.inTargetDensity == <span class="number">0</span> &amp;&amp; res != <span class="keyword">null</span>) &#123;</span><br><span class="line">            opts.inTargetDensity = res.getDisplayMetrics().densityDpi;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> decodeStream(is, pad, opts);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>当然还有些其他dp转换的场景，基本都是通过 DisplayMetrics 来计算的，这里不再详述。因此，想要满足上述需求，我们只需要修改 DisplayMetrics 中和 dp 转换相关的变量即可。</p>
<p>通过该原理得到的适配方案：</p>
<p>比如，设计稿的宽度是480px，那么开发代码时会把目标dp值设置为480dp，在不同设备中，动态修改density的值，从而保证手机像素宽度/density这个值始终是360dp。这样来保证UI在不同设备上表现一致。</p>
<p>今日头条屏幕适配方案的核心原理在于，根据以下公式算出 <strong>density</strong></p>
<p><strong>当前设备屏幕总宽度（单位为像素）/ 设计图总宽度（单位为 dp) = density</strong></p>
<p>今日头条方案代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.content.ComponentCallbacks;</span><br><span class="line"><span class="keyword">import</span> android.content.res.Configuration;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.util.DisplayMetrics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> sNoncompatDensity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> sNoncompatScaledDensity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCustomDensity</span><span class="params">(@NonNull Activity activity, @NonNull <span class="keyword">final</span> Application application)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> DisplayMetrics appDisplayMetrics = application.getResources().getDisplayMetrics();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( sNoncompatDensity == <span class="number">0</span>) &#123;</span><br><span class="line">            sNoncompatDensity = appDisplayMetrics.density;</span><br><span class="line">            sNoncompatScaledDensity = appDisplayMetrics.scaledDensity;</span><br><span class="line">            application.registerComponentCallbacks(<span class="keyword">new</span> ComponentCallbacks() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(newConfig != <span class="keyword">null</span> &amp;&amp; newConfig.fontScale &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        sNoncompatScaledDensity = application.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> targetDensity = (<span class="keyword">float</span>) (appDisplayMetrics.widthPixels / <span class="number">480.0</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> targetDensityDPI = (<span class="keyword">int</span>) (targetDensity * <span class="number">160</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> targetScaledDensity = targetDensity * (sNoncompatScaledDensity / sNoncompatDensity);</span><br><span class="line"></span><br><span class="line">        appDisplayMetrics.density  = targetDensity;</span><br><span class="line">        appDisplayMetrics.densityDpi = targetDensityDPI;</span><br><span class="line">        appDisplayMetrics.scaledDensity = targetScaledDensity;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DisplayMetrics activityDisplayMetrics = activity.getResources().getDisplayMetrics();</span><br><span class="line">        activityDisplayMetrics.density  = targetDensity;</span><br><span class="line">        activityDisplayMetrics.densityDpi = targetDensityDPI;</span><br><span class="line">        activityDisplayMetrics.scaledDensity = targetScaledDensity;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在activity#onCreate方法中调用即可，在setContentView之前。运行看看适配的效果：</p>
<p><img src="toutiaoshipei.png" alt></p>
<blockquote>
<p>以设计图宽480dp去适配的，如果要以高维度适配，可以再扩展下代码即可</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>使用成本非常低，操作非常简单，使用该方案后在页面布局时不需要额外的代码和操作，这点可以说完虐其他屏幕适配方案</li>
<li>侵入性非常低，该方案和项目完全解耦，在项目布局时不会依赖哪怕一行该方案的代码，而且使用的还是 <strong>Android</strong> 官方的 <strong>API</strong>，意味着当你遇到什么问题无法解决，想切换为其他屏幕适配方案时，基本不需要更改之前的代码，整个切换过程几乎在瞬间完成，会少很多麻烦，节约很多时间，试错成本接近于 0</li>
<li>可适配三方库的控件和系统的控件(不止是是 <strong>Activity</strong> 和 <strong>Fragment</strong>，<strong>Dialog</strong>、<strong>Toast</strong> 等所有系统控件都可以适配)，由于修改的 <strong>density</strong> 在整个项目中是全局的，所以只要一次修改，项目中的所有地方都会受益</li>
<li>不会有任何性能的损耗</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>暂时没发现其他什么很明显的缺点，已知的缺点有一个，那就是第三个优点，它既是这个方案的优点也同样是缺点，但是就这一个缺点也是非常致命的</p>
<p>只需要修改一次 <strong>density</strong>，项目中的所有地方都会自动适配，这个看似解放了双手，减少了很多操作，但是实际上反应了一个缺点，那就是只能一刀切的将整个项目进行适配，但适配范围是不可控的</p>
<p>这样不是很好吗？这样本来是很好的，但是应用到这个方案是就不好了，因为我上面的原理也分析了，这个方案依赖于设计图尺寸，但是项目中的系统控件、三方库控件、等非我们项目自身设计的控件，它们的设计图尺寸并不会和我们项目自身的设计图尺寸一样</p>
<p>当这个适配方案不分类型，将所有控件都强行使用我们项目自身的设计图尺寸进行适配时，这时就会出现问题，<strong>当某个系统控件或三方库控件的设计图尺寸和和我们项目自身的设计图尺寸差距非常大时，这个问题就越严重</strong></p>
<blockquote>
<p>这里是JessYan总结的优缺点，个人很赞同。</p>
</blockquote>
<h1 id="AndroidAutoSIze"><a href="#AndroidAutoSIze" class="headerlink" title="AndroidAutoSIze"></a>AndroidAutoSIze</h1><p>一个基于今日头条方案的开源库，一个极低成本的 Android 屏幕适配方案.</p>
<p>如果项目没有什么特殊要求，两个步骤即可完成适配：</p>
<p><strong>添加依赖</strong></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">'me.jessyan:autosize:1.1.2'</span></span><br></pre></td></tr></table></figure>
<p><strong>请在 AndroidManifest 中填写全局设计图尺寸 (单位 dp)</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"design_width_in_dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"360"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"design_height_in_dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"640"</span>/&gt;</span>           </span><br><span class="line">     <span class="tag">&lt;/<span class="name">application</span>&gt;</span>           </span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/JessYanCoding/AndroidAutoSize/blob/master/README-zh.md" target="_blank" rel="noopener">Github</a>，更多详细集成文档建议查看github链接。github中有很详细的用法以及使用的问题。</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>适配就是根据设计图来达到某一个维度上显示一致，不能够说使用适配就可以不使用wrap_content等，比如一个页面时上下滑动的，我们只需要保持设备在宽的维度上保持显示一致即可。而如果一个不支持上下滑动的页面，只需要保持设备在高的维度上保持显示一致。</p>
<p>如何适配，如何选择适配的方案还是要结合自己业务的需求。因为开发就是要追求高效和稳定。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/ghost_Programmer/article/details/50042805" target="_blank" rel="noopener">https://blog.csdn.net/ghost_Programmer/article/details/50042805</a></p>
<p><a href="https://juejin.im/post/5ae9cc3a5188253dc612842b" target="_blank" rel="noopener">https://juejin.im/post/5ae9cc3a5188253dc612842b</a></p>
<p><a href="https://blog.csdn.net/lmj623565791/article/details/45460089" target="_blank" rel="noopener">https://blog.csdn.net/lmj623565791/article/details/45460089</a></p>
<p><a href="https://juejin.im/post/5b7a29736fb9a019d53e7ee2" target="_blank" rel="noopener">https://juejin.im/post/5b7a29736fb9a019d53e7ee2</a></p>
<p><a href="https://mp.weixin.qq.com/s/SDHL26XgIjjlK-RLd_SSCw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/SDHL26XgIjjlK-RLd_SSCw</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android屏幕适配</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB安装和使用</title>
    <url>/2019/05/11/MongoDB%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h1><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p>
<p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p>
<p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p>
<p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>
<a id="more"></a>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li>MongoDB的提供了一个面向文档存储，操作起来比较简单和容易。</li>
<li>你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=”Sameer”,Address=”8 Gandhi Road”)来实现更快的排序。</li>
<li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li>
<li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li>
<li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li>
<li>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li>
<li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li>
<li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li>
<li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li>
<li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li>
<li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li>
<li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li>
<li>MongoDB安装简单。</li>
</ul>
<h1 id="安装MongoDB-Community-Edition"><a href="#安装MongoDB-Community-Edition" class="headerlink" title="安装MongoDB Community Edition"></a>安装MongoDB Community Edition</h1><p>本文只介绍Mac安装，其余安装方法请查阅：<a href="https://docs.mongodb.com/manual/administration/install-community/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/administration/install-community/</a></p>
<p>使用Homebrew安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew tap mongodb/brew</span><br><span class="line">$ brew install mongodb-community@4.0</span><br><span class="line">==&gt; Caveats</span><br><span class="line">To have launchd start mongodb/brew/mongodb-community now and restart at login:</span><br><span class="line">  brew services start mongodb/brew/mongodb-community</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string">  mongod --config /usr/local/etc/mongod.conf</span></span><br><span class="line"><span class="string">==&gt; Summary</span></span><br><span class="line"><span class="string">🍺  /usr/local/Cellar/mongodb-community/4.0.9: 20 files, 221.0MB, built in 23 seconds</span></span><br></pre></td></tr></table></figure>
<p>安装后可查看到后面这段文字，为MongoDB的一些配置文件路径</p>
<ul>
<li>the <a href="https://docs.mongodb.com/manual/reference/configuration-options/" target="_blank" rel="noopener">configuration file</a> (<code>/usr/local/etc/mongod.conf</code>)</li>
<li>the <a href="https://docs.mongodb.com/manual/reference/configuration-options/#systemLog.path" target="_blank" rel="noopener"><code>log directory path</code></a> (<code>/usr/local/var/log/mongodb</code>)</li>
<li>the <a href="https://docs.mongodb.com/manual/reference/configuration-options/#storage.dbPath" target="_blank" rel="noopener"><code>data directory path</code></a> (<code>/usr/local/var/mongodb</code>)</li>
</ul>
<h1 id="MongoDB-数据类型"><a href="#MongoDB-数据类型" class="headerlink" title="MongoDB 数据类型"></a>MongoDB 数据类型</h1><table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">String</td>
<td style="text-align:left">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>
</tr>
<tr>
<td style="text-align:left">Integer</td>
<td style="text-align:left">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>
</tr>
<tr>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">布尔值。用于存储布尔值（真/假）。</td>
</tr>
<tr>
<td style="text-align:left">Double</td>
<td style="text-align:left">双精度浮点值。用于存储浮点值。</td>
</tr>
<tr>
<td style="text-align:left">Min/Max keys</td>
<td style="text-align:left">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td>
</tr>
<tr>
<td style="text-align:left">Arrays</td>
<td style="text-align:left">用于将数组或列表或多个值存储为一个键。</td>
</tr>
<tr>
<td style="text-align:left">Timestamp</td>
<td style="text-align:left">时间戳。记录文档修改或添加的具体时间。</td>
</tr>
<tr>
<td style="text-align:left">Object</td>
<td style="text-align:left">用于内嵌文档。</td>
</tr>
<tr>
<td style="text-align:left">Null</td>
<td style="text-align:left">用于创建空值。</td>
</tr>
<tr>
<td style="text-align:left">Symbol</td>
<td style="text-align:left">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>
</tr>
<tr>
<td style="text-align:left">Date</td>
<td style="text-align:left">日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>
</tr>
<tr>
<td style="text-align:left">Object ID</td>
<td style="text-align:left">对象 ID。用于创建文档的 ID。</td>
</tr>
<tr>
<td style="text-align:left">Binary Data</td>
<td style="text-align:left">二进制数据。用于存储二进制数据。</td>
</tr>
<tr>
<td style="text-align:left">Code</td>
<td style="text-align:left">代码类型。用于在文档中存储 JavaScript 代码。</td>
</tr>
<tr>
<td style="text-align:left">Regular expression</td>
<td style="text-align:left">正则表达式类型。用于存储正则表达式。</td>
</tr>
</tbody>
</table>
<h1 id="MongoDB概念"><a href="#MongoDB概念" class="headerlink" title="MongoDB概念"></a>MongoDB概念</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>一个mongodb中可以建立多个数据库。</p>
<p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。</p>
<p>MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p>
<p><strong>“show dbs”</strong> 命令可以显示所有数据的列表。</p>
<p>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</p>
<ul>
<li>不能是空字符串（””)。</li>
<li>不得含有’ ‘（空格)、.、$、/、\和\0 (空宇符)。</li>
<li>应全部小写。</li>
<li>最多64字节。</li>
</ul>
<p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p>
<ul>
<li><strong>admin</strong>： 从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li>
<li><strong>local:</strong> 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li>
<li><strong>config</strong>: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li>
</ul>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>文档是一个键值(key-value)对(即BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>
<p>一个简单的文档例子如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"site"</span>:<span class="string">"hackycy.github.io"</span>, <span class="attr">"name"</span>:<span class="string">"博客"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>关系型数据库和MongoDB的一些区别</p>
<table>
<thead>
<tr>
<th style="text-align:left">RDBMS</th>
<th style="text-align:left">MongoDB</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">数据库</td>
<td style="text-align:left">数据库</td>
</tr>
<tr>
<td style="text-align:left">表格</td>
<td style="text-align:left">集合</td>
</tr>
<tr>
<td style="text-align:left">行</td>
<td style="text-align:left">文档</td>
</tr>
<tr>
<td style="text-align:left">列</td>
<td style="text-align:left">字段</td>
</tr>
<tr>
<td style="text-align:left">表联合</td>
<td style="text-align:left">嵌入文档</td>
</tr>
<tr>
<td style="text-align:left">主键</td>
<td style="text-align:left">主键 (MongoDB 提供了 key 为 _id )</td>
</tr>
</tbody>
</table>
<p>需要注意的是：</p>
<ol>
<li>文档中的键/值对是有序的。</li>
<li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li>
<li>MongoDB区分类型和大小写。</li>
<li>MongoDB的文档不能有重复的键。</li>
<li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li>
</ol>
<p>文档键命名规范：</p>
<ul>
<li>键不能含有\0 (空字符)。这个字符用来表示键的结尾。</li>
<li>.和$有特别的意义，只有在特定环境下才能使用。</li>
<li>以下划线”_”开头的键是保留的(不是严格要求的)。</li>
</ul>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。</p>
<p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p>
<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><p><a href="https://docs.mongodb.com/manual/crud/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/crud/</a></p>
<p><a href="http://www.runoob.com/mongodb/mongodb-operators.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-operators.html</a></p>
<h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongod --dbpath <span class="string">"/usr/local/var/mongodb"</span></span><br></pre></td></tr></table></figure>
<p>mongodb常用启动参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">–bind_ip</td>
<td style="text-align:left">绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</td>
</tr>
<tr>
<td style="text-align:left">–logpath</td>
<td style="text-align:left">定义MongoDB日志文件，注意是指定文件不是目录</td>
</tr>
<tr>
<td style="text-align:left">–logappend</td>
<td style="text-align:left">使用追加的方式写日志</td>
</tr>
<tr>
<td style="text-align:left">–dbpath</td>
<td style="text-align:left">指定数据库路径</td>
</tr>
<tr>
<td style="text-align:left">–port</td>
<td style="text-align:left">指定服务端口号，默认端口27017</td>
</tr>
<tr>
<td style="text-align:left">–serviceName</td>
<td style="text-align:left">指定服务名称</td>
</tr>
<tr>
<td style="text-align:left">–serviceDisplayName</td>
<td style="text-align:left">指定服务名称，有多个mongodb服务时执行。</td>
</tr>
<tr>
<td style="text-align:left">–install</td>
<td style="text-align:left">指定作为一个Windows服务安装。</td>
</tr>
</tbody>
</table>
<h2 id="命令行连接服务器"><a href="#命令行连接服务器" class="headerlink" title="命令行连接服务器"></a>命令行连接服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mongo</span><br></pre></td></tr></table></figure>
<p>默认连接的是test数据库</p>
<h2 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; show dbs;</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br></pre></td></tr></table></figure>
<h2 id="切换-创建数据库"><a href="#切换-创建数据库" class="headerlink" title="切换/创建数据库"></a>切换/创建数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; use shop;</span><br><span class="line">switched to db shop</span><br><span class="line">&gt; db</span><br><span class="line">shop</span><br></pre></td></tr></table></figure>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.dropDatabase()</span><br></pre></td></tr></table></figure>
<p>删除当前数据库，默认为 test，你可以使用 db 命令查看当前数据库名。</p>
<h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><p>语法：<code>db.createCollection(name, options)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.createCollection(<span class="string">"users"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="查询集合"><a href="#查询集合" class="headerlink" title="查询集合"></a>查询集合</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; show collections;</span><br></pre></td></tr></table></figure>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>语法：<code>db.集合名.find(条件);</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.users.find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br><span class="line">&gt; db.users.find(&#123;age:&#123;<span class="variable">$gt</span>:21&#125;&#125;);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>(&gt;) 大于 - $gt</li>
<li>(&lt;) 小于 - $lt</li>
<li>(&gt;=) 大于等于 - $gte</li>
<li>(&lt;= ) 小于等于 - $lte</li>
</ul>
<h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>语法：<code>db.集合名.save(对象)</code>或者<code>db.集合名.insert(对象)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.users.save(&#123;name:<span class="string">"jack"</span>, age:20&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : 1 &#125;)</span><br><span class="line">&gt; show collections;</span><br><span class="line">users</span><br><span class="line">&gt; db.users.find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f5e919ee5a000f483e6e"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 20 &#125;</span><br></pre></td></tr></table></figure>
<p>mongo默认会给我们加入<code>_id</code>作为该文档对象的唯一标识</p>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>语法：<code>db.集合名.remove(条件对象);</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; &gt; db.users.remove(&#123;name:<span class="string">"jack"</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nRemoved"</span> : 1 &#125;)</span><br><span class="line">&gt; db.users.find();</span><br></pre></td></tr></table></figure>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>语法：<code>db.集合名.update({匹配条件对象},{$set:{修改后的对象}});</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.users.save(&#123;name:<span class="string">"jack"</span>, age:20&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : 1 &#125;)</span><br><span class="line">&gt; db.users.update(&#123;name:<span class="string">'jack'</span>&#125;,&#123;<span class="variable">$set</span>:&#123;name:<span class="string">'tom'</span>&#125;&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nMatched"</span> : 1, <span class="string">"nUpserted"</span> : 0, <span class="string">"nModified"</span> : 1 &#125;)</span><br><span class="line">&gt; db.users.find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br></pre></td></tr></table></figure>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p><strong>skip()</strong></p>
<p>skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。</p>
<p>语法：<code>db.集合名.find().skip(Number)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.users.find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br><span class="line">&gt; db.users.find().skip(1);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br></pre></td></tr></table></figure>
<p><strong>limit()</strong></p>
<p>该方法可以读取指定数量的数据记录。</p>
<p>语法：<code>db.集合名.find().limit(Number)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.users.find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br><span class="line">&gt; db.users.find().<span class="built_in">limit</span>(1);</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这两个方法可以连用。</p>
</blockquote>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>使用 sort() 方法对数据进行排序</p>
<p>语法：<code>db.集合名.find().sort({key:排序方式});</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.users.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br><span class="line">&gt; db.users.find().sort(&#123;age:-1&#125;)</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6fe7419ee5a000f483e70"</span>), <span class="string">"name"</span> : <span class="string">"jack"</span>, <span class="string">"age"</span> : 25 &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5cd6f9a519ee5a000f483e6f"</span>), <span class="string">"name"</span> : <span class="string">"tom"</span>, <span class="string">"age"</span> : 20 &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>正数代表升序，负数代表降序</p>
</blockquote>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。</p>
<table>
<thead>
<tr>
<th style="text-align:left">表达式</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$sum</td>
<td style="text-align:left">计算总和。</td>
<td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])</td>
</tr>
<tr>
<td style="text-align:left">$avg</td>
<td style="text-align:left">计算平均值</td>
<td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])</td>
</tr>
<tr>
<td style="text-align:left">$min</td>
<td style="text-align:left">获取集合中所有文档对应值得最小值。</td>
<td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])</td>
</tr>
<tr>
<td style="text-align:left">$max</td>
<td style="text-align:left">获取集合中所有文档对应值得最大值。</td>
<td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])</td>
</tr>
<tr>
<td style="text-align:left">$push</td>
<td style="text-align:left">在结果文档中插入值到一个数组中。</td>
<td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])</td>
</tr>
<tr>
<td style="text-align:left">$addToSet</td>
<td style="text-align:left">在结果文档中插入值到一个数组中，但不创建副本。</td>
<td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])</td>
</tr>
<tr>
<td style="text-align:left">$first</td>
<td style="text-align:left">根据资源文档的排序获取第一个文档数据。</td>
<td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])</td>
</tr>
<tr>
<td style="text-align:left">$last</td>
<td style="text-align:left">根据资源文档的排序获取最后一个文档数据</td>
<td style="text-align:left">db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])</td>
</tr>
</tbody>
</table>
<h2 id="管道的概念"><a href="#管道的概念" class="headerlink" title="管道的概念"></a>管道的概念</h2><p>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。</p>
<p>MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。</p>
<p>表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。</p>
<p>这里我们介绍一下聚合框架中常用的几个操作：</p>
<ul>
<li><code>$project</code>：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li>
<li><code>$match</code>：用于过滤数据，只输出符合条件的文档。<code>$match</code>使用MongoDB的标准查询操作。</li>
<li><code>$limit</code>：用来限制MongoDB聚合管道返回的文档数。</li>
<li><code>$skip</code>：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li>
<li><code>$unwind</code>：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li>
<li><code>$group</code>：将集合中的文档分组，可用于统计结果。</li>
<li><code>$sort</code>：将输入文档排序后输出。</li>
<li><code>$geoNear</code>：输出接近某一地理位置的有序文档。</li>
</ul>
<p>求当前集合的记录数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; db.users.find().count();</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<p>类似于sql语句</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&gt; select name, count(*) from users group by name;</span><br></pre></td></tr></table></figure>
<h1 id="方便练习的基础数据"><a href="#方便练习的基础数据" class="headerlink" title="方便练习的基础数据"></a>方便练习的基础数据</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.users.save(&#123;contry:&apos;中国&apos;,name:&apos;小明&apos;,score:77&#125;);</span><br><span class="line">db.users.save(&#123;contry:&apos;中国&apos;,name:&apos;小红&apos;,score:88&#125;);</span><br><span class="line">db.users.save(&#123;contry:&apos;中国&apos;,name:&apos;小张&apos;,score:99&#125;);</span><br><span class="line">db.users.save(&#123;contry:&apos;美国&apos;,name:&apos;jack&apos;,score:45&#125;);</span><br><span class="line">db.users.save(&#123;contry:&apos;美国&apos;,name:&apos;rose&apos;,score:67&#125;);</span><br><span class="line">db.users.save(&#123;contry:&apos;美国&apos;,name:&apos;mick&apos;,score:89&#125;);</span><br><span class="line"></span><br><span class="line">db.orders.insert([</span><br><span class="line">   &#123; &quot;_id&quot; : 1, &quot;item&quot; : &quot;almonds&quot;, &quot;price&quot; : 12, &quot;quantity&quot; : 2 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 2, &quot;item&quot; : &quot;pecans&quot;, &quot;price&quot; : 20, &quot;quantity&quot; : 1 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 3  &#125;</span><br><span class="line">]);</span><br><span class="line">db.inventory.insert([</span><br><span class="line">   &#123; &quot;_id&quot; : 1, &quot;sku&quot; : &quot;almonds&quot;, description: &quot;product 1&quot;, &quot;instock&quot; : 120 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 2, &quot;sku&quot; : &quot;bread&quot;, description: &quot;product 2&quot;, &quot;instock&quot; : 80 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 3, &quot;sku&quot; : &quot;cashews&quot;, description: &quot;product 3&quot;, &quot;instock&quot; : 60 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 4, &quot;sku&quot; : &quot;pecans&quot;, description: &quot;product 4&quot;, &quot;instock&quot; : 70 &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 5, &quot;sku&quot;: null, description: &quot;Incomplete&quot; &#125;,</span><br><span class="line">   &#123; &quot;_id&quot; : 6 &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用命令还是很不方便，开发中尽量使用一些界面式的工具，例如Navicat</p>
</blockquote>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Manifest权限描述表</title>
    <url>/2019/05/11/Android-Manifest%E6%9D%83%E9%99%90%E6%8F%8F%E8%BF%B0%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Android权限描述，方便自己查找。</p>
<a id="more"></a>
<p>1.android.permission.WRITE_USER_DICTIONARY允许应用程序向用户词典中写入新词</p>
<p>2.android.permission.WRITE_SYNC_SETTINGS写入Google在线同步设置</p>
<p>3.android.permission.WRITE_SOCIAL_STREAM读取用户的社交信息流</p>
<p>4.android.permission.WRITE_SMS允许程序写短信</p>
<p>5.android.permission.WRITE_SETTINGS允许程序读取或写入系统设置</p>
<p>6.android.permission.WRITE_SECURE_SETTINGS允许应用程序读取或写入安全系统设置</p>
<p>7.android.permission.WRITE_PROFILE允许程序写入个人资料数据</p>
<p>8.com.android.browser.permission.WRITE_HISTORY_BOOKMARKS允许一个应用程序写(但不可读)用户的浏览历史和书签</p>
<p>9.android.permission.WRITE_GSERVICES允许程序修改Google服务地图</p>
<p>10.android.permission.WRITE_EXTERNAL_STORAGE允许程序写入外部存储,如SD卡上写文件</p>
<p>11.android.permission.WRITE_CONTACTS写入联系人,但不可读取</p>
<p>12.android.permission.WRITE_CALL_LOG允许程序写入（但是不能读）用户的联系人数据</p>
<p>13.android.permission.WRITE_CALENDAR允许程序写入日程，但不可读取</p>
<p>14.android.permission.WRITE_APN_SETTINGS允许程序写入网络GPRS接入点设置</p>
<p>15.android.permission.WAKE_LOCK允许程序在手机屏幕关闭后后台进程仍然运行</p>
<p>16.android.permission.VIBRATE允许程序振动</p>
<p>17.android.permission.USE_SIP允许程序使用SIP视频服务</p>
<p>18.android.permission.USE_CREDENTIALS允许程序请求验证从AccountManager</p>
<p>19.android.permission.UPDATE_DEVICE_STATS允许程序更新设备状态</p>
<p>20.com.android.launcher.permission.UNINSTALL_SHORTCUT删除快捷方式</p>
<p>21.android.permission.TRANSMIT_IR允许使用设备的红外发射器，如果可用</p>
<p>22.android.permission.SYSTEM_ALERT_WINDOW允许程序显示系统窗口</p>
<p>23.android.permission.SUBSCRIBED_FEEDS_WRITE允许程序写入或修改订阅内容的数据库</p>
<p>24.android.permission.SUBSCRIBED_FEEDS_READ允许程序访问订阅信息的数据库</p>
<p>22.android.permission.STATUS_BAR允许程序打开、关闭、禁用状态栏</p>
<p>23.android.permission.SIGNAL_PERSISTENT_PROCESSES允许程序发送一个永久的进程信号</p>
<p>24.android.permission.SET_WALLPAPER_HINTS允许程序设置壁纸建议</p>
<p>25.android.permission.SET_WALLPAPER允许程序设置桌面壁纸</p>
<p>26.android.permission.SET_TIME_ZONE允许程序设置系统时区</p>
<p>27.android.permission.SET_TIME允许程序设置系统时间</p>
<p>28.android.permission.SET_PROCESS_LIMIT允许程序设置最大的进程数量的限制</p>
<p>29.android.permission.SET_PREFERRED_APPLICATIONS允许程序设置应用的参数，已不再工作具体查看addPackageToPreferred(String) 介绍</p>
<p>30.android.permission.SET_POINTER_SPEED无法被第三方应用获得，系统权限</p>
<p>31.android.permission.SET_ORIENTATION允许程序设置屏幕方向为横屏或标准方式显示，不用于普通应用</p>
<p>32.android.permission.SET_DEBUG_APP允许程序设置调试程序，一般用于开发</p>
<p>33.android.permission.SET_ANIMATION_SCALE允许程序设置全局动画缩放</p>
<p>34.android.permission.SET_ALWAYS_FINISH允许程序设置程序在后台是否总是退出</p>
<p>36.com.android.alarm.permission.SET_ALARM允许程序设置闹铃提醒</p>
<p>37.android.permission.SET_ACTIVITY_WATCHER允许程序设置Activity观察器一般用于monkey测试</p>
<p>38.android.permission.SEND_SMS允许程序发送短信</p>
<p>39.android.permission.SEND_RESPOND_VIA_MESSAGE允许用户在来电的时候用你的应用进行即时的短信息回复。</p>
<p>40.android.permission.RESTART_PACKAGES允许程序结束任务通过restartPackage(String)方法，该方式将在外来放弃</p>
<p>41.android.permission.REORDER_TASKS允许程序重新排序系统Z轴运行中的任务</p>
<p>42.android.permission.RECORD_AUDIO允许程序录制声音通过手机或耳机的麦克</p>
<p>43.android.permission.RECEIVE_WAP_PUSH允许程序接收WAP PUSH信息</p>
<p>44.android.permission.RECEIVE_SMS允许程序接收短信</p>
<p>45.android.permission.RECEIVE_MMS允许程序接收彩信</p>
<p>46.android.permission.RECEIVE_BOOT_COMPLETED允许程序开机自动运行</p>
<p>47.android.permission.REBOOT允许程序重新启动设备</p>
<p>48.android.permission.READ_USER_DICTIONARY从一个提供器中获取数据，针对对应的提供器，应用程序需要“读访问权限”</p>
<p>49.android.permission.READ_SYNC_STATS允许程序读取同步状态，获得Google在线同步状态</p>
<p>50.android.permission.READ_SYNC_SETTINGS允许程序读取同步设置，读取Google在线同步设置</p>
<p>51.android.permission.READ_SOCIAL_STREAM读取用户的社交信息流</p>
<p>52.android.permission.READ_SMS允许程序读取短信内容</p>
<p>53.android.permission.READ_PROFILE访问用户个人资料</p>
<p>54.android.permission.READ_PHONE_STATE允许程序访问电话状态</p>
<p>55.android.permission.READ_LOGS允许程序读取系统底层日志</p>
<p>56.android.permission.READ_INPUT_STATE允许程序读取当前键的输入状态，仅用于系统</p>
<p>57.com.android.browser.permission.READ_HISTORY_BOOKMARKS允许程序读取浏览器收藏夹和历史记录</p>
<p>58.android.permission.READ_FRAME_BUFFER允许程序读取帧缓存用于屏幕截图</p>
<p>59.android.permission.READ_EXTERNAL_STORAGE程序可以读取设备外部存储空间（内置SDcard和外置SDCard）的文件，如果您的App已经添加了“WRITE_EXTERNAL_STORAGE ”权限 ，则就没必要添加读的权限了，写权限已经包含了读权限了。</p>
<p>60.android.permission.READ_CONTACTS允许程序访问联系人通讯录信息</p>
<p>61.android.permission.READ_CALL_LOG读取通话记录</p>
<p>62.android.permission.READ_CALENDAR允许程序读取用户的日程信息</p>
<p>63.android.permission.PROCESS_OUTGOING_CALLS允许程序监视，修改或放弃播出电话</p>
<p>64.android.permission.PERSISTENT_ACTIVITY允许程序创建一个永久的Activity，该功能标记为将来将被移除</p>
<p>65.android.permission.NFC允许程序执行NFC近距离通讯操作，用于移动支持</p>
<p>66.android.permission.MOUNT_UNMOUNT_FILESYSTEMS允许程序挂载、反挂载外部文件系统</p>
<p>67.android.permission.MOUNT_FORMAT_FILESYSTEMS允许程序格式化可移动文件系统，比如格式化清空SD卡</p>
<p>68.android.permission.MODIFY_PHONE_STATE允许程序修改电话状态，如飞行模式，但不包含替换系统拨号器界面</p>
<p>69.android.permission.MODIFY_AUDIO_SETTINGS允许程序修改声音设置信息</p>
<p>70.android.permission.MEDIA_CONTENT_CONTROL允许一个应用程序知道什么是播放和控制其内容。不被第三方应用使用。</p>
<p>71.android.permission.MASTER_CLEAR允许程序执行软格式化，删除系统配置信息</p>
<p>72.android.permission.MANAGE_DOCUMENTS允许一个应用程序来管理文档的访问，通常是一个文档选择器部分</p>
<p>73.android.permission.MANAGE_APP_TOKENS管理创建、摧毁、Z轴顺序，仅用于系统</p>
<p>74.android.permission.MANAGE_ACCOUNTS允许程序管理AccountManager中的账户列表</p>
<p>75.android.permission.LOCATION_HARDWARE允许一个应用程序中使用定位功能的硬件，不使用第三方应用</p>
<p>76.android.permission.KILL_BACKGROUND_PROCESSES允许程序调用killBackgroundProcesses(String).方法结束后台进程</p>
<p>77.android.permission.INTERNET允许程序访问网络连接，可能产生GPRS流量</p>
<p>78.android.permission.INTERNAL_SYSTEM_WINDOW允许程序打开内部窗口，不对第三方应用程序开放此权限</p>
<p>79.com.android.launcher.permission.INSTALL_SHORTCUT创建快捷方式</p>
<p>80.android.permission.INSTALL_PACKAGES允许程序安装应用</p>
<p>81.android.permission.INSTALL_LOCATION_PROVIDER允许程序安装定位提供</p>
<p>82.android.permission.INJECT_EVENTS允许程序访问本程序的底层事件，获取按键、轨迹球的事件流</p>
<p>83.android.permission.HARDWARE_TEST允许程序访问硬件辅助设备，用于硬件测试</p>
<p>84.android.permission.GLOBAL_SEARCH允许程序允许全局搜索</p>
<p>85.android.permission.GET_TOP_ACTIVITY_INFO允许一个应用程序检索私有信息是当前最顶级的活动，不被第三方应用使用</p>
<p>86.android.permission.GET_TASKS允许程序获取任务信息</p>
<p>87.android.permission.GET_PACKAGE_SIZE允许程序获取应用的文件大小</p>
<p>88.android.permission.GET_ACCOUNTS允许程序访问账户Gmail列表</p>
<p>89.android.permission.FORCE_BACK允许程序强制使用back后退按键，无论Activity是否在顶层</p>
<p>90.android.permission.FLASHLIGHT允许访问闪光灯</p>
<p>91.android.permission.FACTORY_TEST允许程序运行工厂测试模式</p>
<p>92.android.permission.EXPAND_STATUS_BAR允许程序扩展或收缩状态栏</p>
<p>93.android.permission.DUMP允许程序获取系统dump信息从系统服务</p>
<p>94.android.permission.DISABLE_KEYGUARD允许程序禁用键盘锁</p>
<p>95.android.permission.DIAGNOSTIC允许程序到RW到诊断资源</p>
<p>96.android.permission.DEVICE_POWER允许程序访问底层电源管理</p>
<p>97.android.permission.DELETE_PACKAGES允许程序删除应用</p>
<p>98.android.permission.DELETE_CACHE_FILES允许程序删除缓存文件</p>
<p>99.android.permission.CONTROL_LOCATION_UPDATES允许程序获得移动网络定位信息改变</p>
<p>100.android.permission.CLEAR_APP_USER_DATA允许程序清除用户数据</p>
<p>101.android.permission.CLEAR_APP_CACHE允许程序清除应用缓存</p>
<p>102.android.permission.CHANGE_WIFI_STATE允许程序改变WiFi状态</p>
<p>103.android.permission.CHANGE_WIFI_MULTICAST_STATE允许程序改变WiFi多播状态</p>
<p>104.android.permission.CHANGE_NETWORK_STATE允许程序改变网络状态,如是否联网</p>
<p>105.android.permission.CHANGE_CONFIGURATION允许当前应用改变配置，如定位</p>
<p>106.android.permission.CHANGE_COMPONENT_ENABLED_STATE改变组件是否启用状态</p>
<p>107.android.permission.CAPTURE_VIDEO_OUTPUT允许一个应用程序捕获视频输出，不被第三方应用使用</p>
<p>108.android.permission.CAPTURE_SECURE_VIDEO_OUTPUT允许一个应用程序捕获视频输出。不被第三方应用使用</p>
<p>109.android.permission.CAPTURE_AUDIO_OUTPUT允许一个应用程序捕获音频输出。不被第三方应用使用</p>
<p>110.android.permission.CAMERA允许程序访问摄像头进行拍照</p>
<p>111.android.permission.CALL_PRIVILEGED允许程序拨打电话，替换系统的拨号器界面</p>
<p>112.android.permission.CALL_PHONE允许程序从非系统拨号器里拨打电话</p>
<p>113.android.permission.BROADCAST_WAP_PUSHWAP PUSH服务收到后触发一个广播</p>
<p>114.android.permission.BROADCAST_STICKY允许程序收到广播后快速收到下一个广播</p>
<p>115.android.permission.BROADCAST_SMS允许程序当收到短信时触发一个广播</p>
<p>116.android.permission.BROADCAST_PACKAGE_REMOVED允许程序删除时广播</p>
<p>117.android.permission.BRICK能够禁用手机，非常危险，顾名思义就是让手机变成砖头</p>
<p>118.android.permission.BLUETOOTH_PRIVILEGED允许应用程序配对蓝牙设备，而无需用户交互。这不是第三方应用程序可用。</p>
<p>119.android.permission.BLUETOOTH_ADMIN允许程序进行发现和配对新的蓝牙设备</p>
<p>120.android.permission.BLUETOOTH允许程序连接配对过的蓝牙设备</p>
<p>121.android.permission.BIND_WALLPAPER必须通过WallpaperService服务来请求，只有系统才能用</p>
<p>122.android.permission.BIND_VPN_SERVICE绑定VPN服务必须通过VpnService服务来请求,只有系统才能用</p>
<p>123.android.permission.BIND_TEXT_SERVICE必须要求textservice(例如吗 spellcheckerservice)，以确保只有系统可以绑定到它。</p>
<p>124.android.permission.BIND_REMOTEVIEWS必须通过RemoteViewsService服务来请求，只有系统才能用</p>
<p>125.android.permission.BIND_PRINT_SERVICE必须要求由printservice，以确保只有系统可以绑定到它。</p>
<p>126.android.permission.BIND_NOTIFICATION_LISTENER_SERVICE必须要求由notificationlistenerservice，以确保只有系统可以绑定到它。</p>
<p>127.android.permission.BIND_NFC_SERVICE由hostapduservice或offhostapduservice必须确保只有系统可以绑定到它。</p>
<p>128.android.permission.BIND_INPUT_METHOD请求InputMethodService服务，只有系统才能使用</p>
<p>129.android.permission.BIND_DEVICE_ADMIN请求系统管理员接收者receiver，只有系统才能使用</p>
<p>130.android.permission.BIND_APPWIDGET允许程序告诉appWidget服务需要访问小插件的数据库，只有非常少的应用才用到此权限</p>
<p>131.android.permission.BIND_ACCESSIBILITY_SERVICE请求accessibilityservice服务，以确保只有系统可以绑定到它。</p>
<p>132.android.permission.AUTHENTICATE_ACCOUNTS允许程序通过账户验证方式访问账户管理ACCOUNT_MANAGER相关信息</p>
<p>133.com.android.voicemail.permission.ADD_VOICEMAIL允许一个应用程序添加语音邮件系统</p>
<p>134.android.permission.ACCOUNT_MANAGER允许程序获取账户验证信息，主要为GMail账户信息，只有系统级进程才能访问的权限</p>
<p>135.android.permission.ACCESS_WIFI_STATE允许程序获取当前WiFi接入的状态以及WLAN热点的信息</p>
<p>136.android.permission.ACCESS_SURFACE_FLINGERAndroid平台上底层的图形显示支持，一般用于游戏或照相机预览界面和底层模式的屏幕截图</p>
<p>137.android.permission.ACCESS_NETWORK_STATE允许程序获取网络信息状态，如当前的网络连接是否有效</p>
<p>138.android.permission.ACCESS_MOCK_LOCATION允许程序获取模拟定位信息，一般用于帮助开发者调试应用</p>
<p>139.android.permission.ACCESS_LOCATION_EXTRA_COMMANDS允许程序访问额外的定位提供者指令</p>
<p>140.android.permission.ACCESS_FINE_LOCATION允许程序通过GPS芯片接收卫星的定位信息</p>
<p>141.android.permission.ACCESS_COARSE_LOCATION允许程序通过WiFi或移动基站的方式获取用户错略的经纬度信息</p>
<p>142.android.permission.ACCESS_CHECKIN_PROPERTIES允许程序读取或写入登记check-in数据库属性表的权限</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析JS中的模块化(CommonJS,AMD,CMD)</title>
    <url>/2019/05/07/%E6%B5%85%E6%9E%90JS%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96-CommonJS-AMD-CMD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>历史上，JavaScript一直都没有模块（module）体系，这就导致了在大项目中无法拆分成互相依赖的小文件，再进行拼装。这对开发复杂的项目形成了巨大的障碍。</p>
<a id="more"></a>
<h1 id="模块化概念"><a href="#模块化概念" class="headerlink" title="模块化概念"></a>模块化概念</h1><p>理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。</p>
<p><strong>原始的写法</strong></p>
<p>模块就是实现某个特定功能的方法，只要把不同的函数或变量放在一起就算是一个模块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// m1();</span></span><br><span class="line"><span class="comment">// m2();</span></span><br><span class="line"><span class="comment">// console.log(_count);</span></span><br></pre></td></tr></table></figure>
<p>这里的m1,m2方法组成了一个模块，使用的时候直接调用即可。但是这样很明显有一个缺点：“污染”全局变量，没有办法保证模块与模块之间不发生变量名或者方法名冲突，并且模块间与模块间并无法分清是否有直接联系。</p>
<p><strong>对象写法</strong></p>
<p>对于原始写法的缺点，将方法或者变量声明在某个对象中，像m1,m2函数都封装在对象体内，需要时再用对象进行调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = &#123;</span><br><span class="line">    _count: <span class="number">0</span>,</span><br><span class="line">    m1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    m2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module1.m1();</span></span><br><span class="line"><span class="comment">// module1.m2();</span></span><br><span class="line"><span class="comment">// console.log(module1._count);</span></span><br></pre></td></tr></table></figure>
<p>但是这样依然会有缺点：暴露出了模块的所有成员，内部状态可以被改写，比如内部_count变量会被外部直接改写。</p>
<p><strong>立即执行函数写法</strong></p>
<p>会涉及到闭包的概念，用‘立即执行函数’（Immediately-Invoked Function Expression，IIFE）即可以达到不暴露私有成员的目的。类似于jQuery的封装。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        m1: m1,</span><br><span class="line">        m2: m2,</span><br><span class="line">        getCount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// module1.m1();</span></span><br><span class="line"><span class="comment">// module1.m2();</span></span><br><span class="line"><span class="comment">// console.log(module1._count); //undefined</span></span><br><span class="line"><span class="comment">// console.log(module1.getCount()); //0</span></span><br></pre></td></tr></table></figure>
<h1 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h1><p><a href="[http://wiki.commonjs.org/wiki/CommonJS](http://wiki.commonjs.org/wiki/CommonJS">CommonJS</a>) 是以在浏览器环境之外构建 JavaScript 生态系统为目标而产生的项目，比如在服务器和桌面环境中。</p>
<blockquote>
<p>2009年，美国程序员Ryan Dahl创造了node.js项目，将javascript语言用于服务器端编程。</p>
</blockquote>
<blockquote>
<p>这标志”Javascript模块化编程”正式诞生。前端的复杂程度有限，没有模块也是可以的，但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。</p>
</blockquote>
<blockquote>
<p>node编程中最重要的思想之一就是模块，而正是这个思想，让JavaScript的大规模工程成为可能。模块化编程在js界流行，也是基于此，随后在浏览器端，requirejs和seajs之类的工具包也出现了，可以说在对应规范下，require统治了ES6之前的所有模块化编程，即使现在，在ES6 module被完全实现之前，还是这样。</p>
</blockquote>
<p><img src="commonjs.png" alt></p>
<p>例如在Node中，Node 应用由模块组成，采用 CommonJS 模块规范。</p>
<p>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</p>
<p>CommonJS规范规定，每个模块内部，<code>module</code>变量代表当前模块。这个变量是一个对象，它的·<code>exports</code>属性（即·<code>module.exports</code>）是对外的接口。加载某个模块，其实是加载该模块的·<code>module.exports</code>属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//user.js</span></span><br><span class="line"><span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> expose_num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports.m1 = m1;</span><br><span class="line"><span class="built_in">module</span>.exports.m2 = m2;</span><br><span class="line"><span class="built_in">module</span>.exports.getCount = getCount;</span><br><span class="line"><span class="built_in">module</span>.exports.expose_num = expose_num;</span><br></pre></td></tr></table></figure>
<p>上面代码通过<code>module.exports</code>输出变量<code>expose_num</code>和函数<code>m1</code>,<code>m2</code>,<code>getCount</code>。</p>
<p><code>require</code>方法进行加载模块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">const</span> module1 = <span class="built_in">require</span>(<span class="string">'./user.js'</span>);</span><br><span class="line">module1.m1(); <span class="comment">//m1</span></span><br><span class="line">module1.m2(); <span class="comment">//m2</span></span><br><span class="line"><span class="built_in">console</span>.log(module1.getCount()); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(module1.expose_num); <span class="comment">//100</span></span><br></pre></td></tr></table></figure>
<p><strong>module.exports属性</strong></p>
<p><code>module.exports</code>属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取<code>module.exports</code>变量。</p>
<p><strong>exports变量</strong></p>
<p>为了方便，Node为每个模块提供一个<code>exports</code>变量，指向<code>module.exports</code>。这等同在每个模块头部，有一行这样的命令。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exports = <span class="built_in">module</span>.exports;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果你觉得，<code>exports</code>与<code>module.exports</code>之间的区别很难分清，一个简单的处理方法，就是放弃使用<code>exports</code>，只使用<code>module.exports</code>。</p>
<p>es6中为<code>export</code>,注意区分。</p>
</blockquote>
<p><strong>CommonJS模块的特点如下</strong></p>
<ul>
<li>所有代码都运行在模块作用域，不会污染全局作用域。</li>
<li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li>
<li>模块加载的顺序，按照其在代码中出现的顺序。</li>
</ul>
<p>详细学习使用请参考链接：<a href="https://javascript.ruanyifeng.com/nodejs/module.html" target="_blank" rel="noopener">https://javascript.ruanyifeng.com/nodejs/module.html</a></p>
<h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p>有了服务器端的模块化后，很自然客户端也需要进行模块化，最好两者能够兼容，并且在服务器和浏览器都能够运行。也由于一个重大的局限，使得CommonJS规范不适用于浏览器环境上。</p>
<p><img src="amd.png" alt></p>
<p>就例如上述中CommonJS中的案例代码，在未加载完第一行的<code>require(&#39;./user.js&#39;)</code>代码时，后面的<code>module1.m1()</code>等的方法都会进行等待第一行完成后才可以继续运行。这对服务端来说不是问题，因为所有的模块都存放在本地硬盘，没有网络等其他原因，可以很快的同步加载完成，只需要等待硬盘的读取时间。但是对于浏览器环境，却是一个很大的问题，因为所有的模块都放置于服务端，等待时间不是取决于硬盘，而是取决于网速的快慢，这就导致了可能会导致等待时间过长，导致浏览器出现’假死’状态。</p>
<p>因此浏览器端的模块不可以采用’同步加载’（synchronous），只能使用’异步加载’（asynchronous）。这就是<a href="[https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88">AMD</a>](<a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(中文版))规范的诞生背景。" target="_blank" rel="noopener">https://github.com/amdjs/amdjs-api/wiki/AMD-(中文版))规范的诞生背景。</a></p>
<blockquote>
<p>所谓AMD即Asynchronous Module Definition的缩写，意思就是’异步模块定义’。它采用异步方式加载模块，模块的加载不影响后面的语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>
</blockquote>
<p>该规范只定义了一个函数 <code>define</code>，它是全局变量。函数的描述为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(id?, dependencies?, factory);</span><br></pre></td></tr></table></figure>
<ul>
<li>id：第一个参数，id，是个字符串。它指的是定义中模块的名字，这个参数是可选的</li>
<li>dependencies：第二个参数，dependencies，是个定义中模块所依赖模块的数组</li>
<li>factory：第三个参数，factory，为模块初始化要执行的函数或对象。</li>
</ul>
<p>例如在<code>RequireJS</code>中，</p>
<blockquote>
<p>RequireJS是一个工具库，主要用于客户端的模块管理。它可以让客户端的代码分成一个个模块，实现异步或动态加载，从而提高代码的性能和可维护性。它的模块管理遵守<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener">AMD规范</a>（Asynchronous Module Definition）。</p>
</blockquote>
<blockquote>
<p>RequireJS的基本思想是，通过define方法，将代码定义为模块；通过require方法，实现代码的模块加载。</p>
</blockquote>
<p>首先，将require.js嵌入网页，然后就能在网页中进行模块化编程了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"app"</span> <span class="attr">src</span>=<span class="string">"https://requirejs.org/docs/release/2.3.6/comments/require.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面代码的<code>data-main</code>属性不可省略，用于指定主代码所在的脚本文件，在上例中为当前目录下的<code>app.js</code>文件。用户自定义的代码就放在这个<code>app.js</code>文件中。</p>
<p><strong>define方法：定义模块</strong></p>
<ul>
<li>独立模块</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//user.js</span></span><br><span class="line">define(&#123;</span><br><span class="line">    m1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    m2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>另一种等价的写法是，把对象写成一个函数，该函数的返回值就是输出的模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//user.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        m1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'m1'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        m2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'m2'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>后一种写法的自由度更高一点，可以在函数体内写一些模块初始化代码。值得指出的是，define定义的模块可以返回任何值，不限于对象。</p>
</blockquote>
<ul>
<li>非独立模块</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cart.js</span></span><br><span class="line">define([<span class="string">'user'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'cart'</span>);</span><br><span class="line">    user.m1();</span><br><span class="line">    user.m2();</span><br><span class="line">    <span class="keyword">var</span> getCartCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getCartCount:getCartCount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>define方法的第一个参数是一个数组，它的成员是当前模块所依赖的模块。比如，[‘user’]表示我们定义的这个新模块依赖于user模块，只有先加载这两个模块，新模块才能正常运行。一般情况下，user模块指的是，当前目录下的user.js文件，等同于写成[’./user’]。</p>
<p>define方法的第二个参数是一个函数，当前面数组的所有成员加载成功后，它将被调用。它的参数与数组的成员一一对应，比如function(user)就表示，这个函数的第一个参数user对应user模块，以此类推。这个函数必须返回一个对象，供其他模块调用。</p>
<p><strong>require方法：调用模块</strong></p>
<p>require方法用于调用模块。它的参数与define方法类似。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'cart'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">cart</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...do</span></span><br><span class="line">    <span class="built_in">console</span>.log(cart.getCartCount());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//cart</span></span><br><span class="line"><span class="comment">//m1</span></span><br><span class="line"><span class="comment">//m2</span></span><br><span class="line"><span class="comment">//100</span></span><br></pre></td></tr></table></figure>
<p>上面方法表示加载cart一个模块，当这一个模块都加载成功后，执行一个回调函数。该回调函数就用来完成具体的任务。而<code>cart.getCartCount()</code>和<code>cart</code>模块加载不是同步的，浏览器不会再发生假死状态，所以AMD规范更适合浏览器环境。</p>
<blockquote>
<p>require方法也可以用在define方法内部，即动态加载。</p>
</blockquote>
<p>define和require这两个定义模块、调用模块的方法，合称为AMD模式。它的模块定义的方法非常清晰，不会污染全局环境，能够清楚地显示依赖关系。</p>
<p>AMD模式可以用于浏览器环境，并且允许非同步加载模块，也可以根据需要动态加载模块。</p>
<p>详细学习使用请参考链接：<a href="https://javascript.ruanyifeng.com/tool/requirejs.html" target="_blank" rel="noopener">https://javascript.ruanyifeng.com/tool/requirejs.html</a></p>
<h1 id="AMD规范与CommonJS规范的兼容性"><a href="#AMD规范与CommonJS规范的兼容性" class="headerlink" title="AMD规范与CommonJS规范的兼容性"></a>AMD规范与CommonJS规范的兼容性</h1><p>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以CommonJS规范比较适用。但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用AMD规范。</p>
<p>AMD规范使用define方法定义模块，下面就是一个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define([<span class="string">'package/lib'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">lib</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    lib.log(<span class="string">'hello world!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    foo: foo</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>AMD规范允许输出的模块兼容CommonJS规范，这时<code>define</code>方法需要写成下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> someModule = <span class="built_in">require</span>(<span class="string">"someModule"</span>);</span><br><span class="line">  <span class="keyword">var</span> anotherModule = <span class="built_in">require</span>(<span class="string">"anotherModule"</span>);</span><br><span class="line"></span><br><span class="line">  someModule.doTehAwesome();</span><br><span class="line">  anotherModule.doMoarAwesome();</span><br><span class="line"></span><br><span class="line">  exports.asplode = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    someModule.doTehAwesome();</span><br><span class="line">    anotherModule.doMoarAwesome();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><p><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">CMD</a> 是 SeaJS 在推广过程中对模块定义的规范化产出。</p>
<p>首先通过 <code>script</code> 引入 <code>sea.js</code> 后，有一段配置代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// seajs 的简单配置</span></span><br><span class="line">seajs.config(&#123;</span><br><span class="line">  base: <span class="string">"../sea-modules/"</span>,</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery/jquery/1.10.1/jquery.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载入口模块</span></span><br><span class="line">seajs.use(<span class="string">"../static/hello/src/main"</span>)</span><br></pre></td></tr></table></figure>
<p><code>sea.js</code> 在下载完成后，会自动加载入口模块。页面中的代码就这么简单。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(id?, deps?, factory)</span><br></pre></td></tr></table></figure>
<ul>
<li>id：第一个参数，id，是个字符串。它指的是定义中模块的名字，这个参数是可选的</li>
<li>deps：第二个参数，dependencies，是个定义中模块所依赖模块的数组</li>
<li>factory：第三个参数，factory，为模块初始化要执行的函数或对象。</li>
</ul>
<blockquote>
<p>注意：带 id 和 dependencies 参数的 define 用法不属于 CMD 规范，而属于 Modules/Transport 规范。</p>
</blockquote>
<p>如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有模块都通过 define 来定义</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 require 引入依赖</span></span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">  <span class="keyword">var</span> Spinning = <span class="built_in">require</span>(<span class="string">'./spinning'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 exports 对外提供接口</span></span><br><span class="line">  exports.doSomething = ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 或者通过 module.exports 提供整个接口</span></span><br><span class="line">  <span class="built_in">module</span>.exports = ...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面就是 Sea.js 推荐的 CMD 模块书写格式。如果你有使用过 Node.js，一切都很自然。</p>
<p>详细学习使用请参考链接：<a href="https://seajs.github.io/seajs/docs/#quick-start" target="_blank" rel="noopener">https://seajs.github.io/seajs/docs/#quick-start</a></p>
<h1 id="AMD和CMD的区别"><a href="#AMD和CMD的区别" class="headerlink" title="AMD和CMD的区别"></a>AMD和CMD的区别</h1><p>AMD和CMD最大的区别是对依赖模块的执行时机处理不同，而不是加载的时机或者方式不同，二者皆为异步加载模块。</p>
<ul>
<li><p>AMD依赖前置，js可以方便知道依赖模块是谁，立即加载；</p>
</li>
<li><p>CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块。</p>
</li>
<li><p>AMD 的 API 默认是<strong>一个当多个用</strong>，CMD 的 API 严格区分，推崇<strong>职责单一</strong>。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都<strong>简单纯粹</strong>。</p>
</li>
</ul>
<p>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong></p>
<blockquote>
<p>RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;   </span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)   </span><br><span class="line">	a.doSomething()   </span><br><span class="line"> 	<span class="comment">// 此处略去 100 行   </span></span><br><span class="line"> 	<span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>) </span><br><span class="line"> 	<span class="comment">// 依赖可以就近书写   </span></span><br><span class="line"> 	b.doSomething()   </span><br><span class="line"> 	<span class="comment">// ... </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AMD 默认推荐的是</span></span><br><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 依赖必须一开始就写好    </span></span><br><span class="line">  a.doSomething()    </span><br><span class="line">	<span class="comment">// 此处略去 100 行    </span></span><br><span class="line">	b.doSomething()    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>即使AMD也可以支持CMD的写法，因为define内部也可以使用require，前面有提到。但是RequireJS 的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。</p>
<h1 id="ES6-Module"><a href="#ES6-Module" class="headerlink" title="ES6 Module"></a>ES6 Module</h1><p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。</p>
<p><strong>export导出模块</strong></p>
<p>模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p>
<p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用<code>export</code>关键字输出该变量。下面是一个 JS 文件，里面使用<code>export</code>命令输出变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</span><br></pre></td></tr></table></figure>
<p><code>export</code>命令除了输出变量，还可以输出函数或类（class）。</p>
<p><strong>import导入模块</strong></p>
<p>使用<code>export</code>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<code>import</code>命令加载这个模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;firstName, lastName, year&#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  element.textContent = firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码的<code>import</code>命令，用于加载<code>profile.js</code>文件，并从中输入变量。<code>import</code>命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（<code>profile.js</code>）对外接口的名称相同。</p>
<p><strong>export default默认导出</strong></p>
<p>从前面的例子可以看出，使用<code>import</code>命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。</p>
<p>为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到<code>export default</code>命令，为模块指定默认输出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码是一个模块文件<code>export-default.js</code>，它的默认输出是一个函数。</p>
<p>其他模块加载该模块时，<code>import</code>命令可以为该匿名函数指定任意名字。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</span><br><span class="line">customName(); <span class="comment">// 'foo'</span></span><br></pre></td></tr></table></figure>
<p>ES6中Module还有很多语法，这里主要讲解es6前js的模块化概念，所以不多概述使用，详细使用参考下面链接。</p>
<p>详细学习使用请参考链接：<a href="https://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">https://es6.ruanyifeng.com/#docs/module</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>CommonJS</tag>
        <tag>AMD</tag>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP常用函数参考表</title>
    <url>/2019/05/05/PHP%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%8F%82%E8%80%83%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>各种常用的php函数，包括php字符串函数,php数组函数,php数学函数,mysql函数,文件目录函数,GD库函数,SESSION函数,Date/Time 函数等，涵盖了php基本操作所涉及的各类常用函数，并针对各个函数提供了简单的解释说明，方便查阅</p>
<a id="more"></a>
<h1 id="字符串相关操作函数"><a href="#字符串相关操作函数" class="headerlink" title="字符串相关操作函数"></a>字符串相关操作函数</h1><h2 id="去除空格或其他字符"><a href="#去除空格或其他字符" class="headerlink" title="去除空格或其他字符"></a>去除空格或其他字符</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>trim</td>
<td>删除字符串两端空格或其他预定义字符</td>
</tr>
<tr>
<td>rtrim</td>
<td>删除字符串右边空格或其他预定义字符</td>
</tr>
<tr>
<td>chop</td>
<td>rtrim() 的别名 chop() 与 Perl 的 chop() 函数有所不同，它会删除字符串的最后一个字符。</td>
</tr>
<tr>
<td>ltrim</td>
<td>删除字符串左边空格或其他预定义字符</td>
</tr>
</tbody>
</table>
<h2 id="字符串生成与转换"><a href="#字符串生成与转换" class="headerlink" title="字符串生成与转换"></a>字符串生成与转换</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>str_pad</td>
<td>使用另一个字符串填充字符串为指定长度</td>
</tr>
<tr>
<td>str_replace</td>
<td>子字符串替换</td>
</tr>
<tr>
<td>str_split</td>
<td>将字符串转换为数组</td>
</tr>
<tr>
<td>strrev</td>
<td>反转字符串</td>
</tr>
<tr>
<td>wordwrap</td>
<td>打断字符串为指定数量的字串</td>
</tr>
<tr>
<td>str_shuffle</td>
<td>随机打乱一个字符串</td>
</tr>
<tr>
<td>parse_str</td>
<td>将字符串解析成变量</td>
</tr>
<tr>
<td>number_format</td>
<td>通过千位分组来格式化字符串</td>
</tr>
</tbody>
</table>
<h2 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>strtolower</td>
<td>将字符串转化为小写</td>
</tr>
<tr>
<td>strtoupper</td>
<td>将字符串转化为大写</td>
</tr>
<tr>
<td>ucfirst</td>
<td>将字符串的首字母转换为大写</td>
</tr>
<tr>
<td>ucwords</td>
<td>将字符串中每个单词的首字母转换为大写</td>
</tr>
</tbody>
</table>
<h2 id="html标签关联"><a href="#html标签关联" class="headerlink" title="html标签关联"></a>html标签关联</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>htmlentities</td>
<td>将字符转换为HTML实体</td>
</tr>
<tr>
<td>htmlspecialchars</td>
<td>预定义字符串转HTML编码</td>
</tr>
<tr>
<td>nl2br</td>
<td>在字符串所有新行之前插入 HTML 换行标记 <code>\n</code>转换为<code>&lt;br&gt;</code>标签</td>
</tr>
<tr>
<td>strip_tags</td>
<td>从字符串中去除 HTML 和 PHP 标记</td>
</tr>
<tr>
<td>addcslashes</td>
<td>以 C 语言风格使用反斜线转义字符串中的字符</td>
</tr>
<tr>
<td>stripcslashes</td>
<td>反引用一个使用 addcslashes() 转义的字符串</td>
</tr>
<tr>
<td>addslashes</td>
<td>使用反斜线引用字符串</td>
</tr>
<tr>
<td>stripslashes</td>
<td>删除由addslashes添加的转义字符</td>
</tr>
<tr>
<td>quotemeta</td>
<td>字符串中某些预定义字符串前加反斜杠</td>
</tr>
<tr>
<td>chr</td>
<td>从指定的 ASCII 值返回字符</td>
</tr>
<tr>
<td>ord</td>
<td>返回字符串第一个字符的 ASCII 值</td>
</tr>
</tbody>
</table>
<h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>strcasecmp</td>
<td>不区分大小写比较两个字符串</td>
</tr>
<tr>
<td>strcmp</td>
<td>区分大小写比较两个字符串</td>
</tr>
<tr>
<td>strncmp</td>
<td>比较字符串前N个字符，区分大小写</td>
</tr>
<tr>
<td>strncasecmp</td>
<td>比较字符串前N个字符，不区分大小写</td>
</tr>
<tr>
<td>strnatmp</td>
<td>自然顺序法比较字符串长度，区分大小写</td>
</tr>
<tr>
<td>strnatcasecmp</td>
<td>自然顺序法比较字符串长度，不区分大小写</td>
</tr>
</tbody>
</table>
<h2 id="字符串查找替换"><a href="#字符串查找替换" class="headerlink" title="字符串查找替换"></a>字符串查找替换</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>str_replace</td>
<td>字符串替换操作，区分大小写</td>
</tr>
<tr>
<td>str_ireplace</td>
<td>字符串替换操作，不区分大小写</td>
</tr>
<tr>
<td>substr_count</td>
<td>统计一个字符串，在另一个字符串中出现的次数</td>
</tr>
<tr>
<td>substr_replace</td>
<td>替换字符串中某串为另一个字符串</td>
</tr>
<tr>
<td>similar_text</td>
<td>返回两字符串相同字符的数量</td>
</tr>
<tr>
<td>strrchr</td>
<td>返回一个字符串在另一个字符串中最后一次出现位置开始到末尾的字符串</td>
</tr>
<tr>
<td>strstr</td>
<td>返回一个字符串在另一个字符串中开始位置到结束位置的字符串</td>
</tr>
<tr>
<td>strchr</td>
<td>strstr的别名，返回一个字符串在另一个中首次出现位置开始到末尾的字符串</td>
</tr>
<tr>
<td>stristr</td>
<td>返回一个字符串在另一个字符串中开始位置到结束位置的字符串，不区分大小写</td>
</tr>
<tr>
<td>strtr</td>
<td>转换字符串中某些字符</td>
</tr>
<tr>
<td>strpos</td>
<td>寻找字符中某些字符最先出现的位置</td>
</tr>
<tr>
<td>stripos</td>
<td>寻找字符中某些字符最先出现的位置，不区分大小写</td>
</tr>
<tr>
<td>strrpos</td>
<td>寻找字符中某些字符最后出现的位置</td>
</tr>
<tr>
<td>strripos</td>
<td>寻找字符中某些字符最后出现的位置，不区分大小写</td>
</tr>
<tr>
<td>strspn</td>
<td>返回字符串中首次符合mask的字符串长度</td>
</tr>
<tr>
<td>strcspn</td>
<td>返回字符串中不符合mask的字符串的长度</td>
</tr>
</tbody>
</table>
<h2 id="字符串统计"><a href="#字符串统计" class="headerlink" title="字符串统计"></a>字符串统计</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>str_word_count</td>
<td>统计字符串含有的单词数</td>
</tr>
<tr>
<td>strlen</td>
<td>统计字符串长度</td>
</tr>
<tr>
<td>count_chars</td>
<td>统计字符串中所有字母出现的次数（0..255）</td>
</tr>
</tbody>
</table>
<h2 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>md5</td>
<td>计算字符串的 MD5 散列值</td>
</tr>
<tr>
<td>hash</td>
<td>生成一个哈希码</td>
</tr>
</tbody>
</table>
<h1 id="数组相关函数"><a href="#数组相关函数" class="headerlink" title="数组相关函数"></a>数组相关函数</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>array</td>
<td>生成一个数组</td>
</tr>
<tr>
<td>array_combine</td>
<td>生成一个数组，用一个数组的值作为键名，另一个数组的值作为值</td>
</tr>
<tr>
<td>range</td>
<td>创建并返回一个包含指定范围的元素的数组</td>
</tr>
<tr>
<td>compact</td>
<td>创建一个由参数所带变量组成的数组</td>
</tr>
<tr>
<td>array_fill</td>
<td>用给定的值填充生成数组</td>
</tr>
</tbody>
</table>
<h2 id="数组合并和拆分"><a href="#数组合并和拆分" class="headerlink" title="数组合并和拆分"></a>数组合并和拆分</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>array_chunk</td>
<td>把一个数组分割为新的数组块</td>
</tr>
<tr>
<td>array_merge</td>
<td>把两个或多个数组合并成一个数组</td>
</tr>
<tr>
<td>array_slice</td>
<td>在数组中根据条件取出一段值，并返回。</td>
</tr>
</tbody>
</table>
<h2 id="数组比较"><a href="#数组比较" class="headerlink" title="数组比较"></a>数组比较</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>array_diff</td>
<td>返回两个数组的差集数组</td>
</tr>
<tr>
<td>array_intersect</td>
<td>返回两个或多个数组的交集数组</td>
</tr>
</tbody>
</table>
<h2 id="数组查找替换"><a href="#数组查找替换" class="headerlink" title="数组查找替换"></a>数组查找替换</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>array_search</td>
<td>在数组中查找一个键值</td>
</tr>
<tr>
<td>array_splice</td>
<td>把数组一部分删除把其他值替代</td>
</tr>
<tr>
<td>array_sum</td>
<td>返回数组中所有值的总和</td>
</tr>
<tr>
<td>in_array</td>
<td>在数组中搜索指定的值，区分大小写</td>
</tr>
<tr>
<td>array_key_exists</td>
<td>判断某个数组中是否存在指定的key</td>
</tr>
</tbody>
</table>
<h2 id="数组指针操作"><a href="#数组指针操作" class="headerlink" title="数组指针操作"></a>数组指针操作</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>key</td>
<td>返回数组内部指针当前指向的键名</td>
</tr>
<tr>
<td>current</td>
<td>返回数组中的当前元素</td>
</tr>
<tr>
<td>next</td>
<td>把指向当前元素的指针移动到下一个元素位置，并返回当前元素的值</td>
</tr>
<tr>
<td>prev</td>
<td>把指向当前元素的指针移动到上一个元素位置，并返回当前元素的值</td>
</tr>
<tr>
<td>end</td>
<td>将数组内部指针指向最后一个元素，并返回该元素的值（如果成功）</td>
</tr>
<tr>
<td>reset</td>
<td>把数组内部指针指向第一个元素，并返回该元素的值</td>
</tr>
<tr>
<td>list</td>
<td>用数组中的元素为一组变量赋值</td>
</tr>
<tr>
<td>array_shift</td>
<td>删除数组中的第一个元素，并返回被删除元素的值</td>
</tr>
<tr>
<td>array_unshif</td>
<td>在数组开头插入一个或者多个元素</td>
</tr>
<tr>
<td>array_push</td>
<td>向数组最后压入一个或多个元素</td>
</tr>
<tr>
<td>array_pop</td>
<td>删除数组最后一个元素</td>
</tr>
</tbody>
</table>
<h2 id="数组键值操作"><a href="#数组键值操作" class="headerlink" title="数组键值操作"></a>数组键值操作</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>shuffle</td>
<td>将数组打乱，保留键名</td>
</tr>
<tr>
<td>count</td>
<td>计算数组中单元个数或者对象属性个数</td>
</tr>
<tr>
<td>array_flip</td>
<td>返回一个键值翻转后的数组</td>
</tr>
<tr>
<td>array_keys</td>
<td>返回数组所有键，组成一个数组</td>
</tr>
<tr>
<td>array_values</td>
<td>返回数组所有值，组成一个数组</td>
</tr>
<tr>
<td>array_reverse</td>
<td>返回一个元素顺序相反的数组</td>
</tr>
<tr>
<td>array_count_values</td>
<td>统计数组中所有值出现的次数</td>
</tr>
<tr>
<td>array_rand</td>
<td>从数组中随机抽取一个或者多个元素，注意是键名</td>
</tr>
<tr>
<td>each</td>
<td>返回数组中当前的键／值对并将数组指针向前移动一步</td>
</tr>
<tr>
<td>array_unique</td>
<td>移除数组中重复的值</td>
</tr>
</tbody>
</table>
<h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>sort</td>
<td>对数组排序</td>
</tr>
<tr>
<td>rsort</td>
<td>对数组逆向排序</td>
</tr>
<tr>
<td>asort</td>
<td>对数组进行排序并保持索引关系</td>
</tr>
<tr>
<td>arsort</td>
<td>对数组进行逆向排序并保持索引关系</td>
</tr>
<tr>
<td>ksort</td>
<td>对数组按照键名排序</td>
</tr>
<tr>
<td>krsort</td>
<td>对数组按照键名逆向排序</td>
</tr>
<tr>
<td>natsort</td>
<td>用“自然排序”算法对数组排序</td>
</tr>
<tr>
<td>natcasesort</td>
<td>用“自然排序”算法对数组进行不区分大小写字母的排序</td>
</tr>
</tbody>
</table>
<h1 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a>数学相关函数</h1><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>abs</td>
<td>求绝对值</td>
</tr>
<tr>
<td>ceil</td>
<td>进一法取整</td>
</tr>
<tr>
<td>floor</td>
<td>舍去法取整</td>
</tr>
<tr>
<td>fmod</td>
<td>返回除法的浮点数余数</td>
</tr>
<tr>
<td>pow</td>
<td>返回数的N次方</td>
</tr>
<tr>
<td>round</td>
<td>浮点数四舍五入法</td>
</tr>
<tr>
<td>sqrt</td>
<td>求平方根</td>
</tr>
<tr>
<td>max</td>
<td>求最大值</td>
</tr>
<tr>
<td>min</td>
<td>求最小值</td>
</tr>
<tr>
<td>mt_rand</td>
<td>更好的随机数</td>
</tr>
<tr>
<td>rand</td>
<td>随机数</td>
</tr>
<tr>
<td>pi</td>
<td>获得圆周率</td>
</tr>
<tr>
<td>octdec</td>
<td>八进制转换为十进制</td>
</tr>
</tbody>
</table>
<h1 id="mysql相关函数"><a href="#mysql相关函数" class="headerlink" title="mysql相关函数"></a>mysql相关函数</h1><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>mysql_affected_rows</td>
<td>取得前一次 MySQL 操作所影响的记录行数</td>
</tr>
<tr>
<td>mysql_client_encoding</td>
<td>返回字符集的名称</td>
</tr>
<tr>
<td>mysql_close</td>
<td>关闭 MySQL 连接</td>
</tr>
<tr>
<td>mysql_connect</td>
<td>打开一个到 MySQL 服务器的连接</td>
</tr>
<tr>
<td>mysql_create_db</td>
<td>新建一个 MySQL 数据库</td>
</tr>
<tr>
<td>mysql_data_seek</td>
<td>移动内部结果的指针</td>
</tr>
<tr>
<td>mysql_db_name</td>
<td>取得结果数据</td>
</tr>
<tr>
<td>mysql_db_query</td>
<td>发送一条 MySQL 查询</td>
</tr>
<tr>
<td>mysql_drop_db</td>
<td>丢弃（删除）一个 MySQL 数据库</td>
</tr>
<tr>
<td>mysql_errno</td>
<td>返回上一个 MySQL 操作中的错误信息的数字编码</td>
</tr>
<tr>
<td>mysql_error</td>
<td>返回上一个 MySQL 操作产生的文本错误信息</td>
</tr>
<tr>
<td>mysql_escape_string</td>
<td>转义一个字符串用于 mysql_query</td>
</tr>
<tr>
<td>mysql_fetch_array</td>
<td>从结果集中取得一行作为关联数组，或数字数组，或二者兼有</td>
</tr>
<tr>
<td>mysql_fetch_assoc</td>
<td>从结果集中取得一行作为关联数组</td>
</tr>
<tr>
<td>mysql_fetch_field</td>
<td>从结果集中取得列信息并作为对象返回</td>
</tr>
<tr>
<td>mysql_fetch_lengths</td>
<td>取得结果集中每个输出的长度</td>
</tr>
<tr>
<td>mysql_fetch_object</td>
<td>从结果集中取得一行作为对象</td>
</tr>
<tr>
<td>mysql_fetch_object</td>
<td>从结果集中取得一行作为枚举数组</td>
</tr>
<tr>
<td>mysql_field_flags</td>
<td>从结果中取得和指定字段关联的标志</td>
</tr>
<tr>
<td>mysql_field_len</td>
<td>返回指定字段的长度</td>
</tr>
<tr>
<td>mysql_field_name</td>
<td>取得结果中指定字段的字段名</td>
</tr>
<tr>
<td>mysql_field_seek</td>
<td>将结果集中的指针设定为制定的字段偏移量</td>
</tr>
<tr>
<td>mysql_field_table</td>
<td>取得指定字段所在的表名</td>
</tr>
<tr>
<td>mysql_field_type</td>
<td>取得结果集中指定字段的类型</td>
</tr>
<tr>
<td>mysql_free_result</td>
<td>释放结果内存</td>
</tr>
<tr>
<td>mysql_get_client_info</td>
<td>取得 MySQL 客户端信息</td>
</tr>
<tr>
<td>mysql_get_host_info</td>
<td>取得 MySQL 主机信息</td>
</tr>
<tr>
<td>mysql_get_proto_info</td>
<td>取得 MySQL 协议信息</td>
</tr>
<tr>
<td>mysql_get_server_info</td>
<td>取得 MySQL 服务器信息</td>
</tr>
<tr>
<td>mysql_info</td>
<td>取得最近一条查询的信息</td>
</tr>
<tr>
<td>mysql_insert_id</td>
<td>取得上一步 INSERT 操作产生的 ID</td>
</tr>
<tr>
<td>mysql_list_dbs</td>
<td>列出 MySQL 服务器中所有的数据库</td>
</tr>
<tr>
<td>mysql_list_fields</td>
<td>列出 MySQL 结果中的字段</td>
</tr>
<tr>
<td>mysql_list_processes</td>
<td>列出 MySQL 进程</td>
</tr>
<tr>
<td>mysql_list_tables</td>
<td>列出 MySQL 数据库中的表</td>
</tr>
<tr>
<td>mysql_num_fields</td>
<td>取得结果集中字段的数目</td>
</tr>
<tr>
<td>mysql_num_rows</td>
<td>取得结果集中行的数目</td>
</tr>
<tr>
<td>mysql_pconnect</td>
<td>打开一个到 MySQL 服务器的持久连接</td>
</tr>
<tr>
<td>mysql_ping</td>
<td>Ping 一个服务器连接，如果没有连接则重新连接</td>
</tr>
<tr>
<td>mysql_query</td>
<td>发送一条 MySQL 查询</td>
</tr>
<tr>
<td>mysql_real_escape_string</td>
<td>转义 SQL 语句中使用的字符串中的特殊字符，并考虑到连接的当前字符集</td>
</tr>
<tr>
<td>mysql_result</td>
<td>取得结果数据</td>
</tr>
<tr>
<td>mysql_select_db</td>
<td>选择 MySQL 数据库</td>
</tr>
<tr>
<td>mysql_set_charset</td>
<td>设置客户端字符集</td>
</tr>
<tr>
<td>mysql_stat</td>
<td>取得当前系统状态</td>
</tr>
<tr>
<td>mysql_tablename</td>
<td>取得表名</td>
</tr>
<tr>
<td>mysql_thread_id</td>
<td>返回当前线程的 ID</td>
</tr>
<tr>
<td>mysql_unbuffered_query</td>
<td>向 MySQL 发送一条 SQL 查询，并不获取和缓存结果的行</td>
</tr>
</tbody>
</table>
<h1 id="文件目录处理相关函数"><a href="#文件目录处理相关函数" class="headerlink" title="文件目录处理相关函数"></a>文件目录处理相关函数</h1><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>basename</td>
<td>返回路径中的文件名部分</td>
</tr>
<tr>
<td>chgrp</td>
<td>改变文件所属的组</td>
</tr>
<tr>
<td>chmod</td>
<td>改变文件模式</td>
</tr>
<tr>
<td>chown</td>
<td>改变文件的所有者</td>
</tr>
<tr>
<td>clearstatcache</td>
<td>清除文件状态缓存</td>
</tr>
<tr>
<td>copy</td>
<td>拷贝文件</td>
</tr>
<tr>
<td>delete</td>
<td>参见 unlink 或 unset</td>
</tr>
<tr>
<td>dirname</td>
<td>返回路径中的目录部分</td>
</tr>
<tr>
<td>disk_free_space</td>
<td>返回目录中的可用空间</td>
</tr>
<tr>
<td>disk_total_space</td>
<td>返回一个目录的磁盘总大小</td>
</tr>
<tr>
<td>diskfreespace</td>
<td>disk_free_space 的别名</td>
</tr>
<tr>
<td>fclose</td>
<td>关闭一个已打开的文件指针</td>
</tr>
<tr>
<td>feof</td>
<td>测试文件指针是否到了文件结束的位置</td>
</tr>
<tr>
<td>fflush</td>
<td>将缓冲内容输出到文件</td>
</tr>
<tr>
<td>fgetc</td>
<td>从文件指针中读取字符</td>
</tr>
<tr>
<td>fgetcsv</td>
<td>从文件指针中读入一行并解析 CSV 字段</td>
</tr>
<tr>
<td>fgets</td>
<td>从文件指针中读取一行</td>
</tr>
<tr>
<td>fgetss</td>
<td>从文件指针中读取一行并过滤掉 HTML 标记</td>
</tr>
<tr>
<td>file_exists</td>
<td>检查文件或目录是否存在</td>
</tr>
<tr>
<td>file_get_contents</td>
<td>将整个文件读入一个字符串</td>
</tr>
<tr>
<td>file_put_contents</td>
<td>将一个字符串写入文件</td>
</tr>
<tr>
<td>file</td>
<td>把整个文件读入一个数组中</td>
</tr>
<tr>
<td>fileatime</td>
<td>取得文件的上次访问时间</td>
</tr>
<tr>
<td>filectime</td>
<td>取得文件的 inode 修改时间</td>
</tr>
<tr>
<td>filegroup</td>
<td>取得文件的组</td>
</tr>
<tr>
<td>fileinode</td>
<td>取得文件的 inode</td>
</tr>
<tr>
<td>filemtime</td>
<td>取得文件修改时间</td>
</tr>
<tr>
<td>fileowner</td>
<td>取得文件的所有者</td>
</tr>
<tr>
<td>fileperms</td>
<td>取得文件的权限</td>
</tr>
<tr>
<td>filesize</td>
<td>取得文件大小</td>
</tr>
<tr>
<td>filetype</td>
<td>取得文件类型</td>
</tr>
<tr>
<td>flock</td>
<td>轻便的咨询文件锁定</td>
</tr>
<tr>
<td>fnmatch</td>
<td>用模式匹配文件名</td>
</tr>
<tr>
<td>fopen</td>
<td>打开文件或者 URL</td>
</tr>
<tr>
<td>fpassthru</td>
<td>输出文件指针处的所有剩余数据</td>
</tr>
<tr>
<td>fputcsv</td>
<td>将行格式化为 CSV 并写入文件指针</td>
</tr>
<tr>
<td>fputs</td>
<td>fwrite 的别名</td>
</tr>
<tr>
<td>fread</td>
<td>读取文件（可安全用于二进制文件)</td>
</tr>
<tr>
<td>fscanf</td>
<td>从文件中格式化输入</td>
</tr>
<tr>
<td>fseek</td>
<td>在文件指针中定位</td>
</tr>
<tr>
<td>fstat</td>
<td>通过已打开的文件指针取得文件信息</td>
</tr>
<tr>
<td>ftell</td>
<td>返回文件指针读/写的位置</td>
</tr>
<tr>
<td>ftruncate</td>
<td>将文件截断到给定的长度</td>
</tr>
<tr>
<td>fwrite</td>
<td>写入文件（可安全用于二进制文件）</td>
</tr>
<tr>
<td>glob</td>
<td>寻找与模式匹配的文件路径</td>
</tr>
<tr>
<td>is_dir</td>
<td>判断给定文件名是否是一个目录</td>
</tr>
<tr>
<td>is_executable</td>
<td>判断给定文件名是否可执行</td>
</tr>
<tr>
<td>is_file</td>
<td>判断给定文件名是否为一个正常的文件</td>
</tr>
<tr>
<td>is_link</td>
<td>判断给定文件名是否为一个符号连接</td>
</tr>
<tr>
<td>is_readable</td>
<td>判断给定文件名是否可读</td>
</tr>
<tr>
<td>is_uploaded_file</td>
<td>判断文件是否是通过 HTTP POST 上传的</td>
</tr>
<tr>
<td>is_writable</td>
<td>判断给定的文件名是否可写</td>
</tr>
<tr>
<td>is_writeable</td>
<td>is_writable 的别名</td>
</tr>
<tr>
<td>lchgrp</td>
<td>Changes group ownership of symlink</td>
</tr>
<tr>
<td>lchown</td>
<td>Changes user ownership of symlink</td>
</tr>
<tr>
<td>link</td>
<td>建立一个硬连接</td>
</tr>
<tr>
<td>linkinfo</td>
<td>获取一个连接的信息</td>
</tr>
<tr>
<td>lstat</td>
<td>给出一个文件或符号连接的信息</td>
</tr>
<tr>
<td>mkdir</td>
<td>新建目录</td>
</tr>
<tr>
<td>move_uploaded_file</td>
<td>将上传的文件移动到新位置</td>
</tr>
<tr>
<td>parse_ini_file</td>
<td>解析一个配置文件</td>
</tr>
<tr>
<td>parse_ini_string</td>
<td>Parse a configuration string</td>
</tr>
<tr>
<td>pathinfo</td>
<td>返回文件路径的信息</td>
</tr>
<tr>
<td>pclose</td>
<td>关闭进程文件指针</td>
</tr>
<tr>
<td>popen</td>
<td>打开进程文件指针</td>
</tr>
<tr>
<td>readfile</td>
<td>输出一个文件</td>
</tr>
<tr>
<td>readlink</td>
<td>返回符号连接指向的目标</td>
</tr>
<tr>
<td>realpath_cache_get</td>
<td>Get realpath cache entries</td>
</tr>
<tr>
<td>realpath_cache_size</td>
<td>Get realpath cache size</td>
</tr>
<tr>
<td>realpath</td>
<td>返回规范化的绝对路径名</td>
</tr>
<tr>
<td>rename</td>
<td>重命名一个文件或目录</td>
</tr>
<tr>
<td>rewind</td>
<td>倒回文件指针的位置</td>
</tr>
<tr>
<td>rmdir</td>
<td>删除目录</td>
</tr>
<tr>
<td>set_file_buffer</td>
<td>stream_set_write_buffer 的别名</td>
</tr>
<tr>
<td>stat</td>
<td>给出文件的信息</td>
</tr>
<tr>
<td>symlink</td>
<td>建立符号连接</td>
</tr>
<tr>
<td>tempnam</td>
<td>建立一个具有唯一文件名的文件</td>
</tr>
<tr>
<td>tmpfile</td>
<td>建立一个临时文件</td>
</tr>
<tr>
<td>touch</td>
<td>设定文件的访问和修改时间</td>
</tr>
<tr>
<td>umask</td>
<td>改变当前的 umask</td>
</tr>
<tr>
<td>unlink</td>
<td>删除文件</td>
</tr>
</tbody>
</table>
<h1 id="GD-Image函数"><a href="#GD-Image函数" class="headerlink" title="GD/Image函数"></a>GD/Image函数</h1><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>gd_info</td>
<td>取得当前安装的 GD 库的信息</td>
</tr>
<tr>
<td>getimagesize</td>
<td>取得图像大小</td>
</tr>
<tr>
<td>getimagesizefromstring</td>
<td>Get the size of an image from a string</td>
</tr>
<tr>
<td>image_type_to_extension</td>
<td>取得图像类型的文件后缀</td>
</tr>
<tr>
<td>image_type_to_mime_type</td>
<td>取得 getimagesize，exif_read_data，exif_thumbnail，exif_imagetype 所返回的图像类型的 MIME 类型</td>
</tr>
<tr>
<td>image2wbmp</td>
<td>以 WBMP 格式将图像输出到浏览器或文件</td>
</tr>
<tr>
<td>imagealphablending</td>
<td>设定图像的混色模式</td>
</tr>
<tr>
<td>imageantialias</td>
<td>是否使用抗锯齿（antialias）功能</td>
</tr>
<tr>
<td>imagearc</td>
<td>画椭圆弧</td>
</tr>
<tr>
<td>imagechar</td>
<td>水平地画一个字符</td>
</tr>
<tr>
<td>imagecharup</td>
<td>垂直地画一个字符</td>
</tr>
<tr>
<td>imagecolorallocate</td>
<td>为一幅图像分配颜色</td>
</tr>
<tr>
<td>imagecolorallocatealpha</td>
<td>为一幅图像分配颜色 + alpha</td>
</tr>
<tr>
<td>imagecolorat</td>
<td>取得某像素的颜色索引值</td>
</tr>
<tr>
<td>imagecolorclosest</td>
<td>取得与指定的颜色最接近的颜色的索引值</td>
</tr>
<tr>
<td>imagecolorclosestalpha</td>
<td>取得与指定的颜色加透明度最接近的颜色</td>
</tr>
<tr>
<td>imagecolorclosesthwb</td>
<td>取得与给定颜色最接近的色度的黑白色的索引</td>
</tr>
<tr>
<td>imagecolordeallocate</td>
<td>取消图像颜色的分配</td>
</tr>
<tr>
<td>imagecolorexact</td>
<td>取得指定颜色的索引值</td>
</tr>
<tr>
<td>imagecolorexactalpha</td>
<td>取得指定的颜色加透明度的索引值</td>
</tr>
<tr>
<td>imagecolormatch</td>
<td>使一个图像中调色板版本的颜色与真彩色版本更能匹配</td>
</tr>
<tr>
<td>imagecolorresolve</td>
<td>取得指定颜色的索引值或有可能得到的最接近的替代值</td>
</tr>
<tr>
<td>imagecolorresolvealpha</td>
<td>取得指定颜色 + alpha 的索引值或有可能得到的最接近的替代值</td>
</tr>
<tr>
<td>imagecolorset</td>
<td>给指定调色板索引设定颜色</td>
</tr>
<tr>
<td>imagecolorsforindex</td>
<td>取得某索引的颜色</td>
</tr>
<tr>
<td>imagecolorstotal</td>
<td>取得一幅图像的调色板中颜色的数目</td>
</tr>
<tr>
<td>imagecolortransparent</td>
<td>将某个颜色定义为透明色</td>
</tr>
<tr>
<td>imageconvolution</td>
<td>用系数 div 和 offset 申请一个 3x3 的卷积矩阵</td>
</tr>
<tr>
<td>imagecopy</td>
<td>拷贝图像的一部分</td>
</tr>
<tr>
<td>imagecopymerge</td>
<td>拷贝并合并图像的一部分</td>
</tr>
<tr>
<td>imagecopymergegray</td>
<td>用灰度拷贝并合并图像的一部分</td>
</tr>
<tr>
<td>imagecopyresampled</td>
<td>重采样拷贝部分图像并调整大小</td>
</tr>
<tr>
<td>imagecopyresized</td>
<td>拷贝部分图像并调整大小</td>
</tr>
<tr>
<td>imagecreate</td>
<td>新建一个基于调色板的图像</td>
</tr>
<tr>
<td>imagecreatefromgd2</td>
<td>从 GD2 文件或 URL 新建一图像</td>
</tr>
<tr>
<td>imagecreatefromgd2part</td>
<td>从给定的 GD2 文件或 URL 中的部分新建一图像</td>
</tr>
<tr>
<td>imagecreatefromgd</td>
<td>从 GD 文件或 URL 新建一图像</td>
</tr>
<tr>
<td>imagecreatefromgif</td>
<td>由文件或URL创建一个新图象</td>
</tr>
<tr>
<td>imagecreatefromjpeg</td>
<td>由文件或URL创建一个新图象</td>
</tr>
<tr>
<td>imagecreatefrompng</td>
<td>由文件或URL创建一个新图象</td>
</tr>
<tr>
<td>imagecreatefromstring</td>
<td>从字符串中的图像流新建一图像</td>
</tr>
<tr>
<td>imagecreatefromwbmp</td>
<td>由文件或URL创建一个新图象</td>
</tr>
<tr>
<td>imagecreatefromxbm</td>
<td>由文件或URL创建一个新图象</td>
</tr>
<tr>
<td>imagecreatefromxpm</td>
<td>由文件或URL创建一个新图象</td>
</tr>
<tr>
<td>imagecreatetruecolor</td>
<td>新建一个真彩色图像</td>
</tr>
<tr>
<td>imagedashedline</td>
<td>画一虚线</td>
</tr>
<tr>
<td>imagedestroy</td>
<td>销毁一图像</td>
</tr>
<tr>
<td>imageellipse</td>
<td>画一个椭圆</td>
</tr>
<tr>
<td>imagefill</td>
<td>区域填充</td>
</tr>
<tr>
<td>imagefilledarc</td>
<td>画一椭圆弧且填充</td>
</tr>
<tr>
<td>imagefilledellipse</td>
<td>画一椭圆并填充</td>
</tr>
<tr>
<td>imagefilledpolygon</td>
<td>画一多边形并填充</td>
</tr>
<tr>
<td>imagefilledrectangle</td>
<td>画一矩形并填充</td>
</tr>
<tr>
<td>imagefilltoborder</td>
<td>区域填充到指定颜色的边界为止</td>
</tr>
<tr>
<td>imagefilter</td>
<td>对图像使用过滤器</td>
</tr>
<tr>
<td>imagefontheight</td>
<td>取得字体高度</td>
</tr>
<tr>
<td>imagefontwidth</td>
<td>取得字体宽度</td>
</tr>
<tr>
<td>imageftbbox</td>
<td>给出一个使用 FreeType 2 字体的文本框</td>
</tr>
<tr>
<td>imagefttext</td>
<td>使用 FreeType 2 字体将文本写入图像</td>
</tr>
<tr>
<td>imagegammacorrect</td>
<td>对 GD 图像应用 gamma 修正</td>
</tr>
<tr>
<td>imagegd2</td>
<td>将 GD2 图像输出到浏览器或文件</td>
</tr>
<tr>
<td>imagegd</td>
<td>将 GD 图像输出到浏览器或文件</td>
</tr>
<tr>
<td>imagegif</td>
<td>输出图象到浏览器或文件</td>
</tr>
<tr>
<td>imagegrabscreen</td>
<td>Captures the whole screen</td>
</tr>
<tr>
<td>imagegrabwindow</td>
<td>Captures a window</td>
</tr>
<tr>
<td>imageinterlace</td>
<td>激活或禁止隔行扫描</td>
</tr>
<tr>
<td>imageistruecolor</td>
<td>检查图像是否为真彩色图像</td>
</tr>
<tr>
<td>imagejpeg</td>
<td>输出图象到浏览器或文件</td>
</tr>
<tr>
<td>imagelayereffect</td>
<td>设定 alpha 混色标志以使用绑定的 libgd 分层效果</td>
</tr>
<tr>
<td>imageline</td>
<td>画一条线段</td>
</tr>
<tr>
<td>imageloadfont</td>
<td>载入一新字体</td>
</tr>
<tr>
<td>imagepalettecopy</td>
<td>将调色板从一幅图像拷贝到另一幅</td>
</tr>
<tr>
<td>imagepng</td>
<td>以 PNG 格式将图像输出到浏览器或文件</td>
</tr>
<tr>
<td>imagepolygon</td>
<td>画一个多边形</td>
</tr>
<tr>
<td>imagepsbbox</td>
<td>给出一个使用 PostScript Type1 字体的文本方框</td>
</tr>
<tr>
<td>imagepsencodefont</td>
<td>改变字体中的字符编码矢量</td>
</tr>
<tr>
<td>imagepsextendfont</td>
<td>扩充或精简字体</td>
</tr>
<tr>
<td>imagepsfreefont</td>
<td>释放一个 PostScript Type 1 字体所占用的内存</td>
</tr>
<tr>
<td>imagepsloadfont</td>
<td>从文件中加载一个 PostScript Type 1 字体</td>
</tr>
<tr>
<td>imagepsslantfont</td>
<td>倾斜某字体</td>
</tr>
<tr>
<td>imagepstext</td>
<td>用 PostScript Type1 字体把文本字符串画在图像上</td>
</tr>
<tr>
<td>imagerectangle</td>
<td>画一个矩形</td>
</tr>
<tr>
<td>imagerotate</td>
<td>用给定角度旋转图像</td>
</tr>
<tr>
<td>imagesavealpha</td>
<td>设置标记以在保存 PNG 图像时保存完整的 alpha 通道信息（与单一透明色相反）</td>
</tr>
<tr>
<td>imagesetbrush</td>
<td>设定画线用的画笔图像</td>
</tr>
<tr>
<td>imagesetpixel</td>
<td>画一个单一像素</td>
</tr>
<tr>
<td>imagesetstyle</td>
<td>设定画线的风格</td>
</tr>
<tr>
<td>imagesetthickness</td>
<td>设定画线的宽度</td>
</tr>
<tr>
<td>imagesettile</td>
<td>设定用于填充的贴图</td>
</tr>
<tr>
<td>imagestring</td>
<td>水平地画一行字符串</td>
</tr>
<tr>
<td>imagestringup</td>
<td>垂直地画一行字符串</td>
</tr>
<tr>
<td>imagesx</td>
<td>取得图像宽度</td>
</tr>
<tr>
<td>imagesy</td>
<td>取得图像高度</td>
</tr>
<tr>
<td>imagetruecolortopalette</td>
<td>将真彩色图像转换为调色板图像</td>
</tr>
<tr>
<td>imagettfbbox</td>
<td>取得使用 TrueType 字体的文本的范围</td>
</tr>
<tr>
<td>imagettftext</td>
<td>用 TrueType 字体向图像写入文本</td>
</tr>
<tr>
<td>imagetypes</td>
<td>返回当前 PHP 版本所支持的图像类型</td>
</tr>
<tr>
<td>imagewbmp</td>
<td>以 WBMP 格式将图像输出到浏览器或文件</td>
</tr>
<tr>
<td>imagexbm</td>
<td>将 XBM 图像输出到浏览器或文件</td>
</tr>
<tr>
<td>iptcembed</td>
<td>将二进制 IPTC 数据嵌入到一幅 JPEG 图像中</td>
</tr>
<tr>
<td>iptcparse</td>
<td>将二进制 IPTC <a href="http://www.iptc.org/" target="_blank" rel="noopener">http://www.iptc.org/</a> 块解析为单个标记</td>
</tr>
<tr>
<td>jpeg2wbmp</td>
<td>将 JPEG 图像文件转换为 WBMP 图像文件</td>
</tr>
<tr>
<td>png2wbmp</td>
<td>将 PNG 图像文件转换为 WBMP 图像文件</td>
</tr>
</tbody>
</table>
<h1 id="session函数"><a href="#session函数" class="headerlink" title="session函数"></a>session函数</h1><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>session_cache_expire</td>
<td>返回当前缓存到期</td>
</tr>
<tr>
<td>session_cache_limiter</td>
<td>get和set the current缓存限制/金</td>
</tr>
<tr>
<td>session_commit</td>
<td>session_write_close 的别名</td>
</tr>
<tr>
<td>session_decode</td>
<td>将会话数据从一个会话编码的字符串</td>
</tr>
<tr>
<td>session_destroy</td>
<td>销毁已注册到会话的所有数据</td>
</tr>
<tr>
<td>session_encode</td>
<td>将当前会话数据编码为一个字符串</td>
</tr>
<tr>
<td>session_get_cookie_params</td>
<td>获得会话饼干参数</td>
</tr>
<tr>
<td>session_id</td>
<td>获得和/或设置当前会话标识</td>
</tr>
<tr>
<td>session_is_registered</td>
<td>检查变量是否在会话中已经注册</td>
</tr>
<tr>
<td>session_module_name</td>
<td>获得和/或设置当前会话模块</td>
</tr>
<tr>
<td>session_name</td>
<td>获得和/或设置当前会话名称</td>
</tr>
<tr>
<td>session_regenerate_id</td>
<td>更新新生成的会话标识</td>
</tr>
<tr>
<td>session_register_shutdown</td>
<td>会话关机功能</td>
</tr>
<tr>
<td>session_register</td>
<td>注册一个或多个全局变量与当前会话</td>
</tr>
<tr>
<td>session_save_path</td>
<td>获取和/或设置当前会话保存路径</td>
</tr>
<tr>
<td>session_set_cookie_params</td>
<td>设置会话饼干参数</td>
</tr>
<tr>
<td>session_set_save_handler</td>
<td>设置用户级会话存储功能</td>
</tr>
<tr>
<td>session_start</td>
<td>开始新的或恢复现有的会话</td>
</tr>
<tr>
<td>session_status</td>
<td>返回当前会话状态</td>
</tr>
<tr>
<td>session_unregister</td>
<td>注销当前会话的一个全局变量</td>
</tr>
<tr>
<td>session_unset</td>
<td>自由所有会话变量</td>
</tr>
<tr>
<td>session_write_close</td>
<td>写会话数据和结束会话</td>
</tr>
</tbody>
</table>
<h1 id="cookie函数"><a href="#cookie函数" class="headerlink" title="cookie函数"></a>cookie函数</h1><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>setcookie</td>
<td>设置cookie</td>
</tr>
<tr>
<td>setrawcookie</td>
<td>发送没有URL编码的cookie</td>
</tr>
</tbody>
</table>
<h1 id="Date-Time-函数"><a href="#Date-Time-函数" class="headerlink" title="Date/Time 函数"></a>Date/Time 函数</h1><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>checkdate</td>
<td>验证一个格里高里日期</td>
</tr>
<tr>
<td>date_add</td>
<td>别名 DateTime::add</td>
</tr>
<tr>
<td>date_create_from_format</td>
<td>别名 DateTime::createFromFormat</td>
</tr>
<tr>
<td>date_create</td>
<td>别名 DateTime::__construct</td>
</tr>
<tr>
<td>date_date_set</td>
<td>别名 DateTime::setDate</td>
</tr>
<tr>
<td>date_default_timezone_get</td>
<td>取得一个脚本中所有日期时间函数所使用的默认时区</td>
</tr>
<tr>
<td>date_default_timezone_set</td>
<td>设定用于一个脚本中所有日期时间函数的默认时区</td>
</tr>
<tr>
<td>date_diff</td>
<td>别名 DateTime::diff</td>
</tr>
<tr>
<td>date_format</td>
<td>别名 DateTime::format</td>
</tr>
<tr>
<td>date_get_last_errors</td>
<td>别名 DateTime::getLastErrors</td>
</tr>
<tr>
<td>date_interval_create_from_date_string</td>
<td>别名 DateInterval::createFromDateString</td>
</tr>
<tr>
<td>date_interval_format</td>
<td>别名 DateInterval::format</td>
</tr>
<tr>
<td>date_isodate_set</td>
<td>别名 DateTime::setISODate</td>
</tr>
<tr>
<td>date_modify</td>
<td>别名 DateTime::modify</td>
</tr>
<tr>
<td>date_offset_get</td>
<td>别名 DateTime::getOffset</td>
</tr>
<tr>
<td>date_parse_from_format</td>
<td>Get info about given date formatted according to the specified format</td>
</tr>
<tr>
<td>date_parse</td>
<td>Returns associative array with detailed info about given date</td>
</tr>
<tr>
<td>date_sub</td>
<td>别名 DateTime::sub</td>
</tr>
<tr>
<td>date_sun_info</td>
<td>Returns an array with information about sunset/sunrise and twilight begin/end</td>
</tr>
<tr>
<td>date_sunrise</td>
<td>返回给定的日期与地点的日出时间</td>
</tr>
<tr>
<td>date_sunset</td>
<td>返回给定的日期与地点的日落时间</td>
</tr>
<tr>
<td>date_time_set</td>
<td>别名 DateTime::setTime</td>
</tr>
<tr>
<td>date_timestamp_get</td>
<td>别名 DateTime::getTimestamp</td>
</tr>
<tr>
<td>date_timestamp_set</td>
<td>别名 DateTime::setTimestamp</td>
</tr>
<tr>
<td>date_timezone_get</td>
<td>别名 DateTime::getTimezone</td>
</tr>
<tr>
<td>date_timezone_set</td>
<td>别名 DateTime::setTimezone</td>
</tr>
<tr>
<td>date</td>
<td>格式化一个本地时间／日期</td>
</tr>
<tr>
<td>getdate</td>
<td>取得日期／时间信息</td>
</tr>
<tr>
<td>gettimeofday</td>
<td>取得当前时间</td>
</tr>
<tr>
<td>gmdate</td>
<td>格式化一个 GMT/UTC 日期／时间</td>
</tr>
<tr>
<td>gmmktime</td>
<td>取得 GMT 日期的 UNIX 时间戳</td>
</tr>
<tr>
<td>gmstrftime</td>
<td>根据区域设置格式化 GMT/UTC 时间／日期</td>
</tr>
<tr>
<td>idate</td>
<td>将本地时间日期格式化为整数</td>
</tr>
<tr>
<td>localtime</td>
<td>取得本地时间</td>
</tr>
<tr>
<td>microtime</td>
<td>返回当前 Unix 时间戳和微秒数</td>
</tr>
<tr>
<td>mktime</td>
<td>取得一个日期的 Unix 时间戳</td>
</tr>
<tr>
<td>strftime</td>
<td>根据区域设置格式化本地时间／日期</td>
</tr>
<tr>
<td>strptime</td>
<td>解析由 strftime 生成的日期／时间</td>
</tr>
<tr>
<td>strtotime</td>
<td>将任何英文文本的日期时间描述解析为 Unix 时间戳</td>
</tr>
<tr>
<td>time</td>
<td>返回当前的 Unix 时间戳</td>
</tr>
<tr>
<td>timezone_abbreviations_list</td>
<td>别名 DateTimeZone::listAbbreviations</td>
</tr>
<tr>
<td>timezone_identifiers_list</td>
<td>别名 DateTimeZone::listIdentifiers</td>
</tr>
<tr>
<td>timezone_location_get</td>
<td>别名 DateTimeZone::getLocation</td>
</tr>
<tr>
<td>timezone_name_from_abbr</td>
<td>Returns the timezone name from abbreviation</td>
</tr>
<tr>
<td>timezone_name_get</td>
<td>别名 DateTimeZone::getName</td>
</tr>
<tr>
<td>timezone_offset_get</td>
<td>别名 DateTimeZone::getOffset</td>
</tr>
<tr>
<td>timezone_open</td>
<td>别名 DateTimeZone::__construct</td>
</tr>
<tr>
<td>timezone_transitions_get</td>
<td>别名 DateTimeZone::getTransitions</td>
</tr>
<tr>
<td>timezone_version_get</td>
<td>Gets the version of the timezonedb</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态代码</title>
    <url>/2019/05/05/HTTP%E7%8A%B6%E6%80%81%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>HTTP 状态代码指示特定 HTTP 请求是否已成功完成。响应分为五类：信息响应，成功响应，重定向，客户端错误和服务器错误。</p>
<a id="more"></a>
<h1 id="常见的状态代码"><a href="#常见的状态代码" class="headerlink" title="常见的状态代码"></a>常见的状态代码</h1><ul>
<li>200 服务器成功返回内容</li>
<li>301/2 永久/临时重定向</li>
<li>304 未修改 Not Modified</li>
<li>307 重定向中保留原始数据</li>
<li>404 请求的页面不存在</li>
<li>500 服务器内部错误</li>
<li>503 服务器暂时不可用</li>
</ul>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1**</td>
<td>信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td>2**</td>
<td>成功，操作被成功接收并处理</td>
</tr>
<tr>
<td>3**</td>
<td>重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td>4**</td>
<td>客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td>5**</td>
<td>服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
</tbody>
</table>
<h1 id="信息响应"><a href="#信息响应" class="headerlink" title="信息响应"></a>信息响应</h1><table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>100 Continue</td>
<td>这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。</td>
</tr>
<tr>
<td>101 Switching Protocol</td>
<td>该代码是响应客户端的 Upgrade 标头发送的，并且指示服务器也正在切换的协议。</td>
</tr>
<tr>
<td>102 Processing</td>
<td>此代码表示服务器已收到并正在处理该请求，但没有响应可用。</td>
</tr>
<tr>
<td>103 Early Hints</td>
<td>此状态代码主要用于与Link 链接头一起使用，以允许用户代理在服务器仍在准备响应时开始预加载资源</td>
</tr>
</tbody>
</table>
<h1 id="成功响应"><a href="#成功响应" class="headerlink" title="成功响应"></a>成功响应</h1><table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>200 OK</td>
<td>请求成功。成功的含义取决于HTTP方法：GET：资源已被提取并在消息正文中传输。HEAD：实体标头位于消息正文中。POST：描述动作结果的资源在消息体中传输。TRACE：消息正文包含服务器收到的请求消息</td>
</tr>
<tr>
<td>201 Created</td>
<td>该请求已成功，并因此创建了一个新的资源。这通常是在PUT请求之后发送的响应。</td>
</tr>
<tr>
<td>202 Accepted</td>
<td>请求已经接收到，但还未响应，没有结果。意味着不会有一个异步的响应去表明当前请求的结果，预期另外的进程和服务去处理请求，或者批处理。</td>
</tr>
<tr>
<td>203 Non-Authoritative Information</td>
<td>服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</td>
</tr>
<tr>
<td>204 No Content</td>
<td>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</td>
</tr>
<tr>
<td>205 Reset Content</td>
<td>服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</td>
</tr>
<tr>
<td>206 Partial Content</td>
<td>服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。</td>
</tr>
<tr>
<td>207 Multi-Status</td>
<td>由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</td>
</tr>
<tr>
<td>208 Multi-Status</td>
<td>在 DAV 里面使用: propstat 响应元素以避免重复枚举多个绑定的内部成员到同一个集合。</td>
</tr>
<tr>
<td>226 IM Used</td>
<td>服务器已经完成了对资源的 GET 请求，并且响应是对当前实例应用的一个或多个实例操作结果的表示。</td>
</tr>
</tbody>
</table>
<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>300 Multiple Choice</td>
<td>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</td>
</tr>
<tr>
<td>301 Moved Permanently</td>
<td>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。</td>
</tr>
<tr>
<td>302 Found</td>
<td>请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</td>
</tr>
<tr>
<td>303 See Other</td>
<td>对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。</td>
</tr>
<tr>
<td>304 Not Modified</td>
<td>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。</td>
</tr>
<tr>
<td><del>305 Use Proxy</del></td>
<td>被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。</td>
</tr>
<tr>
<td><del>306 unused</del></td>
<td>在最新版的规范中，306 状态码已经不再被使用。</td>
</tr>
<tr>
<td>307 Temporary Redirect</td>
<td>请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</td>
</tr>
<tr>
<td>308 Permanent Redirect</td>
<td>这意味着资源现在永久位于由 Location: HTTP Response 标头指定的另一个 URI。 这与 301 Moved Permanently HTTP 响应代码具有相同的语义，但用户代理不能更改所使用的 HTTP 方法：如果在第一个请求中使用 POST，则必须在第二个请求中使用 POST。</td>
</tr>
</tbody>
</table>
<h1 id="客户端响应"><a href="#客户端响应" class="headerlink" title="客户端响应"></a>客户端响应</h1><table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>400 Bad Request</td>
<td>1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。2、请求参数有误。</td>
</tr>
<tr>
<td>401 Unauthorized</td>
<td>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。</td>
</tr>
<tr>
<td><del>402 Payment Required</del></td>
<td>此响应码保留以便将来使用，创造此响应码的最初目的是用于数字支付系统，然而现在并未使用</td>
</tr>
<tr>
<td>403 Forbidden</td>
<td>服务器已经理解请求，但是拒绝执行它。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个 404 响应，假如它不希望让客户端获得任何信息。</td>
</tr>
<tr>
<td>404 Not Found</td>
<td>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</td>
</tr>
<tr>
<td>405 Method Not Allowed</td>
<td>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</td>
</tr>
<tr>
<td>406 Not Acceptable</td>
<td>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。</td>
</tr>
<tr>
<td>407 Proxy Authentication Required</td>
<td>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。</td>
</tr>
<tr>
<td>408 Request Timeout</td>
<td>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</td>
</tr>
<tr>
<td>409 Conflict</td>
<td>由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。</td>
</tr>
<tr>
<td>410 Gone</td>
<td>被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用 404 状态码。除非额外说明，否则这个响应是可缓存的。</td>
</tr>
<tr>
<td>411 Length Required</td>
<td>服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</td>
</tr>
<tr>
<td>412 Precondition Failed</td>
<td>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</td>
</tr>
<tr>
<td>413 Payload Too Large</td>
<td>服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</td>
</tr>
<tr>
<td>414 URI Too Long</td>
<td>请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。</td>
</tr>
<tr>
<td>415 Unsupported Media Type</td>
<td>对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</td>
</tr>
<tr>
<td>416 Requested Range Not Satisfiable</td>
<td>如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。</td>
</tr>
<tr>
<td>417 Expectation Failed</td>
<td>此响应代码意味着服务器无法满足 Expect 请求标头字段指示的期望值。</td>
</tr>
<tr>
<td>418 I’m a teapot</td>
<td>服务器拒绝尝试用 “茶壶冲泡咖啡”。</td>
</tr>
<tr>
<td>421 Misdirected Request</td>
<td>该请求针对的是无法产生响应的服务器。 这可以由服务器发送，该服务器未配置为针对包含在请求 URI 中的方案和权限的组合产生响应。</td>
</tr>
<tr>
<td>422 Unprocessable Entity</td>
<td>请求格式良好，但由于语义错误而无法遵循。</td>
</tr>
<tr>
<td>423 Locked</td>
<td>正在访问的资源被锁定</td>
</tr>
<tr>
<td>424 Failed Dependency</td>
<td>由于先前的请求失败，所以此次请求失败。</td>
</tr>
<tr>
<td>425 Too Early</td>
<td>服务器不愿意冒着风险去处理可能重播的请求.</td>
</tr>
<tr>
<td>426 Upgrade Required</td>
<td>服务器拒绝使用当前协议执行请求，但可能在客户机升级到其他协议后愿意这样做。 服务器在 426 响应中发送 Upgrade 头以指示所需的协议。</td>
</tr>
<tr>
<td>428 Precondition Required</td>
<td>原始服务器要求该请求是有条件的。 旨在防止“丢失更新”问题，即客户端获取资源状态，修改该状态并将其返回服务器，同时第三方修改服务器上的状态，从而导致冲突。</td>
</tr>
<tr>
<td>429 Too Many Requests</td>
<td>用户在给定的时间内发送了太多请求（“限制请求速率”）。</td>
</tr>
<tr>
<td>431 Request Header Fields Too Large</td>
<td>服务器不愿意处理请求，因为它的 请求头字段太大（ Request Header Fields Too Large）。 请求可以在减小请求头字段的大小后重新提交。</td>
</tr>
<tr>
<td>451 Unavailable For Legal Reasons</td>
<td>用户请求非法资源，例如：由政府审查的网页。</td>
</tr>
</tbody>
</table>
<h1 id="服务端响应"><a href="#服务端响应" class="headerlink" title="服务端响应"></a>服务端响应</h1><table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>500 Internal Server Error</td>
<td>服务器遇到了不知道如何处理的情况。</td>
</tr>
<tr>
<td>501 Not Implemented</td>
<td>此请求方法不被服务器支持且无法被处理。只有GET和HEAD是要求服务器支持的，它们必定不会返回此错误代码。</td>
</tr>
<tr>
<td>502 Bad Gateway</td>
<td>此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应。</td>
</tr>
<tr>
<td>503 Service Unavailable</td>
<td>服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机。 请注意，与此响应一起，应发送解释问题的用户友好页面。 这个响应应该用于临时条件和 Retry-After：如果可能的话，HTTP头应该包含恢复服务之前的估计时间。 网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。</td>
</tr>
<tr>
<td>504 Gateway Timeout</td>
<td>当服务器作为网关，不能及时得到响应时返回此错误代码。</td>
</tr>
<tr>
<td>505 HTTP Version Not Supported</td>
<td>服务器不支持请求中所使用的HTTP协议版本。</td>
</tr>
<tr>
<td>506 Variant Also Negotiates</td>
<td>服务器有一个内部配置错误：对请求的透明内容协商导致循环引用。</td>
</tr>
<tr>
<td>507 Insufficient Storage</td>
<td>服务器有内部配置错误：所选的变体资源被配置为参与透明内容协商本身，因此不是协商过程中的适当端点。</td>
</tr>
<tr>
<td>508 Loop Detected</td>
<td>服务器在处理请求时检测到无限循环。</td>
</tr>
<tr>
<td>510 Not Extended</td>
<td>客户端需要对请求进一步扩展，服务器才能实现它。服务器会回复客户端发出扩展请求所需的所有信息。</td>
</tr>
<tr>
<td>511 Network Authentication Required</td>
<td>511 状态码指示客户端需要进行身份验证才能获得网络访问权限。</td>
</tr>
</tbody>
</table>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac Homebrew常用命令</title>
    <url>/2019/05/04/Mac-Homebrew%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Homebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 使用命令，非常方便。</p>
<a id="more"></a>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew --<span class="built_in">help</span>        <span class="comment">#简洁命令帮助</span></span><br><span class="line">$ man brew           <span class="comment">#完整命令帮助</span></span><br><span class="line">$ brew install git   <span class="comment">#安装软件包(这里是示例安装的Git版本控制)</span></span><br><span class="line">$ brew uninstall git <span class="comment">#卸载软件包</span></span><br><span class="line">$ brew search git    <span class="comment">#搜索软件包</span></span><br><span class="line">$ brew list          <span class="comment">#显示已经安装的所有软件包</span></span><br><span class="line">$ brew update        <span class="comment">#同步远程最新更新情况，对本机已经安装并有更新的软件用*标明</span></span><br><span class="line">$ brew outdated      <span class="comment">#查看已安装的哪些软件包需要更新</span></span><br><span class="line">$ brew upgrade git   <span class="comment">#更新单个软件包</span></span><br><span class="line">$ brew info git      <span class="comment">#查看软件包信息</span></span><br><span class="line">$ brew home git      <span class="comment">#访问软件包官方站</span></span><br><span class="line">$ brew cleanup       <span class="comment">#清理所有已安装软件包的历史老版本</span></span><br><span class="line">$ brew cleanup git   <span class="comment">#清理单个已安装软件包的历史版本</span></span><br><span class="line">$ brew tap           <span class="comment">#可以为brew的软件的 跟踪,更新,安装添加更多的的tap formulae</span></span><br></pre></td></tr></table></figure>
<h1 id="程序安装路径及文件夹"><a href="#程序安装路径及文件夹" class="headerlink" title="程序安装路径及文件夹"></a>程序安装路径及文件夹</h1><ul>
<li>bin          #用于存放所安装程序的启动链接（相当于快捷方式）</li>
<li>Cellar       #所有brew安装的程序，都将以[程序名/版本号]存放于本目录下</li>
<li>etc          #brew安装程序的配置文件默认存放路径</li>
<li>Library      #Homebrew 系统自身文件夹<ul>
<li>Formula     #程序的下载路径和编译参数及安装路径等配置文件存放地</li>
<li>Homebrew    #brew程序自身命令集</li>
</ul>
</li>
</ul>
<h1 id="替换及重置Homebrew默认源"><a href="#替换及重置Homebrew默认源" class="headerlink" title="替换及重置Homebrew默认源"></a>替换及重置Homebrew默认源</h1><ul>
<li>替换brew.git:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure>
<p>​    <strong>可选镜像源：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://git.coding.net/homebrew/homebrew.git - Coding</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git - 清华</span><br><span class="line">https://mirrors.ustc.edu.cn/brew.git - 中科大</span><br></pre></td></tr></table></figure>
<ul>
<li>替换homebrew-core.git:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>
<ul>
<li>重置brew.git:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/brew.git</span><br></pre></td></tr></table></figure>
<ul>
<li>重置homebrew-core.git:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>
<h1 id="LaunchRocket"><a href="#LaunchRocket" class="headerlink" title="LaunchRocket"></a>LaunchRocket</h1><p>LaunchRecket是管理homebrew所安装应用的一个管理器，它在系统设置中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line">brew cask install launchrocket</span><br><span class="line"><span class="comment"># uninstall</span></span><br><span class="line">brew cask uninstall launchrocket</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/jimbojsb/launchrocket" target="_blank" rel="noopener">https://github.com/jimbojsb/launchrocket</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>Homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS Apache配置</title>
    <url>/2019/05/04/MacOS-Apache%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>macOS Mojave 10.14.4</li>
<li>Apache/2.4.38</li>
</ul>
<a id="more"></a>
<h1 id="查看Apache"><a href="#查看Apache" class="headerlink" title="查看Apache"></a>查看Apache</h1><p>macOS系统自带Apache软件，我们直接在命令行下查看Apache版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ httpd -v</span><br><span class="line">Server version: Apache/2.4.38 (Unix)</span><br><span class="line">Server built:   Feb 10 2019 02:48:38</span><br></pre></td></tr></table></figure>
<h1 id="启动Apache"><a href="#启动Apache" class="headerlink" title="启动Apache"></a>启动Apache</h1><p>命令行直接启动，如果是普通用户下需要<code>sudo</code>，普通用户没有权限操作<code>apachectl</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apachectl start</span><br><span class="line">$ sudo apachectl stop</span><br><span class="line">$ sudo apachectl restart</span><br></pre></td></tr></table></figure>
<p>mac 下 <code>Apache</code> 默认的目录在 <code>/Library/WebServer</code> 下</p>
<h1 id="开启Apache多用户主目录"><a href="#开启Apache多用户主目录" class="headerlink" title="开启Apache多用户主目录"></a>开启Apache多用户主目录</h1><p>执行 <code>sudo vim /etc/apache2/httpd.conf</code> 打开 <code>httpd.conf</code> 文件，然后查找 <code>userdir</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># User home directories</span><br><span class="line">#Include /private/etc/apache2/extra/httpd-userdir.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#LoadModule userdir_module libexec/apache2/mod_userdir.so</span><br></pre></td></tr></table></figure>
<p>去掉前面<code>#</code>注释即可。</p>
<p>接着再编辑 <code>/private/etc/apache2/extra/httpd-userdir.conf</code> 文件，增加内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UserDir Sites</span><br></pre></td></tr></table></figure>
<p>如果有则不用添加了。</p>
<h1 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h1><p>执行 <code>sudo vim /etc/apache2/httpd.conf</code>，查找<code>vhost</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Virtual hosts</span><br><span class="line">#Include /private/etc/apache2/extra/httpd-vhosts.conf</span><br></pre></td></tr></table></figure>
<p>去掉前面<code>#</code>注释即可。再修改<code>/private/etc/apache2/extra/httpd-vhosts.conf</code>配置即可。</p>
<h1 id="使用Homebrew代替自带的"><a href="#使用Homebrew代替自带的" class="headerlink" title="使用Homebrew代替自带的"></a>使用Homebrew代替自带的</h1><p>由于之前不知道搞了什么，自带的怎么更改都不生效，所以重新安装了。</p>
<h2 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew tap homebrew/apache</span><br><span class="line">$ brew tap homebrew/php</span><br><span class="line">$ brew install httpd</span><br></pre></td></tr></table></figure>
<h2 id="配置apache"><a href="#配置apache" class="headerlink" title="配置apache"></a>配置apache</h2><p>配置文件路径为<code>/usr/local/etc/httpd/httpd.conf</code>，配置的方法和上述自带无差别。只是配置路径发生了变化。</p>
<h2 id="配置PHP模块"><a href="#配置PHP模块" class="headerlink" title="配置PHP模块"></a>配置PHP模块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LoadModule php7_module /usr/local/Cellar/php@7.1/7.1.26/lib/httpd/modules/libphp7.so</span><br><span class="line">&lt;IfModule mod_php7.c&gt;</span><br><span class="line"></span><br><span class="line">    AddType application/x-httpd-php .php</span><br><span class="line">    AddType application/x-httpd-php-source .phps</span><br><span class="line"></span><br><span class="line">    &lt;IfModule mod_dir.c&gt;</span><br><span class="line">        DirectoryIndex index.html index.php</span><br><span class="line">    &lt;/IfModule&gt;</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<p>找到所在php的so文件添加进配置即可，php版本可根据自己需要更改。</p>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache配置文件详解</title>
    <url>/2019/04/29/Apache%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Centos7</li>
<li>Apache/2.4.38</li>
</ul>
<a id="more"></a>
<h1 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h1><p>找到apache所在的配置文件，在本文环境下即centos7以yum源安装的httpd所在的配置环境路径为<code>/etc/httpd/conf</code>。也可以使用命令找到该配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo find / -name <span class="string">'httpd.conf'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>以下以本文中的配置路径为准，其他系统下路径可能不一致。<br>在 Ubnutu/Mac 上，apache 服务叫 apache2，而不是 httpd（在 Centos 上叫 httpd），主配置文件为 /etc/apache2/apache2.conf</p>
</blockquote>
<h1 id="Apache配置文件"><a href="#Apache配置文件" class="headerlink" title="Apache配置文件"></a>Apache配置文件</h1><p>Apache提供了灵活的web服务配置，理解其参数的含义很重要。</p>
<p>Apache配置文件中英文对照：<a href="http://www.cnblogs.com/adamite/p/apache_configuration.html" target="_blank" rel="noopener">http://www.cnblogs.com/adamite/p/apache_configuration.html</a></p>
<h2 id="Apache主目录"><a href="#Apache主目录" class="headerlink" title="Apache主目录"></a>Apache主目录</h2><p><code>ServerRoot &quot;/etc/httpd&quot;</code></p>
<h2 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h2><p><code>Listen 80</code></p>
<h2 id="加载动态模块"><a href="#加载动态模块" class="headerlink" title="加载动态模块"></a>加载动态模块</h2><p><code>LoadModule php5_module modules/libphp5.so</code></p>
<p>或者加载动态模块的配置文件</p>
<p><code>Include conf.modules.d/*.conf</code></p>
<h2 id="Apache的进程执行者"><a href="#Apache的进程执行者" class="headerlink" title="Apache的进程执行者"></a>Apache的进程执行者</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User apache</span><br><span class="line">Group apache</span><br></pre></td></tr></table></figure>
<h2 id="服务器域名"><a href="#服务器域名" class="headerlink" title="服务器域名"></a>服务器域名</h2><p>该项可配置也可不配置 <code>ServerName www.example.com:80</code></p>
<h2 id="网站根目录"><a href="#网站根目录" class="headerlink" title="网站根目录"></a>网站根目录</h2><p><code>DocumentRoot &quot;/var/www/html&quot;</code></p>
<h2 id="设置网站根目录的访问权限"><a href="#设置网站根目录的访问权限" class="headerlink" title="设置网站根目录的访问权限"></a>设置网站根目录的访问权限</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">    #</span><br><span class="line">    # Possible values for the Options directive are &quot;None&quot;, &quot;All&quot;,</span><br><span class="line">    # or any combination of:</span><br><span class="line">    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews</span><br><span class="line">    #</span><br><span class="line">    # Note that &quot;MultiViews&quot; must be named *explicitly* --- &quot;Options All&quot;</span><br><span class="line">    # doesn&apos;t give it to you.</span><br><span class="line">    #</span><br><span class="line">    # The Options directive is both complicated and important.  Please see</span><br><span class="line">    # http://httpd.apache.org/docs/2.4/mod/core.html#options</span><br><span class="line">    # for more information.</span><br><span class="line">    #</span><br><span class="line">    Options Indexes FollowSymLinks</span><br><span class="line"></span><br><span class="line">    #</span><br><span class="line">    # AllowOverride controls what directives may be placed in .htaccess files.</span><br><span class="line">    # It can be &quot;All&quot;, &quot;None&quot;, or any combination of the keywords:</span><br><span class="line">    #   Options FileInfo AuthConfig Limit</span><br><span class="line">    #</span><br><span class="line">    AllowOverride None</span><br><span class="line"></span><br><span class="line">    #</span><br><span class="line">    # Controls who can get stuff from this server.</span><br><span class="line">    #</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<p><strong>参数详解</strong></p>
<ul>
<li><code>Allow from all</code> 参数允许所有人访问<code>/var/www/html</code>下的资源</li>
<li><code>Deny from all</code> 参数拒绝所有人访问<code>/var/www/html</code>下的资源</li>
<li><code>Options Indexes</code> 参数:访问目录时,如果不存在默认首页则展示站点列表 该行建议改成 Options None</li>
<li><code>Options FollowSymLinks</code> 参数:是否允许快捷方式(ln -s 软连接)</li>
<li><code>Options MultiViews</code> 多视图,访问<code>/index</code>等同访问<code>index.php</code>或<code>index.html</code></li>
</ul>
<h3 id="Apache服务器访问权限控制包括"><a href="#Apache服务器访问权限控制包括" class="headerlink" title="Apache服务器访问权限控制包括:"></a>Apache服务器访问权限控制包括:</h3><h4 id="Apache-服务权限"><a href="#Apache-服务权限" class="headerlink" title="Apache 服务权限"></a>Apache 服务权限</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deny from all (**403 forbidden** error!)</span><br><span class="line">allow from all</span><br></pre></td></tr></table></figure>
<h4 id="Linux-系统权限"><a href="#Linux-系统权限" class="headerlink" title="Linux 系统权限"></a>Linux 系统权限</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selinux</span><br><span class="line">iptables</span><br><span class="line">httpd进程执行者对根目录的权限(**403 forbidden** error!)</span><br></pre></td></tr></table></figure>
<h2 id="设置目录默认首页"><a href="#设置目录默认首页" class="headerlink" title="设置目录默认首页"></a>设置目录默认首页</h2><p>优先级从左往右依次降低</p>
<p><code>DirectoryIndex index.html index.php</code></p>
<h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><p><code>ErrorLog &quot;logs/error_log&quot;</code></p>
<h2 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h2><p><code>CustomLog &quot;logs/access_log&quot; common</code></p>
<h2 id="解析php脚本"><a href="#解析php脚本" class="headerlink" title="解析php脚本"></a>解析php脚本</h2><p><code>AddType application/x-httpd-php .php</code></p>
<h2 id="控制错误页面的输出"><a href="#控制错误页面的输出" class="headerlink" title="控制错误页面的输出"></a>控制错误页面的输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ErrorDocument 500 &quot;The server made a boo boo.&quot;</span><br><span class="line">#ErrorDocument 404 /missing.html</span><br><span class="line">#ErrorDocument 404 &quot;/cgi-bin/missing_handler.pl&quot;</span><br><span class="line">#ErrorDocument 402 http://www.example.com/subscription_info.html</span><br></pre></td></tr></table></figure>
<h2 id="包含外部配置文件"><a href="#包含外部配置文件" class="headerlink" title="包含外部配置文件"></a>包含外部配置文件</h2><p><code>Include extra/httpd-vhosts.conf</code></p>
<h2 id="虚拟目录"><a href="#虚拟目录" class="headerlink" title="虚拟目录"></a>虚拟目录</h2><p><code>http://localhost/mnt</code> mnt目录并不在网站根目录下,目录资源在<code>/tmp/mnt</code>目录下 在<code>/usr/local/apache2/etc/http.conf</code>文件里增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alias /mnt &quot;/mnt/www&quot; # 虚拟目录（目录别名）</span><br><span class="line">&lt;Directory &quot;/mnt/www&quot;&gt;</span><br><span class="line">    Options none</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Deny from all # 拒绝所有</span><br><span class="line">    Allow from all # 允许所有</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<p><code>http://localhost/mnt</code> 重启apache后访问的资源便是 <code>/mnt/www</code>目录下的资源</p>
<h1 id="Apache虚拟主机配置"><a href="#Apache虚拟主机配置" class="headerlink" title="Apache虚拟主机配置"></a>Apache虚拟主机配置</h1><p>基于域名的虚拟主机，指定服务器IP（和可能的端口）使主机接受请求。用<code>NameVirtualHost</code>进行配置。 如果服务器上所有的IP地址都会用到，可以用<code>*</code>作为<code>NameVirtualHost</code>的参数。在<code>NameVirtualHost</code>指令中指明IP地址不会使服务器自动侦听那个IP地址。</p>
<h2 id="找到Apache的主配置文件httpd-conf"><a href="#找到Apache的主配置文件httpd-conf" class="headerlink" title="找到Apache的主配置文件httpd.conf"></a>找到Apache的主配置文件<code>httpd.conf</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd /etc/httpd/conf</span><br><span class="line">$ vim httpd.conf</span><br></pre></td></tr></table></figure>
<p>我们搜索关键字<code>vhosts</code>，如果没有则在文件后添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Load vhost-config files in the &quot;/etc/httpd/vhost-conf.d&quot; directory if any</span><br><span class="line">Include vhost.d/*.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>不使用官方原版的单个配置文件有个好处是 每个虚拟主机配置独立开来 减少操作的误差</p>
</blockquote>
<p>然后我们到<code>/etc/httpd/</code>目录下创建<code>vhost.d</code>文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir vhost.d</span><br><span class="line">$ <span class="built_in">cd</span> vhost.d</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/etc/httpd/vhost.d</span><br><span class="line">$ vim www_sweetlover_cn_net.conf</span><br></pre></td></tr></table></figure>
<p><strong>添加以下内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin zjyzy@www.sweetlover.net.cn</span><br><span class="line">    DocumentRoot /var/www/html/sweetlover</span><br><span class="line">    ServerName www.sweetlover.net.cn</span><br><span class="line">    RewriteEngine On</span><br><span class="line">    Options All</span><br><span class="line">    &lt;Directory &quot;/var/www/html/sweetlover&quot;&gt;</span><br><span class="line">        # Options -Indexes FollowSymLinks </span><br><span class="line">        # 为了服务器的安全 Indexes参数一般要取消</span><br><span class="line">        Options FollowSymLinks </span><br><span class="line">        AllowOverride All</span><br><span class="line">        Allow from all</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">    ErrorLog logs/www_sweetlover_net_cn-error_log</span><br><span class="line">    CustomLog logs/www_sweetlover_net_cn-access_log common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p><strong>再次修改主配置文件<code>httpd.conf</code>,找到<code>Listen 80</code>，添加以下代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Listen 80</span><br><span class="line">NameVirtualHost *:80</span><br></pre></td></tr></table></figure>
<p><strong>我们再配置一个同域名下不同端口虚拟主机，配置<code>8080</code>端口下的</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/httpd/vhost.d</span><br><span class="line">$ vim www_sweetlover_net_cn_8080.conf</span><br></pre></td></tr></table></figure>
<p>针对<code>www_sweetlover_cn_net.conf</code>改变相应的配置，即修改<code>ServerName</code>为<code>www.sweetlover.net.cn:8080</code>，<code>DocumentRoot</code>和<code>Directory</code>修改为<code>/var/www/html/sweetlover@8080</code>。</p>
<p><strong>修改主配置文件，添加</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Listen 8080</span><br><span class="line">NameVirtualHost *:8080</span><br></pre></td></tr></table></figure>
<blockquote>
<p>由于环境下为虚拟机环境，直接访问ip加端口号即可访问到配置的网站。在上述配置的DocumentRoot下创建index.html或者index.php即可访问网页。</p>
</blockquote>
<p><strong>如果出现该错误</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[warn] default VirtualHost overlap on port 80, the first has precedence</span><br></pre></td></tr></table></figure>
<blockquote>
<p>打开apache主配置文件在任意位置添加一行,在 40行的Listion:80后添加一行内容如下:<code>NameVirtualHost *:80</code></p>
</blockquote>
<blockquote>
<p>如果使用源码编译安装的，直接去掉注释即可，然后再修改配置文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#LoadModule vhost_alias_module libexec/apache2/mod_vhost_alias.so</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Virtual hosts</span><br><span class="line">#Include /private/etc/apache2/extra/httpd-vhosts.conf</span><br></pre></td></tr></table></figure>
<p>去掉前面<code>#</code>注释即可。再修改<code>/private/etc/apache2/extra/httpd-vhosts.conf</code>配置即可。</p>
<h1 id="Apache常见错误"><a href="#Apache常见错误" class="headerlink" title="Apache常见错误"></a>Apache常见错误</h1><h2 id="ServerName配置未填写或错误"><a href="#ServerName配置未填写或错误" class="headerlink" title="ServerName配置未填写或错误"></a>ServerName配置未填写或错误</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">httpd: Could not reliably determine the server<span class="string">'s fully qualified domain name, using luo.centos6.5 for ServerName</span></span><br></pre></td></tr></table></figure>
<p>在Apache主配置文件<code>httpd.conf</code>的98行左右<code>#ServerName www.example.com:80</code>前面的<code>#</code>去掉，换成自己的域名或者ip地址。<br>例如：修改为<code>ServerName localhost:80</code>或者<code>ServerName 127.0.0.1:80</code></p>
<h2 id="403-Forbidden错误"><a href="#403-Forbidden错误" class="headerlink" title="403 Forbidden错误"></a>403 Forbidden错误</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">403 - Forbidden（禁止访问）,服务器拒绝请求</span><br><span class="line">    - forbidden request (matches a deny filter) =&gt; HTTP 403</span><br><span class="line">    - The request was a legal request, but the server is refusing to respond to it.</span><br></pre></td></tr></table></figure>
<p><strong>原因1：apache的配置文件没有对站点目录许可</strong></p>
<p>apache配置文件中没有对站点目录的权限许可配置，这通常是在初始化安装apahce后，更改了默认的apache站点目录导致。</p>
<p>解决办法可能是：通过给主配置文件增加<code>&lt;Directory &quot;/var/www/html&quot;&gt;&lt;/Directory&gt;</code>标签实现对指定目录的权限控制<br>典型如下(对/var/www目录下的文件允许访问)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www&quot;&gt;</span><br><span class="line">    Options -Indexes FollowSymLinks # 为了服务器的安全 Indexes参数一般要取消</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny # 允许未被明确拒绝的</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<p><strong>原因2：站点目录下没有首页文件，而apache 的配置又禁止了目录的浏览</strong></p>
<p>站点目录下没有首页文件(index.php、index.html等默认文件)，而apache的配置又禁止了目录浏览（#Indexes参数:访问目录时,如果不存在默认首页则展示站点列表，该行建议改成<code>Options None</code>，也会提示403错误。<br>解决办法：在站点目录添加默认首页文件或者将配置文件中<code>Options Index</code>增加上。</p>
<p><strong>原因3：deny from all 禁用了所有来访者访问</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www&quot;&gt;</span><br><span class="line">    Options -Indexes FollowSymLinks # 为了服务器的安全 Indexes参数一般要取消</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny # 允许未被明确拒绝的</span><br><span class="line">    Deny from all</span><br><span class="line">    # Deny from </span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<p><strong>解决办法：</strong>参考原因2解决方法配置<code>&lt;Directory &gt;&lt;/Directory&gt;</code>参数。</p>
<p><strong>站点目录权限问题</strong></p>
<p>站点目录需要apache的用户有访问权限，否则就会报403错误(一般web站点目录权限给755，站点文件权限给644，上传程序通过另外的上传服务器提供文件上传)。</p>
<h1 id="Apache服务器优化"><a href="#Apache服务器优化" class="headerlink" title="Apache服务器优化"></a>Apache服务器优化</h1><h2 id="错误页面优雅显示"><a href="#错误页面优雅显示" class="headerlink" title="错误页面优雅显示"></a>错误页面优雅显示</h2><p>可以将404 500等的错误信息页面重定向到网站首页或其他页面，提升用户体验。</p>
<p>编辑apache主配置文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim httpd.conf</span><br></pre></td></tr></table></figure></p>
<p>修改如下内容<code>ErrorDocument 404 http://www.domain.com</code></p>
<h2 id="mod-defalte文件压缩功能"><a href="#mod-defalte文件压缩功能" class="headerlink" title="mod_defalte文件压缩功能"></a><code>mod_defalte</code>文件压缩功能</h2><p>gzip是把文件先在服务器端进行压缩然后再传输，传输完毕后浏览器会重新对压缩过得内容进行解压缩。这样可以显著减少文件传输的大小，没有特殊情况，所有的文本内容都应该被gzip压缩（html,css,js,xml,txt..）</p>
<p>添加如下内容到<code>httpd.conf</code>或者<code>vhost.conf</code>中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ifmodule mod_deflate.c&gt;</span><br><span class="line">    DeflateCompressionLevel 9</span><br><span class="line">    SetOutputFilter DEFLATE</span><br><span class="line">    AddOutputFilterByType DEFLATE text/html text/plain text/xml</span><br><span class="line">    AddOutputFilterByType DEFLATE application/javscript</span><br><span class="line">    AddOutputFilterByType DEFLATE text/css</span><br><span class="line">&lt;/ifmodule&gt;</span><br></pre></td></tr></table></figure>
<h2 id="更改apache的默认用户"><a href="#更改apache的默认用户" class="headerlink" title="更改apache的默认用户"></a>更改apache的默认用户</h2><p>创建apache用户，用于子进程和线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ useradd -M -s /sbin/nologin webadmin</span><br></pre></td></tr></table></figure>
<p>编辑apache的主配置文件,添加或者修改如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User webadmin</span><br><span class="line">Group webadmin</span><br></pre></td></tr></table></figure>
<h2 id="开启apache防盗链功能"><a href="#开启apache防盗链功能" class="headerlink" title="开启apache防盗链功能"></a>开启apache防盗链功能</h2><p>主配置文件中增加如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;IfModule rewrite_module&gt;</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://domain.com/.*$ [NC]</span><br><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; !^http://www.domain.com/.*$ [NC]</span><br><span class="line"></span><br><span class="line">RewriteRule .*\.(gif|jpg|swf)$ http://www.domain.com [R,NC]</span><br><span class="line"># RewriteRule .*\.(gif|jpg|swf)$ http://www.domain.com/about/no.png [R,NC]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>
<h2 id="禁止目录Index"><a href="#禁止目录Index" class="headerlink" title="禁止目录Index"></a>禁止目录Index</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">    Options -Indexes FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">    Options FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<h2 id="禁止用户覆盖-重载-配置文件"><a href="#禁止用户覆盖-重载-配置文件" class="headerlink" title="禁止用户覆盖(重载)配置文件"></a>禁止用户覆盖(重载)配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">    Options FollowSymLinks</span><br><span class="line">    AllowOverride None  # 禁止用户覆盖(重载)配置文件, All即为开启</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<h2 id="关闭CGI-Common-Gateway-Interface-通用网关接口"><a href="#关闭CGI-Common-Gateway-Interface-通用网关接口" class="headerlink" title="关闭CGI(Common Gateway Interface 通用网关接口)"></a>关闭CGI(Common Gateway Interface 通用网关接口)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;IfModule alias_module&gt;</span><br><span class="line">ScriptAlias /cgi-bin/ &quot;/var/www/cgi-bin/&quot;</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line">&lt;Directory &quot;/var/www/cgi-bin&quot;&gt;</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Options None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<h2 id="避免使用-htaccess文件-分布式配置文件"><a href="#避免使用-htaccess文件-分布式配置文件" class="headerlink" title="避免使用.htaccess文件(分布式配置文件)"></a>避免使用.htaccess文件(分布式配置文件)</h2><p><strong>默认选项：</strong><code>AccessFileName .htaccess</code> 改为 <code># AccessFileName .htaccess</code></p>
<p>先考虑性能，如果AllowOverride启用了.haccess文件，则apache需要在每个目录中查找.htaccess文件，因此无论是否真正用到启用.htaccess文件都会导致服务器性能的下降。<br>　　另外对于每一个请求，都需要读取一次.htaccess文件。<br>　　其次是安全考虑，这样会允许用户自己修改服务器的配置，这可能会导致某些意想不到的修改，所以请认真考虑是否应道给予用户这样的特权。</p>
<blockquote>
<p>PHP开启路由重写下需要使用</p>
</blockquote>
<h2 id="apache-的安全模块"><a href="#apache-的安全模块" class="headerlink" title="apache 的安全模块"></a>apache 的安全模块</h2><p><code>mod_evasive20</code>( 防DDOS攻击)<br><code>mod_limittipconn</code>(针对单站点)配置<br><code>mod_security</code>(防止SQL注入)</p>
<h2 id="apache日志授予root-700权限"><a href="#apache日志授予root-700权限" class="headerlink" title="apache日志授予root 700权限"></a>apache日志授予root 700权限</h2><p><strong>不需要在日志目录给apache用户读或者写权限许可，因为apache的初始进程用户为root</strong></p>
<h2 id="禁止PHP解析指点站点目录"><a href="#禁止PHP解析指点站点目录" class="headerlink" title="禁止PHP解析指点站点目录"></a>禁止PHP解析指点站点目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Directory &quot;/var/www/html/bbs/Uploads&quot;&gt;</span><br><span class="line">    Options FollowSymLinks</span><br><span class="line">    AllowOverride None</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    php_flag engine off # 注意这行</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.kancloud.cn/curder/apache/91272" target="_blank" rel="noopener">https://www.kancloud.cn/curder/apache/91272</a></p>
<p><a href="https://www.linuxidc.com/Linux/2017-05/143590.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2017-05/143590.htm</a></p>
]]></content>
      <categories>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>服务器运维</tag>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-正则表达式基础</title>
    <url>/2019/04/28/JavaScript-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h1><a id="more"></a>
<h2 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h2><p><code>https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp</code></p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>正则表达式是为了解决字符串操作中一些比较麻烦的场景，比如字符串提取、字符串替换、字符串验证等<ul>
<li>常用于：表单验证：是否是一个数字、是一个电话号码、是一个邮箱。。。</li>
<li>字符串替换：</li>
<li>字符串查找</li>
</ul>
</li>
</ul>
<h2 id="正则表达式其实也是js里面的一个对象"><a href="#正则表达式其实也是js里面的一个对象" class="headerlink" title="正则表达式其实也是js里面的一个对象"></a>正则表达式其实也是js里面的一个对象</h2><h2 id="创建一个正则表达式"><a href="#创建一个正则表达式" class="headerlink" title="创建一个正则表达式"></a>创建一个正则表达式</h2><ul>
<li><code>var reg2=new RegExp(&quot;a&quot;);</code></li>
<li><code>var reg1=/a/;</code>   <ul>
<li>其中//是标记，a表示要匹配的字符</li>
</ul>
</li>
</ul>
<h2 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/a/</span>;        <span class="comment">//匹配字符串中的a字符</span></span><br><span class="line">reg.test(<span class="string">"abc"</span>);        </span><br><span class="line"><span class="comment">//正则表达式的test用来检测字符串是否满足正则表达式的要求；</span></span><br><span class="line"><span class="comment">//由于"abc"中存在a，所以是符合要求的，所以这段代码的返回值为：true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isTrue = reg.test(<span class="string">"coke"</span>);   <span class="comment">//由于"coke"中不存在a字符，所以不符合条件   --&gt;isTrue:false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2=<span class="regexp">/abc/</span>;     </span><br><span class="line">reg2.test(<span class="string">"adbcd"</span>); <span class="comment">//字符串中必然存在"abc"才符合要求，所以这段代码的返回值为false</span></span><br><span class="line"></span><br><span class="line">reg2.test(<span class="string">"1abc"</span>);  <span class="comment">//true</span></span><br><span class="line">reg2.test(<span class="string">"abc123"</span>);    <span class="comment">//true</span></span><br><span class="line">reg2.test(<span class="string">"abcabc"</span>);    <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h2 id="正则表达式特殊字符"><a href="#正则表达式特殊字符" class="headerlink" title="正则表达式特殊字符"></a>正则表达式特殊字符</h2><h3 id="字符类别"><a href="#字符类别" class="headerlink" title="字符类别"></a>字符类别</h3><ul>
<li><p>. 表示除了换行符(\r \n)以外的任意字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/./</span>;</span><br><span class="line">reg.test(<span class="string">"a"</span>);  <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"."</span>);  <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"\r"</span>); <span class="comment">//false</span></span><br><span class="line">reg.test(<span class="string">"1\r"</span>);    <span class="comment">//存在一个1，不是换行符，所以结果为：true</span></span><br><span class="line">reg.test(<span class="string">"\r\n"</span>);   <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意点：如果以后要匹配.字符，不要直接写.</span></span><br><span class="line"><span class="comment">//为了匹配qq邮箱，写了 /qq.com/ 这是一个错误的写法：</span></span><br><span class="line"><span class="comment">//=&gt;/qq.com/不仅匹配："qq.com"也匹配"qq3com" "qq@com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决方案：/qq\.com/  或者 /qq[.]com/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>\d 表示数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\d/</span>;</span><br><span class="line">reg.test(<span class="string">"123abc"</span>); <span class="comment">//由于存在一个数字，所以结果为true</span></span><br><span class="line">reg.test(<span class="string">"abcde"</span>);  <span class="comment">//由于不存在任何数字，所以结果为false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展：</span></span><br><span class="line"><span class="keyword">var</span> _reg=<span class="regexp">/\d\d/</span>;</span><br><span class="line">_reg.test(<span class="string">"1b"</span>);    <span class="comment">//不存在2个连续数字，所以结果为：false</span></span><br><span class="line">_reg.test(<span class="string">"a12c"</span>);  <span class="comment">//存在2个连续数字，结果为：true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配手机号码：出现了连续11个数字</span></span><br><span class="line"><span class="keyword">var</span> isCellphoneNumber=<span class="regexp">/\d\d\d\d\d\d\d\d\d\d\d/</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>案例：匹配手机号码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d\d\d\d\d\d\d\d\d\d\d/</span>;</span><br><span class="line">reg.test(<span class="string">"13532159091"</span>);    <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"17380889395"</span>);    <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"a7380889395"</span>);        <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>\D 是\d的取反结果，表示不是数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\D/</span>;</span><br><span class="line">_reg.test(<span class="string">"123"</span>);   <span class="comment">//由于全是数字，所以结果为：false</span></span><br><span class="line">_reg.test(<span class="string">"123a"</span>);  <span class="comment">//存在一个字母，所以结果为：true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2=<span class="regexp">/123\D5/</span>;</span><br><span class="line">_reg.test(<span class="string">"12345"</span>); <span class="comment">//false</span></span><br><span class="line">_reg.test(<span class="string">"123b5"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>\w 匹配字母、数字、下划线 ，三者满足其一即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\w/</span>;   </span><br><span class="line">reg.test(<span class="string">"123"</span>);    <span class="comment">//存在数字，结果为：true</span></span><br><span class="line">reg.test(<span class="string">"a"</span>);  <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"1"</span>);  <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"_"</span>);  <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"-"</span>);  <span class="comment">//false</span></span><br><span class="line">reg.test(<span class="string">"."</span>);  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">reg.test(<span class="string">"1."</span>);   <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"_\r\n"</span>);  <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"\r\n"</span>);   <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>\W 是\w的取反</p>
</li>
<li><p>\s 表示一个空白字符（例如：\r \n \t 空格 。。。）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\s/</span>;</span><br><span class="line">reg.test(<span class="string">"abc def"</span>);   <span class="comment">//存在一个空白，结果为：true</span></span><br><span class="line">reg.test(<span class="string">"abc\r123"</span>);   <span class="comment">//存在一个\r，结果为：true</span></span><br><span class="line">reg.test(<span class="string">"abc"</span>);    <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>\S 是\s的取反</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\S/</span>;</span><br><span class="line">reg.test(<span class="string">" \r \n "</span>);   <span class="comment">//全是空白字符，结果为false</span></span><br><span class="line">reg.test(<span class="string">"123 abc"</span>);    <span class="comment">//存在一个空白，结果为true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg3=<span class="regexp">/\s\S/</span>;</span><br><span class="line">reg3.test(<span class="string">" a"</span>);    <span class="comment">//true</span></span><br><span class="line">reg3.test(<span class="string">"a "</span>);    <span class="comment">//false</span></span><br><span class="line">reg3.test(<span class="string">"a b"</span>);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>\ 转义字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/./</span>;    <span class="comment">//匹配除了换行符以外的任意字符</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\./</span>;   <span class="comment">//匹配.字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\//</span>;   <span class="comment">//匹配一个正斜杠：/</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/[/]/</span>;  <span class="comment">//。。。。。。。。。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>案例：匹配邮箱</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//asfas.com</span></span><br><span class="line"><span class="comment">//123ad.com</span></span><br><span class="line"><span class="comment">//ABC12.com</span></span><br><span class="line"><span class="comment">//abc_1.com</span></span><br><span class="line"><span class="keyword">var</span> reg =<span class="regexp">/\w\w\w\w\w\.com/</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字符集合"><a href="#字符集合" class="headerlink" title="字符集合"></a>字符集合</h3><ul>
<li><p>[]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/[1a2b3]/</span>; <span class="comment">//匹配一个字符，这个字符必须是：1/a/2/b/3其中一种，如果是就表示满足，如果不是就不满足</span></span><br><span class="line">reg.test(<span class="string">"a"</span>);      <span class="comment">//结果为：true</span></span><br><span class="line">reg.test(<span class="string">"3"</span>);      <span class="comment">//结果为：true</span></span><br><span class="line">reg.test(<span class="string">"fg5678"</span>); <span class="comment">//一个符合要求的字符都不存在，结果为：false</span></span><br><span class="line">reg.test(<span class="string">"a999999"</span>);    <span class="comment">//结果为：true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//升级版</span></span><br><span class="line"><span class="keyword">var</span> reg2=<span class="regexp">/[123][abc]/</span>;  <span class="comment">//为了匹配连续2个字符，第一个字符必须在1/2/3之内，第二个字符必须在a/b/c之内</span></span><br><span class="line">reg2.test(<span class="string">"2a"</span>);    <span class="comment">//true</span></span><br><span class="line">reg2.test(<span class="string">"3c"</span>);    <span class="comment">//true</span></span><br><span class="line">reg2.test(<span class="string">"1basdfasf"</span>); <span class="comment">//true</span></span><br><span class="line">reg2.test(<span class="string">"asdfasdf1c"</span>);    <span class="comment">//存在符合条件的1c，结果为：true</span></span><br><span class="line">reg2.test(<span class="string">"39"</span>);    <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2=<span class="regexp">/[0-9]/</span>;   <span class="comment">//匹配数字0-9之间，任何一个数字 等价于：/\d/</span></span><br><span class="line"><span class="keyword">var</span> reg3=<span class="regexp">/[a-z]/</span>;   <span class="comment">//匹配小写字母</span></span><br><span class="line"><span class="keyword">var</span> reg4=<span class="regexp">/[A-Z]/</span>;   <span class="comment">//匹配大写字母</span></span><br><span class="line"><span class="keyword">var</span> reg5=<span class="regexp">/[a-zA-Z]/</span>;<span class="comment">//匹配所有字母</span></span><br><span class="line"><span class="keyword">var</span> reg6=<span class="regexp">/[A-Za-z]/</span>;<span class="comment">//..........</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg10=<span class="regexp">/[0-9abc]/</span>;</span><br><span class="line">reg10.test(<span class="string">"3"</span>);<span class="comment">//true</span></span><br><span class="line">reg10.test(<span class="string">"five"</span>);<span class="comment">//false</span></span><br><span class="line">reg10.test(<span class="string">"banana"</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>[^]</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/[^123]/</span>;   <span class="comment">//匹配一个字符，但是这个字符既不是1 并且 不是2 并且 不是3 </span></span><br><span class="line">reg.test(<span class="string">"a"</span>);      <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"3"</span>);      <span class="comment">//false</span></span><br><span class="line">reg.test(<span class="string">"123"</span>);    <span class="comment">//没有1，2，3以外的字符，结果为：false</span></span><br><span class="line">reg.test(<span class="string">"a123"</span>);   <span class="comment">//存在一个符合条件的a，所以结果为：true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h3><ul>
<li>^ 表示字符串最左边</li>
<li>$ 表示字符串最右边<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^abc/</span>;     <span class="comment">//表示以abc开头</span></span><br><span class="line">reg.test(<span class="string">"123abc123"</span>);  <span class="comment">//并不是以abc开头，结果为：false</span></span><br><span class="line">reg.test(<span class="string">"abc123"</span>);     <span class="comment">//以abc开头，结果为：true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/abc$/</span>;     <span class="comment">//表示以abc结尾</span></span><br><span class="line">reg.test(<span class="string">"123abc"</span>); <span class="comment">//结果为：true</span></span><br><span class="line">reg.test(<span class="string">"abc123"</span>); <span class="comment">//结果为：false</span></span><br><span class="line">reg.test(<span class="string">"123bc"</span>);  <span class="comment">//结果为：false</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匹配一个手机号码 (11位)--&gt;(1)+(10位数字)</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/1\d\d\d\d\d\d\d\d\d\d/</span>;</span><br><span class="line">reg.test(<span class="string">"13166668888a"</span>);   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2=<span class="regexp">/^1\d\d\d\d\d\d\d\d\d\d$/</span>;</span><br><span class="line">reg2.test(<span class="string">"13166668888a"</span>);   <span class="comment">//false</span></span><br><span class="line">reg2.test(<span class="string">"13166668888"</span>);    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg3=<span class="regexp">/^1[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$/</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^abc$/</span>;    <span class="comment">//表示字符串abc</span></span><br><span class="line">reg.test(<span class="string">"abc"</span>);    <span class="comment">//结果为：true</span></span><br><span class="line">reg.test(<span class="string">"123abc"</span>); <span class="comment">//结果为：false</span></span><br></pre></td></tr></table></figure>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul>
<li><p><code>*</code> 出现0次或多次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\d*/</span>;</span><br><span class="line">reg.test(<span class="string">"123"</span>);    <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"234"</span>);    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg3=<span class="regexp">/1\d*/</span>;</span><br><span class="line">reg3.test(<span class="string">"1"</span>); <span class="comment">//true</span></span><br><span class="line">reg3.test(<span class="string">"123"</span>);   <span class="comment">//true</span></span><br><span class="line">reg3.test(<span class="string">"a123"</span>)   <span class="comment">//true</span></span><br><span class="line">reg3.test(<span class="string">"a123456b"</span>);   <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>+</code> 出现1次或多次(至少一次)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/1\d+/</span>;</span><br><span class="line">reg.test(<span class="string">"1"</span>);      <span class="comment">//false</span></span><br><span class="line">reg.test(<span class="string">"123"</span>);    <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>?</code> 出现0次或一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/1\d?/</span>; </span><br><span class="line">reg.test(<span class="string">"12"</span>);     <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"1"</span>);      <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>{3}</code> 出现3次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/1\w&#123;5&#125;/</span>;</span><br><span class="line">reg.test(<span class="string">"1abc"</span>);   <span class="comment">//false</span></span><br><span class="line">reg.test(<span class="string">"112345"</span>); <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"1abc12"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>{3,}</code> 至少出现3次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\d&#123;2,&#125;/</span>;</span><br><span class="line">reg.test(<span class="string">"12"</span>); <span class="comment">//true</span></span><br><span class="line">reg.test(<span class="string">"5"</span>);  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>{3,5}</code> 出现3-5次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/abc&#123;3&#125;/</span>;           <span class="comment">//表示匹配abccc</span></span><br><span class="line">reg.test(<span class="string">"123abccc123"</span>);    <span class="comment">//结果为：true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg3=<span class="regexp">/(abc)&#123;2&#125;/</span>;    <span class="comment">//匹配abcabc</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>|</code> 或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/abc|123/</span>;  <span class="comment">//表示匹配abc或者123</span></span><br><span class="line"></span><br><span class="line">reg.test(<span class="string">"abc456"</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg5=<span class="regexp">/^abc|123$/</span>;  <span class="comment">//匹配以abc开头，或者以123结尾</span></span><br><span class="line">reg5.test(<span class="string">"abcafsadfasd"</span>);<span class="comment">//true</span></span><br><span class="line">reg5.test(<span class="string">"afsdfasdf123"</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg6=<span class="regexp">/^(abc|123)$/</span>;        <span class="comment">//匹配abc/123</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>()</code> 分组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//010-88889999</span></span><br><span class="line"><span class="comment">//0576-12312312</span></span><br><span class="line"><span class="comment">//0895-1234567</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/(\d&#123;3,4&#125;)-(\d&#123;7,8&#125;)/</span>;  <span class="comment">//匹配电话号码</span></span><br><span class="line"><span class="keyword">var</span> arr=<span class="string">"021-33335555"</span>.match(<span class="regexp">/(\d&#123;3,4&#125;)-(\d&#123;7,8&#125;)/</span>)</span><br><span class="line">arr[<span class="number">0</span>]  <span class="comment">//全部</span></span><br><span class="line">arr[<span class="number">1</span>]  <span class="comment">//第一组：区号：021</span></span><br><span class="line">arr[<span class="number">2</span>]  <span class="comment">//第二组：号码：333355555</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/(\d&#123;3,4&#125;)-(\d&#123;7,8&#125;)/</span>;</span><br><span class="line"><span class="string">"021-33335555"</span>.replace(<span class="regexp">/(\d&#123;3,4&#125;)-(\d&#123;7,8&#125;)/</span>,<span class="string">'区号是：$1'</span>)</span><br><span class="line"><span class="comment">//区号是：021</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"[object Array]"</span>;</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">"[object Object]"</span>;</span><br><span class="line"><span class="keyword">var</span> str3=<span class="string">'[object Function]'</span>;</span><br><span class="line"><span class="keyword">var</span> str4=<span class="string">'[object Date]'</span>;</span><br><span class="line"></span><br><span class="line">str.replace(<span class="string">"[object "</span>,<span class="string">""</span>).replace(<span class="string">"]"</span>,<span class="string">""</span>).toLowerCase();</span><br><span class="line"></span><br><span class="line">str.replace(<span class="regexp">/\[object /</span>,<span class="string">""</span>).replace(<span class="regexp">/\]/</span>,<span class="string">""</span>).toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样的话正则表达式只匹配一次，也就是说后面的]换不掉</span></span><br><span class="line">str.replace(<span class="regexp">/\[object |\]/</span>,<span class="string">""</span>).toLowerCase();</span><br><span class="line"><span class="comment">//如何解决？进行全局匹配</span></span><br><span class="line">str.replace(<span class="regexp">/\[object |\]/g</span>,<span class="string">""</span>).toLowerCase();</span><br><span class="line"></span><br><span class="line">str.replace(<span class="regexp">/[^\s]+\s/</span>,<span class="string">""</span>).replace(<span class="regexp">/\]/</span>,<span class="string">""</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>一次仿写jQuery库的简单代码</title>
    <url>/2019/04/25/%E4%B8%80%E6%AC%A1%E4%BB%BF%E5%86%99jQuery%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>功能的实现都很简单，但是是需要学着别人的思想</strong></p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//模块化：内部的东西对外是封闭的，只暴露出$,jQuery操作。</span></span></span><br><span class="line"><span class="javascript">        (<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params">selector</span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">// //获取页面中所有指定的元素</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// const elements = document.querySelectorAll(selector);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(elements);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">// //但是随着$()操作的增加，将会产生无数个css方法，浪费了很多的内存</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// elements.css = function()&#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     console.log('query css');</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// return elements;</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> _init = jQuery.prototype.init;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(jQuery.prototype);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">new</span> jQuery.prototype.init(selector);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 为了方便少写prototype单词，简化</span></span></span><br><span class="line">            jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="keyword">constructor</span>: jQuery,</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                init: <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// // 把查找到的DO吗元素放在变量中</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// const elements = document.querySelectorAll(selector);</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// // this.elements = elements;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// // 但是jQuery为了操作方便，所以将DOM元素放在了自己身上，也就是伪对象数组</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// for (let i = 0; i &lt; elements.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//     this[i] = elements[i];</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">// this.length = elements.length;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="comment">//判断如果是一个string，则查找</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (jQuery.type(selector) === <span class="string">'string'</span>) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="keyword">const</span> elements = <span class="built_in">document</span>.querySelectorAll(selector);</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// this.elements = elements;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 但是jQuery为了操作方便，所以将DOM元素放在了自己身上，也就是伪对象数组</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>[i] = elements[i];</span></span><br><span class="line">                        &#125;</span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.length = elements.length;</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果是一个对象，则直接赋值</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>[<span class="number">0</span>] = selector;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.length = <span class="number">1</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">// css(attr, value) &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     for (let i = 0; i &lt; this.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         this[i].style[attr] = value;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// jQuery插件编写之路</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 无法使用箭头函数</span></span></span><br><span class="line"><span class="javascript">            jQuery.fn.extend = jQuery.extend = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line">                if (args.length &lt;= 0) &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> target, source = <span class="literal">null</span>;</span></span><br><span class="line"></span><br><span class="line">                source = [...args];</span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">// $.extend | $.fn.extend</span></span></span><br><span class="line">                if (args.length == 1) &#123;</span><br><span class="line"><span class="javascript">                    target = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// args[0].extend</span></span></span><br><span class="line">                    target = args[0];</span><br><span class="line">                    source.splice(0, 1);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">// 判断当前是谁</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// if (this === jQuery) &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     target = args[0];</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     // 删除第一个元素</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     source.splice(0, 1);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125; else &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     target = this;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(target);</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// console.log(source);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">// source.forEach((item,index) =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     for (const key in item) &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//         target[key] = item[key];</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="comment">//for循环优化</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。 有兼容性问题</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">Object</span>.assign(target, ...source);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> target;</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//添加一些工具类方法：$.xxx()</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//$.ajax  $.post $.get  $.type $.each</span></span></span><br><span class="line">            jQuery.extend(&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//$.each([1,3,5],function(index,value)&#123;&#125;)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//$.each(&#123; age:18,height:200 &#125;,function(key,value)&#123;&#125;)</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//可以遍历数组和对象</span></span></span><br><span class="line">                each(target, callback) &#123;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="comment">//对象有两种，数组对象和普通数组</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="comment">//不仅仅可以遍历数组，也可以遍历伪数组</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//&#123; length:0 &#125;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//&#123; 0:100,length:1 &#125;</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//&#123; 0:"a",1:"b",2:"c",length:3 &#125;</span></span></span><br><span class="line"></span><br><span class="line">                    if ((length in target) &amp;&amp; target.length &gt;= 0) &#123;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; target.length; i++) &#123;</span></span><br><span class="line"></span><br><span class="line">                            callback.call(target[i], i, target[i]);</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 普通对象</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="comment">// //获取到p1自身拥有的属性组成数组</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// Object.keys(target).forEach((value,index)=&gt;&#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     console.log(value,index);</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span></span><br><span class="line">                            if (target.hasOwnProperty(key)) &#123;</span><br><span class="line">                                callback.call(target[key], key, target[key]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line">                type(target) &#123;</span><br><span class="line"><span class="javascript">                    <span class="comment">// console.log('type');</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> type = <span class="built_in">Object</span>.prototype.toString.call(target);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> type.replace(<span class="string">"[object "</span>, <span class="string">""</span>)</span></span><br><span class="line"><span class="javascript">                        .replace(<span class="string">"]"</span>, <span class="string">""</span>)</span></span><br><span class="line">                        .toLowerCase();</span><br><span class="line">                &#125;,</span><br><span class="line">                ajax() &#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'ajax'</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> events = [</span></span><br><span class="line"><span class="javascript">                <span class="comment">//&#123; ele:div1,type:"click",callback:function()&#123;&#125; &#125;,</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//&#123; ele:div1,type:"click",callback:function()&#123;&#125; &#125;</span></span></span><br><span class="line">            ];</span><br><span class="line"></span><br><span class="line">            jQuery.fn.extend(&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">// 遍历自己</span></span></span><br><span class="line">                each(callback) &#123;</span><br><span class="line"><span class="javascript">                    jQuery.each(<span class="keyword">this</span>, callback);</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="comment">//1、获取样式$("div").css("color")  只能获取到第一个div的颜色</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//2、设置样式</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//      $("div").css("color","red") 设置每一个div的字体颜色</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//      $("div").css(&#123; color:"red","backgroundColor","blue" &#125;)</span></span></span><br><span class="line">                css(...args) &#123;</span><br><span class="line">                    if (args.length === 1) &#123;</span><br><span class="line"><span class="javascript">                        <span class="comment">// 一个参数时分两种情况，如果是一个字符串，则为获取属性，但是如果为一个对象则为设置样式</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (jQuery.type(args[<span class="number">0</span>]) === <span class="string">'string'</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// console.log(this); this指向$("div"),init方法放回的元素</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">//不管元素有多少个，只取第一个</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">let</span> $<span class="keyword">this</span> = <span class="keyword">this</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">let</span> style = <span class="built_in">window</span>.getComputedStyle($<span class="keyword">this</span>, <span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// console.log(style);</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span> style[args[<span class="number">0</span>]];</span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 设置样式,需要遍历选择器</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">// jQuery.each(this, function()&#123;</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">//     let $this = this;</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">//     jQuery.each(args[0], function(key, value)&#123;</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">//         $this.style[key] = value;</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">//     &#125;)</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">// &#125;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            <span class="comment">//优化上述代码</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">let</span> _that = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">                            jQuery.each(args[<span class="number">0</span>], <span class="function"><span class="keyword">function</span> (<span class="params">key, value</span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line">                                _that.css(key, value);</span><br><span class="line"></span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">//链式调用</span></span></span><br><span class="line">                        &#125;</span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 参数为两个，则为一个属性，一个属性值</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 设置单个样式</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// let key = args[0];</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// let value = args[1];</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.style[args[<span class="number">0</span>]] = args[<span class="number">1</span>];</span></span><br><span class="line">                        &#125;);</span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">//链式调用</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                show() &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.css(<span class="string">'display'</span>, <span class="string">'block'</span>);</span></span><br><span class="line">                &#125;,</span><br><span class="line">                hide() &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.css(<span class="string">'display'</span>, <span class="string">'none'</span>);</span></span><br><span class="line">                &#125;,</span><br><span class="line">                toggle() &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> _that = <span class="keyword">this</span>; <span class="comment">//this -&gt; jQuery</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// this -&gt; dom </span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// if (jQuery(this).css('display') === 'block') &#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     jQuery(this).css('display', 'none');</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// &#125;else &#123;</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">//     jQuery(this).css('display', 'block');</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="comment">//优化上述代码</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> $<span class="keyword">this</span> = jQuery(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript">                        $<span class="keyword">this</span>.css(<span class="string">'display'</span>) === <span class="string">'block'</span> ? $<span class="keyword">this</span>.hide() : $<span class="keyword">this</span>.show();</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="comment">// 添加event</span></span></span><br><span class="line">                on(type, callback) &#123;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="comment">// console.log(this);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.addEventListener(type, callback);</span></span><br><span class="line"></span><br><span class="line">                        events.push(&#123;</span><br><span class="line"><span class="javascript">                            ele: <span class="keyword">this</span>,</span></span><br><span class="line">                            type: type,</span><br><span class="line">                            callback: callback</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">//链式编程</span></span></span><br><span class="line"></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="comment">//解绑绑定：$("div").off("click")：表示解除当前元素的所有的单击事件</span></span></span><br><span class="line">                off(type) &#123;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> _that = <span class="keyword">this</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="keyword">let</span> es = events.filter(<span class="function"><span class="keyword">function</span> (<span class="params">e, i</span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(i, e);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            <span class="comment">//查看绑定的元素是否存在events数组中，并且有没有该元素绑定的事件,并且移除</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">let</span> isCurent =  e.ele === _that &amp;&amp; e.type === type</span></span><br><span class="line">                            if (isCurent) &#123;</span><br><span class="line">                                events.splice(i, 1);</span><br><span class="line">                            &#125;</span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span> isCurent;</span></span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                        if (es.length &lt;= 0) &#123;</span><br><span class="line"><span class="javascript">                            <span class="keyword">return</span>;</span></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="comment">//可能存在多次绑定</span></span></span><br><span class="line"><span class="javascript">                        es.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(e, _that);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            <span class="keyword">let</span> &#123; callback &#125; = e;</span></span><br><span class="line"></span><br><span class="line">                            _that.removeEventListener(type, callback);</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(events);</span></span><br><span class="line"></span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// function F(selector) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     // 把查找到的DO吗元素放在变量中</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     const elements = document.querySelectorAll(selector);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     // this.elements = elements;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     // 但是jQuery为了操作方便，所以将DOM元素放在了自己身上，也就是伪对象数组</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     for (let i = 0; i &lt; elements.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         this[i] = elements[i];</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     this.length = elements.length;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// F.prototype.css = function(attr, value) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     console.log(this.elements.length);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     for(let i=0; i&lt;this.elements.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         this.elements[i].style[attr] = value;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// F.prototype = &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     constructor: F,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     css(attr, value) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         for (let i = 0; i &lt; this.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//             this[i].style[attr] = value;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 相当于赋值给顶层对象window的属性</span></span></span><br><span class="line">            global.$ = global.jQuery = jQuery;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        &#125;)(<span class="built_in">window</span>); <span class="comment">//自调用函数</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log($);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// $('div').css('color', 'red');</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// $('.header').css('color', 'blue');</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// var p = &#123;&#125;;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// $.extend(p, &#123; a: 1 &#125;, &#123; b: 2 &#125;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log(p);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// $.fn.extend(&#123; a: 0 &#125;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log($.fn);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// $.each(&#123; a: 'a', b: 'b' &#125;, function (key, value) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     console.log(key, value);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// $.each(&#123; 0: 100, 1: 200, 2: 300, length: 3 &#125;, function (key, value) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     console.log(key, value);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// $.each([1, 2, 3], function (key, value) &#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     console.log(key, value);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// console.log($.type(&#123; a: 1 &#125;));</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// $('div').css(&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     'color': 'red',</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     'backgroundColor': 'blue'</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// $('div').css('color', 'red');</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// $('.header').hide();</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// $('div').toggle();</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            $(<span class="string">'.footer'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'footer'</span>);</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            $(<span class="string">'.header'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'header'</span>);</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            $(<span class="string">'.section'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'.footer'</span>).off(<span class="string">'click'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'remove'</span>)</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// $('.header').off('click');</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line">            color: rebeccapurple;</span><br><span class="line"><span class="css">            <span class="comment">/* display: none; */</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next主题首页隐藏指定文章</title>
    <url>/2019/04/23/hexo-next%E4%B8%BB%E9%A2%98%E9%A6%96%E9%A1%B5%E9%9A%90%E8%97%8F%E6%8C%87%E5%AE%9A%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因为博客下混合了我技术类和生活类的文章，但是首页我只想显示技术类，所以记录下做法。</p>
<a id="more"></a>
<p><strong>具体做法</strong></p>
<p>找到<code>themes⁩</code> ▸ <code>⁨next</code>⁩ ▸ <code>⁨layout</code>⁩文件夹下的<code>index.swig</code>文件</p>
<p><img src="index1.png" alt></p>
<p>定位修改<code>post_template.render</code></p>
<p>修改成以下代码,其中修改的是为文章的首页显示添加判断条件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.visible !== &apos;hide&apos; %&#125;</span><br><span class="line">   &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>即修改后</p>
<p><img src="index2.png" alt></p>
<p><strong>在新的post中添加visible字段来控制是否首页显示</strong></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: post title</span><br><span class="line">date: 2019-04-23 12:24:19</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">    - </span>hexo</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">    - </span>hexo</span><br><span class="line">visible: hide</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">.........</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5移动端自适应方案——媒体查询+rem方案</title>
    <url>/2019/04/22/HTML5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2-rem%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>虽然H5的页面与PC的Web页面相比简单了不少，但让我们头痛的事情是要想尽办法让页面能适配众多不同的终端设备。</p>
<a id="more"></a>
<blockquote>
<p>本文中不涉及一些viewport、dpr等的概念介绍，详细了解可以再查看本博客中另一篇文章有具体讲解这些概念。</p>
</blockquote>
<h1 id="EM和REM"><a href="#EM和REM" class="headerlink" title="EM和REM"></a>EM和REM</h1><p>使用REM+媒体查询方式进行编写自适应方案时，先来了解下EM和REM是什么？</p>
<h2 id="EM"><a href="#EM" class="headerlink" title="EM"></a>EM</h2><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。</p>
<p><strong>EM的特点</strong></p>
<ul>
<li>em的值并不是固定的</li>
<li>em会继承父级元素的字体大小</li>
</ul>
<blockquote>
<p>注意：任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。<br>所以我们在写CSS的时候，需要注意两点：</p>
<ol>
<li>body选择器中声明Font-size=62.5%；</li>
<li>将你的原来的px数值除以10，然后换上em作为单位；</li>
<li>重新计算那些被放大的字体的em数值。避免字体大小的重复声明。<br>也就是避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。</li>
</ol>
</blockquote>
<h2 id="REM"><a href="#REM" class="headerlink" title="REM"></a>REM</h2><p><code>rem</code>是<code>CSS3</code>新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。</p>
<p>简单的理解，rem就是相对于根元素<code>&lt;html&gt;</code>的<code>font-size</code>来做计算。而我们的方案中使用rem单位，是能轻易的根据<code>&lt;html&gt;</code>的<code>font-size</code>计算出元素的盒模型大小。而这个特色对我们来说是特别的有益处。</p>
<h1 id="媒体查询-Rem实现自适应"><a href="#媒体查询-Rem实现自适应" class="headerlink" title="媒体查询 + Rem实现自适应"></a>媒体查询 + Rem实现自适应</h1><p>放上代码中所使用的设计稿和图片，自行右键保存。图片来源<a href="https://github.com/amfe/article/issues/17" target="_blank" rel="noopener">手淘H5适配方案</a></p>
<p><img src="designpsd.jpeg" alt></p>
<p><img src="grayscale.jpeg" alt></p>
<p><img src="haibao.jpg" alt></p>
<p>该设计图是按照iPhone6作为基准设计尺寸，iPhone6的分辨率为<code>750px * 1334px</code>，iPhone6的DPR为2，则CSS像素则缩小为设计稿尺寸的<code>1/2</code>。既设计稿量出某宽为20px，则css像素则转为为10px。</p>
<blockquote>
<p>理想适口的缩放比为1的情况下</p>
</blockquote>
<p>首先按照设计稿尺寸还原页面，为了方便理解，首先使用px还原页面，在iPhone6下显示设计。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            -webkit-tap-highlight-color: transparent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        html,body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        html,body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f5294c</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* background-color: #f5294c; */</span></span></span><br><span class="line">            min-width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.header</span> <span class="selector-tag">h1</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> &#123;</span></span><br><span class="line">            padding: 0 5px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            padding: 5px 0;</span><br><span class="line">            display: table-cell;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.left</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line">            width: 88px;</span><br><span class="line">            height: 88px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            display: table-cell;</span><br><span class="line">            padding: 5px 8px 0 8px;</span><br><span class="line">            vertical-align: top;</span><br><span class="line">            width: 100%;</span><br><span class="line">            font-size: 13px;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 1<span class="selector-class">.25</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> &#123;</span></span><br><span class="line">            margin: 9px 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#f32a4c</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line">            font-size: 10px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f32a4c</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fffffd</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.intro</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#ffb09b</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.buy</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 9px;</span><br><span class="line">            bottom: 7px;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 1<span class="selector-class">.25</span>;</span></span><br><span class="line">            font-size: 13px;</span><br><span class="line">            padding: 5px 18px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f42a4b</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fefffc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.buy</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fefffc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 海报 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/haibao.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>编写后页面显示，当然这里是举例，有些像素为了方便计算，只是大概的测量了一下，这里使用的测量工具为<code>Mark Man</code>。</p>
<p><img src="px_h5.gif" alt></p>
<p>然后看看其他设备显示的效果，因为这里使用的是<code>流式布局</code>，即百分比布局，页面还没有说变形很严重，但是在iPhone5设备上或者更小的设备上显示就会显得页面元素偏大，而在一些ipad就显得更为难受了。(换成其他DPR下情况也是相同)。</p>
<p>这里不讲解媒体查询是什么和具体语法，详细了解可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="noopener">MDN</a></p>
<p>而该方案就是基于rem的原理，针对不同屏幕尺寸的改变来改变根节点html的<code>font-size</code>的大小。</p>
<p>这里总结出了一个公式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-size(rem) = 预设font-size(rem)基准值 / （设计稿宽度 / DPR） * 设备宽度</span><br></pre></td></tr></table></figure>
<p>该公式的原理就是先根据设计稿的尺寸和DPR求出设备的宽度，根据该设备的宽度下预设一个<code>font-size</code>的基准值，再求出该设备下的宽度与预设基准值的比值，然后其他设备下的设备宽度除以该基准值就可以求出其他设备下的html的<code>font-size</code>的值。所以上述公式是由下条公式变化得来的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-size(rem) = 设备宽度 / （（设计稿宽度 / DPR） / 预设font-size(rem)基准值）</span><br></pre></td></tr></table></figure>
<p>按照本文中设计稿为iPhone6的尺寸设计，我们以设计稿下iPhone6为<code>375px</code>的html的<code>font-size</code>预设基准值为<code>100px</code>（方便计算）,即<code>1rem = 100px</code>，则其他设备像素下html的<code>font-size</code>的值为</p>
<ul>
<li>iPhone5的设备像素320px:<code>100 / (750 / 2) * 320 = 85.333px</code></li>
<li>iPhone6的设备像素375px:<code>100px</code></li>
<li>iPhone6Plus的设备像素414px:<code>100 / (750 / 2) * 414 = 110.4px</code></li>
</ul>
<p>只要以设计稿下预设的基准值再根据其他屏幕来换算计算出其他设备下的html的<code>font-size</code>大小即可。</p>
<p>页面中再根据<code>1rem = 100px</code>将页面中px单位换算成rem即可。再添加上根据设备宽度的媒体查询设置根节点的<code>font-size</code>大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* base-rem = 100px */</span></span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> (min-width: <span class="number">320px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">85.333px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> (min-width: <span class="number">360px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">96px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> (min-width: <span class="number">375px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> (min-width: <span class="number">414px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">110.4px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> (min-width: <span class="number">480px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">128px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> (min-width: <span class="number">540px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">144px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> (min-width: <span class="number">768px</span>) &#123;</span><br><span class="line">            <span class="selector-tag">html</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">204.8px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>更改后整体页面代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0,user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        html,body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* base-rem = 100px */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        @<span class="keyword">media</span> (min-width: <span class="number">320px</span>) &#123;</span></span><br><span class="line">            html &#123;</span><br><span class="line"><span class="css">                <span class="selector-tag">font-size</span>: 85<span class="selector-class">.333px</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        @<span class="keyword">media</span> (min-width: <span class="number">360px</span>) &#123;</span></span><br><span class="line">            html &#123;</span><br><span class="line">                font-size: 96px;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        @<span class="keyword">media</span> (min-width: <span class="number">375px</span>) &#123;</span></span><br><span class="line">            html &#123;</span><br><span class="line">                font-size: 100px;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        @<span class="keyword">media</span> (min-width: <span class="number">414px</span>) &#123;</span></span><br><span class="line">            html &#123;</span><br><span class="line"><span class="css">                <span class="selector-tag">font-size</span>: 110<span class="selector-class">.4px</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        @<span class="keyword">media</span> (min-width: <span class="number">480px</span>) &#123;</span></span><br><span class="line">            html &#123;</span><br><span class="line">                font-size: 128px;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        @<span class="keyword">media</span> (min-width: <span class="number">540px</span>) &#123;</span></span><br><span class="line">            html &#123;</span><br><span class="line">                font-size: 144px;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        @<span class="keyword">media</span> (min-width: <span class="number">768px</span>) &#123;</span></span><br><span class="line">            html &#123;</span><br><span class="line"><span class="css">                <span class="selector-tag">font-size</span>: 204<span class="selector-class">.8px</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        html,body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f5294c</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* background-color: #f5294c; */</span></span></span><br><span class="line">            min-width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.header</span> <span class="selector-tag">h1</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span>: 0 0<span class="selector-class">.05rem</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span>: 0<span class="selector-class">.05rem</span> 0;</span></span><br><span class="line">            display: table-cell;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.left</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 0<span class="selector-class">.88rem</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span>: 0<span class="selector-class">.88rem</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            display: table-cell;</span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span>: 0<span class="selector-class">.05rem</span> 0<span class="selector-class">.08rem</span> 0 0<span class="selector-class">.08rem</span>;</span></span><br><span class="line">            vertical-align: top;</span><br><span class="line">            width: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span>: 0<span class="selector-class">.13rem</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 1<span class="selector-class">.25</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span>: 0<span class="selector-class">.09rem</span> 0;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#f32a4c</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.price</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span>: 0<span class="selector-class">.1rem</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f32a4c</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fffffd</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.right</span> <span class="selector-class">.intro</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#ffb09b</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.buy</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">right</span>: 0<span class="selector-class">.09rem</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">bottom</span>: 0<span class="selector-class">.07rem</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 1<span class="selector-class">.25</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span>: 0<span class="selector-class">.13rem</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span>: 0<span class="selector-class">.05rem</span> 0<span class="selector-class">.18rem</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f42a4b</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fefffc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.section</span> <span class="selector-class">.item</span> <span class="selector-class">.buy</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fefffc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 海报 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/haibao.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/grayscale.jpeg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>Carter's1年式灰色长袖连体衣包脚爬服全棉鲸鱼男婴儿童装115G093<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>双11价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>¥ 299<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>（满400 减 100）<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">small</span>&gt;</span>一小时热卖1769件<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"##"</span>&gt;</span>马上抢！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>适配后</p>
<p><img src="rem_h5_dpr2.gif" alt="gif"></p>
<p>图片较大，可自行运行代码在dpr为1、2、3下再更改屏幕尺寸，运行结果良好，可谓够用。</p>
<p>为什么可谓够用，该方案有缺点：通过设备宽度范围区间这样的媒体查询来动态改变rem基准值，其实不够精确，比如：宽度为360px 和 宽度为320px的手机，因为屏宽在同一范围区间内(&lt;375px)，所以会被同等对待(rem基准值相同)，而事实上他们的屏幕宽度并不相等，它们的布局也应该有所不同。最终，结论就是：这样的做法，没有做到足够的精确，但是够用。</p>
<h1 id="Less优化"><a href="#Less优化" class="headerlink" title="Less优化"></a>Less优化</h1><p>如果项目中使用Less或者Sass等CSS预处理器可以更加简化代码的编写与计算量。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要适配的设备宽度数组</span></span><br><span class="line"><span class="variable">@adapterDeviceWidthList:</span> <span class="number">320px</span>, <span class="number">360px</span>, <span class="number">375px</span>, <span class="number">414px</span>, <span class="number">480px</span>, <span class="number">540px</span>, <span class="number">640px</span>, <span class="number">750px</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">@psdWidth:</span> <span class="number">750</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">@psdDpr:</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">@baseFontSize:</span> <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">@deviceLength:</span> length(<span class="variable">@adapterDeviceWidthList</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.adapterMixin</span>(<span class="variable">@index</span>) <span class="keyword">when</span> (<span class="variable">@index</span> &lt;= <span class="variable">@deviceLength</span>) &#123;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">min-width</span>: extract(<span class="variable">@adapterDeviceWidthList</span>, <span class="variable">@index</span>)) &#123;</span><br><span class="line">        <span class="selector-tag">html</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">100</span> / (<span class="variable">@psdWidth</span> / <span class="variable">@psdDpr</span>) * extract(<span class="variable">@adapterDeviceWidthList</span>, <span class="variable">@index</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.adapterMixin</span>(<span class="variable">@index</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.adapterMixin</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>生成的css为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">320px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">85.33333333px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">360px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">96px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">375px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">414px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">110.4px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">128px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">540px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">144px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">640px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">170.66666667px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">750px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用less维护起来就方便很多，只要维护<code>adapterDeviceWidthList</code>中设备的宽度即可，如果设计稿开始有变化更改变量即可。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>移动端适配</tag>
      </tags>
  </entry>
  <entry>
    <title>Less入门</title>
    <url>/2019/04/15/Less%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Less是什么"><a href="#Less是什么" class="headerlink" title="Less是什么"></a>Less是什么</h1><p>LESS 将 CSS 赋予了动态语言的特性，如 变量， 继承， 运算， 函数. LESS 既可以在 客户端 上运行 (支持IE 6+, Webkit, Firefox)，也可以借助Node.js或者Rhino在服务端运行。</p>
<p><a href="https://www.html.cn/doc/less/features/#mixin-guards-feature" target="_blank" rel="noopener">Less官方文档</a></p>
<a id="more"></a>
<h1 id="Less安装"><a href="#Less安装" class="headerlink" title="Less安装"></a>Less安装</h1><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>引入你的<code>.less</code>样式文件的时候要设置<code>rel</code>属性值为<code>“stylesheet/less”</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet/less"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"styles.less"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下载<code>less.js</code>,<a href="https://www.html.cn/doc/less/" target="_blank" rel="noopener">下载地址</a>,在<head><meta name="generator" content="Hexo 3.9.0"> 中引入:</head></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"less.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意你的less样式文件一定要在引入less.js前先引入。<br>在浏览器中使用less.js开发是很好的，但不推荐用于生产环境中。</p>
</blockquote>
<p><strong>特别注意</strong></p>
<ul>
<li>确保包涵 <code>.less</code> 样式表在 <code>less.js</code> 脚本之前</li>
<li>当你引入多个 <code>.less</code> 样式表时，它们都是独立编译的。所以，在每个文件中定义的变量、混合、命名空间都不会被其它的文件共享。</li>
</ul>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>在服务器端安装<code>LESS</code>的最简单方式就是通过<code>npm(node 的包管理器)</code>, 像这样:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install less</span><br></pre></td></tr></table></figure>
<p>如果你想下载最新稳定版本的 LESS，可以尝试像下面这样操作:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install less@latest</span><br></pre></td></tr></table></figure>
<h3 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h3><p>一旦安装完成，就可以在命令行中调用，例如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lessc styles.less</span><br></pre></td></tr></table></figure>
<p>这样的话编译后的CSS将会输出到 ‘stdout’ 中，你可以选择将这个输出重定向到文件中:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lessc styles.less &gt; styles.css</span><br></pre></td></tr></table></figure>
<p>查看版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lessc -v</span><br><span class="line">$ lessc --version</span><br></pre></td></tr></table></figure>
<p>如果你想输出一个压缩后的CSS，只要加到<code>-x</code>选项即可。如果你想要更NB的压缩，你也可以选择使用 <a href="https://github.com/GoalSmashers/clean-css" target="_blank" rel="noopener">Clean CSS</a>压缩器，只要加上<code>--clean-css</code> 插件即可。</p>
<p>直接运行lessc，不带任何参数将可以看到所有的命令行参数或 查看<a href="https://www.html.cn/doc/less/usage/index.html" target="_blank" rel="noopener">用法</a>.</p>
<h3 id="代码中使用"><a href="#代码中使用" class="headerlink" title="代码中使用"></a>代码中使用</h3><p>你可以在Node中调用编译器，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'less'</span>);</span><br><span class="line"></span><br><span class="line">less.render(<span class="string">'.class &#123; width: (1 + 1) &#125;'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, output</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(output.css);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>将会输出</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>使用编译工具，比如 Koala 挺好用的（当然也有很多在线编译工具）</li>
<li>在项目中使用（比如Vue，需要安装less-loader）</li>
<li>客户端调试（存在跨域问题，不推荐这种方式）<ul>
<li>使用link标签引用less.min.js（官网下载），注意rel=”stylesheet/less”</li>
<li>这种方式不生成css文件，直接在浏览器查看</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h1><h2 id="less的嵌套规则类似HTML的结构，使得CSS代码清晰"><a href="#less的嵌套规则类似HTML的结构，使得CSS代码清晰" class="headerlink" title="less的嵌套规则类似HTML的结构，使得CSS代码清晰"></a>less的嵌套规则类似HTML的结构，使得CSS代码清晰</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css 写法*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// less写法</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="父元素选择符-amp"><a href="#父元素选择符-amp" class="headerlink" title="父元素选择符 &amp;"></a>父元素选择符 <code>&amp;</code></h2><ul>
<li>表示当前选择器的所有父选择器</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//css写法</span></span><br><span class="line"><span class="selector-class">.bgcolor</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#888888</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//less写法</span></span><br><span class="line"><span class="selector-class">.bgcolor</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>; </span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888888</span>;      </span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="改变选择器的顺序"><a href="#改变选择器的顺序" class="headerlink" title="改变选择器的顺序"></a>改变选择器的顺序</h2><ul>
<li>将&amp;放到当前选择器之后，会将当前选择器移到最前面</li>
<li>只需记住 “&amp; 代表当前选择器的所有父选择器”</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="selector-class">.color</span> <span class="selector-tag">&amp;</span>&#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-class">.color</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h2><ul>
<li>将生成所有可能的选择器列表</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div1</span>, <span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="selector-tag">&amp;</span> <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-class">.div1</span>, <span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span> <span class="selector-class">.div2</span>,</span><br><span class="line"><span class="selector-class">.div2</span> <span class="selector-class">.div1</span>,</span><br><span class="line"><span class="selector-class">.div1</span> <span class="selector-class">.div1</span>,</span><br><span class="line"><span class="selector-class">.div2</span> <span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量的定义和使用"><a href="#变量的定义和使用" class="headerlink" title="变量的定义和使用"></a>变量的定义和使用</h2><ul>
<li>定义：@name: value; （@black: #000;）</li>
<li>使用场合分3种：<ul>
<li>常规使用：@name</li>
<li>作为选择器或属性名：@{name}</li>
<li>作为URL：”@{name}”</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1.常规使用 */</span></span><br><span class="line"><span class="variable">@black:</span> <span class="number">#000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@black</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.作用选择器和属性名 */</span></span><br><span class="line"><span class="variable">@selName:</span> container;</span><br><span class="line"><span class="variable">@proName:</span> width;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.@&#123;selName&#125;</span> &#123;</span><br><span class="line">  <span class="attribute">@&#123;proName&#125;</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.作为URL */</span></span><br><span class="line"><span class="variable">@imgUrl:</span> <span class="string">"./images/logo.png"</span></span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#FFF</span> url(<span class="string">"@&#123;imgUrl&#125;"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#FFF</span> url(<span class="string">"./images/logo.png"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>变量是延迟加载的，可以不预先声明</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@black</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@black:</span> <span class="number">#000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>变量的作用域<ul>
<li>less会从当前作用域没找到，将往上查找（类似js）</li>
<li>如果在某级作用域找到多个相同名称的变量，使用最后定义的那个（类似css）</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="number">0</span>;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="variable">@var:</span> <span class="number">1</span>;</span><br><span class="line">    <span class="selector-class">.brass</span> &#123;</span><br><span class="line">        <span class="variable">@var:</span> <span class="number">2</span>;</span><br><span class="line">        <span class="attribute">three</span>: <span class="variable">@var</span>;</span><br><span class="line">        <span class="variable">@var:</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">one</span>: <span class="variable">@var</span>; <span class="comment">//类似js，无法访问.brass内部</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">    <span class="attribute">one</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class</span> <span class="selector-class">.brass</span> &#123;</span><br><span class="line">    <span class="attribute">three</span>: <span class="number">3</span>;  <span class="comment">//使用最后定义的 @var: 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="混合（mixins）"><a href="#混合（mixins）" class="headerlink" title="混合（mixins）"></a>混合（mixins）</h1><ul>
<li>混合：一种将一系列属性从一个规则集引入（“混入”）到另一个规则集的方式</li>
<li>混合是非常重要的一个概念，内容也偏多，可以尝试多看几遍！</li>
</ul>
<h2 id="普通混合"><a href="#普通混合" class="headerlink" title="普通混合"></a>普通混合</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//混合</span></span><br><span class="line"><span class="selector-class">.border</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: solid <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="selector-class">.border</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-class">.border</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: solid <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: solid <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不带参数的混合"><a href="#不带参数的混合" class="headerlink" title="不带参数的混合"></a>不带参数的混合</h2><ul>
<li>从上面的代码发现，混合也被编译输出了</li>
<li>在混合名字后加上括号，编译后不再输出</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加括号但不带参数的混合</span></span><br><span class="line"><span class="selector-class">.border</span>() &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: solid <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="selector-class">.border</span>;  <span class="comment">//加不加括号都可以</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: solid <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="带参数的混合"><a href="#带参数的混合" class="headerlink" title="带参数的混合"></a>带参数的混合</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//带参数的混合</span></span><br><span class="line"><span class="selector-class">.border</span>(<span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: solid <span class="number">1px</span> <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">#fff</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: solid <span class="number">1px</span> <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="带参数且有默认值的混合"><a href="#带参数且有默认值的混合" class="headerlink" title="带参数且有默认值的混合"></a>带参数且有默认值的混合</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//带参数且有默认值的混合</span></span><br><span class="line"><span class="selector-class">.border</span>(<span class="variable">@color</span>: <span class="number">#fff</span>) &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: solid <span class="number">1px</span> <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="selector-class">.border</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">#000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: solid <span class="number">1px</span> <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: solid <span class="number">1px</span> <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="带多个参数"><a href="#带多个参数" class="headerlink" title="带多个参数"></a>带多个参数</h2><ul>
<li>多个参数时，参数之间可以用分号或逗号分隔</li>
<li>注意逗号分隔的是“各个参数”还是“某个列表类型的参数”<ul>
<li>两个参数，并且每个参数都是逗号分隔的列表：.name(1,2,3; something, ele)</li>
<li>三个参数，并且每个参数都包含一个数字：.name(1,2,3)</li>
<li>使用分号，调用包含一个逗号分割的css列表（一个参数）： .name(1,2,3; )</li>
<li>逗号分割默认值（两个参数）：.name(@param1:red, blue)</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//less编写</span></span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>, <span class="variable">@padding</span>: xxx, <span class="variable">@margin</span>: <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">color-3</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">padding-3</span>: <span class="variable">@padding</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">@margin</span> <span class="variable">@margin</span> <span class="variable">@margin</span> <span class="variable">@margin</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>; something, ele);  <span class="comment">//2个参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);                  <span class="comment">//3个参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>; );                <span class="comment">//1个参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">color-3</span>: <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">padding-3</span>: something, ele;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">color-3</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">padding-3</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="attribute">color-3</span>: <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">padding-3</span>: xxx;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="定义多个相同名称的混合"><a href="#定义多个相同名称的混合" class="headerlink" title="定义多个相同名称的混合"></a>定义多个相同名称的混合</h2><ul>
<li>less会根据参数进行调用相应的混合</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">color-1</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>; <span class="variable">@padding</span>: <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">color-2</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">padding-2</span>: <span class="variable">@padding</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>; <span class="variable">@padding</span>: <span class="number">3</span>; <span class="variable">@margin</span>) &#123;</span><br><span class="line">  <span class="attribute">color-3</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">padding-3</span>: <span class="variable">@padding</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">@margin</span> <span class="variable">@margin</span> <span class="variable">@margin</span> <span class="variable">@margin</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.some</span> <span class="selector-class">.selector</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="number">#008000</span>); <span class="comment">//第二个mixins也被调用了，因为 @padding 有默认值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.some</span> <span class="selector-class">.selector</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="number">#008000</span>, <span class="number">5</span>); <span class="comment">//只有第二个mixins被调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-class">.some</span> <span class="selector-class">.selector</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color-1</span>: <span class="number">#008000</span>;</span><br><span class="line">  <span class="attribute">color-2</span>: <span class="number">#008000</span>;</span><br><span class="line">  <span class="attribute">padding-2</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.some</span> <span class="selector-class">.selector</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color-2</span>: <span class="number">#008000</span>;</span><br><span class="line">  <span class="attribute">padding-2</span>: <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h2><ul>
<li>引用mixin时可以通过参数名称而不是参数的位置来为mixin提供参数值，任何参数都通过名称来引用，这样就不必按照特定的顺序来使用参数</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>: black; <span class="variable">@margin</span>: <span class="number">10px</span>; <span class="variable">@padding</span>: <span class="number">20px</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">@margin</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">@padding</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="variable">@margin</span>:<span class="number">20</span>; <span class="variable">@color</span>: <span class="number">#33acfe</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="number">#efca44</span>; <span class="variable">@padding</span>: <span class="number">40px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#33acfe</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#efca44</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="arguments变量"><a href="#arguments变量" class="headerlink" title="@arguments变量"></a>@arguments变量</h2><ul>
<li>@arguments表示所有可变参数</li>
<li>参数的先后顺序就是括号内的顺序 ，在赋值时，值的位置和个数也是一一对应的</li>
<li>只有一个值，把值赋给第一个，两个值，赋给第一个和第二个……</li>
<li>若想赋给第一个和第三个，必须把第二个参数的默认值写上</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@x</span>: solid, <span class="variable">@c</span>: red) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">21px</span> <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>(solid, black)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">21px</span> solid <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">21px</span> solid <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><ul>
<li>自定义一个字符，使用时加上那个字符，就调用相应的规则</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(all, <span class="variable">@w</span>: <span class="number">5px</span>) &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border</span>(t_l, <span class="variable">@w</span>: <span class="number">5px</span>) &#123;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border</span>(b_l, <span class="variable">@w</span>: <span class="number">5px</span>) &#123;</span><br><span class="line">  <span class="attribute">border-bottom-left-radius</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border</span>(b_r, <span class="variable">@w</span>: <span class="number">5px</span>) &#123;</span><br><span class="line">  <span class="attribute">border-bottom-right-radius</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>(all, <span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-class">.border</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="得到混合中变量的返回值"><a href="#得到混合中变量的返回值" class="headerlink" title="得到混合中变量的返回值"></a>得到混合中变量的返回值</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.average</span>(<span class="variable">@x</span>, <span class="variable">@y</span>) &#123;</span><br><span class="line">  <span class="variable">@average</span>((<span class="variable">@x</span> + <span class="variable">@y</span>)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.average</span>(<span class="number">16px</span>, <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">@average</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译结果</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">33px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、将16px 和 50px 赋值给混合 .average进行计算</span></span><br><span class="line"><span class="comment">2、计算结果赋值给变量 @average</span></span><br><span class="line"><span class="comment">3、然后在div中调用@average的值</span></span><br><span class="line"><span class="comment">4、编译后就得到了average的值33px</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><ul>
<li>任何数值、颜色值和变量都可以进行运算</li>
</ul>
<h2 id="数值类运算"><a href="#数值类运算" class="headerlink" title="数值类运算"></a>数值类运算</h2><ul>
<li>less会自动推算数值的单位，不必每个值都加上单位</li>
<li>运算符之间必须以空格分开，存在优先级问题时注意使用括号</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: (<span class="number">450px</span> - <span class="number">50</span>)*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.wp</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="颜色值运算"><a href="#颜色值运算" class="headerlink" title="颜色值运算"></a>颜色值运算</h2><ul>
<li>先将颜色值转换为rgb模式，运算完后再转换为16进制的颜色值并返回</li>
<li>注意：取值为0-255，所以计算时不能超过这个区间，超过默认使用0或255</li>
<li>注意：不能使用颜色名直接运算</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span> + <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rgb(0,0,0) + 8</span></span><br><span class="line"><span class="comment">//rgb(8,8,8)</span></span><br><span class="line"><span class="comment">//十六进制：#080808</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#080808</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><ul>
<li>有时混合中嵌套了比较多的规则，而我们只需要其中一部分，可使用命名空间获取</li>
</ul>
<h2 id="使用-“-gt-”-符号"><a href="#使用-“-gt-”-符号" class="headerlink" title="使用 “&gt;” 符号"></a>使用 “&gt;” 符号</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//混合集</span></span><br><span class="line"><span class="selector-id">#bgcolor</span>() &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="selector-class">.a</span>() &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.b</span>() &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bgcolor1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fdfee0</span>;</span><br><span class="line">  <span class="selector-id">#bgcolor</span>&gt;<span class="selector-class">.a</span>;     <span class="comment">//只使用.a()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor2</span> &#123;</span><br><span class="line">  <span class="selector-id">#bgcolor</span>&gt;<span class="selector-class">.a</span>&gt;<span class="selector-class">.b</span>;  <span class="comment">//只使用.b()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.bgcolor1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fdfee0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="省略-“-gt-”，换成空格"><a href="#省略-“-gt-”，换成空格" class="headerlink" title="省略 “&gt;”，换成空格"></a>省略 “&gt;”，换成空格</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//混合集</span></span><br><span class="line"><span class="selector-id">#bgcolor</span>() &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="selector-class">.a</span>() &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.b</span>() &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bgcolor1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fdfee0</span>;</span><br><span class="line">  <span class="selector-id">#bgcolor</span> <span class="selector-class">.a</span>;     <span class="comment">//只使用.a()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor2</span> &#123;</span><br><span class="line">  <span class="selector-id">#bgcolor</span> <span class="selector-class">.a</span> <span class="selector-class">.b</span>;  <span class="comment">//只使用.b()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.bgcolor1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fdfee0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bgcolor2</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><ul>
<li>引入一个或多个文件，这些文件定义的规则可在当前less文件中使用</li>
<li>使用@import</li>
</ul>
<h2 id="引入less文件"><a href="#引入less文件" class="headerlink" title="引入less文件"></a>引入less文件</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.less</span></span><br><span class="line"><span class="variable">@wp:</span> <span class="number">960px</span>;</span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前less文件</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"main"</span>; <span class="comment">//可以不加后缀</span></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@wp</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引入css文件"><a href="#引入css文件" class="headerlink" title="引入css文件"></a>引入css文件</h2><ul>
<li>注意：不能混合css的规则到项目中，编译后原样输出“@import xxx.css”</li>
<li>并且引入时不能省略后缀名</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.css</span></span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"main.css"</span> ;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@wp</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@wp</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"main.css"</span>;  <span class="comment">//原样输出,但有效，css有这条语句</span></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">960px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="带参数的引入"><a href="#带参数的引入" class="headerlink" title="带参数的引入"></a>带参数的引入</h2><ul>
<li>once：默认，只引入一次</li>
<li>reference：使用less文件但不输出，注意对比上面的例子（ 不使用会输出没有加括号的混合）</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@wp:</span> <span class="number">960px</span>;</span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前less文件</span></span><br><span class="line"><span class="keyword">@import</span> (reference) <span class="string">"main"</span>;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@wp</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>inline：在输出中包含less文件但是不能操作</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@wp:</span> <span class="number">960px</span>;</span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前less文件</span></span><br><span class="line"><span class="keyword">@import</span> (inline) <span class="string">"main"</span>; </span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@wp</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="variable">@wp:</span> <span class="number">960px</span>;    <span class="comment">//报错，@wp未知</span></span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>less：将文件作为less文件对象，无论什么文件扩展名</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.css文件</span></span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前less</span></span><br><span class="line"><span class="keyword">@import</span> (less) <span class="string">"main.css"</span>;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="selector-class">.color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff6600</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>css：将文件作为css文件对象，无论什么文件扩展名</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前less文件</span></span><br><span class="line"><span class="keyword">@import</span> (css) <span class="string">"main.less"</span>;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"main.less"</span>;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>multiple：允许引入多次相同文件名的文件</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当前less</span></span><br><span class="line"><span class="keyword">@import</span> (multiple) <span class="string">"main.less"</span>;</span><br><span class="line"><span class="keyword">@import</span> (multiple) <span class="string">"main.less"</span>;</span><br><span class="line"><span class="keyword">@import</span> (multiple) <span class="string">"main.less"</span>;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@wp</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.color</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="important"><a href="#important" class="headerlink" title="!important"></a>!important</h1><ul>
<li>提升权重优先级为最高（尽量避免使用）</li>
<li>在调用的混合集后面追加 !important 关键字，混合集中所有属性都继承<code>!important</code></li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span>(<span class="variable">@bg</span>: <span class="number">#fdfdfd</span>, <span class="variable">@color</span>: <span class="number">#900</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">@bg</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.important</span> &#123;</span><br><span class="line">  <span class="selector-class">.foo</span>() !important</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.important</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fdfdfd</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#990000</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h1><h2 id="带条件的混合"><a href="#带条件的混合" class="headerlink" title="带条件的混合"></a>带条件的混合</h2><ul>
<li>比较运算符：&gt;, &gt;=, =, =&lt;, &lt;</li>
<li>格式：when() { }</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lightness() 是检测亮度的函数，用%度量</span></span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@a</span>) <span class="keyword">when</span>(lightness(<span class="variable">@a</span>) &gt;= <span class="number">50%</span> ) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@a</span>) <span class="keyword">when</span>(lightness(<span class="variable">@a</span>) &lt; <span class="number">50%</span> ) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@a</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="number">#ddd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="number">#555</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#dddddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#555555</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类型检测函数"><a href="#类型检测函数" class="headerlink" title="类型检测函数"></a>类型检测函数</h2><ul>
<li>检测值的类型<ul>
<li>iscolor</li>
<li>isnumber</li>
<li>isstring</li>
<li>iskeyword</li>
<li>isurl</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@a</span>: <span class="number">#fff</span>; <span class="variable">@b</span>: <span class="number">0</span>) <span class="keyword">when</span>(isnumber(<span class="variable">@b</span>)) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@a</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">@b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@a</span>; <span class="variable">@b</span>: black) <span class="keyword">when</span>(iscolor(<span class="variable">@b</span>)) &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">@a</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单位检测函数"><a href="#单位检测函数" class="headerlink" title="单位检测函数"></a>单位检测函数</h2><ul>
<li>检测一个值除了数字是否是一个特定的单位<ul>
<li>ispixel</li>
<li>ispercentage</li>
<li>isem</li>
<li>isunit</li>
</ul>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@a</span>) <span class="keyword">when</span>(ispixel(<span class="variable">@a</span>)) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@a</span>) <span class="keyword">when</span>(ispercentage(<span class="variable">@a</span>)) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">@a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="number">960px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="number">95%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><ul>
<li>混合可以调用自身，当一个混合递归调用自身就构成循环结构</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.loop</span>(<span class="variable">@counter</span>) <span class="keyword">when</span>(<span class="variable">@counter</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.h</span><span class="variable">@&#123;counter&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: (<span class="number">10px</span>*<span class="variable">@counter</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.loop</span>((<span class="variable">@counter</span> - <span class="number">1</span>)); <span class="comment">//递归调用自身</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="selector-class">.loop</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.h5</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.h4</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.h3</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.h2</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.h1</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="合并属性"><a href="#合并属性" class="headerlink" title="合并属性"></a>合并属性</h1><ul>
<li>将多条规则合并为一条</li>
</ul>
<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><ul>
<li>在需要合并的属性的冒号之前加上 “+”，合并后用逗号分隔</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>() &#123;</span><br><span class="line">  <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">inset</span> <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">10px</span> <span class="selector-id">#555</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myclass</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>;</span><br><span class="line">  <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">20px</span> <span class="selector-tag">black</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.myclass</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#555</span>, <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> black; <span class="comment">//逗号分隔两个属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><ul>
<li>在需要合并的属性的冒号之前加上 “+_”，合并用空格分隔</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>() &#123;</span><br><span class="line">  <span class="selector-tag">background</span>+<span class="selector-tag">_</span>: <span class="selector-id">#f66</span>;</span><br><span class="line">  <span class="selector-tag">background</span>+<span class="selector-tag">_</span>: <span class="selector-tag">url</span>(<span class="string">"/sss.jpg"</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f66</span> url(<span class="string">"/sss.jpg"</span>); <span class="comment">//空格分隔</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="两种方式结合"><a href="#两种方式结合" class="headerlink" title="两种方式结合"></a>两种方式结合</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>() &#123;</span><br><span class="line">  <span class="selector-tag">background</span>+<span class="selector-tag">_</span>: <span class="selector-id">#f66</span>;</span><br><span class="line">  <span class="selector-tag">background</span>+: <span class="selector-tag">url</span>(<span class="string">"/sss.jpg"</span>);</span><br><span class="line">  <span class="selector-tag">background</span>+<span class="selector-tag">_</span>: <span class="selector-tag">no-repeat</span>;</span><br><span class="line">  <span class="selector-tag">background</span>+: <span class="selector-tag">center</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译输出</span></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f66</span>, url(<span class="string">"/sss.jpg"</span>)  no-repeat, center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="函数库"><a href="#函数库" class="headerlink" title="函数库"></a>函数库</h1><ul>
<li>less中封装了非常多函数库，例如颜色定义、颜色操作、颜色混合、字符串处理等等</li>
<li>例如color()：用于解析颜色，将代表颜色的字符串转换为颜色值</li>
</ul>
<p>更多参考：<a href="https://less.bootcss.com/functions/#functions-overview" target="_blank" rel="noopener">https://less.bootcss.com/functions/#functions-overview</a></p>
<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>LESS 中的作用域跟其他编程语言非常类似，首先会从本地查找变量或者混合模块，如果没找到的话会去父级作用域中查找，直到找到为止.</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="variable">@var:</span> white;</span><br><span class="line">  <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// red  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="避免编译"><a href="#避免编译" class="headerlink" title="避免编译"></a>避免编译</h1><p>有时候我们需要输出一些不正确的CSS语法或者使用一些 LESS不认识的专有语法.</p>
<p>要输出这样的值我们可以在字符串前加上一个 <code>~</code>, 例如:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="string">~"ms:alwaysHasItsOwnSyntax.For.Stuff()"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="attribute">ms</span>:alwaysHasItsOwnSyntax.For.Stuff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul>
<li><code>/**/</code> 可以使用，会被编译</li>
<li><code>//</code> 可以使用，但不会被编译到css中，会自动过滤掉。</li>
<li><code>less</code>不认识的内容 不会被编译</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>官方文档：<a href="https://www.html.cn/doc/less/features/" target="_blank" rel="noopener">https://www.html.cn/doc/less/features/</a></p>
<p><a href="http://www.bootcss.com/p/lesscss/#guide" target="_blank" rel="noopener">http://www.bootcss.com/p/lesscss/#guide</a></p>
<p><a href="https://www.jianshu.com/p/15ed47ff8b06" target="_blank" rel="noopener">https://www.jianshu.com/p/15ed47ff8b06</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Less</tag>
      </tags>
  </entry>
  <entry>
    <title>Android混淆(Proguard)详解</title>
    <url>/2019/04/12/Android%E6%B7%B7%E6%B7%86-Proguard-%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="混淆的作用及好处"><a href="#混淆的作用及好处" class="headerlink" title="混淆的作用及好处"></a>混淆的作用及好处</h1><p>混淆属于整个应用程序开发生命周期偏后期阶段的技术了，所以要考虑应用的安全性及性能的问题，混淆就是为了这种需求产生的一种技术，简单说，混淆就是将关键字和关键类名，修改为无意义的字符以起到迷惑试图反编译去查看源码的人。在一定程度上能过滤掉一些入门反编译者，混淆是保障Android程序源码安全的第一道门槛，<br>以上谈了下混淆的作用，而混淆的好处除了能保证源码安全性之外就大概是通过修改关键字为无意义字符串，或者剔除某些辅助类，比如Log，从而减少文件大小。</p>
<a id="more"></a>
<h1 id="混淆的原理"><a href="#混淆的原理" class="headerlink" title="混淆的原理"></a>混淆的原理</h1><p><a href="https://www.guardsquare.com/en/products/proguard" target="_blank" rel="noopener">proguard官网</a></p>
<p>Java 是一种跨平台的、解释型语言，Java 源代码编译成中间”字节码”存储于 class 文件中。由于跨平台的需要，Java   字节码中包括了很多源代码信息，如变量名、方法名，并且通过这些名称来访问变量和方法，这些符号带有许多语义信息，很容易被反编译成 Java 源代码。为了防止这种现象，我们可以使用 Java 混淆器对 Java 字节码进行混淆。<br>混淆就是对发布出去的程序进行重新组织和处理，使得处理后的代码与处理前代码完成相同的功能，而混淆后的代码很难被反编译，即使反编译成功也很难得出程序的真正语义。被混淆过的程序代码，仍然遵照原来的档案格式和指令集，执行结果也与混淆前一样，只是混淆器将代码中的所有变量、函数、类的名称变为简短的英文字母代号，在缺乏相应的函数名和程序注释的况下，即使被反编译，也将难以阅读。同时混淆是不可逆的，在混淆的过程中一些不影响正常运行的信息将永久丢失，这些信息的丢失使程序变得更加难以理解。<br>混淆器的作用不仅仅是保护代码，它也有精简编译后程序大小的作用。由于以上介绍的缩短变量和函数名以及丢失部分信息的原因， 编译后 jar 文件体积大约能减少25%，这对当前费用较贵的无线网络传输是有一定意义的。</p>
<h1 id="混淆的具体使用"><a href="#混淆的具体使用" class="headerlink" title="混淆的具体使用"></a>混淆的具体使用</h1><p>模块(Module)下的build.gradle的配置</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">  buildTypes&#123;</span><br><span class="line">    release &#123; </span><br><span class="line">       <span class="comment">// 是否进行混淆  </span></span><br><span class="line">       minifyEnabled <span class="keyword">false</span>  </span><br><span class="line">       <span class="comment">// 混淆文件的位置，其中'proguard-android.txt'为sdk默认的混淆配置，</span></span><br><span class="line">       <span class="comment">//'proguard-rules.pro' 是该模块下的混淆配置</span></span><br><span class="line">       proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span>  </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上是proguard在模块下build.gradle文件中的配置信息，其中<code>proguard-android.txt</code>为sdk默认的混淆配置，<code>proguard-rules.pro</code>是在默认配置的基础上针对本模块做出的针对性混淆处理。</p>
<ul>
<li>proguard-android.txt 这个文件是系统默认混淆文件一般不需要做修改</li>
<li>在 debug 版下也可以开启混淆做为测试</li>
<li>Gradle 2.2 之后，defaultProguardFile 没有使用 SDK 目录下的 proguard-android.txt，而是使用了 gradle 自带的 proguard-android.txt，不同的 gradle 版本带有不同的默认混淆文件，比如在项目根目录的 build/intermediates/proguard-files/proguard-android.txt-2.3.3，即为 gradle 自带的混淆文件。在 proguard-android.txt-2.3.3 文件中也写有说明，Gradle 2.2 之后自带混淆文件</li>
</ul>
<blockquote>
<p>注：proguard-android.txt的位置位于android-sdk/tools/proguard/proguard-android.txt</p>
</blockquote>
<h1 id="混淆规则"><a href="#混淆规则" class="headerlink" title="混淆规则"></a>混淆规则</h1><p>这个语法的作用是定义出 <strong>不需要</strong>混淆的源代码，那么编译时会自动将未定义的部分全都混淆。而如下是不需要混淆的</p>
<ul>
<li>Android 四大组件</li>
<li>native方法</li>
<li>Java 反射用到的类</li>
<li>自定义控件</li>
<li>枚举类</li>
<li>JavaBean</li>
<li>Parcelable、Serializable 序列化类</li>
<li>WebView 与 JS 交互所用到的类和方法</li>
</ul>
<h1 id="混淆步骤"><a href="#混淆步骤" class="headerlink" title="混淆步骤"></a>混淆步骤</h1><p><img src="proguard.png" alt></p>
<p><strong>proguard分为4个步骤：</strong></p>
<ol>
<li>压缩（shrink）<br>移除未使用的类、方法、字段等；</li>
<li>优化（optimize）<br>优化字节码、简化代码等操作；</li>
<li>混淆（obfuscate）<br>使用简短的、无意义的名称重全名类名、方法名、字段等；</li>
<li>预校验（preverify）<br>为class添加预校验信息。</li>
</ol>
<h1 id="混淆基本指令"><a href="#混淆基本指令" class="headerlink" title="混淆基本指令"></a>混淆基本指令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-dontshrink</span><br><span class="line"># 声明不进行压缩操作，默认情况下，除了-keep配置（下详）的类及其直接或间接引用到的类，都会被移除。</span><br><span class="line"></span><br><span class="line">#---------------------------------------------- shrink</span><br><span class="line"></span><br><span class="line">-dontoptimize</span><br><span class="line"># 不对class进行优化，默认开启优化。</span><br><span class="line"># 注意：由于优化会进行类合并、内联等多种优化，-applymapping可能无法完全应用，需使用热修复的应用，建议使用此# 配置关闭优化。</span><br><span class="line"></span><br><span class="line">-optimizationpasses n</span><br><span class="line"># 执行优化的次数，默认1次，多次能达到更好的优化效果。</span><br><span class="line"></span><br><span class="line">-optimizations optimization_filter</span><br><span class="line">优化配置，可进行字段优化、内联、类合并、代码简化、算法指令精简等操作。</span><br><span class="line"></span><br><span class="line">#只进行 移除未使用的局部变量、算法指令精简</span><br><span class="line">-optimizations code/removal/variable,code/simplification/arithmetic</span><br><span class="line"></span><br><span class="line">#进行除 算法指令精简、字段、类合并外的所有优化</span><br><span class="line">-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*</span><br><span class="line"></span><br><span class="line">#---------------------------------------------- optimize</span><br><span class="line"></span><br><span class="line">-dontobfuscate</span><br><span class="line"># 不进行混淆，默认开启混淆。除-keep指定的类及成员外，都会被替换成简短、随机的名称，以达到混淆的目的。</span><br><span class="line"></span><br><span class="line">-applymapping filename</span><br><span class="line"># 根据指定的mapping映射文件进行混淆。</span><br><span class="line"></span><br><span class="line">-obfuscationdictionary filename</span><br><span class="line"># 指定字段、方法名的混淆字典，默认情况下使用abc等字母组合，比如根据自己的喜好指定中文、特殊字符进行混淆命名。</span><br><span class="line"></span><br><span class="line">-classobfuscationdictionary filename</span><br><span class="line"># 指定类名混淆字典。</span><br><span class="line"></span><br><span class="line">-packageobfuscationdictionary filename</span><br><span class="line"># 指定包名混淆字典。</span><br><span class="line"></span><br><span class="line">-useuniqueclassmembernames</span><br><span class="line"># 指定相同的混淆名称对应不同类的相同成员，不同的混淆名称对应不同的类成员。在没有指定这个选项时，不同类的不同方法都可能映射到a,b,c。</span><br><span class="line"></span><br><span class="line"># 有一种情况，比如两个不同的接口，拥有相同的方法签名，在没有指定这个选项时，这两个接口的方法可能混淆成不同的名称。但如果新增一个类同时实现这两个接口，并且利用-applymapping指定之前的mapping映射文件时，这两个接口的方法必须混淆成相同的名称，这时就和之前的mapping冲突了。</span><br><span class="line"></span><br><span class="line"># 在某此热修复场景下需要指定此选项。</span><br><span class="line"></span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"># 指定不使用大小写混用的类名，默认情况下混淆后的类名可能同时包含大写小字母。这在某些对大小写不敏感的系统（如windowns）上解压时，可能存在文件被相互覆盖的情况。</span><br><span class="line"></span><br><span class="line">-keeppackagenames [package_filter]</span><br><span class="line"># 指定不混淆指定的包名，多个包名可以用逗号分隔，可以使用? * **通配符，并且可以使用否定符（!）。</span><br><span class="line"></span><br><span class="line">-keepattributes [attribute_filter]</span><br><span class="line"># 指定保留属性，多个属性可以用多个-keepattributes配置，也可以用逗号分隔，可以使用? * **通配符，并且可以使用否定符（!）。</span><br><span class="line"># 比如，在混淆ibrary库时，应该至少keep Exceptions, InnerClasses, Signature；如果在追踪代码，还需要keep符号表；使用到注解时也需要keep。</span><br><span class="line">-keepattributes Exceptions,InnerClasses,Signature</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line"></span><br><span class="line">-keepparameternames</span><br><span class="line"># 指定keep已经被keep的方法的参数类型和参数名称，在混淆library库时非常有用，可供IDE帮助用户进行信息提示和代码自动填充。</span><br><span class="line"></span><br><span class="line">#---------------------------------------------- obfuscate</span><br><span class="line"></span><br><span class="line">-dontpreverify</span><br><span class="line"># 指定不对class进行预校验，默认情况下，在编译版本为micro或者1.6或更高版本时是开启的。但编译成Android版本时，预校验是不必须的，配置这个选项可以节省一点编译时间。（Android会把class编译成dex，并对dex文件进行校验，对class进行预校验是多余的。）</span><br><span class="line"></span><br><span class="line">#---------------------------------------------- preverify</span><br></pre></td></tr></table></figure>
<h2 id="keep配置"><a href="#keep配置" class="headerlink" title="keep配置"></a>keep配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -keep [,modifier,...] class_specification</span><br><span class="line"># 指定类及类成员作为代码入口，保护其不被proguard，如：</span><br><span class="line">-keep class com.rush.Test</span><br><span class="line">-keep interface com.rush.InterfaceTest</span><br><span class="line">-keep class com.rush.** &#123;</span><br><span class="line">    &lt;init&gt;;</span><br><span class="line">    public &lt;fields&gt;;</span><br><span class="line">    public &lt;methods&gt;;</span><br><span class="line">    public *** get*();</span><br><span class="line">    void set*(***);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>class表示keep类或接口</li>
<li>interface仅表示keep接口</li>
</ul>
<p><strong>类名 通配符如下:</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">通配符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">匹配单个字符，包名分隔符（.）除外</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">匹配除（.）外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">**</td>
<td style="text-align:left">匹配任意字符（包含.），如com.rush.**匹配com.rush包下的所有类及其所有子包的类。</td>
</tr>
</tbody>
</table>
<p><strong>字段和方法 通配符如下：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">通配符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&lt;init&gt;</code></td>
<td style="text-align:left">匹配所有构造方法</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;fields&gt;</code></td>
<td style="text-align:left">匹配所有字段</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;methods&gt;</code></td>
<td style="text-align:left">匹配所有方法</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">匹配单个字符，包名分隔符（.）除外</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">匹配除（.）外的任意字符</td>
</tr>
</tbody>
</table>
<p><strong>类型 通配符如下：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">通配符</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%</td>
<td style="text-align:left">匹配原始类型，如int, boolean等</td>
</tr>
<tr>
<td style="text-align:left">?</td>
<td style="text-align:left">匹配任意单个字符</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">匹配除包名分隔符（.）外的任意字符</td>
</tr>
<tr>
<td style="text-align:left">**</td>
<td style="text-align:left">匹配任意字符，包括包名分隔符（.）</td>
</tr>
<tr>
<td style="text-align:left">***</td>
<td style="text-align:left">匹配任意类型（原始类型、非原始类型、数组或非数组类型）</td>
</tr>
<tr>
<td style="text-align:left">…</td>
<td style="text-align:left">匹配任意参数个数，任意参数类型</td>
</tr>
</tbody>
</table>
<p><strong>其中类配置完整定义如下，其中[]表示可选：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[@annotationtype] [[!]public|final|abstract|@ ...] [!]interface|class|enum classname</span><br><span class="line">    [extends|implements [@annotationtype] classname]</span><br><span class="line">[&#123;</span><br><span class="line">    [@annotationtype] [[!]public|private|protected|static|volatile|transient ...] &lt;fields&gt; |</span><br><span class="line">                                                                      (fieldtype fieldname);</span><br><span class="line">    [@annotationtype] [[!]public|private|protected|static|synchronized|native|abstract|strictfp ...] &lt;methods&gt; |</span><br><span class="line">                                                                                           &lt;init&gt;(argumenttype,...) |</span><br><span class="line">                                                                                           classname(argumenttype,...) |</span><br><span class="line">                                                                                           (returntype methodname(argumenttype,...));</span><br><span class="line">    [@annotationtype] [[!]public|private|protected|static ... ] *;</span><br><span class="line">    ...</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">保留</th>
<th style="text-align:left">防止被移除或重命名</th>
<th style="text-align:left">防止被重命名（未使用的会被移除）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">类和类成员</td>
<td style="text-align:left">-keep</td>
<td style="text-align:left">-keepnames</td>
</tr>
<tr>
<td style="text-align:left">仅类成员</td>
<td style="text-align:left">-keepclassmembers</td>
<td style="text-align:left">-keepclassmembernames</td>
</tr>
<tr>
<td style="text-align:left">如类含有某成员，保留类及其成员</td>
<td style="text-align:left">-keepclasseswithmembers</td>
<td style="text-align:left">-keepclasseswithmembernames</td>
</tr>
</tbody>
</table>
<h1 id="更多详细指令"><a href="#更多详细指令" class="headerlink" title="更多详细指令"></a>更多详细指令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 代码混淆压缩比，在 0~7 之间</span><br><span class="line">-optimizationpasses 5</span><br><span class="line"></span><br><span class="line"># 不提示警告</span><br><span class="line">-dontwarn</span><br><span class="line"></span><br><span class="line"># 混合时不使用大小写混合，混合后的类名为小写</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"></span><br><span class="line"># 指定不忽略非公共库的类和类成员</span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line">-dontskipnonpubliclibraryclassmembers</span><br><span class="line"></span><br><span class="line"># 这句话能够使我们的项目混淆后产生映射文件</span><br><span class="line"># 包含有类名-&gt;混淆后类名的映射关系</span><br><span class="line">-verbose</span><br><span class="line"></span><br><span class="line"># 不做预校验，preverify是proguard的四个步骤之一，Android不需要preverify，去掉这一步能够加快混淆速度</span><br><span class="line">-dontpreverify</span><br><span class="line"></span><br><span class="line"># 保留Annotation不混淆</span><br><span class="line">-keepattributes *Annotation*,InnerClasses</span><br><span class="line"></span><br><span class="line"># 避免混淆泛型</span><br><span class="line">-keepattributes Signature</span><br><span class="line"></span><br><span class="line"># 抛出异常时保留代码行号</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line"></span><br><span class="line"># 指定混淆是采用的算法，后面的参数是一个过滤器</span><br><span class="line"># 这个过滤器是 Google 推荐的算法，一般不做修改</span><br><span class="line">-optimizations !code/simplification/arithmetic,!code/simplification/cast,!field/*,!class/merging/*</span><br><span class="line"></span><br><span class="line"># 是否允许改变作用域的，可以提高优化效果</span><br><span class="line"># 但是，如果你的代码是一个库的话，最好不要配置这个选项，因为它可能会导致一些 private 变量被改成 public，谨慎使用</span><br><span class="line">#-allowaccessmodification</span><br><span class="line"></span><br><span class="line"># 指定一些接口可能会被合并，即使一些子类没有同时实现两个接口的方法。这种情况在java源码中是不允许存在的，但是在java字节码中是允许存在的。</span><br><span class="line"># 它的作用是通过合并接口减少类的数量，从而达到减少输出文件体积的效果。仅在 optimize 阶段有效。</span><br><span class="line"># 如果在开启后没有任何影响可以使用，这项配置对于一些虚拟机的65535方法数限制是有一定效果的，谨慎使用</span><br><span class="line">#-mergeinterfacesaggressively</span><br><span class="line"></span><br><span class="line"># 输出所有找不到引用和一些其它错误的警告，但是继续执行处理过程。不处理警告有些危险，所以在清楚配置的具体作用的时候再使用</span><br><span class="line">-ignorewarnings</span><br><span class="line">-include &#123;filename&#125;     #从给定的文件中读取配置参数</span><br><span class="line">-basedirectory &#123;directoryname&#125;    #指定基础目录为以后相对的档案名称</span><br><span class="line">-injars &#123;class_path&#125;    #指定要处理的应用程序jar,war,ear和目录</span><br><span class="line">-outjars &#123;class_path&#125;     #指定处理完后要输出的jar,war,ear和目录的名称</span><br><span class="line">-libraryjars &#123;classpath&#125;     #指定要处理的应用程序jar,war,ear和目录所需要的程序库文件</span><br><span class="line">-dontskipnonpubliclibraryclasses     #指定不去忽略非公共的库类。</span><br><span class="line">-dontskipnonpubliclibraryclassmembers     #指定不去忽略包可见的库类的成员。</span><br><span class="line"></span><br><span class="line"> #保留选项</span><br><span class="line">-keep &#123;Modifier&#125; &#123;class_specification&#125;     #保护指定的类文件和类的成员</span><br><span class="line">-keepclassmembers &#123;modifier&#125; &#123;class_specification&#125;     #保护指定类的成员，如果此类受到保护他们会保护的更好</span><br><span class="line">-keepclasseswithmembers &#123;class_specification&#125;     #保护指定的类和类的成员，但条件是所有指定的类和类成员是要存在。</span><br><span class="line">-keepnames &#123;class_specification&#125;     #保护指定的类和类的成员的名称（如果他们不会压缩步骤中删除）</span><br><span class="line">-keepclassmembernames &#123;class_specification&#125;     #保护指定的类的成员的名称（如果他们不会压缩步骤中删除）</span><br><span class="line">-keepclasseswithmembernames &#123;class_specification&#125;     #保护指定的类和类的成员的名称，如果所有指定的类成员出席（在压缩步骤之后）</span><br><span class="line">-printseeds &#123;filename&#125;     #列出类和类的成员-keep选项的清单，标准输出到给定的文件</span><br><span class="line"></span><br><span class="line"> #压缩</span><br><span class="line">-dontshrink     #不压缩输入的类文件</span><br><span class="line">-printusage &#123;filename&#125;</span><br><span class="line">-whyareyoukeeping &#123;class_specification&#125;</span><br><span class="line"></span><br><span class="line"> #优化</span><br><span class="line">-dontoptimize     #不优化输入的类文件</span><br><span class="line">-assumenosideeffects &#123;class_specification&#125;     #优化时假设指定的方法，没有任何副作用</span><br><span class="line">-allowaccessmodification     #优化时允许访问并修改有修饰符的类和类的成员</span><br><span class="line"></span><br><span class="line"> #混淆</span><br><span class="line">-dontobfuscate     #不混淆输入的类文件</span><br><span class="line">-printmapping &#123;filename&#125;</span><br><span class="line">-applymapping &#123;filename&#125;     #重用映射增加混淆</span><br><span class="line">-obfuscationdictionary &#123;filename&#125;     #使用给定文件中的关键字作为要混淆方法的名称</span><br><span class="line">-overloadaggressively     #混淆时应用侵入式重载</span><br><span class="line">-useuniqueclassmembernames     #确定统一的混淆类的成员名称来增加混淆</span><br><span class="line">-flattenpackagehierarchy &#123;package_name&#125;     #重新包装所有重命名的包并放在给定的单一包中</span><br><span class="line">-repackageclass &#123;package_name&#125;     #重新包装所有重命名的类文件中放在给定的单一包中</span><br><span class="line">-dontusemixedcaseclassnames     #混淆时不会产生形形色色的类名</span><br><span class="line">-keepattributes &#123;attribute_name,...&#125;     #保护给定的可选属性，例如LineNumberTable, LocalVariableTable, SourceFile, Deprecated, Synthetic, Signature, and</span><br><span class="line"></span><br><span class="line"> #InnerClasses.</span><br><span class="line">-renamesourcefileattribute &#123;string&#125;     #设置源文件中给定的字符串常量</span><br></pre></td></tr></table></figure>
<h1 id="混淆日志"><a href="#混淆日志" class="headerlink" title="混淆日志"></a>混淆日志</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># APK 包内所有 class 的内部结构</span><br><span class="line">-dump proguard/class_files.txt</span><br><span class="line"># 未混淆的类和成员</span><br><span class="line">-printseeds proguard/seeds.txt</span><br><span class="line"># 列出从 APK 中删除的代码</span><br><span class="line">-printusage proguard/unused.txt</span><br><span class="line"># 混淆前后的映射，这个文件在追踪异常的时候是有用的</span><br><span class="line">-printmapping proguard/mapping.txt</span><br></pre></td></tr></table></figure>
<h1 id="其他自定义混淆规则"><a href="#其他自定义混淆规则" class="headerlink" title="其他自定义混淆规则"></a>其他自定义混淆规则</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># JavaBean 实体类不能混淆，一般会将实体类统一放到一个包下，you.package.path 请改成你自己的项目路径</span><br><span class="line">-keep public class com.frame.mvp.entity.** &#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 网页中的 JavaScript 进行交互，you.package.path 请改成你自己的项目路径</span><br><span class="line">#-keepclassmembers class you.package.path.JSInterface &#123;</span><br><span class="line">#    &lt;methods&gt;;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># 需要通过反射来调用的类，没有可忽略，you.package.path 请改成你自己的项目路径</span><br><span class="line">#-keep class you.package.path.** &#123; *; &#125;</span><br></pre></td></tr></table></figure>
<h1 id="一些不是很常用但比较实用的混淆命令"><a href="#一些不是很常用但比较实用的混淆命令" class="headerlink" title="一些不是很常用但比较实用的混淆命令"></a>一些不是很常用但比较实用的混淆命令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 所有重新命名的包都重新打包，并把所有的类移动到所给定的包下面。如果没有指定 packagename，那么所有的类都会被移动到根目录下</span><br><span class="line"># 如果需要从目录中读取资源文件，移动包的位置可能会导致异常，谨慎使用</span><br><span class="line"># you.package.path 请改成你自己的项目路径</span><br><span class="line">-flatternpackagehierarchy</span><br><span class="line"></span><br><span class="line"># 所有重新命名过的类都重新打包，并把他们移动到指定的packagename目录下。如果没有指定 packagename，同样把他们放到根目录下面。</span><br><span class="line"># 这项配置会覆盖-flatternpackagehierarchy的配置。它可以代码体积更小，并且更加难以理解。</span><br><span class="line"># you.package.path 请改成你自己的项目路径</span><br><span class="line">-repackageclasses you.package.path</span><br><span class="line"></span><br><span class="line"># 指定一个文本文件用来生成混淆后的名字。默认情况下，混淆后的名字一般为 a、b、c 这种。</span><br><span class="line"># 通过使用配置的字典文件，可以使用一些非英文字符做为类名。成员变量名、方法名。字典文件中的空格，标点符号，重复的词，还有以&apos;#&apos;开头的行都会被忽略。</span><br><span class="line"># 需要注意的是添加了字典并不会显著提高混淆的效果，只不过是更不利与人类的阅读。正常的编译器会自动处理他们，并且输出出来的jar包也可以轻易的换个字典再重新混淆一次。</span><br><span class="line"># 最有用的做法一般是选择已经在类文件中存在的字符串做字典，这样可以稍微压缩包的体积。</span><br><span class="line"># 字典文件的格式：一行一个单词，空行忽略，重复忽略</span><br><span class="line">-obfuscationdictionary</span><br><span class="line"></span><br><span class="line"># 指定一个混淆类名的字典，字典格式与 -obfuscationdictionary 相同</span><br><span class="line">#-classobfuscationdictionary</span><br><span class="line"># 指定一个混淆包名的字典，字典格式与 -obfuscationdictionary 相同</span><br><span class="line">-packageobfuscationdictionary</span><br><span class="line"></span><br><span class="line"># 混淆的时候大量使用重载，多个方法名使用同一个混淆名，但是他们的方法签名不同。这可以使包的体积减小一部分，也可以加大理解的难度。仅在混淆阶段有效。</span><br><span class="line"># 这个参数在 JDK 版本上有一定的限制，可能会导致一些未知的错误，谨慎使用</span><br><span class="line">-overloadaggressively</span><br><span class="line"></span><br><span class="line"># 方法同名混淆后亦同名，方法不同名混淆后亦不同名。不使用该选项时，类成员可被映射到相同的名称。因此该选项会增加些许输出文件的大小。</span><br><span class="line">-useuniqueclassmembernames</span><br><span class="line"></span><br><span class="line"># 指定在混淆的时候不使用大小写混用的类名。默认情况下，混淆后的类名可能同时包含大写字母和小写字母。</span><br><span class="line"># 这样生成jar包并没有什么问题。只有在大小写不敏感的系统（例如windows）上解压时，才会涉及到这个问题。</span><br><span class="line"># 因为大小写不区分，可能会导致部分文件在解压的时候相互覆盖。如果有在windows系统上解压输出包的需求的话，可以加上这个配置。</span><br><span class="line">-dontusemixedcaseclassnames</span><br></pre></td></tr></table></figure>
<h1 id="Android开发常用不需要混淆指令"><a href="#Android开发常用不需要混淆指令" class="headerlink" title="Android开发常用不需要混淆指令"></a>Android开发常用不需要混淆指令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Android 四大组件相关</span><br><span class="line">-keep public class * extends android.app.Activity</span><br><span class="line">-keep public class * extends android.app.Appliction</span><br><span class="line">-keep public class * extends android.app.Service</span><br><span class="line">-keep public class * extends android.content.BroadcastReceiver</span><br><span class="line">-keep public class * extends android.content.ContentProvider</span><br><span class="line">-keep public class * extends android.app.backup.BackupAgentHelper</span><br><span class="line">-keep public class * extends android.preference.Preference</span><br><span class="line">-keep public class * extends android.view.View</span><br><span class="line">-keep public class com.android.vending.licensing.ILicensingService</span><br><span class="line"></span><br><span class="line"># Fragment</span><br><span class="line">-keep public class * extends android.support.v4.app.Fragment</span><br><span class="line">-keep public class * extends android.app.Fragment</span><br><span class="line"></span><br><span class="line"># 保留support下的所有类及其内部类</span><br><span class="line">-keep class android.support.** &#123; *; &#125;</span><br><span class="line">-keep interface android.support.** &#123; *; &#125;</span><br><span class="line">-dontwarn android.support.**</span><br><span class="line"></span><br><span class="line"># 保留 R 下面的资源</span><br><span class="line">-keep class **.R$* &#123;*;&#125;</span><br><span class="line">-keepclassmembers class **.R$* &#123;</span><br><span class="line">    public static &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留本地 native 方法不被混淆</span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留在 Activity 中的方法参数是 view 的方法，</span><br><span class="line"># 这样以来我们在 layout 中写的 onClick 就不会被影响</span><br><span class="line">-keepclassmembers class * extends android.app.Activity&#123;</span><br><span class="line">    public void *(android.view.View);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留枚举类不被混淆</span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    public static **[] values();</span><br><span class="line">    public static ** valueOf(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留自定义控件（继承自View）不被混淆</span><br><span class="line">-keep public class * extends android.view.View&#123;</span><br><span class="line">    *** get*();</span><br><span class="line">    void set*(***);</span><br><span class="line">    public &lt;init&gt;(android.content.Context);</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留 Parcelable 序列化类不被混淆</span><br><span class="line">-keep class * implements android.os.Parcelable &#123;</span><br><span class="line">  public static final android.os.Parcelable$Creator *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 保留 Serializable 序列化的类不被混淆</span><br><span class="line">-keepclassmembers class * implements java.io.Serializable &#123;</span><br><span class="line">    static final long serialVersionUID;</span><br><span class="line">    private static final java.io.ObjectStreamField[] serialPersistentFields;</span><br><span class="line">    private void writeObject(java.io.ObjectOutputStream);</span><br><span class="line">    private void readObject(java.io.ObjectInputStream);</span><br><span class="line">    java.lang.Object writeReplace();</span><br><span class="line">    java.lang.Object readResolve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 对于带有回调函数的 onXXEvent 的，不能被混淆</span><br><span class="line">-keepclassmembers class * &#123;</span><br><span class="line">    void *(**On*Event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># WebView，没有使用 WebView 请注释掉</span><br><span class="line">-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;</span><br><span class="line">   public *;</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class="line">    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);</span><br><span class="line">    public boolean *(android.webkit.WebView, java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class="line">    public void *(android.webkit.webView, jav.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆使用了 @Keep 注解相关的类</span><br><span class="line">-keep class android.support.annotation.Keep</span><br><span class="line"></span><br><span class="line">-keep @android.support.annotation.Keep class * &#123;*;&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;init&gt;(...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 删除代码中 Log 相关的代码，如果删除了一些预料之外的代码，很容易就会导致代码崩溃，谨慎使用</span><br><span class="line">-assumenosideeffects class android.util.Log&#123;</span><br><span class="line">   public static boolean isLoggable(java.lang.String,int);</span><br><span class="line">   public static int v(...);</span><br><span class="line">   public static int i(...);</span><br><span class="line">   public static int w(...);</span><br><span class="line">   public static int d(...);</span><br><span class="line">   public static int e(...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 删除自定义Log工具</span><br><span class="line">-assumenosideeffects class com.example.Log.Logger&#123;</span><br><span class="line">   public static int v(...);</span><br><span class="line">   public static int i(...);</span><br><span class="line">   public static int w(...);</span><br><span class="line">   public static int d(...);</span><br><span class="line">   public static int e(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="proguard配置示例"><a href="#proguard配置示例" class="headerlink" title="proguard配置示例"></a>proguard配置示例</h1><h2 id="Android默认推荐配置"><a href="#Android默认推荐配置" class="headerlink" title="Android默认推荐配置"></a>Android默认推荐配置</h2><p>在IDE自动生成的project.properties文件中，有这样一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#proguard.config=$&#123;sdk.dir&#125;/tools/proguard/proguard-android.txt:proguard-project.txt</span><br></pre></td></tr></table></figure>
<p>Android Studio默认生成的build.gradle文件有如下配置：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中getDefaultProguardFile(‘proguard-android.txt’)获取的也是tools/proguard/proguard-android.txt。</p>
<p>下面看一下这个文件的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 不使用大小写混合类名</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"># 不路过引用库中的非public类</span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line"># 输出更多信息</span><br><span class="line">-verbose</span><br><span class="line"></span><br><span class="line"># 不进行优化</span><br><span class="line">-dontoptimize</span><br><span class="line"># 不进行预校验</span><br><span class="line">-dontpreverify</span><br><span class="line"></span><br><span class="line"># keep注解</span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line">#keep google license服务接口</span><br><span class="line">-keep public class com.google.vending.licensing.ILicensingService</span><br><span class="line">-keep public class com.android.vending.licensing.ILicensingService</span><br><span class="line"></span><br><span class="line"># keep native方法及其所属类</span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># keep自定义view的get/set方法</span><br><span class="line">-keepclassmembers public class * extends android.view.View &#123;</span><br><span class="line">   void set*(***);</span><br><span class="line">   *** get*();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># keep继续自Activity中所有包含public void *(android.view.View)签名的方法，如onClick</span><br><span class="line">-keepclassmembers class * extends android.app.Activity &#123;</span><br><span class="line">   public void *(android.view.View);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># keep枚举中的values和valueOf方法</span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    public static **[] values();</span><br><span class="line">    public static ** valueOf(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># keep Parcelable的CREATOR成员</span><br><span class="line">-keepclassmembers class * implements android.os.Parcelable &#123;</span><br><span class="line">  public static final android.os.Parcelable$Creator CREATOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># keep R文件的静态字段</span><br><span class="line">-keepclassmembers class **.R$* &#123;</span><br><span class="line">    public static &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不输出support包中的警告</span><br><span class="line">-dontwarn android.support.**</span><br></pre></td></tr></table></figure>
<h2 id="典型library库的配置"><a href="#典型library库的配置" class="headerlink" title="典型library库的配置"></a>典型library库的配置</h2><p>示例引用自官方文档samples:<em><a href="https://www.guardsquare.com/en/products/proguard/manual/examples#library" target="_blank" rel="noopener">https://www.guardsquare.com/en/products/proguard/manual/examples#library</a></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这个配置未弄清楚，待测试</span><br><span class="line">-renamesourcefileattribute SourceFile </span><br><span class="line">-keepattributes Exceptions,InnerClasses,Signature,Deprecated,</span><br><span class="line">                SourceFile,LineNumberTable,*Annotation*,EnclosingMethod </span><br><span class="line"></span><br><span class="line"># keep所有类的protected成员</span><br><span class="line">-keep public class * &#123; </span><br><span class="line">      public protected *; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"># keep在jdk 1.2中编译器插入的代码</span><br><span class="line">-keepclassmembernames class * &#123; </span><br><span class="line">    java.lang.Class class$(java.lang.String); </span><br><span class="line">    java.lang.Class class$(java.lang.String, boolean); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"># keep native方法</span><br><span class="line">-keepclasseswithmembernames,includedescriptorclasses class * &#123; </span><br><span class="line">    native &lt;methods&gt;; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"># keep枚举中的values和valueOf方法</span><br><span class="line">-keepclassmembers,allowoptimization enum * &#123; </span><br><span class="line">    public static **[] values(); </span><br><span class="line">    public static ** valueOf(java.lang.String); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"># keep系列化相关方法</span><br><span class="line">-keepclassmembers class * implements java.io.Serializable &#123; </span><br><span class="line">    static final long serialVersionUID; </span><br><span class="line">    private static final java.io.ObjectStreamField[] serialPersistentFields; </span><br><span class="line">    private void writeObject(java.io.ObjectOutputStream); </span><br><span class="line">    private void readObject(java.io.ObjectInputStream); </span><br><span class="line">    java.lang.Object writeReplace(); </span><br><span class="line">    java.lang.Object readResolve(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="一个典型Android-App的配置"><a href="#一个典型Android-App的配置" class="headerlink" title="一个典型Android App的配置"></a>一个典型Android App的配置</h2><p>示例引用自官方文档samples:<em><a href="https://www.guardsquare.com/en/products/proguard/manual/examples#androidapplication" target="_blank" rel="noopener">https://www.guardsquare.com/en/products/proguard/manual/examples#androidapplication</a></em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-dontpreverify </span><br><span class="line">-repackageclasses &apos;&apos; </span><br><span class="line">-allowaccessmodification </span><br><span class="line"># 不优化算法指令</span><br><span class="line">-optimizations !code/simplification/arithmetic </span><br><span class="line">-keepattributes *Annotation* </span><br><span class="line"></span><br><span class="line"># keep继承自系统组件的类</span><br><span class="line">-keep public class * extends android.app.Activity </span><br><span class="line">-keep public class * extends android.app.Application </span><br><span class="line">-keep public class * extends android.app.Service </span><br><span class="line">-keep public class * extends android.content.BroadcastReceiver </span><br><span class="line">-keep public class * extends android.content.ContentProvider</span><br><span class="line"></span><br><span class="line"># keep自定义view及其构造方法、set方法</span><br><span class="line">-keep public class * extends android.view.View &#123; </span><br><span class="line">      public &lt;init&gt;(android.content.Context); </span><br><span class="line">      public &lt;init&gt;(android.content.Context, android.util.AttributeSet); </span><br><span class="line">      public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int); </span><br><span class="line">      public void set*(...); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123; </span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123; </span><br><span class="line">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">-keepclassmembers class * extends android.content.Context &#123; </span><br><span class="line">    public void *(android.view.View); </span><br><span class="line">    public void *(android.view.MenuItem); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">-keepclassmembers class * implements android.os.Parcelable &#123; </span><br><span class="line">    static ** CREATOR; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">-keepclassmembers class **.R$* &#123; </span><br><span class="line">    public static &lt;fields&gt;; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"># keep javascript注释的方法，使用到webview js回调方法的需要添加此配置</span><br><span class="line">-keepclassmembers class * &#123; </span><br><span class="line">    @android.webkit.JavascriptInterface &lt;methods&gt;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="关于反射"><a href="#关于反射" class="headerlink" title="关于反射"></a>关于反射</h1><p>并不是所有会被反射引用的类都必须keep，在progurad过程中能直接分析到引用的类会被proguard做相应的处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Class.forName的类名&quot;SomeClass&quot;被混淆后自动替换</span><br><span class="line">Class.forName(&quot;SomeClass&quot;)</span><br><span class="line">SomeClass.class</span><br><span class="line"># 以下字段和方法名都会在被混淆后自动替换</span><br><span class="line">SomeClass.class.getField(&quot;someField&quot;)</span><br><span class="line">SomeClass.class.getDeclaredField(&quot;someField&quot;)</span><br><span class="line">SomeClass.class.getMethod(&quot;someMethod&quot;, new Class[] &#123;&#125;)</span><br><span class="line">SomeClass.class.getMethod(&quot;someMethod&quot;, new Class[] &#123; A.class &#125;)</span><br><span class="line">SomeClass.class.getMethod(&quot;someMethod&quot;, new Class[] &#123; A.class, B.class &#125;)</span><br><span class="line">SomeClass.class.getDeclaredMethod(&quot;someMethod&quot;, new Class[] &#123;&#125;)</span><br><span class="line">SomeClass.class.getDeclaredMethod(&quot;someMethod&quot;, new Class[] &#123; A.class &#125;)</span><br><span class="line">SomeClass.class.getDeclaredMethod(&quot;someMethod&quot;, new Class[] &#123; A.class, B.class &#125;)</span><br><span class="line">AtomicIntegerFieldUpdater.newUpdater(SomeClass.class, &quot;someField&quot;)</span><br><span class="line">AtomicLongFieldUpdater.newUpdater(SomeClass.class, &quot;someField&quot;)</span><br><span class="line">AtomicReferenceFieldUpdater.newUpdater(SomeClass.class, SomeType.class, &quot;someField&quot;)</span><br></pre></td></tr></table></figure>
<p>验证一下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.rush.test.SimpleClass1"</span>);</span><br><span class="line">clazz.getDeclaredMethod(<span class="string">"Test1"</span>);</span><br><span class="line">SimpleClass2.class.getDeclaredField("mTestField");</span><br><span class="line">SimpleClass2.class.getDeclaredMethod("Test2");</span><br></pre></td></tr></table></figure>
<p>对以上代码编译并proguard，结果如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.rush.a.a"</span>).getDeclaredMethod(<span class="string">"Test1"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">b.class.getDeclaredField("a");</span><br><span class="line">b.class.getDeclaredMethod("a", new Class[0]);</span><br></pre></td></tr></table></figure>
<ul>
<li>通过Class.forName反射的class com.rush.test.SimpleClass1”被自动替换成了”com.rush.a.a”；</li>
<li>但通过Class.forName获取的class再去反射方法没有正确处理；</li>
<li>通过完整class.getDeclaredField或者getDeclaredMethod反射时能够把字段名和方法名自动替换掉。</li>
</ul>
<p>从结果看，反射并不是大家想像的那样必须keep，proguard能自动分析到引用的情况都能正确处理。但有些类是在配置文件里配置，或者动态拼接类名反射的，这些情况需要做好keep。</p>
<p>为了问题追踪的方便，建议所有会被反射引用的代码和library public接口都做好keep。</p>
<h1 id="关于proguard配置的一些建议"><a href="#关于proguard配置的一些建议" class="headerlink" title="关于proguard配置的一些建议"></a>关于proguard配置的一些建议</h1><ul>
<li>所有会被反射引用的类都做好keep（建议，虽然有些反射能被正确处理）。<br>如native方法，四大组件，接口model，枚举，序列化类等。</li>
<li>只keep必须保留的内容，不要过度keep</li>
<li>使用热修复的App，添加-dontoptimize配置</li>
</ul>
<h1 id="资源混淆"><a href="#资源混淆" class="headerlink" title="资源混淆"></a>资源混淆</h1><p><code>AndResGuard</code>是一个帮助你缩小APK大小的工具，他的原理类似Java Proguard，但是只针对资源。他会将原本冗长的资源路径变短，例如将<code>res/drawable/wechat变为r/d/a</code>。</p>
<p><code>AndResGuard</code>不涉及编译过程，只需输入一个apk(无论签名与否，<code>debug</code>版，<code>release</code>版均可，在处理过程中会直接将原签名删除)，可得到一个实现资源混淆后的apk(若在配置文件中输入签名信息，可自动重签名并对齐，得到可直接发布的apk)以及对应资源ID的mapping文件。</p>
<p>github:<a href="https://github.com/shwenzhang/AndResGuard/blob/master/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/shwenzhang/AndResGuard/blob/master/README.zh-cn.md</a></p>
<p>原理:<a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=208135658&amp;idx=1&amp;sn=ac9bd6b4927e9e82f9fa14e396183a8f#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=208135658&amp;idx=1&amp;sn=ac9bd6b4927e9e82f9fa14e396183a8f#rd</a></p>
<h1 id="丧心病狂的混淆操作"><a href="#丧心病狂的混淆操作" class="headerlink" title="丧心病狂的混淆操作"></a>丧心病狂的混淆操作</h1><p>原理：混淆是可以配置词典,<a href="https://mp.weixin.qq.com/s/ya0RiLuHfIBrPLkl2lTbaA" target="_blank" rel="noopener">原文链接</a></p>
<p>随便找一个开源项目上手</p>
<p><a href="https://github.com/kingwang666/GetApk" target="_blank" rel="noopener">https://github.com/kingwang666/GetApk</a></p>
<p>开启混淆</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">    debug &#123;</span><br><span class="line">        minifyEnabled <span class="keyword">true</span></span><br><span class="line">        proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到上面配置了混淆文件包含：<code>proguard-rules.pro</code></p>
<p>和moudule的build.gradle在同一目录，在里面可以添加你的词典配置：</p>
<p><img src="demo.png" alt></p>
<blockquote>
<p>强烈建议，开启混淆后，配置词典前，先打个包运行一下确定可以正常运行。</p>
</blockquote>
<p>最后上面的混淆词典，分别来自不同的开源项目：</p>
<p><a href="https://github.com/RockyQu/ProguardDictionary" target="_blank" rel="noopener">https://github.com/RockyQu/ProguardDictionary</a></p>
<p>包含使用Java关键词的词典。</p>
<p><a href="https://github.com/o2e/ProguardDictionaryGenerator" target="_blank" rel="noopener">https://github.com/o2e/ProguardDictionaryGenerator</a></p>
<p>包含最后那个全是非常神奇的字符的。</p>
<p><a href="https://github.com/WrBug/FrenziedProguard" target="_blank" rel="noopener">https://github.com/WrBug/FrenziedProguard</a></p>
<p>包含1il,中文，0oO的。</p>
<blockquote>
<p>放一个混淆后的apk地址，如果实在懒得run又想看看效果：<br><a href="http://wanandroid.com/blogimgs/57ed3c61-08ee-4a3f-b859-f3cd1d748437.apk" target="_blank" rel="noopener">http://wanandroid.com/blogimgs/57ed3c61-08ee-4a3f-b859-f3cd1d748437.apk</a></p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.jianshu.com/p/60e82aafcfd0" target="_blank" rel="noopener">https://www.jianshu.com/p/60e82aafcfd0</a></p>
<p><a href="https://rockycoder.cn/android/2018/03/15/Android-proguard-rules.html" target="_blank" rel="noopener">https://rockycoder.cn/android/2018/03/15/Android-proguard-rules.html</a></p>
<p><a href="https://juejin.im/post/5ae7edc7f265da0b776f7a95" target="_blank" rel="noopener">https://juejin.im/post/5ae7edc7f265da0b776f7a95</a></p>
<p><a href="https://www.imooc.com/learn/879" target="_blank" rel="noopener">https://www.imooc.com/learn/879</a></p>
<p><a href="https://mp.weixin.qq.com/s/BP3SIDaxAy4-5rZYMibpmA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/BP3SIDaxAy4-5rZYMibpmA</a></p>
<p><a href="https://www.guardsquare.com/en/proguard/manual/introduction" target="_blank" rel="noopener">https://www.guardsquare.com/en/proguard/manual/introduction</a></p>
<p><a href="https://www.guardsquare.com/en/proguard/manual/usage" target="_blank" rel="noopener">https://www.guardsquare.com/en/proguard/manual/usage</a></p>
<p><a href="https://www.guardsquare.com/en/proguard/manual/examples" target="_blank" rel="noopener">https://www.guardsquare.com/en/proguard/manual/examples</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac应用程序无法打开或文件损坏的处理方法</title>
    <url>/2019/04/12/Mac%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E6%88%96%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天安装一些软件时遇到了 <strong>无法打开或文件损坏的Mac应用程序</strong>，所以查了一下解决办法，记录在了博客下。</p>
<p>本人机器系统版本<code>Mojave 10.14.4</code></p>
<a id="more"></a>
<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>大多数用户在安装 Mac 应用时，经常会遇到提示 “ XXX.app 已损坏，打不开。您应该将它移到废纸篓 ” 或 “ 打不开 XXX.app，因为它来自身份不明的开发者 ” ，如下图所示：</p>
<p><img src="f1.png" alt></p>
<p><img src="f2.png" alt></p>
<p><strong>1. 打开系统偏好设置界面，进入安全性与隐私</strong></p>
<p><img src="f3.jpeg" alt></p>
<p><strong>2. 点按左下角的锁头图标，解锁更改权限</strong></p>
<p><strong>3. 将允许从以下位置下载的应用，更改为 “ 任何来源 ” ，然后再打开应用即可</strong></p>
<p><img src="f4.jpeg" alt></p>
<p>若没有“任何来源”这个选项（<code>macOS Sierra 10.12</code>及以上的用户可能会遇到），按以下步骤执行：<br>打开终端<code>（Terminal.app）</code><br>拷贝粘贴<code>sudo spctl --master-disable</code>，按回车键</p>
<p>输入你的账户密码，按回车键确认执行（该密码不会显示，直接输入即可）</p>
<p><img src="f5.png" alt></p>
<p><img src="f6.png" alt></p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>如安装应用时，出现 “ 打不开 XXX.app，因为它来自身份不明的开发者 ” ，并提示你的软件在什么位置什么时间下载了磁盘影像。如图所示：</p>
<p><img src="f7.png" alt></p>
<p><strong>1、将软件放入“应用程序”后，点击软件 右键-打开 ，如图所示：</strong></p>
<p><img src="f8.png" alt></p>
<p><strong>2、弹出以下对话框后，你打开即可。</strong></p>
<p><img src="f9.png" alt></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.puasu.com/article/share/201805/10.html" target="_blank" rel="noopener">http://www.puasu.com/article/share/201805/10.html</a></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端前端开发之viewport</title>
    <url>/2019/04/11/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B9%8Bviewport/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>浏览器的<code>viewport</code>是可以看到Web内容的窗口区域，通常与渲染出的页面的大小不同，这种情况下，浏览器会提供滚动条以滚动访问所有内容。</p>
<p>窄屏幕设备（如移动设备）在一个虚拟窗口或视口中渲染页面，这个窗口或视口通常比屏幕宽；然后缩小渲染的结果，以便在一屏内显示所有内容。然后用户可以移动、缩放以查看页面的不同区域。例如，如果移动屏幕的宽度为640px，则可能会用980px的虚拟视口渲染页面，然后缩小页面以适应640px的窗口大小。</p>
<p>这样做是因为许多页面没有做移动端优化，在小窗口渲染时会乱掉（或看起来乱）。所以，这种虚拟视口是一种让未做移动端优化的网站在窄屏设备上看起来更好的办法。</p>
<a id="more"></a>
<h1 id="移动浏览器的问题"><a href="#移动浏览器的问题" class="headerlink" title="移动浏览器的问题"></a>移动浏览器的问题</h1><p>当我们将移​​动浏览器与桌面浏览器进行比较时，最明显的区别是屏幕尺寸。移动浏览器显示的桌面优化网站显着少于桌面浏览器; 通过缩小直到文本不可读的小，或者只显示适合屏幕的网站的一小部分。</p>
<p>移动屏幕远小于桌面屏幕; 考虑最大宽度为400px，有时候要少得多。（有些手机报告的宽度较大，但它们正在撒谎 - 或者至少给我们无用的信息。）</p>
<p>平板电脑设备的中间层，如iPad或传闻中的基于HP webOS的平板设备，将弥合桌面和移动设备之间的差距，但这不会改变根本问题。网站也必须在移动设备上运行，因此我们必须让它们在小屏幕上显示。</p>
<p>最重要的问题集中在CSS上，尤其是视口的尺寸。如果我们一对一地复制桌面模型，我们的CSS就会开始惨不忍睹。</p>
<p>让我们回到我们的侧边栏吧width: 10%。如果移动浏览器与桌面浏览器完全相同，那么它们最多只能生成40px宽的元素，而且这个元素太窄了。你的液体布局看起来会非常可怕。</p>
<p>解决问题的一种方法是为移动浏览器构建一个特殊网站。即使除了你是否应该这样做的根本问题之外，实际的问题是只有极少数的网站所有者被充分利用以满足移动设备的需求。</p>
<p>移动浏览器供应商希望为他们的客户提供最佳体验，现在这意味着“尽可能像桌面一样。”因此需要一些技巧。</p>
<h1 id="设备像素和CSS像素"><a href="#设备像素和CSS像素" class="headerlink" title="设备像素和CSS像素"></a>设备像素和CSS像素</h1><p>讲解viewport视口前先来了解一下这两个概念，这两个概念虽然都是说像素，但是此像素非彼像素。</p>
<h2 id="设备像素"><a href="#设备像素" class="headerlink" title="设备像素"></a>设备像素</h2><p><strong>设备像素</strong>（device pixel）是物理概念，顾名思义，显示屏是由一个个物理像素点组成的，通过控制每个像素点的颜色，使屏幕显示出不同的图像，屏幕从工厂出来那天起，它上面的物理像素点就固定不变了，单位。</p>
<blockquote>
<p>pt在css单位中属于真正的绝对单位，1pt = 1/72(inch),inch及英寸，而1英寸等于2.54厘米。<br>pt = 1/72(英寸), px = 1/dpi(英寸)</p>
</blockquote>
<p>不同的设备，其图像基本单位是不同的，比如显示器的点距，可以认为是显示器的物理像素。现在的液晶显示器的点距一般在0.25mm到0.29mm之间。而打印机的墨点，也可以认为是打印机的物理像素，300DPI就是0.085mm，600DPI就是0.042mm。</p>
<p><img src="dp.jpeg" alt></p>
<p><strong>注意</strong>，我们通常所说的显示器分辨率，其实是指桌面设定的分辨率，而不是显示器的物理分辨率。只不过现在液晶显示器成为主流，由于液晶的显示原理与CRT不同，只有在桌面分辨率与物理分辨率一致的情况下，显示效果最佳，所以现在我们的桌面分辨率几乎总是与显示器的物理分辨率一致了。</p>
<h2 id="CSS像素"><a href="#CSS像素" class="headerlink" title="CSS像素"></a>CSS像素</h2><p><strong>CSS像素</strong>（css pixel）是Web编程概念，指的是CSS样式代码中使用的逻辑像素。</p>
<p>在CSS规范中，长度单位分为两类：绝对（absolute）单位和相对（relative）单位。而px是一个相对单位，相对于设备像素。</p>
<p><strong>CSS像素的相对性</strong></p>
<p>举个例子理解：</p>
<p>使用PC端浏览器打开一个网页，网页中有一个宽400px的盒子（块级元素）。浏览器宽为800px，那么这个盒子的宽此时应该占据页面的一半。但是我们使用浏览器中页面放大功能，放大200%，也就是原来的两倍，那么此时该盒子宽应该占满了整个页面。但是既没有调整浏览器窗口大小，也没有改变任何的css样式，但是该盒子却看上去放大了一倍。这是因为使用页面放大功能把css像素放大了两倍。</p>
<p>CSS像素与屏幕像素1：1同样大小时：</p>
<p><img src="csslizi1.png" alt></p>
<p>CSS像素(黑色边框)开始被拉伸，此时1个CSS像素大于1个屏幕像素</p>
<p><img src="csslizi2.png" alt></p>
<p>默认情况下一个CSS像素应该是等同于一个物理像素的，但是浏览器放大的操作让一个CSS像素等于两倍的设备像素。</p>
<p>而在移动端中的高PPI的设备上，CSS像素在默认情况下就相当于多个设备像素，如iPhone5使用的是Retina视网膜屏幕，使用<code>2px * 2px</code>的设备像素代表<code>1px * 1px</code>的CSS像素。所以设备像素为<code>640 * 1136</code>，而CSS像素为<code>320px * 568px</code>。</p>
<p><strong>设备独立像素（Device Independent Pixel）简写DIP或DP</strong></p>
<p>设备独立像素也叫 <strong>密度无关像素</strong> ，可以认为是计算机坐标系统中的一个点，这个点表示一个可以由程序使用并控制的虚拟像素，可以由相关系统转换为物理像素。设备独立像素是一个整体概念，包括了css像素，比如:css像素，<strong>只是在android /ios机中，css像素不叫 “css像素了”，而叫“设备独立像素”</strong>。iOS 中的 pt 和安卓中的单位 dp 本质上是一个概念，设备都是独立像素的意思，只是说法不一样。</p>
<blockquote>
<p>所以逻辑上各单位的关系：CSS像素 = 设备独立像素 = 逻辑像素</p>
</blockquote>
<h2 id="设备像素与CSS像素的关系"><a href="#设备像素与CSS像素的关系" class="headerlink" title="设备像素与CSS像素的关系"></a>设备像素与CSS像素的关系</h2><p>了解它们间的关系时，先来了解两个概念：<code>ppi</code>和<code>dpr</code></p>
<blockquote>
<p>PPI像素密度(pixel per inch) | DPR设备像素比(device pixel ratio)</p>
</blockquote>
<h3 id="PPI：屏幕密度"><a href="#PPI：屏幕密度" class="headerlink" title="PPI：屏幕密度"></a>PPI：屏幕密度</h3><p><code>ppi</code>:表示每英寸所拥有的像素数目，数值越高，代表显示屏能够以越高的密度显示图像。即每英寸像素取值，更确切的说法应该是像素密度，也就是衡量单位物理面积内拥有像素值的情况。</p>
<p><code>ppi</code>的计算公式可以查阅资料<a href="https://zh.wikipedia.org/wiki/%E6%AF%8F%E8%8B%B1%E5%AF%B8%E5%83%8F%E7%B4%A0" target="_blank" rel="noopener">ppi计算公式</a>。</p>
<p><img src="ppicalc.png" alt></p>
<p>来算一下数学</p>
<p><img src="calclizi.png" alt></p>
<p>图中以屏幕尺寸为4寸的<code>iPhone 5s</code>为例，分辨率为<code>1136 x 640</code>，代入公式像素密度为<code>326PPI</code>。计算结果会有出入。</p>
<blockquote>
<p><strong>DPI</strong>: 每英寸多少点。如果是在当用于描述显示器设备时，ppi和dpi是同一概念，是相等的。</p>
<p>这里的点是一个抽象的单位，它可以是屏幕像素点、图片像素点也可以是打印机的墨点。</p>
<p>平时你可能会看到使用<code>DPI</code>来描述图片和屏幕，这时的<code>DPI</code>应该和<code>PPI</code>是等价的，<code>DPI</code>最常用的是用于描述打印机，表示打印机每英寸可以打印的点数。</p>
<p>一张图片在屏幕上显示时，它的像素点数是规则排列的，每个像素点都有特定的位置和颜色。</p>
<p>当使用打印机进行打印时，打印机可能不会规则的将这些点打印出来，而是使用一个个打印点来呈现这张图像，这些打印点之间会有一定的空隙，这就是<code>DPI</code>所描述的：打印点的密度</p>
</blockquote>
<p><img src="dpiprint.png" alt></p>
<blockquote>
<p>在上面的图像中我们可以清晰的看到，打印机是如何使用墨点来打印一张图像。所以，打印机的<code>DPI</code>越高，打印图像的精细程度就越高，同时这也会消耗更多的墨点和时间。</p>
</blockquote>
<h3 id="DPR：设备像素比"><a href="#DPR：设备像素比" class="headerlink" title="DPR：设备像素比"></a>DPR：设备像素比</h3><p>设备像素比（device pixel ratio）定义了设备像素和设备独立像素（CSS像素）的转换关系，即一个设备像素对应多少个设备独立像素（CSS像素）。</p>
<ul>
<li>与设备的关系：<code>DPR = 屏幕横向设备像素 / 设备PPI</code></li>
<li>与设备像素、CSS像素的关系：<code>DPR = 设备像素 / CSS像素</code></li>
<li>与 <strong>理想视口</strong>(下文将提到)的关系：<code>DPR = 屏幕横向设备像素 / 理想视口的宽度</code></li>
</ul>
<p>在一台移动终端中，设备像素的大小是固定的，不可变的。但是<code>设备独立像素dip</code>是可以被拉长或压缩的。</p>
<p><img src="whatisdip.png" alt></p>
<p>例如iPhone5s中使用的是Retina视网膜屏幕，即PPI超过300的都叫做超高密度屏幕，只不过苹果公司给了换了个高大上的名字：Retina视网膜屏幕。</p>
<p>但是在普通屏幕下1个设备像素等于一个CSS像素的设备已经很少了，比如 Iphone 5s 设备像素比为2，Iphone 6s 设备像素比为3。至于安卓机中的设备像素比就更多了，有1.3、1.5、2、3等等。</p>
<p><strong>如何理解DPR</strong></p>
<p>设备像素比(dpr) 是指在移动开发中1个css像素占用多少设备像素，如2代表1个css像素用2x2个设备像素来绘制。</p>
<p>设备像素比(dpr)，公式为<code>1px = (dpr)^2 * 1dp</code>，可以理解为1px由多少个设备像素组成；</p>
<blockquote>
<p>打开<code>chrome</code>的开发者工具，我们可以模拟各个手机型号的显示情况，每种型号上面会显示一个尺寸，比如<code>iPhone X</code>显示的尺寸是<code>375x812</code>，实际<code>iPhone X</code>的分辨率会比这高很多，这里显示的就是设备独立像素。</p>
</blockquote>
<h3 id="设备像素和CSS像素的关系"><a href="#设备像素和CSS像素的关系" class="headerlink" title="设备像素和CSS像素的关系"></a>设备像素和CSS像素的关系</h3><p>以iPhone6/7/8为例：</p>
<blockquote>
<p>设备宽高为375 × 667，可以理解为设备独立像素(或css像素)。<br>dpr为2，根据上面的计算公式，其物理像素就为750 × 1334。</p>
</blockquote>
<p><img src="csspixel.png" alt></p>
<p>上图中可以看出，对于这样的css样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 2<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 2<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>
<p>在不同的屏幕上(普通屏幕 vs retina屏幕)，css像素所呈现的大小(物理尺寸)是一致的，不同的是1个css像素所对应的物理像素个数是不一致的。</p>
<p>在普通屏幕下，1个css像素 对应 1个物理像素(1:1)。 在retina 屏幕下，1个css像素对应 4个物理像素(1:4)。</p>
<h2 id="window-devicePixelRatio"><a href="#window-devicePixelRatio" class="headerlink" title="window.devicePixelRatio"></a>window.devicePixelRatio</h2><p><code>window.devicePixelRatio</code>是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例。<br>公式表示就是：<code>window.devicePixelRatio = 物理像素 / dips</code>。</p>
<p>dip或dp,（device independent pixels，设备独立像素）与屏幕密度有关。dip可以用来辅助区分视网膜设备还是非视网膜设备。</p>
<p>所有非视网膜屏幕的iphone在垂直的时候，宽度为320物理像素。当你使用<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code>的时候，会设置视窗布局宽度（不同于视觉区域宽度，不放大显示情况下，两者大小一致，见下图）为320px, 于是，页面很自然地覆盖在屏幕上。</p>
<p>这样，非视网膜屏幕的iphone上，屏幕物理像素320像素，独立像素也是320像素，因此，window.devicePixelRatio等于1.</p>
<p>而对于视网膜屏幕的iphone，如iphone4s, 纵向显示的时候，屏幕物理像素640像素。同样，当用户设置<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code>的时候，其视区宽度并不是640像素，而是320像素，这是为了有更好的阅读体验 – 更合适的文字大小。</p>
<p>这样，在视网膜屏幕的iphone上，屏幕物理像素640像素，独立像素还是320像素，因此，<code>window.devicePixelRatio</code>等于<code>2</code>.</p>
<blockquote>
<p>在css中，可以通过-webkit-device-pixel-ratio，webkit-min-device-pixel-ratio和-webkit-max-device-pixel-ratio进行媒体查询，对不同dpr的设备，做一些样式适配(这里只针对webkit内核的浏览器和webview)。</p>
</blockquote>
<p><strong>兼容性</strong></p>
<p>来自<a href="https://caniuse.com/#search=window.devicePixelRatio" target="_blank" rel="noopener">caniuse.com</a></p>
<p><img src="caniusedevicepixelratio.png" alt></p>
<p>喜忧参半。好的是Safari, Android WebKit, Chrome 22+(Android), Opera Mobile, BlackBerry WebKit, QQ, Palm WebKit, 及Dolfin都能正确实现该属性。</p>
<p>当然，大部分这些浏览器仍然运行在<code>devicePixelRatio</code>值应该为<code>1</code>的系统上，当它们移动到视网膜类似设备时候，可能就会遇到问题。</p>
<blockquote>
<p>注意：你可以为这个 window.devicePixelRatio 重新赋值，但并不会对最终的显示造成任何的影响。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.devicePixelRatio = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.devicePixelRatio); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<h2 id="媒体查询min-device-pixel-ratio"><a href="#媒体查询min-device-pixel-ratio" class="headerlink" title="媒体查询min-device-pixel-ratio"></a>媒体查询min-device-pixel-ratio</h2><p>设备像素比<code>device pixel ratio</code>简称<code>dpr</code>，即物理像素和设备独立像素的比值。</p>
<p>在<code>web</code>中，浏览器为我们提供了<code>window.devicePixelRatio</code>来帮助我们获取<code>dpr</code>。</p>
<p>在<code>css</code>中，可以使用媒体查询<code>min-device-pixel-ratio</code>，区分<code>dpr</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">media</span> (-webkit-min-device-pixel-ratio: <span class="number">2</span>),(min-device-pixel-ratio: <span class="number">2</span>)&#123; &#125;</span><br></pre></td></tr></table></figure>
<p>在<code>React Native</code>中，我们也可以使用<code>PixelRatio.get()</code>来获取<code>DPR</code>。</p>
<p>当然，上面的规则也有例外，<code>iPhone 6、7、8 Plus</code>的实际物理像素是<code>1080 x 1920</code>，在开发者工具中我们可以看到：它的设备独立像素是<code>414 x 736</code>，设备像素比为<code>3</code>，设备独立像素和设备像素比的乘积并不等于<code>1080 x 1920</code>，而是等于<code>1242 x 2208</code>。</p>
<p>实际上，手机会自动把<code>1242 x 2208</code>个像素点塞进<code>1080 * 1920</code>个物理像素点来渲染，我们不用关心这个过程，而<code>1242 x 2208</code>被称为屏幕的<code>设计像素</code>。我们开发过程中也是以这个<code>设计像素</code>为准。</p>
<blockquote>
<p>实际上，从苹果提出视网膜屏幕开始，才出现设备像素比这个概念，因为在这之前，移动设备都是直接使用物理像素来进行展示。</p>
</blockquote>
<h2 id="设计师和前端工程师之间如何协同"><a href="#设计师和前端工程师之间如何协同" class="headerlink" title="设计师和前端工程师之间如何协同"></a>设计师和前端工程师之间如何协同</h2><p><strong>视觉稿</strong></p>
<p>在前端开发之前，视觉MM会给我们一个psd文件，称之为视觉稿。</p>
<p>对于移动端开发而言，为了做到页面高清的效果，视觉稿的规范往往会遵循以下两点：</p>
<p>首先，选取一款手机的屏幕宽高作为基准(以前是iphone4的320×480，现在更多的是iphone6的375×667)。<br>对于retina屏幕(如: dpr=2)，为了达到高清效果，视觉稿的画布大小会是基准的2倍，也就是说像素点个数是原来的4倍（对iphone6而言：原先的375×667，就会变成750×1334）。</p>
<p><strong>设计师和前端开发的适配协作基本思路</strong></p>
<p>出自手淘：</p>
<ul>
<li>选择一种尺寸作为设计和开发基准</li>
<li>定义一套适配规则，自动适配剩下的两种尺寸(其实不仅这两种，你懂的)</li>
<li>特殊适配效果给出设计效果</li>
</ul>
<p>手淘设计师常选择iPhone6作为基准设计尺寸，交付给前端的设计尺寸是按750px * 1334px为准(高度会随着内容多少而改变)。前端开发人员通过一套适配规则自动适配到其他的尺寸。</p>
<h1 id="分辨率、像素和屏幕尺寸"><a href="#分辨率、像素和屏幕尺寸" class="headerlink" title="分辨率、像素和屏幕尺寸"></a>分辨率、像素和屏幕尺寸</h1><p>分辨率是指一个块屏幕的像素尺寸。比如说<code>1334 * 750</code>是iPhone6的分辨率。</p>
<p>屏幕尺寸是指显示屏幕对角线的尺寸，一般用英寸来表示。</p>
<p>询问别人一粒像素有多大是一个非常鸡贼的问题（小心面试遇到这样的题），虽然我们说像素是构成屏幕的发光的点，是物理的，但是像素在脱离了屏幕尺寸之后是没有大小可言的，你可以将 1920 * 1080 颗像素放到一台 40 寸的小米电视机里面，也可以将同样多的像素全部塞到一台 5.5 寸的 iPhone7 Plus 手机里面去，那么对于 40 寸的电视而言，每个像素颗粒当然会大于 5.5 寸的手机的像素。</p>
<p><img src="tvandphone.jpeg" alt></p>
<p>所以光看屏幕的分辨率对于设计师来说是不具备多少实际意义的，通过分辨率计算得出的像素密度（PPI）才是设计师要关心的问题，我们通过屏幕分辨率和屏幕尺寸就能计算出屏幕的像素密度的。</p>
<p>再次使用 iPhone（6~7）作为例子。我们知道该屏幕的横向物理尺寸为 2.3 英寸 ，且横向具有 750 颗像素，根据下面的公式，我们能够算出 iPhone（6~7）的屏幕是 326 PPI，意为每寸存在 326 颗像素。</p>
<p>其实不论我们怎么除，计算得出来的像素密度（PPI）都会是这个数，宽存在像素除以宽物理长度，高存在像素除以高物理长度，得数都接近于 326。</p>
<h2 id="英寸"><a href="#英寸" class="headerlink" title="英寸"></a>英寸</h2><p>一般用英寸描述屏幕的物理大小，如电脑显示器的<code>17</code>、<code>22</code>，手机显示器的<code>4.8</code>、<code>5.7</code>等使用的单位都是英寸。</p>
<p>需要注意，上面的尺寸都是屏幕对角线的长度</p>
<p>英寸(<code>inch</code>,缩写为<code>in</code>)在荷兰语中的本意是大拇指，一英寸就是指甲底部普通人拇指的宽度。</p>
<p>英寸和厘米的换算：<code>1英寸 = 2.54 厘米</code></p>
<h2 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h2><p>像素即一个小方块，它具有特定的位置和颜色。</p>
<p>图片、电子屏幕（手机、电脑）就是由无数个具有特定颜色和特定位置的小方块拼接而成。</p>
<p>像素可以作为图片或电子屏幕的最小组成单位。</p>
<h2 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h2><p>屏幕分辨率指一个屏幕具体由多少个像素点组成。</p>
<p><code>iPhone XS Max</code> 和 <code>iPhone SE</code>的分辨率分别为<code>2688 x 1242</code>和<code>1136 x 640</code>。这表示手机分别在垂直和水平上所具有的像素点数。</p>
<p>当然分辨率高不代表屏幕就清晰，屏幕的清晰程度还与尺寸有关。</p>
<h2 id="图像分辨率"><a href="#图像分辨率" class="headerlink" title="图像分辨率"></a>图像分辨率</h2><p>我们通常说的<code>图片分辨率</code>其实是指图片含有的<code>像素数</code>，比如一张图片的分辨率为<code>800 x 400</code>。这表示图片分别在垂直和水平上所具有的像素点数为<code>800</code>和<code>400</code>。</p>
<p>同一尺寸的图片，分辨率越高，图片越清晰。</p>
<h1 id="viewport视口"><a href="#viewport视口" class="headerlink" title="viewport视口"></a>viewport视口</h1><p>在移动设备上的浏览器都会认为自己能让所有网站显示，即使不是为移动设备设计的网站。但是以浏览器可视区域为viewport的话，移动设备屏幕都不宽，所以那些为桌面浏览器设计的网站放到移动设备显示的时候，必然会因为viewport太窄而挤作一团，甚至布局也会乱掉。虽然市面上说某某手机分辨率达到<code>768 * 1024</code>，甚至到达2k屏的分辨率，那这么高的分辨率用来显示桌面网站应该没有问题吧。但是在上述文中<code>CSS像素</code>中的1px只是一个相对值，并不能够直接代表等于屏幕上的1px。手机分辨率越大，但是屏幕尺寸不变的情况下，css像素中的1px就回代表更多的物理像素，才能让1px的东西在屏幕上的大小与那些低分辨率的设备差不多，不然会因为太过于小而使得肉眼无法看清。</p>
<p>所以在移动设备下，浏览器的viewport可以分为三个：可视视口（visual viewport）、布局视口（layout viewport）和理想视口（ideal viewport）。（来自ppk大神观点）</p>
<blockquote>
<p>视口(<code>viewport</code>)代表当前可见的计算机图形区域。在<code>Web</code>浏览器术语中，通常与浏览器窗口相同，但不包括浏览器的<code>UI</code>， 菜单栏等——即指你正在浏览的文档的那一部分。</p>
</blockquote>
<h2 id="可视视口"><a href="#可视视口" class="headerlink" title="可视视口"></a>可视视口</h2><p>可视视口就是目前在屏幕上显示页面的一部分。用户可以滚动以更改用户自己所看到的部分，或者缩放以更改可视窗口的大小。</p>
<p><img src="visualviewport.jpg" alt></p>
<p>但是，CSS布局（尤其是百分比宽度）是相对于布局视口计算的， 布局视口比视觉视口宽得多。</p>
<p>因此，<code>&lt;html&gt;</code>元素最初采用布局视口的宽度，并且您的CSS被解释为屏幕明显比手机屏幕宽。这可确保您网站的布局与桌面浏览器上的布局相同。</p>
<p>布局视口有多宽？这与浏览器不同。<code>Safari iPhone</code>使用<code>980px</code>，<code>Opera</code>使用<code>850px</code>，<code>Android WebKit</code>使用<code>800px</code>和<code>IE</code>使用<code>974px</code>。</p>
<blockquote>
<p>可视视口的宽度可以通过<code>window.innerWidth</code>获取，但是在Android 2, Oprea mini 和 UC 8中无法正确获取。</p>
</blockquote>
<h2 id="布局视口"><a href="#布局视口" class="headerlink" title="布局视口"></a>布局视口</h2><p>一般移动设备的浏览器都默认设置了一个 viewport 元标签，定义一个虚拟的布局视口（layout viewport），用于解决早期的页面在手机上显示的问题。iOS, Android 基本都将这个视口分辨率设置为 980px，所以 PC 上的网页基本能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p>
<p><strong>完全缩小的情况下：visual viewport = layout viewport</strong></p>
<p><img src="vvlv.jpg" alt></p>
<p>浏览器选择了布局视口的尺寸，使其在完全缩小模式下完全覆盖屏幕（因此等于可视视口）.</p>
<p><strong>不完全缩小的情况下：layout viewport &gt; visual viewport</strong></p>
<p><img src="lvvv.jpg" alt></p>
<p>布局视口的宽度和高度等于在不完全缩小模式下可以在屏幕上显示的任何宽度和高度。当用户放大这些尺寸时保持不变。</p>
<p>在放大和缩小的过程中，<code>visual viewport</code>和<code>layout viewport</code>的宽，高都没发生任何的变化,变化的仅仅就像是用户拿着这个<code>visual viewport</code>去远离或者靠近<code>layout viewport</code>，在远离或者靠近的过程中，就会呈现出缩放的效果来。</p>
<blockquote>
<p>布局视口的宽度/高度可以通过<code>document.documentElement.clientWidth / Height</code>获取。</p>
</blockquote>
<h2 id="布局视口和可视视口的联系"><a href="#布局视口和可视视口的联系" class="headerlink" title="布局视口和可视视口的联系"></a>布局视口和可视视口的联系</h2><p>可以把<code>layout viewport</code>理解为一张完全遮住并且不能更边大小的白纸，把<code>visual viewport</code>理解为一个有边框的透视器，你可以通过这个透视器来查看这张白纸的内容。通过这个透视器你可以一点点的看到白纸部分内容，这里所能看到的就是<code>visual viewport</code>。你也可以靠近或者远离的方式来透视白纸（白纸静止不动），你看的内容可以变多或者变少，但是白纸<code>layout viewport</code>自身的大小和形状是不会发生改变的。</p>
<h2 id="理想视口"><a href="#理想视口" class="headerlink" title="理想视口"></a>理想视口</h2><p>布局视口的默认宽度并不是一个理想的宽度，于是 Apple 和其他浏览器厂商引入了理想视口的概念，它对设备而言是最理想的布局视口尺寸。显示在理想视口中的网站具有最理想的宽度，用户无需进行缩放。</p>
<blockquote>
<p>完美适配：首先不需要用户缩放和横向滚动条就能正常的查看网站的所有内容；第二，显示的文字的大小是合适，比如一段14px大小的文字，不会因为在一个高密度像素的屏幕里显示得太小而无法看清，理想的情况是这段14px的文字无论是在何种密度屏幕，何种分辨率下，显示出来的大小都是差不多的。当然，不只是文字，其他元素像图片什么的也是这个道理。</p>
</blockquote>
<p>理想视口的值其实就是屏幕分辨率的值，它对应的像素叫做设备逻辑像素（device independent pixel, dip）。dip 和设备的物理像素无关，一个 dip 在任意像素密度的设备屏幕上都占据相同的空间。如果用户没有进行<code>缩放</code>，那么一个 CSS 像素就等于一个 dip。</p>
<p><code>ideal viewport</code>并没有一个固定的尺寸，不同的设备拥有有不同的<code>ideal viewport</code>。所有的iphone的<code>ideal viewport</code>宽度都是320px，无论它的屏幕宽度是320还是640，也就是说，在iphone中，css中的320px就代表iphone屏幕的宽度。</p>
<p>但是安卓设备就比较复杂了，有320px的，有360px的，有384px的等等，关于不同的设备ideal viewport的宽度都为多少，可以到 <a href="http://viewportsizes.com" target="_blank" rel="noopener">http://viewportsizes.com</a> 去查看一下，里面收集了众多设备的理想宽度。</p>
<p>用下面的方法可以使布局视口与理想视口的宽度一致：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>两个视口都以CSS像素为单位进行测量。但是，当视觉视口尺寸随着缩放而变化时（如果放大，屏幕上的CSS像素较少），布局视口尺寸保持不变。（如果他们没有，您的页面将不断重排，因为重新计算百分比宽度。）</p>
<p>缩放是相对于<code>ideal viewport</code>缩放的，缩放值越大，当前viewport的宽度就会越小，反之亦然。例如在iphone中，<code>ideal viewport</code> 的宽度是320px，如果我们设置<code>initial-scale=2</code>，此时 viewport 的宽度会变为只有160px了，这也好理解，放大了一倍嘛，就是原来1px的东西变成2px了，但是1px变为2px并不是把原来的320px变为640px了，而是在实际宽度不变的情况下，1px变得跟原来的2px的长度一样了，所以放大2倍后原来需要320px才能填满的宽度现在只需要160px就做到了。因此，我们可以得出一个公式：</p>
<p><strong>视觉视口和缩放比例的关系为：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">visual viewport宽度 = ideal viewport宽度 / 当前缩放值</span><br><span class="line"></span><br><span class="line">当前缩放值 = 理想视口宽度  / 视觉视口宽度</span><br></pre></td></tr></table></figure>
<p>所以，当用户放大时，视觉视口将会变小，CSS 像素将跨越更多的物理像素。</p>
<h2 id="获取视口大小"><a href="#获取视口大小" class="headerlink" title="获取视口大小"></a>获取视口大小</h2><p><img src="getviewport.png" alt></p>
<ul>
<li><p><code>window.innerHeight</code>：获取浏览器视觉视口高度（包括垂直滚动条）。</p>
</li>
<li><p><code>window.outerHeight</code>：获取浏览器窗口外部的高度。表示整个浏览器窗口的高度，包括侧边栏、窗口镶边和调正窗口大小的边框。</p>
</li>
<li><p><code>window.screen.Height</code>：获取获屏幕取理想视口高度，这个数值是固定的，`设备的分辨率/设备像素比</p>
</li>
<li><p><code>window.screen.availHeight</code>：浏览器窗口可用的高度。</p>
</li>
<li><p><code>document.documentElement.clientHeight</code>：获取浏览器布局视口高度，包括内边距，但不包括垂直滚动条、边框和外边距。</p>
</li>
<li><p><code>document.documentElement.offsetHeight</code>：包括内边距、滚动条、边框和外边距。</p>
</li>
<li><p><code>document.documentElement.scrollHeight</code>：在不使用滚动条的情况下适合视口中的所有内容所需的最小宽度。测量方式与<code>clientHeight</code>相同：它包含元素的内边距，但不包括边框，外边距或垂直滚动条。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ppk大神把移动设备上的viewport分为 <strong>layout viewport</strong> 、 <strong>visual viewport</strong> 和 <strong>ideal viewport</strong> 三类，其中的<code>ideal viewport</code>是最适合移动设备的viewport，<code>ideal viewport</code>的宽度等于移动设备的屏幕宽度，只要在css中把某一元素的宽度设为<code>ideal viewport</code>的宽度(单位用px)，那么这个元素的宽度就是设备屏幕的宽度了，也就是宽度为100%的效果。<code>ideal viewport</code> 的意义在于，无论在何种分辨率的屏幕下，那些针对<code>ideal viewport</code>而设计的网站，不需要用户手动缩放，也不需要出现横向滚动条，都可以完美的呈现给用户。</p>
<h1 id="利用meta标签对viewport进行控制"><a href="#利用meta标签对viewport进行控制" class="headerlink" title="利用meta标签对viewport进行控制"></a>利用meta标签对viewport进行控制</h1><p>移动设备默认的viewport是layout viewport，也就是那个比屏幕要宽的viewport，但在进行移动设备网站的开发时，我们需要的是ideal viewport。那么怎么才能得到ideal viewport呢？这就该轮到meta标签出场了。</p>
<p>我们可以使用视口元标签（viewport meta 标签）来进行布局视口的设置。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>上述<code>meta</code>标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。</p>
<p><code>meta viewport</code>标签首先是由苹果公司在其<code>safari</code>浏览器中引入的，目的就是解决移动设备的<code>viewport</code>问题。后来安卓以及各大浏览器厂商也都纷纷效仿，引入对meta viewport的支持，事实也证明这个东西还是非常有用的。</p>
<p>在苹果的规范中，meta viewport 有6个属性(暂且把content中的那些东西称为一个个属性和值)，如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>取值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>width</td>
<td>正整数或device-width</td>
<td>定义视口的宽度，单位为像素</td>
</tr>
<tr>
<td>height</td>
<td>正整数或device-height</td>
<td>定义视口的高度，单位为像素，一般不用</td>
</tr>
<tr>
<td>initial-scale</td>
<td>[0.0-10.0]</td>
<td>定义初始缩放值</td>
</tr>
<tr>
<td>minimum-scale</td>
<td>[0.0-10.0]</td>
<td>定义放大最大比例，它必须小于或等于maximum-scale设置</td>
</tr>
<tr>
<td>maximum-scale</td>
<td>[0.0-10.0]</td>
<td>定义缩小最小比例，它必须大于或等于minimum-scale设置</td>
</tr>
<tr>
<td>user-scalable</td>
<td>yes / no</td>
<td>定义是否允许用户手动缩放页面，默认值 yes</td>
</tr>
</tbody>
</table>
<p><strong>有几点需要注意：</strong></p>
<ul>
<li>viewport 标签只对移动端浏览器有效，对 PC 端浏览器是无效的</li>
<li>当缩放比例为 100% 时，dip 宽度 = CSS 像素宽度 = 理想视口的宽度 = 布局视口的宽度</li>
<li>单独设置 initial-scale 或 width 都会有兼容性问题，所以设置布局视口为理想视口的最佳方法是同时设置这两个属性</li>
<li>即使设置了 user-scalable = no，在 Android Chrome 浏览器中也可以强制启用手动缩放</li>
</ul>
<p>这些属性可以同时使用，也可以单独使用或混合使用，多个属性同时使用时用逗号隔开就行了。</p>
<p>此外，在安卓中还支持<code>target-densitydpi</code> 这个私有属性，它表示目标设备的密度等级，作用是决定css中的1px代表多少物理像素。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>取值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>target-densitydpi</td>
<td>high-dpi,medium-dpi,low-dpi,device-dpi</td>
<td>私有属性，它表示目标设备的密度等级，作用是决定css中的1px代表多少物理像素</td>
</tr>
</tbody>
</table>
<p>特别说明的是，当<code>target-densitydpi=device-dpi</code>时， css中的1px会等于物理像素中的1px。</p>
<p>因为这个属性只有安卓支持，并且安卓已经决定要废弃<code>&lt;strike&gt;target-densitydpi&lt;/strike&gt;</code>  这个属性了，所以这个属性我们要避免进行使用。</p>
<h1 id="动态改变meta-viewport标签"><a href="#动态改变meta-viewport标签" class="headerlink" title="动态改变meta viewport标签"></a>动态改变meta viewport标签</h1><h2 id="第一种方式："><a href="#第一种方式：" class="headerlink" title="第一种方式："></a>第一种方式：</h2><p>使用<code>document.write</code>来动态输出<code>meta viewport</code>标签，例如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;meta name="viewport" content="width=device-width,initial-scale=1"&gt;'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h2><p>通过<code>setAttribute</code>来改变</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">id</span>=<span class="string">"testViewport"</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width = 380"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> mvp = <span class="built_in">document</span>.getElementById(<span class="string">'testViewport'</span>);</span></span><br><span class="line"><span class="javascript">mvp.setAttribute(<span class="string">'content'</span>,<span class="string">'width=480'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://segmentfault.com/a/1190000015884091" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015884091</a></p>
<p><a href="https://www.quirksmode.org/mobile/viewports.html" target="_blank" rel="noopener">https://www.quirksmode.org/mobile/viewports.html</a></p>
<p><a href="https://www.quirksmode.org/mobile/viewports2.html" target="_blank" rel="noopener">https://www.quirksmode.org/mobile/viewports2.html</a></p>
<p><a href="https://www.quirksmode.org/mobile/metaviewport/" target="_blank" rel="noopener">https://www.quirksmode.org/mobile/metaviewport/</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Mobile/Viewport_meta_tag</a></p>
<p><a href="https://www.jianshu.com/p/af6dad66e49a" target="_blank" rel="noopener">https://www.jianshu.com/p/af6dad66e49a</a></p>
<p><a href="http://viewportsizes.com" target="_blank" rel="noopener">http://viewportsizes.com</a></p>
<p><a href="https://juejin.im/post/5bb6c62be51d450e47142c60" target="_blank" rel="noopener">https://juejin.im/post/5bb6c62be51d450e47142c60</a></p>
<p><a href="https://www.jianshu.com/p/3d28f4959c5a" target="_blank" rel="noopener">https://www.jianshu.com/p/3d28f4959c5a</a></p>
<p><a href="https://stackoverflow.com/questions/6333927/difference-between-visual-viewport-and-layout-viewport" target="_blank" rel="noopener">https://stackoverflow.com/questions/6333927/difference-between-visual-viewport-and-layout-viewport</a></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>移动端适配</tag>
      </tags>
  </entry>
  <entry>
    <title>Android build.gradle配置详解</title>
    <url>/2019/04/10/Android-build-gradle%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>AS是采用gradle来进行构建项目，而gradle是基于groovy语言。这里了解一下项目中gradle的详细配置。</p>
<a id="more"></a>
<p><img src="project.png" alt="一个最简单的项目结构"></p>
<h1 id="Project的build-gradle文件"><a href="#Project的build-gradle文件" class="headerlink" title="Project的build.gradle文件"></a>Project的build.gradle文件</h1><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()<span class="comment">//从Android Studio3.0后新增了google()配置，可以引用google上的开源项</span></span><br><span class="line">        jcenter()<span class="comment">//是一个类似于github的代码托管仓库，声明了jcenter()配置，可以轻松引用 jcenter上的开源项目</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.3.2'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;<span class="comment">//这里是项目本身需要的依赖，比如项目所需的maven库</span></span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行gradle clean时，执行此处定义的task任务。</span></span><br><span class="line"><span class="comment">// 该任务继承自Delete，删除根目录中的build目录。</span></span><br><span class="line"><span class="comment">// 相当于执行Delete.delete(rootProject.buildDir)。</span></span><br><span class="line"><span class="comment">// gradle使用groovy语言，调用method时可以不用加（）。</span></span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>buildscript{}</code>闭包是gradle脚本执行所需要的依赖，分别是对应的maven库和插件<ul>
<li><code>repositories{}</code>闭包：配置远程仓库,该闭包中声明了jcenter()和google()的配置，其中jcenter是一个代码托管仓库，上面托管了很多Android开源项目，在这里配置了jcenter后我们可以在项目中方便引用jcenter上的开源项目，从Android Studio3.0后新增了google()配置，可以引用google上的开源项目</li>
<li><code>dependencies{}</code>闭包：配置构建工具,该闭包使用classpath声明了一个Gradle插件，由于Gradle并不只是用来构建Android项目，因此此处引入相关插件来构建Android项目，其中’3.0.0’为该插件的版本号，可以根据最新的版本号来调整</li>
</ul>
</li>
<li><code>allprojects{}</code>闭包是项目本身需要的依赖，比如项目所需要的maven库</li>
<li><code>task clean(type: Delete)</code>是运行gradle clean时，执行此处定义的task任务，该任务继承自Delete，删除根目录中的build目录。其中buildscript包含repositories闭包和dependencies闭包</li>
</ul>
<h1 id="Module的build-gradle文件"><a href="#Module的build-gradle文件" class="headerlink" title="Module的build.gradle文件"></a>Module的build.gradle文件</h1><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"cn.net.sweetlover.myapplication"</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">28</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android-optimize.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:28.0.0'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.1.3'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.2'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="apply-plugin"><a href="#apply-plugin" class="headerlink" title="apply plugin"></a>apply plugin</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明是Android程序，</span></span><br><span class="line"><span class="comment">//com.android.application 表示这是一个应用程序模块</span></span><br><span class="line"><span class="comment">//com.android.library 标识这是一个库模块</span></span><br><span class="line"><span class="comment">//而这区别：前者可以直接运行，后着是依附别的应用程序运行</span></span><br><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br></pre></td></tr></table></figure>
<p>apply plugin表示应用了一个插件，一般有两种值可选：</p>
<ul>
<li><code>com.android.application</code>，表示该模块为应用程序模块，可以直接运行，打包得到的是<code>apk</code>文件</li>
<li><code>com.android.library</code>，表示该模块为库模块，只能作为代码库依附与别的应用程序模块来运行，打包得到的是<code>aar</code>文件</li>
</ul>
<h2 id="android-闭包"><a href="#android-闭包" class="headerlink" title="android{}闭包"></a>android{}闭包</h2><p>这个闭包主要为了配置项目构建的各种属性：</p>
<h3 id="signingConfigs"><a href="#signingConfigs" class="headerlink" title="signingConfigs{}"></a>signingConfigs{}</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">signingConfigs &#123;<span class="comment">// 自动化打包配置</span></span><br><span class="line">        release &#123;<span class="comment">// 线上环境</span></span><br><span class="line">            keyAlias <span class="string">'test'</span></span><br><span class="line">            keyPassword <span class="string">'123456'</span></span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'test.keystore'</span>)</span><br><span class="line">            storePassword <span class="string">'123456'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;<span class="comment">// 开发环境</span></span><br><span class="line">            keyAlias <span class="string">'test'</span></span><br><span class="line">            keyPassword <span class="string">'123456'</span></span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'test.keystore'</span>)</span><br><span class="line">            storePassword <span class="string">'123456'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以手动添加签名配置，也可以通过<code>Project Structure</code>-&gt;<code>app</code>-&gt;<code>Singing</code>，点击下面<code>+</code>号填入配置信息即可生成代码配置。</p>
<p><img src="sign_auto.png" alt="AS配置"></p>
<p>签名配置完成后可以方便带签名打包，在module的<code>Build Variants</code>中有两个<code>Type</code>，分别是<code>debug</code>和<code>release</code>，可以选择任意一个类型进行打包，并且他们会利用各自配置的Key进行打包，执行 Run app或者<code>Build</code>-&gt;<code>Build apk</code>就会自动在<code>module name/app/build/outputs/apk</code>路径下生成Apk文件。另一种打包方式是Build-&gt;Generate Signed APK填写签名信息生成Apk。</p>
<h3 id="compileSdkVersion"><a href="#compileSdkVersion" class="headerlink" title="compileSdkVersion"></a>compileSdkVersion</h3><p>设置编译时用的Android版本</p>
<h3 id="buildToolsVersion"><a href="#buildToolsVersion" class="headerlink" title="buildToolsVersion"></a>buildToolsVersion</h3><p>设置编译时使用的构建工具的版本，Android Studio3.0后去除此项配置</p>
<h3 id="defaultConfig"><a href="#defaultConfig" class="headerlink" title="defaultConfig{}"></a>defaultConfig{}</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"cn.net.sweetlover.myapplication"</span><span class="comment">//项目的包名</span></span><br><span class="line">        minSdkVersion <span class="number">16</span><span class="comment">//项目最低兼容的版本</span></span><br><span class="line">        targetSdkVersion <span class="number">27</span><span class="comment">//项目的目标版本</span></span><br><span class="line">        versionCode <span class="number">1</span><span class="comment">//版本号</span></span><br><span class="line">        versionName <span class="string">"1.0"</span><span class="comment">//版本名称</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span><span class="comment">//表明要使用AndroidJUnitRunner进行单元测试</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>applicationId</code>：指定了项目的包名。</li>
<li><code>minSdkVersion</code>:指定项目最低兼容的版本，如果设备小于这个版本或者大于maxSdkVersion(一般不用)将无法安装这个应用，这里指定为16，表示最低兼容到Android 4.1系统。</li>
<li><code>targetSdkVersion</code>:指定项目的目标版本，表示在该目标版本上已经做过充分测试，系统会为该应用启动一些对应该目标系统的最新功能特性，Android系统平台的行为变更，只有targetSdkVersion的属性值被设置为大于或等于该系统平台的API版本时，才会生效。例如，若指定targetSdkVersion值为22，则表示该程序最高只在Android5.1版本上做过充分测试，在Android6.0系统上（对应targetSdkVersion为23）拥有的新特性如系统运行时权限等功能就不会被启用。</li>
<li><code>versionCode</code>:表示版本号，一般每次打包上线时该值只能增加，打包后看不见。</li>
<li><code>versionName</code>:表示版本名称，展示在应用市场上。</li>
<li><code>testInstrumentationRunner</code>:<code>&quot;android.support.test.runner.AndroidJUnitRunner&quot;</code>表明要使用<code>AndroidJUnitRunner</code>进行单元测试。</li>
</ul>
<h3 id="buildTypes"><a href="#buildTypes" class="headerlink" title="buildTypes{}"></a>buildTypes{}</h3><p>这个闭包主要指定生成安装文件的主要配置，一般包含两个子闭包，一个是<code>debug</code>闭包，用于指定生成测试版安装文件的配置，可以忽略不写；另一个是<code>release</code>闭包，用于指定生成正式版安装文件的配置。两者能配置的参数相同，最大的区别默认属性配置不一样，两种模式支持的属性配置如下图：</p>
<p><img src="buildtype.png" alt></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;<span class="comment">// 生产/测试环境配置</span></span><br><span class="line">        release &#123;<span class="comment">// 生产环境</span></span><br><span class="line">            buildConfigField(<span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"false"</span>)<span class="comment">//配置Log日志</span></span><br><span class="line">            buildConfigField(<span class="string">"String"</span>, <span class="string">"URL_PERFIX"</span>, <span class="string">"\"https://release.cn/\""</span>)<span class="comment">// 配置URL前缀</span></span><br><span class="line">            minifyEnabled <span class="keyword">false</span><span class="comment">//是否对代码进行混淆</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span><span class="comment">//指定混淆的规则文件</span></span><br><span class="line">            signingConfig signingConfigs.release<span class="comment">//设置签名信息</span></span><br><span class="line">            pseudoLocalesEnabled <span class="keyword">false</span><span class="comment">//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多</span></span><br><span class="line">            zipAlignEnabled <span class="keyword">true</span><span class="comment">//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率</span></span><br><span class="line">            applicationIdSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">            versionNameSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;<span class="comment">// 测试环境</span></span><br><span class="line">            buildConfigField(<span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span>)<span class="comment">//配置Log日志</span></span><br><span class="line">            buildConfigField(<span class="string">"String"</span>, <span class="string">"URL_PERFIX"</span>, <span class="string">"\"https://test.com/\""</span>)<span class="comment">// 配置URL前缀</span></span><br><span class="line">            minifyEnabled <span class="keyword">false</span><span class="comment">//是否对代码进行混淆</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span><span class="comment">//指定混淆的规则文件</span></span><br><span class="line">            signingConfig signingConfigs.debug<span class="comment">//设置签名信息</span></span><br><span class="line">            debuggable <span class="keyword">false</span><span class="comment">//是否支持断点调试</span></span><br><span class="line">            jniDebuggable <span class="keyword">false</span><span class="comment">//是否可以调试NDK代码</span></span><br><span class="line">            renderscriptDebuggable <span class="keyword">false</span><span class="comment">//是否开启渲染脚本就是一些c写的渲染方法</span></span><br><span class="line">            zipAlignEnabled <span class="keyword">true</span><span class="comment">//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率</span></span><br><span class="line">            pseudoLocalesEnabled <span class="keyword">false</span><span class="comment">//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多</span></span><br><span class="line">            applicationIdSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">            versionNameSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>release{}</code>闭包和<code>debug{}</code>闭包两者能配置的参数相同，最大的区别默认属性配置不一样：</p>
<ul>
<li><code>minifyEnabled</code>:表明是否对代码进行混淆，true表示对代码进行混淆，false表示对代码不进行混淆，默认的是false。</li>
<li><code>proguardFiles</code>:指定混淆的规则文件，这里指定了<code>proguard-android.txt</code>文件和<code>proguard-rules.pro</code>文件两个文件，<code>proguard-android.txt</code>文件为默认的混淆文件，里面定义了一些通用的混淆规则。<code>proguard-rules.pro</code>文件位于当前项目的根目录下，可以在该文件中定义一些项目特有的混淆规则。</li>
<li><code>buildConfigField</code>:用于解决Beta版本服务和Release版本服务地址不同或者一些Log打印需求控制的。 <strong>例如：配置buildConfigField(“boolean”, “LOG_DEBUG”, “true”)</strong>，这个方法接收三个非空的参数，第一个：确定值的类型，第二个：指定key的名字，第三个：传值，调用的时候BuildConfig.LOG_DEBUG即可调用。</li>
<li><code>debuggable</code>:表示是否支持断点调试，release默认为false，debug默认为true。</li>
<li><code>jniDebuggable</code>:表示是否可以调试NDK代码，使用lldb进行c和c++代码调试，release默认为false。</li>
<li><code>signingConfig</code>:设置签名信息，通过<code>signingConfigs.release</code>或者<code>signingConfigs.debug</code>，配置相应的签名，但是添加此配置前必须先添加<code>signingConfigs</code>闭包，添加相应的签名信息。</li>
<li><code>renderscriptDebuggable</code>:表示是否开启渲染脚本就是一些c写的渲染方法，默认为false。</li>
<li><code>renderscriptOptimLevel</code>:表示渲染等级，默认是3。</li>
<li><code>pseudoLocalesEnabled</code>:是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多。</li>
<li><code>applicationIdSuffix</code>:和defaultConfig中配置是一的，这里是在applicationId 中添加了一个后缀，一般使用的不多。</li>
<li><code>versionNameSuffix</code>:表示添加版本名称的后缀，一般使用的不多。</li>
<li><code>zipAlignEnabled</code>:表示是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率，release和debug默认都为true。</li>
</ul>
<h3 id="sourceSets"><a href="#sourceSets" class="headerlink" title="sourceSets{}"></a>sourceSets{}</h3><p>配置目录指向</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sourceSets</span> &#123;<span class="comment">//目录指向配置</span></span><br><span class="line">        main &#123;</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]<span class="comment">//指定lib库目录</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>配置 <code>jniLibs.srcDirs = [&#39;libs&#39;]</code>，可以在<code>Android studio</code>的<code>Android</code>视图下生成<code>jniLibs</code>文件夹，可以方便我们存放jar包和库文件，其中<code>Android</code>视图下的<code>jniLibs</code>和<code>project</code>视图下的<code>libs</code>指向同一文件夹（app→libs），如下图所示：</p>
<p><img src="sourceset.png" alt></p>
<p><strong>更多事例：</strong></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">manifest.srcFile <span class="string">'AndroidManifest.xml'</span></span><br><span class="line">java.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">resources.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">aidl.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">renderscript.srcDirs = [<span class="string">'src'</span>]</span><br><span class="line">res.srcDirs = [<span class="string">'res'</span>]</span><br><span class="line">assets.srcDirs = [<span class="string">'assets'</span>]</span><br><span class="line">jniLibs.srcDirs = [<span class="string">'libs'</span>]</span><br></pre></td></tr></table></figure>
<h3 id="packagingOptions"><a href="#packagingOptions" class="headerlink" title="packagingOptions{}"></a>packagingOptions{}</h3><p>打包时的相关配置</p>
<p>当项目中依赖的第三方库越来越多时，有可能会出现两个依赖库中存在同一个（名称）文件。如果这样，Gradle在打包时就会提示错误（警告）。那么就可以根据提示，然后使用以下方法将重复的文件剔除，比较常用的是通过exclude去除重复的文件，例如：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">packagingOptions&#123;</span><br><span class="line">        <span class="comment">//pickFirsts做用是 当有重复文件时 打包会报错 这样配置会使用第一个匹配的文件打包进入apk</span></span><br><span class="line">        <span class="comment">// 表示当apk中有重复的META-INF目录下有重复的LICENSE文件时  只用第一个 这样打包就不会报错</span></span><br><span class="line">        pickFirsts = [<span class="string">'META-INF/LICENSE'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">//merges何必 当出现重复文件时 合并重复的文件 然后打包入apk</span></span><br><span class="line">        <span class="comment">//这个是有默认值得 merges = [] 这样会把默默认值去掉  所以我们用下面这种方式 在默认值后添加</span></span><br><span class="line">        merge <span class="string">'META-INF/LICENSE'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个是在同时使用butterknife、dagger2做的一个处理。同理，遇到类似的问题，只要根据gradle的提示，做类似处理即可。</span></span><br><span class="line">        <span class="keyword">exclude</span> <span class="string">'META-INF/services/javax.annotation.processing.Processor'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="productFlavors"><a href="#productFlavors" class="headerlink" title="productFlavors{}"></a>productFlavors{}</h3><p>多渠道配置</p>
<p>这个配置是经常会使用到的，通常在适配多个渠道的时候，需要为特定的渠道做部分特殊的处理，比如设置不同的包名、应用名等。场景：当我们使用友盟统计时，通常需要设置一个渠道ID，那么我们就可以利用productFlavors来生成对应渠道信息的包，如：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;  </span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        wandoujia &#123;</span><br><span class="line">            <span class="comment">//豌豆荚渠道包配置</span></span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"wandoujia"</span>]</span><br><span class="line">            <span class="comment">//manifestPlaceholders的使用在后续章节（AndroidManifest里的占位符）中介绍</span></span><br><span class="line">        &#125;</span><br><span class="line">        xiaomi &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"xiaomi"</span>]</span><br><span class="line">            applicationId <span class="string">"com.wiky.gradle.xiaomi"</span> <span class="comment">//配置包名</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        _360 &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"_360"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更简洁的方式：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;  </span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        wandoujia &#123;&#125;</span><br><span class="line">        xiaomi &#123;&#125;</span><br><span class="line">        _360 &#123;&#125;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    productFlavors.all &#123; </span><br><span class="line">        <span class="comment">//批量修改，类似一个循序遍历</span></span><br><span class="line">        flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name] </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完之后，在命令行窗口中（Terminal）中输入<code>gradlew assembleRelease</code>（windows）即可开始打包，在Mac系统中对应指令是<code>./gradlew assembleRelease</code>。当然，如果想要debug版本的包，将指令中<code>assembleRelease</code>改为<code>assembleDebug</code>即可。最后生成的包还是在<code>app/build/outputs/apk</code>中，默认命名格式如<code>app-wandoujia-release-unsigned.apk</code>，在module的<code>Build Variants</code>中可以选择相应的渠道。<br>注：Android Studio3.0需在主app的build.gradle里面的</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">    targetSdkVersion：***</span><br><span class="line">    minSdkVersion ：***</span><br><span class="line">    versionCode：***</span><br><span class="line">    versionName ：***</span><br><span class="line">    <span class="comment">//版本名后面添加一句话，意思就是flavor dimension 它的维度就是该版本号，这样维度就是都是统一的了</span></span><br><span class="line">    flavorDimensions <span class="string">"versionCode"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="lintOptions"><a href="#lintOptions" class="headerlink" title="lintOptions{}"></a>lintOptions{}</h3><p>代码扫描分析</p>
<p>Lint 是Android Studio 提供的 代码扫描分析工具，它可以帮助我们发现代码结构/质量问题，同时提供一些解决方案，而且这个过程不需要我们手写测试用例。</p>
<p>Lint 发现的每个问题都有描述信息和等级（和测试发现 bug 很相似），我们可以很方便地定位问题，同时按照严重程度进行解决。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">//程序在编译的时候会检查lint，有任何错误提示会停止build，我们可以关闭这个开关</span></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError <span class="keyword">false</span> <span class="comment">//即使报错也不会停止打包</span></span><br><span class="line">        checkReleaseBuilds <span class="keyword">false</span>  <span class="comment">//打包release版本的时候进行检测</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies{}"></a>dependencies{}</h2><p>该闭包定义了项目的依赖关系，一般项目都有三种依赖方式：本地依赖、库依赖和远程依赖。本地依赖可以对本地的jar包或目录添加依赖关系，库依赖可以对项目中的库模块添加依赖关系，远程依赖可以对jcener库上的开源项目添加依赖关系。从Android Studio3.0后<code>compile</code>引入库不在使用，而是通过<code>api</code>和<code>implementation</code>，<code>api</code>完全等同于以前的<code>compile</code>，用<code>api</code>引入的库整个项目都可以使用，用<code>implementation</code>引入的库只有对应的Module能使用，其他Module不能使用，由于之前的项目统一用<code>compile</code>依赖，导致的情况就是模块耦合性太高，不利于项目拆解，使用<code>implementation</code>之后虽然使用起来复杂了但是做到降低偶合兴提高安全性。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:28.0.0'</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.1.3'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.2'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>implementation fileTree(include: [&#39;*.jar&#39;], dir: &#39;libs&#39;)</code>：<code>implementation fileTree</code>是一个本地依赖声明，表示将libs目录下所有.jar后缀的文件都添加到项目的构建路径当中。</p>
<p><code>testImplementation</code>和<code>androidTestImplementation</code>：表示声明测试用例库。</p>
<h2 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明是Android程序，</span></span><br><span class="line"><span class="comment">//com.android.application 表示这是一个应用程序模块</span></span><br><span class="line"><span class="comment">//com.android.library 标识这是一个库模块</span></span><br><span class="line"><span class="comment">//而这区别：前者可以直接运行，后着是依附别的应用程序运行</span></span><br><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    signingConfigs &#123;<span class="comment">// 自动化打包配置</span></span><br><span class="line">        release &#123;<span class="comment">// 线上环境</span></span><br><span class="line">            keyAlias <span class="string">'test'</span></span><br><span class="line">            keyPassword <span class="string">'123456'</span></span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'test.jks'</span>)</span><br><span class="line">            storePassword <span class="string">'123456'</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;<span class="comment">// 开发环境</span></span><br><span class="line">            keyAlias <span class="string">'test'</span></span><br><span class="line">            keyPassword <span class="string">'123456'</span></span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">'test.jks'</span>)</span><br><span class="line">            storePassword <span class="string">'123456'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileSdkVersion <span class="number">27</span><span class="comment">//设置编译时用的Android版本</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"cn.net.sweetlover.myapplication"</span><span class="comment">//项目的包名</span></span><br><span class="line">        minSdkVersion <span class="number">16</span><span class="comment">//项目最低兼容的版本</span></span><br><span class="line">        targetSdkVersion <span class="number">27</span><span class="comment">//项目的目标版本</span></span><br><span class="line">        versionCode <span class="number">1</span><span class="comment">//版本号</span></span><br><span class="line">        versionName <span class="string">"1.0"</span><span class="comment">//版本名称</span></span><br><span class="line">        flavorDimensions <span class="string">"versionCode"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span><span class="comment">//表明要使用AndroidJUnitRunner进行单元测试</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;<span class="comment">// 生产/测试环境配置</span></span><br><span class="line">        release &#123;<span class="comment">// 生产环境</span></span><br><span class="line">            buildConfigField(<span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"false"</span>)<span class="comment">//配置Log日志</span></span><br><span class="line">            buildConfigField(<span class="string">"String"</span>, <span class="string">"URL_PERFIX"</span>, <span class="string">"\"https://release.cn/\""</span>)<span class="comment">// 配置URL前缀</span></span><br><span class="line">            minifyEnabled <span class="keyword">false</span><span class="comment">//是否对代码进行混淆</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span><span class="comment">//指定混淆的规则文件</span></span><br><span class="line">            signingConfig signingConfigs.release<span class="comment">//设置签名信息</span></span><br><span class="line">            pseudoLocalesEnabled <span class="keyword">false</span><span class="comment">//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多</span></span><br><span class="line">            zipAlignEnabled <span class="keyword">true</span><span class="comment">//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率</span></span><br><span class="line">            applicationIdSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">            versionNameSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;<span class="comment">// 测试环境</span></span><br><span class="line">            buildConfigField(<span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span>)<span class="comment">//配置Log日志</span></span><br><span class="line">            buildConfigField(<span class="string">"String"</span>, <span class="string">"URL_PERFIX"</span>, <span class="string">"\"https://test.com/\""</span>)<span class="comment">// 配置URL前缀</span></span><br><span class="line">            minifyEnabled <span class="keyword">false</span><span class="comment">//是否对代码进行混淆</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span><span class="comment">//指定混淆的规则文件</span></span><br><span class="line">            signingConfig signingConfigs.debug<span class="comment">//设置签名信息</span></span><br><span class="line">            debuggable <span class="keyword">false</span><span class="comment">//是否支持断点调试</span></span><br><span class="line">            jniDebuggable <span class="keyword">false</span><span class="comment">//是否可以调试NDK代码</span></span><br><span class="line">            renderscriptDebuggable <span class="keyword">false</span><span class="comment">//是否开启渲染脚本就是一些c写的渲染方法</span></span><br><span class="line">            zipAlignEnabled <span class="keyword">true</span><span class="comment">//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率</span></span><br><span class="line">            pseudoLocalesEnabled <span class="keyword">false</span><span class="comment">//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多</span></span><br><span class="line">            applicationIdSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">            versionNameSuffix <span class="string">'test'</span><span class="comment">//在applicationId 中添加了一个后缀，一般使用的不多</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">sourceSets</span> &#123;<span class="comment">//目录指向配置</span></span><br><span class="line">        main &#123;</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]<span class="comment">//指定lib库目录</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    packagingOptions&#123;<span class="comment">//打包时的相关配置</span></span><br><span class="line">        <span class="comment">//pickFirsts做用是 当有重复文件时 打包会报错 这样配置会使用第一个匹配的文件打包进入apk</span></span><br><span class="line">        <span class="comment">// 表示当apk中有重复的META-INF目录下有重复的LICENSE文件时  只用第一个 这样打包就不会报错</span></span><br><span class="line">        pickFirsts = [<span class="string">'META-INF/LICENSE'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">//merges何必 当出现重复文件时 合并重复的文件 然后打包入apk</span></span><br><span class="line">        <span class="comment">//这个是有默认值得 merges = [] 这样会把默默认值去掉  所以我们用下面这种方式 在默认值后添加</span></span><br><span class="line">        merge <span class="string">'META-INF/LICENSE'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个是在同时使用butterknife、dagger2做的一个处理。同理，遇到类似的问题，只要根据gradle的提示，做类似处理即可。</span></span><br><span class="line">        <span class="keyword">exclude</span> <span class="string">'META-INF/services/javax.annotation.processing.Processor'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        wandoujia &#123;&#125;</span><br><span class="line">        xiaomi &#123;&#125;</span><br><span class="line">        _360 &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    productFlavors.all &#123;</span><br><span class="line">            <span class="comment">//批量修改，类似一个循序遍历</span></span><br><span class="line">        flavor -&gt; flavor.manifestPlaceholders = [IFLYTEK_CHANNEL: name]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//程序在编译的时候会检查lint，有任何错误提示会停止build，我们可以关闭这个开关</span></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError <span class="keyword">false</span></span><br><span class="line">        <span class="comment">//即使报错也不会停止打包</span></span><br><span class="line">        checkReleaseBuilds <span class="keyword">false</span></span><br><span class="line">        <span class="comment">//打包release版本的时候进行检测</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">//项目的依赖关系</span></span><br><span class="line">    implementation <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</span><br><span class="line">    <span class="comment">//本地jar包依赖</span></span><br><span class="line">    implementation <span class="string">'com.android.support:appcompat-v7:27.1.1'</span></span><br><span class="line">    <span class="comment">//远程依赖</span></span><br><span class="line">    implementation <span class="string">'com.android.support.constraint:constraint-layout:1.1.2'</span></span><br><span class="line">    testImplementation <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    <span class="comment">//声明测试用例库</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test:runner:1.0.2'</span></span><br><span class="line">    androidTestImplementation <span class="string">'com.android.support.test.espresso:espresso-core:3.0.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><h2 id="AS一键生成"><a href="#AS一键生成" class="headerlink" title="AS一键生成"></a>AS一键生成</h2><p>1、AS菜单中<code>Build</code>-&gt;<code>Generate Signed APK</code>点击</p>
<p><img src="signcreate1.png" alt></p>
<p>2、点击<code>Create New...</code></p>
<blockquote>
<p>”Create new…”新建一个签名文件<br>”Choose existing…”选择一个已经存在的签名文件</p>
</blockquote>
<p>3、填写完整的签名信息。</p>
<p><img src="newkeystore.png" alt></p>
<p>填写完毕点击<code>OK</code></p>
<p><strong>参数介绍</strong></p>
<ul>
<li><code>Key store path</code> : 签名文件路径</li>
<li><code>Password</code> : 签名密码</li>
<li><code>Confirm</code> : 确认密码</li>
<li><code>Alias</code> : 别名</li>
<li><code>Validity ( years )</code> : 有限期 （年）</li>
<li><code>First and Last Name</code> : 全名</li>
<li><code>Organizational Unit</code> : 组织单位</li>
<li><code>Organization</code> : 组织</li>
<li><code>City or Locality</code> : 城市或地方</li>
<li><code>State or Province</code> : 州或省</li>
<li><code>Country Code(XX)</code> : 国家代码</li>
</ul>
<blockquote>
<p>这里密码统一填写“android”，别名写个“key”即可。其他的信息根据实际情况和需求填写，并不很重要。</p>
</blockquote>
<p>4、生成文件名后缀为<code>keystore</code></p>
<p><img src="lastcreate.png" alt></p>
<blockquote>
<p>选V1打包出来的app是jar的（一般这种就是当做第三方导入项目来用的），<br>选v2打包出来的APP是apk版本的（也就是可以直接在手机上安装的，可是上线的）；</p>
</blockquote>
<p>一般情况下两个同时选择即可。然后点击<code>Finish</code>完成生成签名。</p>
<p><strong>原因：</strong></p>
<p>v2的用途解释：<br>1.用于验证其完整性的APK的加密签名现在位于ZIP中央目录之前。<br>2.这个签名是在整个APK文件的二进制内容上计算和验证的，而不是在v1的归档文件中解压缩文件内容。<br>3.一个APK可以同时由v1和v2签名同时签署，所以它仍然可以向后兼容以前的Android版本。</p>
<p>但是只设置v2会引起7.0以下会直接安装完显示未安装，7.0以上则使用了V2的方式验证 </p>
<p>报错信息为：<code>INSTALL_PARSE_FAILED_NO_CERTIFICATES</code>。</p>
<p>同时设置V1和V2则所有机型都没问题。而只设置v1签名并不会影响什么，但是在7.0上不会使用更安全的验证方式</p>
<blockquote>
<p>如果你想在使用Android分级插件时禁用添加v1或v2的签名，你可以将这些行添加到你的signingConfig部分。<br>v1SigningEnabled false<br>v2SigningEnabled false</p>
</blockquote>
<h2 id="命令行生成"><a href="#命令行生成" class="headerlink" title="命令行生成"></a>命令行生成</h2><p>配置jdk后</p>
<p>运行命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> forever -keyalg RSA -validity 10000 -keystore forever.keystore</span><br></pre></td></tr></table></figure></p>
<p><strong>这里关键文字的代表意义：</strong></p>
<ul>
<li>forever：keystore的别名alias</li>
<li>10000：keystore的有效天数</li>
<li>forever.keystore：keystore的名称</li>
</ul>
<p>1、第一次输入的秘钥库口令即为forever.keystore的密码<br>2、然后填写相关的信息<br>3、生成对应的forever.keystore，文件地址在cmd命令的对应路径下面</p>
<p><img src="cmdcreate.png" alt></p>
<h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><h2 id="Project的setting-gradle文件"><a href="#Project的setting-gradle文件" class="headerlink" title="Project的setting.gradle文件"></a>Project的setting.gradle文件</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">':app'</span></span><br></pre></td></tr></table></figure>
<p>setting.gradle 文件在 初始化过程中被执行，构建器通过<code>setting.gradle</code> 文件中的内容了解哪些模块将被<code>build</code>。</p>
<blockquote>
<p>注意：单模块项目不一定需要有 setting 文件，但一旦有多个模块，必须要有 setting 文件，同时也要写明所有要构建的模块，否则 gradle 不会 build 不包括的模块。</p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS pch预编译头文件使用</title>
    <url>/2019/04/08/IOS-pch%E9%A2%84%E7%BC%96%E8%AF%91%E5%A4%B4%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PCH是什么"><a href="#PCH是什么" class="headerlink" title="PCH是什么"></a>PCH是什么</h1><p>PCH文件是一个标准的预编译头文件( Pre-Compiled Header)，在Xcode6之前的版本中，系统模板会在Supporting Files文件夹自动创建。但在Xcode6之后的版本中取消了这一文件，如果我们需要使用pch文件，则需要手动创建。去掉的主要的原因:</p>
<a id="more"></a>
<blockquote>
<p>1、去掉自动导入的系统框架类库的头文件，可以提高原文件的复用性，便于迁移。<br>2、一个体积大的Prefix Header会大大增加编译时间。</p>
</blockquote>
<p>再来看看pch的作用：</p>
<blockquote>
<p>1.存放一些全局的宏(整个项目中都用得上的宏)。<br>2.用来包含一些头文件(整个项目中都用得上的头文件)。<br>3.能自动打开或者关闭日志输出功能。</p>
</blockquote>
<p>如果你的pch文件确实很大，那那肯定影响编译速度，苹果去掉他可能是要加快编译时间增加用户体验。虽然失去了编程的便利性。事实上，正确运用pch文件时预编译后的头文件会被缓存起来，再次编译的时候就不需要重新编译pch文件中导入的内容，编译速度并不会降低很多。很重要的一点就是pch文件确实给我们编程带来便利，我们不用在每个文件内重复引用另一个文件；那怎样才能提高编译速度呢？降低编译速度的罪魁祸首就是大量的共用性不高的宏定义和头文件的引入。编译的时候整个工程范围地查找和替换这些宏定义字段，重复导入这些头文件，不慢就奇怪了。</p>
<h1 id="PCH创建"><a href="#PCH创建" class="headerlink" title="PCH创建"></a>PCH创建</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><img src="create_pch.png" alt="PCH文件创建"></p>
<p>点击创建，输入文件名即可。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在项目-&gt;<code>Build Settings</code>下</p>
<ul>
<li><p>找到该<code>Precompile Prefix Header</code>项设置为<code>YES</code>,这样的话pch会被预编译，预编译后的pch文件会被缓存起来，从而提高编译速度。当 <code>Precompile Prefix Header</code> 为<code>NO</code>时，那么pch不会被预编译，而是在每一个用到它导入的框架类库的<code>.m</code>文件中编译一次</p>
</li>
<li><p>找到<code>Prefix Header</code>项</p>
</li>
</ul>
<p><img src="pch_config.png" alt></p>
<p>双击可弹出输入框，给Prefix Header设置路径，只需要点击pch文件然后按住鼠标左键拖过来就行，但是<code>/Users/zjyzy/WorkPlace/xcode/AllDemo/BarDemo/BarDemo/PrefixHeader.pch</code>代表的是绝对路径，当用别的电脑时就不能识别了，这时就可以用到<code>$(SRCROOT)</code>来替换，在iOS中<code>$(SRCROOT)</code>代表的是项目根目录下，路径形式为：<br><code>$(SRCROOT)/当前工程名字/需要包含头文件所在文件夹</code><br>所以把路径改为:<br><code>$(SRCROOT)/BarDemo/PrefixHeader.pch</code></p>
<h1 id="PCH使用"><a href="#PCH使用" class="headerlink" title="PCH使用"></a>PCH使用</h1><p>一般来说在你向pch添加全局的头文件之前,必须添加以下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __OBJC__</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>这个宏定义的作用是保证只有oc文件可以调用pch里面的头文件，一些非OC语言不能调用，比如.cpp,.mm。如果不加入，那么如果代码中带有.cpp,.mm文件，那么将报错。NSObjCRuntime.h  NSObject.h  NSZone.h将会报出编译异常。<br>这样你就可以在pch文件当中添加一些常用头文件、宏定义了。</p>
<h2 id="宏来自定义只能在debug环境下使用输出日志"><a href="#宏来自定义只能在debug环境下使用输出日志" class="headerlink" title="宏来自定义只能在debug环境下使用输出日志"></a>宏来自定义只能在debug环境下使用输出日志</h2><p>在pch文件下添加如下代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __OBJC__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TTLog(...) NSLog(__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TTLog(...);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>TTLog</code>为自定义名称,在项目中输出则将<code>NSLog</code>替换为<code>TTLog</code>即可。</p>
</blockquote>
<p><strong>宏定义的debug /release切换，见下图操作步骤</strong></p>
<p><img src="rd.png" alt></p>
<p>在选择了<code>Edit Scheme</code>后<code>run info</code>中切换<code>debug/release</code>模式</p>
<p><img src="rd2.png" alt></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://my.oschina.net/goboy/blog/1838003" target="_blank" rel="noopener">https://my.oschina.net/goboy/blog/1838003</a></p>
<p><a href="https://www.jianshu.com/p/a1d61f5cc454" target="_blank" rel="noopener">https://www.jianshu.com/p/a1d61f5cc454</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS状态栏、导航栏使用总结</title>
    <url>/2019/04/04/IOS%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>状态栏与导航栏的位置如下图</strong></p>
<a id="more"></a>
<p><strong>iOS7之前：</strong>状态栏与导航栏是分开的；<br><strong>iOS7之后：</strong>状态栏与导航栏合在一起；导航部分总高度(64)= 状态栏高度(20) +导航栏内容高度((44）</p>
<p><strong>iPhoneX以后：</strong>状态栏的高度变为44，导航栏部分总高度(88) = 状态栏(44) + 导航栏内容高度(44)</p>
<p><img src="statusbar.png" alt></p>
<p>我们可以通过<code>[UIApplication sharedApplication].statusBarFrame.size</code>获取状态栏的size（一般没有刘海时的高度为<code>20</code>，有刘海时的高度为44）。通过<code>self.navigationController.navigationBar.frame.size</code>来获取导航栏的size。</p>
<h1 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h1><p>状态栏内容包括信号、时间、电量等，只有两种颜色样式（黑或白）。</p>
<p>获取状态栏frame：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> statusRect = [<span class="built_in">UIApplication</span> sharedApplication].statusBarFrame;</span><br></pre></td></tr></table></figure>
<h2 id="状态栏显示和隐藏"><a href="#状态栏显示和隐藏" class="headerlink" title="状态栏显示和隐藏"></a>状态栏显示和隐藏</h2><p>全局控制：通过 <strong>info.plist</strong>设置，或者调用全局方法。<br>分页控制：在视图控制器里通过 <strong>prefersStatusBarHidden</strong>方法设置。</p>
<h3 id="全局控制"><a href="#全局控制" class="headerlink" title="全局控制"></a>全局控制</h3><p>默认设置或者手动设置 <strong>info.plist</strong>文件中<code>View controller-based status bar appearance</code>设置为<code>NO</code>，此时状态栏需要全局设置，有两种方式设置。</p>
<p><strong>方法1:</strong></p>
<p>依次进入<code>Targets</code>-&gt;<code>General</code>-&gt;<code>Deployment Info</code>，然后可进行进行设置如下:</p>
<p><img src="hidestatusbar.png" alt></p>
<p>在<code>info.plist</code>文件中添加<code>Status bar is initially hidden</code>设置为<code>YES</code>，则隐藏启动页状态栏，否则反之。和直接在项目中设置相同。</p>
<p><img src="statusbar_infop.png" alt></p>
<p><strong>方法2:</strong></p>
<p>代码设置：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//已过时</span></span><br><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarHidden:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐</span></span><br><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].statusBarHidden = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong>使用代码控制全局的状态栏，代码的位置很重要；在AppDelegate中写入可以设置整个App页面的状态栏样式；<br>如果需要单独设置其中一个页面隐藏状态栏，需要在进入页面时设置隐藏，退出页面时设置显示，以保证不影响其他页面的状态栏样式。</p>
<h3 id="分页控制"><a href="#分页控制" class="headerlink" title="分页控制"></a>分页控制</h3><p>手动设置 <strong>info.plist</strong>文件中<code>View controller-based status bar appearance</code>设置为<code>YES</code>，此时全局状态设置是无效的，需要分页设置才能修改其样式，即：在每个视图控制器或者控制器基类中使用如下代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重写该方法</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)prefersStatusBarHidden &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;<span class="comment">//设置显示，YES为隐藏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="状态栏颜色"><a href="#状态栏颜色" class="headerlink" title="状态栏颜色"></a>状态栏颜色</h2><p>状态栏分前后两个部分，要分清。</p>
<ul>
<li>文字部分：就是指电池、时间等部分</li>
<li>背景部分：就是显示黑色或者图片的部分</li>
</ul>
<h3 id="文字部分"><a href="#文字部分" class="headerlink" title="文字部分"></a>文字部分</h3><p>简单来说，就是设置显示电池电量、时间、网络部分标示的颜色， 这里只能设置两种颜色：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//黑色</span></span><br><span class="line"><span class="built_in">UIStatusBarStyleDefault</span></span><br><span class="line"><span class="comment">//白色</span></span><br><span class="line"><span class="built_in">UIStatusBarStyleLightContent</span></span><br></pre></td></tr></table></figure>
<p>全局控制：通过 <strong>info.plist</strong>设置，或者调用全局方法。<br>分页控制：在视图控制器里通过 <strong>preferredStatusBarStyle</strong>方法设置。</p>
<h4 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h4><p>默认设置或者手动设置 <strong>info.plist</strong>文件中<code>View controller-based status bar appearance</code>设置为<code>NO</code>，此时状态栏需要全局设置，有两种方式设置。</p>
<p><strong>方法1:</strong></p>
<p>依次进入<code>Targets</code>-&gt;<code>General</code>-&gt;<code>Deployment Info</code>，然后可进行进行设置如下:</p>
<p><img src="statusbar_fontbg.png" alt></p>
<p><strong>方法2:</strong></p>
<p>代码设置:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UIStatusBarStyleDefault | UIStatusBarStyleLightContent</span></span><br><span class="line"><span class="comment">//UIStatusBarStyleDefault,黑色(默认)</span></span><br><span class="line"><span class="comment">//UIStatusBarStyleLightContent,白色</span></span><br><span class="line">[<span class="built_in">UIApplication</span> sharedApplication].statusBarStyle = <span class="built_in">UIStatusBarStyleLightContent</span>;</span><br></pre></td></tr></table></figure>
<h4 id="分页设置"><a href="#分页设置" class="headerlink" title="分页设置"></a>分页设置</h4><p>手动设置 <strong>info.plist</strong>文件中<code>View controller-based status bar appearance</code>设置为<code>YES</code>，此时全局状态设置是无效的，需要分页设置才能修改其样式，即：在每个视图控制器或者控制器基类中使用如下代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重写该方法</span></span><br><span class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIStatusBarStyleLightContent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>特别注意：</strong></p>
<p>但是，这里存在一个问题：如果当前视图控制器是<code>UINavigationController</code>的子视图控制器，<code>preferredStatusBarStyle</code>方法并不会被调用。这是因为导航控制器里的<code>preferredStatusBarStyle</code>才具有修改状态栏样式的能力。</p>
<p>解决方法：</p>
<ul>
<li>方法1:添加子类控制器</li>
</ul>
<p>我们需要使用自定义的子类导航控制器，在其中添加如下的代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIStatusBarStyle</span>)preferredStatusBarStyle &#123;</span><br><span class="line">    <span class="built_in">UIViewController</span> *topVC = <span class="keyword">self</span>.topViewController;</span><br><span class="line">    <span class="keyword">return</span> [topVC preferredStatusBarStyle];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>方法2:放弃preferredStatusBarStyle该方法</li>
</ul>
<p>直接不使用preferredStatusBarStyle方法，而是直接在当前视图控制器中调用如下方法修改状态栏。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//状态栏和导航栏背景色为白色，状态栏文字为黑色</span></span><br><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.barStyle = <span class="built_in">UIBarStyleDefault</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//状态栏和导航栏背景色为黑色，状态栏文字为白色</span></span><br><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.barStyle = <span class="built_in">UIBarStyleBlack</span>;</span><br></pre></td></tr></table></figure>
<h3 id="背景部分"><a href="#背景部分" class="headerlink" title="背景部分"></a>背景部分</h3><p>背景部分，简单来说，就是状态栏的背景颜色，其实系统状态栏的背景颜色一直是透明的状态，当有导航栏时，导航栏背景是什么颜色，状态栏就是什么颜色，没有导航栏时，状态栏背后的视图时什么颜色，它就是什么颜色。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置状态栏与到导航栏都是不透明</span></span><br><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.translucent = <span class="literal">NO</span>;</span><br><span class="line"><span class="comment">// 这个方法是设置导航栏背景颜色，状态栏也会随之变色</span></span><br><span class="line">[<span class="keyword">self</span>.navigationController.navigationBar setBarTintColor:[<span class="built_in">UIColor</span> redColor]];</span><br></pre></td></tr></table></figure>
<p><strong>单独设置</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 设置状态栏背景颜色</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param color 设置颜色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setStatusBarBackgroundColor:(<span class="built_in">UIColor</span> *)color &#123;</span><br><span class="line">    <span class="built_in">UIView</span> *statusBar = [[[<span class="built_in">UIApplication</span> sharedApplication] valueForKey:<span class="string">@"statusBarWindow"</span>] valueForKey:<span class="string">@"statusBar"</span>];</span><br><span class="line">    <span class="keyword">if</span> ([statusBar respondsToSelector:<span class="keyword">@selector</span>(setBackgroundColor:)]) &#123;</span><br><span class="line">        statusBar.backgroundColor = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>效果图</strong></p>
<p><img src="statusbar_bg.png" alt></p>
<blockquote>
<p>如果是单独设置某个页面的状态栏背景色，还需要在离开页面时恢复原样。</p>
</blockquote>
<h2 id="状态栏常用宏定义"><a href="#状态栏常用宏定义" class="headerlink" title="状态栏常用宏定义"></a>状态栏常用宏定义</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 设备参数</span></span><br><span class="line"><span class="comment">//屏幕宽</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_ScreenWidth   [[UIScreen mainScreen] bounds].size.width</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//屏幕高</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_ScreenHeight  [[UIScreen mainScreen] bounds].size.height</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断设备类型是否iPhoneX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_ISIphoneX    (([UIScreen mainScreen].bounds.size.height/[UIScreen mainScreen].bounds.size.width) &gt;= 2.16)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导航栏高度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_NavBarHeight (ZS_ISIphoneX ? 88.f : 64.f)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//状态栏高度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_StatusBarHeight (ZS_ISIphoneX ? 44.f : 20.f)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导航栏内容高度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_NavBarContentHeight 44.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//标签栏高度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZS_TabBarHeight (ZS_ISIphoneX ? 49.f + 34.f : 49.f)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：自iOS11之后，Apple引入Safe Area(安全区)的概念，这将是比宏定义更加有效的适配方法。</p>
</blockquote>
<h1 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h1><h2 id="导航栏样式"><a href="#导航栏样式" class="headerlink" title="导航栏样式"></a>导航栏样式</h2><p>设置当前导航栏的标题：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.navigationItem.title = @<span class="string">"title"</span>;</span><br></pre></td></tr></table></figure>
<p>获取当前导航栏frame：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> navRect = <span class="keyword">self</span>.navigationController.navigationBar.frame;</span><br></pre></td></tr></table></figure>
<p>设置导航栏样式可分为全局设置或分页设置</p>
<h3 id="全局设置-1"><a href="#全局设置-1" class="headerlink" title="全局设置"></a>全局设置</h3><p>全局设置在<code>AppDelegate</code>中设置，在整个app都会生效</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置导航栏背景颜色</span></span><br><span class="line">[[<span class="built_in">UINavigationBar</span> appearance] setBarTintColor:[<span class="built_in">UIColor</span> redColor]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置导航栏背景图片</span></span><br><span class="line">[[<span class="built_in">UINavigationBar</span> appearance] setBackgroundImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"bg"</span>] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置导航栏标题样式</span></span><br><span class="line">[[<span class="built_in">UINavigationBar</span> appearance] setTitleTextAttributes:[<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:</span><br><span class="line">                                                          [<span class="built_in">UIColor</span> redColor], <span class="built_in">NSForegroundColorAttributeName</span>,</span><br><span class="line">                                                          [<span class="built_in">UIFont</span> boldSystemFontOfSize:<span class="number">25</span>], <span class="built_in">NSFontAttributeName</span>,</span><br><span class="line">                                                          <span class="literal">nil</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置导航栏返回按钮的颜色</span></span><br><span class="line">[[<span class="built_in">UINavigationBar</span> appearance] setTintColor:[<span class="built_in">UIColor</span> redColor]];</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置导航栏隐藏</span></span><br><span class="line">[[<span class="built_in">UINavigationBar</span> appearance] setHidden:<span class="literal">YES</span>];</span><br></pre></td></tr></table></figure>
<h3 id="分页设置-1"><a href="#分页设置-1" class="headerlink" title="分页设置"></a>分页设置</h3><p>全局设置后，但是有几个页面需求不同，则也可以进行单独的分页设置。</p>
<p>分页设置的调用方法变为<code>self.navigationController.navigationBar</code>。<br>并且分页设置需要遵循： <strong>进入页面时修改，离开页面时还原</strong>的原则。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入页面时设置颜色：灰色</span></span><br><span class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController.navigationBar setBarTintColor:[<span class="built_in">UIColor</span> grayColor]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//离开页面时还原为全局设置：橙色</span></span><br><span class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</span><br><span class="line">    [<span class="keyword">self</span>.navigationController.navigationBar setBarTintColor:[<span class="built_in">UIColor</span> orangeColor]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="导航栏引起的布局问题"><a href="#导航栏引起的布局问题" class="headerlink" title="导航栏引起的布局问题"></a>导航栏引起的布局问题</h2><p>当导航栏透明时会出现以下情况：</p>
<h3 id="内容偏移属性：automaticallyAdjustsScrollViewInsets"><a href="#内容偏移属性：automaticallyAdjustsScrollViewInsets" class="headerlink" title="内容偏移属性：automaticallyAdjustsScrollViewInsets"></a>内容偏移属性：automaticallyAdjustsScrollViewInsets</h3><p>automaticallyAdjustsScrollViewInsets是视图控制器的一个属性，默认为YES，用于优化滑动类视图(继承于UIScrollView的视图)在视图控制里的显示：</p>
<p>iOS系统的导航栏UINavigationBar与标签栏UITabBar默认都是半透明模糊效果，在这种情况下系统会对视图控制器的UI布局进行优化： <strong>视图控制器里面第一个被添加进去的视图是滑动类视图，并且其Frame是整个屏幕大小时，系统会自动调整其contenInset，以保证滑动视图里的内容不被UINavigationBar与UITabBar遮挡。</strong></p>
<p>但是对于普通的视图，此时我们仍然需要注意：非滑动视图的布局仍然要考虑导航栏和标签栏高度，注意不被遮挡，比如布局的时候加上导航栏高度，以免内容被导航栏遮挡。</p>
<p>我们可以通过一段代码来测试一下效果，在默认导航栏(半透明)的视图控制器里添加如下代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UITextView是滑动视图，内容自动向下偏移，不会被导航栏覆盖</span></span><br><span class="line">    <span class="built_in">UITextView</span> *leftTextView = [[<span class="built_in">UITextView</span> alloc] init];</span><br><span class="line">    leftTextView.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>,<span class="number">100</span>, <span class="number">675</span>);</span><br><span class="line">    leftTextView.backgroundColor = [<span class="built_in">UIColor</span> lightGrayColor];</span><br><span class="line">    leftTextView.text = <span class="string">@"君不见，黄河之水天上来，奔流到海不复回。君不见，高堂明镜悲白发，朝如青丝暮成雪。人生得意须尽欢，莫使金樽空对月。天生我材必有用，千金散尽还复来。"</span>;</span><br><span class="line">    leftTextView.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">18</span>];</span><br><span class="line">    leftTextView.editable = <span class="literal">NO</span>;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:leftTextView];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//UIView是非滑动视图，内容被导航栏部分覆盖</span></span><br><span class="line">    <span class="built_in">UIView</span> *rightView= [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">150</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)];</span><br><span class="line">    rightView.backgroundColor = [<span class="built_in">UIColor</span> redColor];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:rightView];</span><br></pre></td></tr></table></figure>
<p><img src="auto.png" alt="导航栏透明情况下，滑动视图自动偏移，普通视图被遮挡"></p>
<p>这里会发现非滑动视图会被导航栏遮挡，但是滑动视图即使延伸到了导航栏下，但是其内容部分却自动向下偏移了，没有被导航栏遮挡住，这是因为系统自动优化了其内边距。</p>
<p>其实，这种系统的优化也是可以控制关闭的，关闭优化之后，滑动视图就会和普通视图一样，如果还设置其布局的原点是(0,0),其内容就会被导航栏所覆盖，关键代码如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//automaticallyAdjustsScrollViewInsets在11.0后失效，所以需要判断</span></span><br><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">11.0</span>,*)) &#123;</span><br><span class="line">       scrollView.contentInsetAdjustmentBehavior = <span class="built_in">UIScrollViewContentInsetAdjustmentNever</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="comment">//automaticallyAdjustsScrollViewIn，关闭自动偏移的系统优化</span></span><br><span class="line">       <span class="keyword">self</span>.automaticallyAdjustsScrollViewInsets = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="边缘延伸属性：edgesForExtendedLayout"><a href="#边缘延伸属性：edgesForExtendedLayout" class="headerlink" title="边缘延伸属性：edgesForExtendedLayout"></a>边缘延伸属性：edgesForExtendedLayout</h3><p>edgesForExtendedLayout也是视图控制器的布局属性，默认值是UIRectEdgeAll，即：当前视图控制器里各种UI控件会忽略导航栏和标签的存在，布局时若设置其原点设置为(0,0)，视图会延伸显示到导航栏的下面被覆盖。</p>
<p>所以我们可以设置<code>self.edgesForExtendedLayout=UIRectEdgeNone</code>，此时视图控制器里内容就会避开导航栏和标签栏了。</p>
<h2 id="导航栏透明"><a href="#导航栏透明" class="headerlink" title="导航栏透明"></a>导航栏透明</h2><p>导航栏布局问题都是因为导航栏透明度影响，但是需求没有必要透明，那么视图控制器里的控件就会默认从(0,64)开始布局了，设置导航栏不透明的方法如下:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.navigationController.navigationBar.translucent= <span class="literal">NO</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中MVC、MVP、MVVM介绍</title>
    <url>/2019/04/01/Android%E4%B8%ADMVC%E3%80%81MVP%E3%80%81MVVM%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>MVC,MVP,MVVM简单介绍</strong></p>
<a id="more"></a>
<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p><code>MVC</code>全名是<code>Model-View-Controller</code>，是模型(model)-视图(view)-控制器(controller)的缩写，一种软件设计的典范，用一种业务逻辑、数据、界面显示分离的方式来组织代码，在改进和个性化定制洁面以及用户交互的同时，不需要重新编写业务逻辑。其中<code>Model</code>层处理数据，业务逻辑等。<code>View</code>层处理界面的显示结果。<code>Controller</code>层起到桥梁的作用，来控制<code>View</code>层和<code>Model</code>层通信以此来达到分离视图显示和业务逻辑层。</p>
<p><img src="mvc.png" alt></p>
<p>我们往往把Android中界面部分的实现也理解为采用了MVC框架，常常把Activity理解为MVC模式中的Controller。</p>
<p><strong>看似没有什么特别的地方，但是由几个需要特别关注的关键点：</strong></p>
<ul>
<li>View是把控制权交给Controller，自己不执行业务逻辑。</li>
<li>Controller执行业务逻辑并且操作Model，但不会直接操作View，可以说它是对View无知的。</li>
<li>View和Model的同步消息是通过观察着模式进行，而同步操作是由View自己请求Model的数据然后对视图进行更新。</li>
</ul>
<h2 id="MVC的优缺点"><a href="#MVC的优缺点" class="headerlink" title="MVC的优缺点"></a>MVC的优缺点</h2><p><strong>优点</strong></p>
<ul>
<li>把业务逻辑全部分离到controller中，模块化程度高。当业务逻辑变更的时候，不需要更改view和model，只需要更改controller即可（swappable controller）。</li>
<li>观察者模式可以做到多视图同时更新</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>controller测试困难，因为视图同步操作是由view自己执行，而view只能在有UI的环境下运行。在没有UI的环境下对controller进行单元测试的时候，controller业务逻辑的正确性是无法验证的。controller更新model的时候，无法对view的更新操作进行断言。</li>
<li>view无法组件化。view是强依赖特定的model的，如果需要把这个view抽出来作为另外一个应用程序可服用的组件就困难了，因为不同的程序model是不一样的。</li>
</ul>
<h1 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h1><p><code>MVP</code>其实是<code>MVC</code>的一种演进版本，它更简单，将<code>MVC</code>中的<code>Controller</code>改为了<code>Presenter</code>，<code>View</code>通过接口与<code>Presenter</code>进行交互，降低耦合，方便进行单元测试。</p>
<ul>
<li><strong>View:</strong>负责绘制UI元素，与用户进行交互（Activity、View、Fragment都可以作为View层）</li>
<li><strong>Model:</strong>对数据的操作、对网络等的操作，和业务相关的逻辑处理</li>
<li><strong>Presenter:</strong>作为View与Model交互的中间纽带，处理与用户交互的逻辑。可以把Presenter理解为一个中间层的角色，它接受Model层的数据，并且处理之后传递给View层，还需要处理View层的用户<br>交互等操作。</li>
</ul>
<p><img src="mvp.png" alt></p>
<p><strong>关键点</strong></p>
<ul>
<li>View不再负责同步的逻辑，而是由Presenter负责。Presenter中既有业务逻辑也有同步逻辑。</li>
<li>View需要提供操作界面的接口给Presenter进行调用。（关键）</li>
</ul>
<p>对比在MVC中，Controller是不能操作View的，View也没有提供相应的接口。而在MVP当中，Presenter可以操作View，View需要提供一组对界面操作的接口给Presenter进行调用。Model仍然通过事件广播自己的变更，但由于Presenter监听而不是View。</p>
<h2 id="MVP（Passive-View）优缺点"><a href="#MVP（Passive-View）优缺点" class="headerlink" title="MVP（Passive View）优缺点"></a>MVP（Passive View）优缺点</h2><p><strong>优点</strong></p>
<ul>
<li>便于测试，Presenter对View是通过接口进行，在对Presenter进行不依赖UI环境的单元测试的时候，可以通过Mock一个View对象，这个对象只需要实现了View的接口即可。然后依赖注入到Presenter中，单元测试的时候就可以完整的测试Presenter业务逻辑的正确性。</li>
<li>View可以进行组件化。在MVP当中，View不依赖Model。这样就可以让View从特定的业务场景中脱离出来，可以说View可以做到对业务逻辑完全无知。它只需要提供一系列接口提供给上层接操作。这样就可以做到高度可复用的View组件。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>Presenter中除了业务逻辑意外，还有大量的View-&gt;Model，Model-&gt;View的手动同步逻辑，造成Presenter比较笨重，维护起来会比较困难。</li>
</ul>
<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><p><code>MVVM</code>模式（Mode-View-ViewModel），和<code>MVP</code>模式相比，<code>MVVM</code>模式用ViewModel替换了Presenter，其他层基本上与<code>MVP</code>模式一直，<code>ViewModel</code>可以理解成是<code>View</code>的数据模型和<code>Presenter</code>的合体。</p>
<p><code>MVVM</code>采用双向绑定（data-binding）。View的变动，自动反应在ViewModel，反之亦然。这种模式实际上是框架替应用开发者做了一些工作（相当于ViewModel类是由库帮我们生成的），开发者只需要较少代码就能实现比较复杂的交互。</p>
<p><img src="mvvm.png" alt></p>
<p><strong>MVVM调用关系</strong></p>
<p>MVVM的调用关系和MVP一样。但是，在ViewModel当中会有一个叫Binder，或者是Data-binding engine的东西。以前全部由Presenter负责的View和Model之间数据同步操作交由给Binder处理。你只需要在View的模版语法当中，指令式地声明View上的显示的内容是和Model的哪一块数据绑定的。当ViewModel对进行Model更新的时候，Binder会自动把数据更新到View上去，当用户对View进行操作（例如表单输入），Binder也会自动把数据更新到Model上去。这种方式称为：Two-way data-binding，双向数据绑定。可以简单而不恰当地理解为一个模版引擎，但是会根据数据变更实时渲染。</p>
<p><strong>关键点</strong></p>
<ul>
<li>MVVM把View和Model的同步逻辑自动化了。以前Presenter负责的View和Model同步不再手动地进行操作，而是交由框架所提供的Binder进行负责。</li>
<li>只需要告诉Binder，View显示的数据对应的是Model哪一部分即可。</li>
</ul>
<h2 id="MVVM优缺点"><a href="#MVVM优缺点" class="headerlink" title="MVVM优缺点"></a>MVVM优缺点</h2><p><strong>优点</strong></p>
<ul>
<li>提高可维护性。解决了MVP大量的手动View和Model同步的问题，提供双向绑定机制。提高了代码的可维护性。</li>
<li>简化测试。因为同步逻辑是交由Binder做的，View跟着Model同时变更，所以只需要保证Model的正确性，View就正确。大大减少了对View同步更新的测试。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>过于简单的图形界面不适用，或说牛刀杀鸡。</li>
<li>对于大型的图形应用程序，视图状态较多，ViewModel的构建和维护的成本都会比较高。</li>
<li>数据绑定的声明是指令式地写在View的模版当中的，这些内容是没办法去打断点debug的。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>三者，都是后者解决前者遗留的问题，但每个存在必有其的理由。每种模式并不能因为用而用，而是根据业务的需求来定制。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS经典面试案例详解</title>
    <url>/2019/03/28/CSS%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E6%A1%88%E4%BE%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="包含块"><a href="#包含块" class="headerlink" title="包含块"></a>包含块</h1><p>一个元素的尺寸和位置经常受其包含块的影响，大多数情况下，包含块就是这个元素最近的祖先元素的内容去，但是也不是总是这样的。<br><a id="more"></a></p>
<p>当一个客户端代理（比如说浏览器）展示一个文档时，对每一个元素，它都产生了一个盒子。每一个盒子都被划分为四个区域。</p>
<ul>
<li>内容区</li>
<li>内边距区</li>
<li>边框区</li>
<li>外边距区<br><img src="boxdim.png" alt></li>
</ul>
<p>很多被误导的观念：一个元素的包含块就是他的父元素的内容区，但并非是这样的。</p>
<h2 id="包含块有什么影响？"><a href="#包含块有什么影响？" class="headerlink" title="包含块有什么影响？"></a>包含块有什么影响？</h2><p>元素的尺寸及位置，常常会受它的包含块所影响。对于一些属性，例如 width, height, padding, margin，绝对定位元素的偏移值 （比如 position 被设置为 absolute 或 fixed），当我们对其赋予百分比值时，这些值的计算值，就是通过元素的包含块计算得来。</p>
<h2 id="什么是包含块"><a href="#什么是包含块" class="headerlink" title="什么是包含块"></a>什么是包含块</h2><p>有这么大的影响，那么包含块到底是什么？<br>如果对于浮动元素，其包含块定义为最近的块级祖先元素。但是对于定位的元素则行为相对复杂了。</p>
<ul>
<li><p>“根元素”的包含块（也被称为初始包含块）由用户代理建立。在HTML中，根元素就是html元素。不过有些浏览器会使用body作为根元素。在大多数浏览器中，初始包含块是一个视窗大小的矩形。<del>但不代表就是视口。</del></p>
<blockquote>
<p>在电脑图形学里面，视口代表了一个可看见的多边形区域（通常来说是矩形）。在浏览器范畴里，它代表的是浏览器中网站可见内容的部分。</p>
</blockquote>
</li>
<li><p>对于一个非根元素，如果其<code>position</code>值是<code>relative</code>或<code>static</code>，包含块则由最近的块级框、表单元格或行内块祖先框的内容边界构成。</p>
<blockquote>
<p>当时网页中基本不会使用表单元格、行内块来作为页面的基本布局。</p>
</blockquote>
</li>
<li><p>对于一个非根元素，如果其<code>position</code>值是<code>absolute</code>，包含块设置为最近的<code>position</code>值不是<code>static</code>的祖先元素（可以是任何类型）。</p>
<ul>
<li>如果这个祖先元素是块级元素，包含块则设置为该元素的内边距边界，换句话说就是由边框界定的区域。</li>
<li>如果这个祖先元素是行内元素，包含块则设置为该祖先元素的内容边界。在从左向右的语言中，包含块的上边界和左边界是该祖先元素中第一个框内容区的上边界和左边界，包含块的下边界和右边界是最后一个框内容区的下边界和右边界。而从右向左读的语言中，包含块的右边界对应于第一个框的右内容边界，包含块的左边界则取自最后一个框的做内容边界，上下边界也是一样。</li>
<li>如果没有祖先，元素的包含块定义为初始包含块。</li>
</ul>
</li>
</ul>
<p><strong>看一下案例，对于包含块的影响</strong></p>
<h3 id="初始包含块"><a href="#初始包含块" class="headerlink" title="初始包含块"></a>初始包含块</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        html &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line"><span class="css">            <span class="comment">/*margin: 30px;*/</span></span></span><br><span class="line">            border: 1px red solid;</span><br><span class="line">        &#125;</span><br><span class="line">        body &#123;</span><br><span class="line"><span class="css">            <span class="comment">/*margin: 30px;*/</span></span></span><br><span class="line">            border: 1px pink solid;</span><br><span class="line">            height: 90%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line">            background-color: beige;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 800px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line">            background-color: pink;</span><br><span class="line"><span class="css">            <span class="comment">/* 200px */</span></span></span><br><span class="line">            width: 50%;  </span><br><span class="line"><span class="css">            <span class="comment">/* 200px */</span></span></span><br><span class="line">            height: 50%;</span><br><span class="line"><span class="css">            <span class="comment">/* 40px */</span></span></span><br><span class="line">            margin: 10%;</span><br><span class="line"><span class="css">            <span class="comment">/* 40px */</span></span></span><br><span class="line">            padding: 10%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>content标签为静态定位，则wrap标签为他的包含块，所以content标签的高和宽的百分比值有wrap包含块的高和宽来决定，margin和padding的百分比值则由wrap包含块的宽来决定。</p>
<h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line">            background-color: pink;</span><br><span class="line"><span class="css">            <span class="comment">/* 200px */</span></span></span><br><span class="line">            width: 50%;  </span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="comment">/* 40px */</span></span></span><br><span class="line">            margin: 10%;</span><br><span class="line"><span class="css">            <span class="comment">/* 40px */</span></span></span><br><span class="line">            padding: 10%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>与案例1相似的结构，但是wrap元素变成了内联元素，则wrap不是content的包含块，没有祖先元素能够成为content的包含块，则content的包含块为初始包含块。所以content的宽和高的百分比值将不再由wrap元素决定。</p>
<h3 id="案例三"><a href="#案例三" class="headerlink" title="案例三"></a>案例三</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0px;</span><br><span class="line">            top: 0px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            padding: 50px 50px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="comment">/* 300px */</span></span></span><br><span class="line">            width: 50%; </span><br><span class="line"><span class="css">            <span class="comment">/* 150px */</span></span></span><br><span class="line">            height: 25%;</span><br><span class="line"><span class="css">            <span class="comment">/* 60px */</span></span></span><br><span class="line">            padding: 10%;</span><br><span class="line"><span class="css">            <span class="comment">/* 60px */</span></span></span><br><span class="line">            margin: 10%;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>与案例1相似的结构，wrap和content元素都开启了绝对定位，那么wrap元素则为content元素的包含块，所以content的百分比值有wrap元素来决定，但是注意wrap的盒模型有padding值，计算时需要加上。</p>
<blockquote>
<p>如果包含块的 box-sizing 值设置为 border-box ，就没有这个问题。</p>
</blockquote>
<h3 id="案例四"><a href="#案例四" class="headerlink" title="案例四"></a>案例四</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            margin: 50px;</span><br><span class="line">            padding: 30px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line">            position: fixed;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line"><span class="css">            <span class="comment">/* 50% vw */</span></span></span><br><span class="line">            width: 50%;</span><br><span class="line"><span class="css">            <span class="comment">/* 50% scroll h  */</span></span></span><br><span class="line">            height: 50%;</span><br><span class="line"><span class="css">            <span class="comment">/* 10% vw */</span></span></span><br><span class="line">            margin: 10%;</span><br><span class="line"><span class="css">            <span class="comment">/* 10% vw */</span></span></span><br><span class="line">            padding: 10%;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>content元素的包含块的定位为<code>fixed</code>，所以他的包含块即为初始包含块（屏幕上，也即是viewport）,content元素则会随着浏览器窗口的大小的变化而变化。</p>
<h3 id="案例五"><a href="#案例五" class="headerlink" title="案例五"></a>案例五</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            background: beige;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        section &#123;</span><br><span class="line">            transform: rotate(0deg);</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 160px;</span><br><span class="line">            background: lightgray;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 80px;</span><br><span class="line">            top: 30px;</span><br><span class="line">            width: 50%;</span><br><span class="line"><span class="css">            <span class="comment">/* == 200px */</span></span></span><br><span class="line">            height: 25%;</span><br><span class="line"><span class="css">            <span class="comment">/* == 40px */</span></span></span><br><span class="line">            margin: 5%;</span><br><span class="line"><span class="css">            <span class="comment">/* == 20px */</span></span></span><br><span class="line">            padding: 5%;</span><br><span class="line"><span class="css">            <span class="comment">/* == 20px */</span></span></span><br><span class="line">            background: cyan;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个示例中，P 元素的 position 为 absolute，所以它的包含块是 <section>，也就是距离它最近的一个 transform 值不为 none 的父元素。</section></p>
<h1 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h1><p>left、top、right、bottom、width、height默认值为auto。<br>margin、padding默认值为0。</p>
<h1 id="浮动元素层级"><a href="#浮动元素层级" class="headerlink" title="浮动元素层级"></a>浮动元素层级</h1><p>看一个案例<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#up</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#down</span> &#123;</span></span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"up"</span>&gt;</span>upupup<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"down"</span>&gt;</span>downdowndown<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>原来<code>up</code>id的元素不开启浮动的情况下，两个块级元素上下排列，但是开启了<code>up</code>id的元素的浮动后，<br><code>down</code>id的元素由于收到了<code>up</code>元素的影响顶了上去，但是发现文字并没有跟着上去。<br>解释：<br><strong>在浮动的情况下，元素层级只提升半层，元素分两层，一层与盒模型相关，一层与文字相关。</strong></p>
<h1 id="负margin详解"><a href="#负margin详解" class="headerlink" title="负margin详解"></a>负margin详解</h1><p><a href="https://www.w3cplus.com/css/the-definitive-guide-to-using-negative-margins.html" target="_blank" rel="noopener">负margin用法权威指南</a></p>
<p>何为负margin</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#content &#123;margin-left:-100px;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>负margin是标准的CSS，在w3c中，margin属性值是允许出现负值的</li>
<li>负margin不是一种hack方法</li>
<li>不脱离文档流（在不使用浮动的情况下）</li>
<li>完全兼容</li>
<li>浮动会影响负margin的使用</li>
<li><del>dreamveaver不解析负margin（前端工程师不推荐使用，也不应该在设计视图中检查网站）</del></li>
</ul>
<p>**作用在static元素上的负margin属性值<br><img src="negative-margin-1.jpg" alt><br>当static元素没有设定成浮动的元素，上图中说明了负margin对static元素的作用。</p>
<p>当static元素的<code>margin-left/margin-right</code>被赋予负值时，元素将被拉进指定方向。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box1</span> &#123;<span class="attribute">margin-top </span>: -<span class="number">10px</span>;&#125;</span><br><span class="line"><span class="comment">/*元素向上移动10px*/</span></span><br></pre></td></tr></table></figure>
<p>当static元素的<code>margin-bottom/margin-right</code>被赋予负值时，会将后续的元素拖拉进来，覆盖原来的元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box1</span> &#123;<span class="attribute">margin-bottom </span>: -<span class="number">10px</span>;&#125;</span><br><span class="line"><span class="comment">/*box1后续的元素将向上移动10px，box1本身不会移动*/</span></span><br></pre></td></tr></table></figure>
<p><strong>作用在浮动元素上的负margin属性值</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mydiv1"</span>&gt;</span>First<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mydiv2"</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 应用在与浮动相反方向的负margin */</span></span><br><span class="line"><span class="selector-id">#mydiv1</span> &#123;<span class="attribute">float</span>:left; <span class="attribute">margin-right</span>:-<span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>如果给一个浮动元素加上相反方向的负margin，则会使行间距为0且内容重叠。这对于创建1列是100%宽度而其他列是固定宽度（比如100px）的自适应布局来说是非常有用的方法。</p>
<p>若两个元素都为浮动，且#mydiv1的元素设定margin-right为20px。这样#mydiv2会认为#mydiv1的宽度比原来宽度缩短了20px（因此会导致重叠）。但有意思的是，#mydiv1的内容不受影响，保持原有的宽度。</p>
<p>如果负margin等于实际宽度，则元素会被完全覆盖。这是因为元素的完全宽度等于margin，padding，border，width相加而成，所以如果负margin等于余下三者的和，那元素的实际宽度也就变成了0px。</p>
<h1 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h1><p>看圣杯布局前，先看看如何实现三列布局</p>
<p><strong>三列布局需求：</strong></p>
<ul>
<li>两边固定，中间自适应</li>
<li>当中列要完整显示</li>
<li>当中列优先加载</li>
</ul>
<h2 id="定位实现"><a href="#定位实现" class="headerlink" title="定位实现"></a>定位实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line"><span class="css">            <span class="comment">/* 两倍的left+right */</span></span></span><br><span class="line">            min-width: 600px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#middle</span> &#123;</span></span><br><span class="line">            height: 400px;</span><br><span class="line">            padding: 0 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是页面的整体布局很少会使用定位来实现，而且定位需要一个容器，容器的定位必须是相对定位，定位会提升元素层级，这样布局会相对复杂。</p>
<h2 id="浮动实现"><a href="#浮动实现" class="headerlink" title="浮动实现"></a>浮动实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line"><span class="css">            <span class="comment">/* 两倍的left+right */</span></span></span><br><span class="line">            min-width: 600px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#middle</span> &#123;</span></span><br><span class="line">            height: 400px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，浮动来实现三列布局比使用定位来实现三列布局更加方便。但是也造成一个问题，中间列按照文档的加载顺序，无法做到中间列优先加载，所以圣杯布局就出现了。</p>
<h2 id="实现圣杯布局"><a href="#实现圣杯布局" class="headerlink" title="实现圣杯布局"></a>实现圣杯布局</h2><p>完整实现代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#header</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line">            background-color: gray;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#middle</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 1、中间自适应，给予宽度100%，middle的包含块为container */</span></span></span><br><span class="line">            width: 100%;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#middle</span>, <span class="selector-id">#left</span>, <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 2、三个块设置浮动，且middle宽度为100%，则left，和right换行显示 */</span></span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line">            /* 3、解决left，设置margin-left为-100%，因为left的包含块和middle的包含块是同一个，</span><br><span class="line">            则-100%的值等于middle的宽度，则left被拉成与middle同行显示且靠middle左边对齐 */</span><br><span class="line">            margin-left: -100%;</span><br><span class="line"><span class="css">            <span class="comment">/* 6、将自己往外拉自身的宽度值 */</span></span></span><br><span class="line">            position: relative;</span><br><span class="line">            left: -200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 4、同理，只需要设置负值为与自身宽度相同，则被拉上与middle同行显示，且右边与middle右边对其 */</span></span></span><br><span class="line">            margin-left: -200px;</span><br><span class="line"><span class="css">            <span class="comment">/* 7、将自己往外拉自身的宽度值 */</span></span></span><br><span class="line">            position: relative;</span><br><span class="line">            right: -200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#middle</span> &#123;</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> &#123;</span></span><br><span class="line">            /* 5、完成后，但是middle宽度还是整个的100%，left与right其实只是盖着它们，并没有把内容设置到中间，但是这里不能简单的设置padding值，</span><br><span class="line">            因为中间的宽度是100&amp;设定死的，而且left的margin也会随之变化，</span><br><span class="line">            所以要给它们三个的父元素container设置padding值，然后再将left和right往外拉 */</span><br><span class="line">            padding: 0 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 0、解决高度塌陷 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line">            *zoom: 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            display: block;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>圣杯布局结合了浮动、定位等技术，但最重要一点是使用了<code>负margin</code>的用法。</p>
<h1 id="伪等高布局"><a href="#伪等高布局" class="headerlink" title="伪等高布局"></a>伪等高布局</h1><p>通常我们会遇到一些需求，要求两列高度相同，但是两列内容所撑开的高度不一定相同，伪等高布局就出现了。</p>
<p>实现代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line">            margin: 0 400px;</span><br><span class="line">            border: 1px black solid;</span><br><span class="line"><span class="css">            <span class="comment">/* 父容器设置内容溢出显示 */</span></span></span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 400px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 400px;</span><br><span class="line">            background-color: gray;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 设置padding，让内容撑开一定高度 */</span></span></span><br><span class="line">            padding-bottom: 10000px;</span><br><span class="line"><span class="css">            <span class="comment">/*内容边界在收缩回来。*/</span></span></span><br><span class="line">            margin-bottom: -10000px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 解决高度塌陷 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line">            *zoom: 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            display: block;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>left<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同样多列也是如此运用，但是原理还是利用了<code>负margin</code>的特性来实现。</p>
<h1 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h1><p>因为圣杯布局外部整体布局还是会使用到定位，这样还是会对页面布局产生比较大的影响，那么双飞翼布局就出现了，对比圣杯，仅仅只是加了一个标签来搭建整体结构，不会使用到定位这些元素来影响到整体的布局。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#header</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> <span class="selector-class">.left</span>, <span class="selector-id">#container</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            background-color: pink;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            margin-left: -100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            margin-left: -200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#container</span> <span class="selector-class">.middle</span> <span class="selector-class">.content</span> &#123;</span></span><br><span class="line">            padding: 0 200px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 解决高度塌陷 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line">            *zoom: 1;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            display: block;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对比圣杯布局，就是在middle里再加一个元素用来做内容的容器，那么这个容器再设置padding就不会影响到两侧元素了 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                middle content</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h1><p>先看一段代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        html &#123;</span><br><span class="line">            margin: 30px;</span><br><span class="line">            border: 1px black solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 30px;</span><br><span class="line">            border: 1px black solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            height: 5000px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>看看这时候的滚动条作用与谁身上，不是body，也不是html，而是作用与<code>文档</code>上。</p>
<p>再看一个案例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        html &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">            margin: 30px;</span><br><span class="line">            border: 1px black solid;</span><br><span class="line">            overflow: scroll;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">            margin: 30px;</span><br><span class="line">            border: 1px black solid;</span><br><span class="line">            overflow: scroll;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            height: 5000px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>body和html都添加了高度为100%的属性值，而它俩的包含块为初始包含块，所以它们两个高度为视口的高度。而两个都添加了overflow为scroll时，不仅文档出现了滚动条，而且body身上也出现了滚动条。</p>
<h1 id="静止系统默认滚动条"><a href="#静止系统默认滚动条" class="headerlink" title="静止系统默认滚动条"></a>静止系统默认滚动条</h1><p>看到上面的例子后，如何静止掉系统的默认滚动条。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        html,body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">        body &#123;</span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 5000px;"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="解决IE6下fixed固定定位失效问题"><a href="#解决IE6下fixed固定定位失效问题" class="headerlink" title="解决IE6下fixed固定定位失效问题"></a>解决IE6下fixed固定定位失效问题</h1><p>实现代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 隐藏系统滚动条 */</span></span></span><br><span class="line">        html,</span><br><span class="line">        body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body &#123;</span><br><span class="line">            overflow: scroll;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.test</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50px;</span><br><span class="line">            top: 50px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 5000px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到test元素仅仅只是设置了绝对定位，但是作用基本等同于固定定位。<br><strong>解释：</strong>因为这里隐藏了系统的默认滚动条，body显示的滚动条并不会移动视口，只有系统的滚动条才会移动视口。body的滚动条仅仅只是移动的body内的元素。而test元素的包含块是视口，所以就算滚动条怎么移动，test元素也不会移动，这就是另类解决fixed定位失效的问题解决办法。</p>
<h1 id="粘连布局"><a href="#粘连布局" class="headerlink" title="粘连布局"></a>粘连布局</h1><p>可能会遇到一种需求，我们有一个内容<code>main</code></p>
<ul>
<li>当<code>main</code>的高度足够长的时候，<code>footer</code>应该紧跟在<code>main</code>元素后面</li>
<li>当<code>main</code>元素比较短的时候（比如小于屏幕的高度），我们期望这个<code>footer</code>元素能够粘连在屏幕底部</li>
</ul>
<p>实现代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body,</span><br><span class="line">        html &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">            text-align: center;</span><br><span class="line">            min-height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">            padding-bottom: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line">            background-color: pink;</span><br><span class="line">            height: 50px;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            text-align: center;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/* 将自己拉上去一个自己的高度 */</span></span></span><br><span class="line">            margin-top: -50px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            main<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt;</span></span><br><span class="line"><span class="comment">            main&lt;br /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 必须要放在wrap外面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>内容少的时候，footer粘在底部，当内容过多时滚动并紧跟内容。也是简单的<code>负margin</code>的运用。</p>
<h1 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">BFC</a></h1><p>理解BFC是什么前我们先来理解另外两个概念：<code>Box</code>和<code>FC</code>(即formatting context)</p>
<h2 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h2><p>一个页面是由很多个<code>Box</code>组成的，元素的类型和<code>display</code>属性决定了这个<code>Box</code>的类型。不同类型的<code>Box</code>，会参与不同的Formatting Context。</p>
<p><code>Block Level</code>的box会参与形成<code>BFC</code>，比如<code>display</code>值为<code>block</code>，<code>list-item</code>，<code>table</code>的元素。</p>
<p><code>Inline Level</code>的box会参与形成<code>IFC</code>，比如<code>display</code>值为<code>inline</code>，<code>inline-table</code>，<code>inline-block</code>的元素。</p>
<h2 id="FC-Formatting-Context"><a href="#FC-Formatting-Context" class="headerlink" title="FC(Formatting Context)"></a>FC(Formatting Context)</h2><p>它是W3C CSS2.1规范中的一个概念，定义的是页面中的一块渲染区域，并且有一套渲染规则，它 <strong>决定了其子元素将如何定位</strong>，以及和 <strong>其他元素的关系和相互作用</strong>。</p>
<p>常见的<code>Formatting Context</code>有：<code>Block Formatting Context</code>(BFC|块级格式化上下文)和<code>Inline Formatting Context</code>(IFC|行内格式化上下文)。</p>
<h2 id="IFC、BFC布局规则"><a href="#IFC、BFC布局规则" class="headerlink" title="IFC、BFC布局规则"></a>IFC、BFC布局规则</h2><h3 id="IFC布局规则"><a href="#IFC布局规则" class="headerlink" title="IFC布局规则"></a>IFC布局规则</h3><p>在行内格式化上下文中，框（boxes）一个接一个的水平排列，起点是包含块的顶部。水平方向上的<code>margin</code>，<code>border</code>和<code>padding</code>在框之间得到保留。框在垂直方向上可以以不同的方式对齐：它们的顶部或者底部对其，或根据其中文字的基线对其。包含那些框的长方形区域，会形成一行，叫做行框。</p>
<h3 id="BFC布局规则【重要】"><a href="#BFC布局规则【重要】" class="headerlink" title="BFC布局规则【重要】"></a>BFC布局规则【重要】</h3><ul>
<li>内部的Box会在垂直方向，一个接一个的放置。</li>
<li>Box垂直方向的距离由<code>margin</code>决定。属于同一个BFC的两个相邻Box的<code>margin</code>会发生重叠</li>
<li>每个元素的左外边缘（margin-left），与包含块的左边（<code>contain box left</code>)相接触（对于从左往右的格式化，否则相反）。即使存在浮动也是如此。除非这个元素自己形成了一个新的BFC。</li>
<li>BFC的区域不会与<code>float box</code>重叠。</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li>计算BFC的高度时，浮动元素也参与计算。</li>
</ul>
<h2 id="块格式化上下文（Block-Formatting-Context，BFC）"><a href="#块格式化上下文（Block-Formatting-Context，BFC）" class="headerlink" title="块格式化上下文（Block Formatting Context，BFC）"></a>块格式化上下文（Block Formatting Context，BFC）</h2><p>是Web页面的可视化CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p>
<p>下列方式会创建 <strong>块格式化上下文：</strong></p>
<ul>
<li>根元素或包含根元素的元素</li>
<li>浮动元素（元素的 <code>float</code> 不是 <code>none</code>）</li>
<li>绝对定位元素（元素的 <code>position</code> 为 <code>absolute</code> 或 <code>fixed</code>）</li>
<li>行内块元素（元素的 <code>display</code> 为 <code>inline-block</code>）</li>
<li>表格单元格（元素的 <code>display</code>为 <code>table-cell</code>，HTML表格单元格默认为该值）</li>
<li>表格标题（元素的 <code>display</code> 为 <code>table-caption</code>，HTML表格标题默认为该值）</li>
<li>匿名表格单元格元素（元素的 <code>display</code>为 <code>table</code>、<code>table-row</code>、 <code>table-row-group</code>、<code>table-header-group</code>、<code>table-footer-group</code>（分别是<code>HTML table、row、tbody、thead、tfoot</code>的默认属性）或 <code>inline-table</code>）</li>
<li><code>overflow</code> 值不为 <code>visible</code> 的块元素</li>
<li><code>display</code> 值为 <code>flow-root</code> 的元素</li>
<li><code>contain</code> 值为 <code>layout</code>、<code>content</code>或 <code>strict</code> 的元素</li>
<li>弹性元素（<code>display</code>为 <code>flex</code> 或 <code>inline-flex</code>元素的直接子元素）</li>
<li>网格元素（<code>display</code>为 <code>grid</code> 或 <code>inline-grid</code> 元素的直接子元素）</li>
<li>多列容器（元素的 <code>column-count</code> 或 <code>column-width</code> 不为 <code>auto</code>，包括 <code>column-count</code> 为 1）</li>
<li><code>column-span</code> 为 <code>all</code> 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（标准变更，Chrome bug）。</li>
</ul>
<blockquote>
<p>块格式化上下文包含创建它的元素内部的所有内容.</p>
</blockquote>
<p>块格式化上下文对浮动定位（参见 float）与清除浮动（参见 clear）都很重要。浮动定位和清除浮动时只会应用于同一个BFC内的元素。浮动不会影响其它BFC中元素的布局，而清除浮动只能清除同一BFC中在它前面的元素的浮动。外边距折叠（Margin collapsing）也只会发生在属于同一BFC的块级元素之间。</p>
<p>简单来说：BFC就是一个容器，来管理块级元素。</p>
<h1 id="IE下的BFC（hasLayout）"><a href="#IE下的BFC（hasLayout）" class="headerlink" title="IE下的BFC（hasLayout）"></a>IE下的BFC（hasLayout）</h1><p>IE5、6、7下没有BFC的概念，但有类似于BFC相同的概念<code>hasLayout</code>。</p>
<p>hasLayout可以简单看作是IE5.5/6/7中的<code>BFC(Block Formatting Context)</code>。也就是一个元素要么自己对自身内容进行组织和尺寸计算(即可通过width/height来设置自身的宽高)，要么由其containing block来组织和尺寸计算。而IFC（即没有拥有布局）而言，则是元素无法对自身内容进行组织和尺寸计算，而是由自身内容来决定其尺寸（即仅能通过line-height设置内容行距，通过行距来支撑元素的高度；也无法通过width设置元素宽度，仅能由内容来决定而已）。</p>
<p>当hasLayout为true时(就是所谓的”拥有布局”)，相当于元素产生新BFC，元素自己对自身内容进行组织和尺寸计算;</p>
<p>当hasLayout为false时(就是所谓的”不拥有布局”)，相当于元素不产生新BFC，元素由其所属的containing block进行组织和尺寸计算。</p>
<p>和产生新BFC的特性一样，hasLayout无法通过CSS属性直接设置，而是通过某些CSS属性间接开启这一特性。不同的是某些CSS属性是以不可逆方式间接开启hasLayout为true。并且默认产生新BFC的只有html元素，而默认hasLayout为true的元素就不只有html元素了。</p>
<p>另外我们可以通过object.currentStyle.hasLayout属性来判断元素是否开启了hasLayout特性。</p>
<p>必须说明： **IE8及以上浏览器使用了全新的显示引擎，已经不再使用hasLayout属性，因为hasLayout属性只针对IE7以下。</p>
<p><strong>默认拥有布局的元素</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>, <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>, <span class="tag">&lt;<span class="name">tr</span>&gt;</span>, <span class="tag">&lt;<span class="name">th</span>&gt;</span>, <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>,<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>, <span class="tag">&lt;<span class="name">button</span>&gt;</span>, <span class="tag">&lt;<span class="name">select</span>&gt;</span>, <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>, <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>, <span class="tag">&lt;<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span>, <span class="tag">&lt;<span class="name">embed</span>&gt;</span>, <span class="tag">&lt;<span class="name">object</span>&gt;</span>, <span class="tag">&lt;<span class="name">applet</span>&gt;</span>,<span class="tag">&lt;<span class="name">marquee</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>如何触发hasLayout</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span></span><br><span class="line"><span class="selector-tag">height</span>: (除 <span class="selector-tag">auto</span> 外任何值)</span><br><span class="line"><span class="selector-tag">width</span>: (除 <span class="selector-tag">auto</span> 外任何值)</span><br><span class="line"><span class="selector-tag">float</span>: (<span class="selector-tag">left</span> 或 <span class="selector-tag">right</span>)</span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span></span><br><span class="line"><span class="selector-tag">writing-mode</span>: <span class="selector-tag">tb-rl</span></span><br><span class="line"><span class="selector-tag">zoom</span>: (除 <span class="selector-tag">normal</span> 外任意值)</span><br></pre></td></tr></table></figure>
<p>IE7还有一些额外的属性可触发hasLayout</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">min-height</span>: (任意值)</span><br><span class="line"><span class="selector-tag">min-width</span>: (任意值)</span><br><span class="line"><span class="selector-tag">max-height</span>: (除 <span class="selector-tag">none</span> 外任意值)</span><br><span class="line"><span class="selector-tag">max-width</span>: (除 <span class="selector-tag">none</span> 外任意值)</span><br><span class="line"><span class="selector-tag">overflow</span>: (除 <span class="selector-tag">visible</span> 外任意值，仅用于块级元素)</span><br><span class="line"><span class="selector-tag">overflow-x</span>: (除 <span class="selector-tag">visible</span> 外任意值，仅用于块级元素)</span><br><span class="line"><span class="selector-tag">overflow-y</span>: (除 <span class="selector-tag">visible</span> 外任意值，仅用于块级元素)</span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">fixed</span></span><br></pre></td></tr></table></figure>
<p>使用hasLayout就是为了兼容一些项目需要运行在IE7以下版本。</p>
<h1 id="BFC实现自适应两栏布局"><a href="#BFC实现自适应两栏布局" class="headerlink" title="BFC实现自适应两栏布局"></a>BFC实现自适应两栏布局</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: aquamarine;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: green;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            display: block;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line">            zoom: 1;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以使用三列布局的思想来实现两列布局，但是利用BFC的原理可以更简单的实现两列布局。由于left块开启浮动，会使得left显示在middle上层，但是middle还是占满100%，单纯用颜色判断像是两列布局，但是开启left透明度会发现middle占满100%，是浮现在上面，而让middle开启BFC，overflow为hidden即为开启了middle的BFC，BFC的区域并不会和浮动区域重叠，即可实现。</p>
<h1 id="清除浮动解决高度塌陷的方式"><a href="#清除浮动解决高度塌陷的方式" class="headerlink" title="清除浮动解决高度塌陷的方式"></a>清除浮动解决高度塌陷的方式</h1><h2 id="直接给予高度"><a href="#直接给予高度" class="headerlink" title="直接给予高度"></a>直接给予高度</h2><p>直接计算内容盒子高度，并赋予父容器高度，简单，但是毫无扩展性。</p>
<h2 id="利用BFC"><a href="#利用BFC" class="headerlink" title="利用BFC"></a>利用BFC</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line">            border: 1px black solid;</span><br><span class="line"><span class="css">            <span class="comment">/* 利用BFC布局原则，BFC块高度，浮动元素也会参与高度计算，只要满足开启BFC的条件即可 */</span></span></span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="br标签"><a href="#br标签" class="headerlink" title="br标签"></a>br标签</h2><p><code>&lt;br clear=&quot;all&#39; /&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line">            border: 1px black solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 利用br标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> <span class="attr">clear</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="空标签清除浮动"><a href="#空标签清除浮动" class="headerlink" title="空标签清除浮动"></a>空标签清除浮动</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line">            border: 1px black solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 空标签并清除浮动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="伪元素清除浮动"><a href="#伪元素清除浮动" class="headerlink" title="伪元素清除浮动"></a>伪元素清除浮动</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line">            border: 1px black solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line">            *zoom: 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            display: block;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="垂直水平居中"><a href="#垂直水平居中" class="headerlink" title="垂直水平居中"></a>垂直水平居中</h1><h2 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h2><p>需要已知自身元素高宽。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 600px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#inner</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50%;</span><br><span class="line">            top: 50%;</span><br><span class="line">            margin-left: -50px;</span><br><span class="line">            margin-top: -50px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h2><p>需要已知自身元素高宽。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 600px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#inner</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            margin: auto auto;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>原理：</p>
<p>绝对定位盒子特性：高宽有内容撑开下<br>水平方向上：left + right + width + padding + margin = 包含块padding内容区域<br>垂直方向上：top + bottom + width + padding + margin = 包含块padding内容区域</p>
<p>上述例子中：<br>水平方向上：0 + 0 + 100 + 0 + auto = 600<br>垂直方向上：0 + 0 + 100 + 0 + auto = 600<br>则auto等于250，即可居中。</p>
<h2 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h2><p>无需知道元素高度，使用transform</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#wrap</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 600px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#inner</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50%;</span><br><span class="line">            top: 50%;</span><br><span class="line">            transform: translate(-50%,-50%);</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            testaaaaaaa<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            testaaaaaa<span class="tag">&lt;<span class="name">abr</span> /&gt;</span></span><br><span class="line">            testaaaaaa<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            testaaaaaa<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h1><p><img src="line_height.png" alt="行高"></p>
<p>从上到下四条线分别是顶线、中线、基线、底线，很像才学英语字母时的四线三格</p>
<p>1.行高是指上下文本行的基线间的垂直距离，即图中两条红线间垂直距离。<br>2.行距是指一行底线到下一行顶线的垂直距离，即第一行粉线和第二行绿线间的垂直距离。<br>3.半行距是行距的一半，即区域3垂直距离/2，区域1，2，3，4的距离之和为行高，而区域1，2，4距离之和为字体size，所以半行距也可以这么算：（行高-字体size）/2 </p>
<p><strong>内容区：</strong>底线和顶线包裹的区域，即下图深灰色背景区域。<br>文本行中的每个元素都会生成一个内容区，这个由字体的大小确定。这个内容区则会生成一个行内框，如果不存在其他因素，这个行内框就完全等于该元素的内容区，由line-height产生的行间距就是增加和减少各行内框高度的因素之一。</p>
<p><strong>行内框 :</strong> 行内框是一个浏览器渲染模型中的一个概念，无法显示出来，行内框默认等于内容区域， 将line-height的计算值减去font-size的计算值，这个值就是总行距，这个值可能是个负值，任何将行间距/2 分别应用到内容区的顶部和底部，其结果就是该元素的行内框。</p>
<p><strong>行框（line box）</strong>，行框是指本行的一个虚拟的矩形框，是浏览器渲染模式中的一个概念，并没有实际显示。默认情况下行框高度等于本行内所有元素中行内框最大的值（一行上垂直对齐时以行高值最大的行内框为基准，其他行内框采用自己的对齐方式向基准对齐，最终计算行框的高度），当有多行内容时，每行都会有自己的行框。</p>
<p><img src="line_height2.png" alt></p>
<h1 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/vertical-align" target="_blank" rel="noopener">vertical-align</a></h1><p>CSS 的属性 <code>vertical-align</code> 用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。</p>
<blockquote>
<p>注意 vertical-align 只对行内元素、表格单元格元素生效：不能用它垂直对齐块级元素。</p>
</blockquote>
<h2 id="使行内元素盒模型与其行内元素容器垂直对齐。例如，用于垂直对齐一行文本的内的图片-lt-img-gt-："><a href="#使行内元素盒模型与其行内元素容器垂直对齐。例如，用于垂直对齐一行文本的内的图片-lt-img-gt-：" class="headerlink" title="使行内元素盒模型与其行内元素容器垂直对齐。例如，用于垂直对齐一行文本的内的图片&lt;img&gt;："></a>使行内元素盒模型与其行内元素容器垂直对齐。例如，用于垂直对齐一行文本的内的图片<code>&lt;img&gt;</code>：</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> &#123;</span></span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 600px;</span><br><span class="line">            border: 1px red solid;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            display: inline-block;</span><br><span class="line">            height: 50%;</span><br><span class="line">            width: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#content</span> <span class="selector-class">.icon</span> &#123;</span></span><br><span class="line">            vertical-align: middle; </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">src</span>=<span class="string">"img/img.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>已放置于<a href="https://github.com/hackycy/CSSStudyDemo" target="_blank" rel="noopener">github</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://segmentfault.com/a/1190000009545742" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009545742</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域介绍以及跨域的方式</title>
    <url>/2019/03/27/%E8%B7%A8%E5%9F%9F%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E8%B7%A8%E5%9F%9F%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前端在与后端进行数据交互时经常会碰到跨域请求，这里在此探讨一下。</p>
<a id="more"></a>
<h1 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h1><h2 id="什么是同源策略及其限制内容"><a href="#什么是同源策略及其限制内容" class="headerlink" title="什么是同源策略及其限制内容"></a>什么是同源策略及其限制内容</h2><p>同源策略是一种约定，它是浏览器最核心也是最基本的安全功能，如果少了同源策略，浏览器很容易收到XSS，CSFR等攻击。所谓同源指的是<code>协议+域名+端口</code>三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p>
<p><img src="protocozc.jpg" alt></p>
<p><strong>同源策略的限制内容有：</strong></p>
<ul>
<li>Cookie、LocalStorage、IndexedDB等存储性内容</li>
<li>DOM节点</li>
<li>AJAX请求发送后，结果被浏览器拦截了</li>
</ul>
<p>但是有三个标签是允许跨域加载资源</p>
<ul>
<li><code>&lt;img src=&quot;...&quot;&gt;</code></li>
<li><code>&lt;link href=&quot;...&quot;&gt;</code></li>
<li><code>&lt;script src=&quot;...&quot;&gt;</code></li>
</ul>
<h2 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h2><p>当<code>协议</code>、<code>子域名</code>、<code>主域名</code>、<code>端口号</code>中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作<code>跨域</code>，常见的跨域场景如下图所示：</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>说明</th>
<th>是否允许通信</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> <br> <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td>
<td>同一个域名下</td>
<td>允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/lab/a.js" target="_blank" rel="noopener">http://www.a.com/lab/a.js</a> <br> <a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td>
<td>同一域名下不同文件夹</td>
<td>允许</td>
</tr>
<tr>
<td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a> <br> <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td>
<td>同一域名，不同端口</td>
<td>不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> <br> <a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td>
<td>同一域名，不同协议</td>
<td>不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> <br> <a href="http://70.32.92.74/b.js" target="_blank" rel="noopener">http://70.32.92.74/b.js</a></td>
<td>域名和域名对应ip</td>
<td>不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> <br> <a href="http://script.a.com/b.js" target="_blank" rel="noopener">http://script.a.com/b.js</a></td>
<td>主域相同，子域不同</td>
<td>不允许</td>
</tr>
<tr>
<td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> <br> <a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a></td>
<td>同一域名，不同二级域名</td>
<td>不允许，cookie这种情况下也不允许</td>
</tr>
<tr>
<td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.js</a> <br> <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td>
<td>不同域名</td>
<td>不允许</td>
</tr>
</tbody>
</table>
<p><strong>特别说明</strong></p>
<ul>
<li>如果时协议和端口造成的跨域问题，前端时无能为力的</li>
<li>在跨域问题上，仅仅是通过“URL的首部“来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议、域名和端口必须匹配“。</li>
</ul>
<blockquote>
<p>请求跨域，那么请求有没有发出去？<br><strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。</strong>，可是通过表单的方式可以发起跨域请求，为什么<code>AJAX</code>就不可以，归根结底，跨域是为了阻止用户读取到另一个域名下的内容，<code>AJAX</code>可以获取响应，浏览器认为这并不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。这同时也说明了跨域并不能完全阻止<code>CSRF</code>，因为请求毕竟是发出去了。</p>
</blockquote>
<h1 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h1><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>JSONP原理是利用<code>&lt;script&gt;</code>标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的JSON数据。JSONP请求一定需要对方的服务器做支持才可以。</p>
<h3 id="JSONP与AJAX对比"><a href="#JSONP与AJAX对比" class="headerlink" title="JSONP与AJAX对比"></a>JSONP与AJAX对比</h3><p>JSONP与AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但是AJAX属于同源策略，JSONP属于非同源策略（跨域请求）</p>
<h3 id="JSONP优缺点"><a href="#JSONP优缺点" class="headerlink" title="JSONP优缺点"></a>JSONP优缺点</h3><p>JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。<br>缺点是仅支持get方法具有局限性，不安全可能会XSS攻击。</p>
<h3 id="JSONP的实现流程"><a href="#JSONP的实现流程" class="headerlink" title="JSONP的实现流程"></a>JSONP的实现流程</h3><ul>
<li>声明一个回调函数，其函数名（如show）当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据（服务器返回的data）。</li>
<li>创建一个<code>&lt;script&gt;</code>标签，把那个跨域的API数据接口地址，赋值给script的src，还要在这个地址中向服务器传递该参数名（可以通过问好传参：`?callback=show）。</li>
<li>服务器接受到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串，例如：传递进去的函数名是show，它准备好的数据是show(‘XXX’)。</li>
<li>最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数<code>show</code>，对返回的数据进行操作。</li>
</ul>
<p>在开发中可能会遇到多个JSONP请求的回调函数名是相同的，这时候就需要自己封装一个JSONP函数。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123; url, params, callback &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="built_in">window</span>[callback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123; ...params, callback &#125; <span class="comment">// wd=b&amp;callback=show</span></span><br><span class="line">    <span class="keyword">let</span> arrs = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      arrs.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;arrs.join(<span class="string">'&amp;'</span>)&#125;</span>`</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(&#123;</span><br><span class="line">  url: <span class="string">'http://127.0.01:8000/say'</span>,</span><br><span class="line">  params: &#123; <span class="attr">wd</span>: <span class="string">'Iloveyou'</span> &#125;,</span><br><span class="line">  callback: <span class="string">'show'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>上面这段代码相当于向<code>http://127.0.0.1:8000/say?wd=Iloveyou&amp;callback=show</code>这个地址请求数据，然后后台返回show(‘I love you’)，最后会允许show()这个函数，打印出’我不爱你’</p>
<p>后端nodejs<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line">app.get(<span class="string">'/say'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; wd, callback &#125; = req.query</span><br><span class="line">  <span class="built_in">console</span>.log(wd) <span class="comment">// Iloveyou</span></span><br><span class="line">  <span class="built_in">console</span>.log(callback) <span class="comment">// show</span></span><br><span class="line">  res.end(<span class="string">`<span class="subst">$&#123;callback&#125;</span>('我不爱你')`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">8000</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="JQuery的jsonp形式"><a href="#JQuery的jsonp形式" class="headerlink" title="JQuery的jsonp形式"></a>JQuery的jsonp形式</h3><p>JSONP都是<code>GET</code>和异步请求，不存在其他的请求方式和同步请求，且JQuery默认就会给JSONP的请求清除缓存。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"http://crossdomain.com/jsonServerResponse"</span>,</span><br><span class="line">dataType:<span class="string">"jsonp"</span>,</span><br><span class="line">type:<span class="string">"get"</span>,<span class="comment">//可以省略</span></span><br><span class="line">jsonpCallback:<span class="string">"show"</span>,<span class="comment">//-&gt;自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略</span></span><br><span class="line">jsonp:<span class="string">"callback"</span>,<span class="comment">//-&gt;把传递函数名的那个形参callback，可省略</span></span><br><span class="line">success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p><strong>CORS需要浏览器和后端同时支持。IE8 和 9 需要通过XDomainRequest来实现。</strong></p>
<p>浏览器会自动CORS通信，实现CORS通信的关键是后端。只要后端实现了CORS，就实现了跨域。</p>
<p>服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p>
<p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求。</p>
<h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>只要同时满足一下两大条件，就属于简单请求<br><strong>条件1：使用下列方式之一：</strong></p>
<ul>
<li>GET</li>
<li>HEAD</li>
<li>POST</li>
</ul>
<p><strong>条件2：Content-Type的值仅限于下列三者之一：</strong></p>
<ul>
<li>text/plain</li>
<li>multipart/form-data</li>
<li>application/x-www-form-urlencoded</li>
</ul>
<p>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</p>
<h3 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h3><p>不符合以上条件的请求就肯定是复杂请求了。<br>复杂请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。</p>
<p>我们用PUT向后台请求时，属于复杂请求，后台需做如下配置：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line"><span class="comment">// 预检的存活时间</span></span><br><span class="line">res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line"><span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">  res.end() </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义后台返回的内容</span></span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>接下来我们看下一个完整复杂请求的例子，并且介绍下CORS请求相关的字段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">'name=xiamen'</span> <span class="comment">// cookie不能跨域</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span> <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, <span class="string">'http://localhost:4000/getData'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'name'</span>, <span class="string">'xiamen'</span>)</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(xhr.response)</span><br><span class="line">      <span class="comment">//得到响应头，后台需设置Access-Control-Expose-Headers</span></span><br><span class="line">      <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">'name'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//server1.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//server2.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="keyword">let</span> whitList = [<span class="string">'http://localhost:3000'</span>] <span class="comment">//设置白名单</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin</span><br><span class="line">  <span class="keyword">if</span> (whitList.includes(origin)) &#123;</span><br><span class="line">    <span class="comment">// 设置哪个源可以访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, origin)</span><br><span class="line">    <span class="comment">// 允许携带哪个头访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="comment">// 允许哪个方法访问我</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT'</span>)</span><br><span class="line">    <span class="comment">// 允许携带cookie</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 预检的存活时间</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="comment">// 允许返回的头</span></span><br><span class="line">    res.setHeader(<span class="string">'Access-Control-Expose-Headers'</span>, <span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">      res.end() <span class="comment">// OPTIONS请求不做任何处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.put(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.setHeader(<span class="string">'name'</span>, <span class="string">'jw'</span>) <span class="comment">//返回一个响应头，后台需设置</span></span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">'/getData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers)</span><br><span class="line">  res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(express.static(__dirname))</span><br><span class="line">app.listen(<span class="number">4000</span>)</span><br></pre></td></tr></table></figure>
<p>上述代码由<a href="http://localhost:3000/index.html向http://localhost:4000/跨域请求，正如我们上面所说的，后端是实现" target="_blank" rel="noopener">http://localhost:3000/index.html向http://localhost:4000/跨域请求，正如我们上面所说的，后端是实现</a> CORS 通信的关键。</p>
<h2 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h2><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p>
<ul>
<li>页面和其打开的新窗口的数据传递</li>
<li>多窗口之间消息传递</li>
<li>页面与嵌套的iframe消息传递</li>
<li>上面三个场景的跨域数据传递</li>
</ul>
<p>postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</p>
<blockquote>
<p>otherWindow.postMessage(message, targetOrigin, [transfer]);</p>
</blockquote>
<ul>
<li>message: 将要发送到其他 window的数据。</li>
<li>targetOrigin:通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。</li>
<li>transfer(可选)：是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</li>
</ul>
<p>接下来我们看个例子： <code>http://localhost:3000/a.html</code>页面向<code>http://localhost:4000/b.html</code>传递“我爱你”,然后后者传回”我不爱你”。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.html</span></span><br><span class="line">  &lt;iframe src=<span class="string">"http://localhost:4000/b.html"</span> frameborder=<span class="string">"0"</span> id=<span class="string">"frame"</span> onload=<span class="string">"load()"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span> <span class="comment">//等它加载完触发一个事件</span></span><br><span class="line">  <span class="comment">//内嵌在http://localhost:3000/a.html</span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> frame = <span class="built_in">document</span>.getElementById(<span class="string">'frame'</span>)</span><br><span class="line">        frame.contentWindow.postMessage(<span class="string">'我爱你'</span>, <span class="string">'http://localhost:4000'</span>) <span class="comment">//发送数据</span></span><br><span class="line">        <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="comment">//接受返回数据</span></span><br><span class="line">          <span class="built_in">console</span>.log(e.data) <span class="comment">//我不爱你</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b.html</span></span><br><span class="line">  <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data) <span class="comment">//我爱你</span></span><br><span class="line">    e.source.postMessage(<span class="string">'我不爱你'</span>, e.origin)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><p>Websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket和HTTP都是应用层协议，都基于 TCP 协议。但是 <strong>WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据</strong>。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p>
<p>原生WebSocket API使用起来不太方便，我们使用<code>Socket.io</code>，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p>
<p>我们先来看个例子：本地文件<code>socket.html</code>向<code>localhost:3000</code>发生数据和接受数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// socket.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>);</span></span><br><span class="line"><span class="javascript">    socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      socket.send(<span class="string">'我爱你'</span>);<span class="comment">//向服务器发送数据</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(e.data);<span class="comment">//接收服务器返回的数据</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);<span class="comment">//记得安装ws</span></span><br><span class="line"><span class="keyword">let</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>:<span class="number">3000</span>&#125;);</span><br><span class="line">wss.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">  ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    ws.send(<span class="string">'我不爱你'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Node中间件代理-两次跨域"><a href="#Node中间件代理-两次跨域" class="headerlink" title="Node中间件代理(两次跨域)"></a>Node中间件代理(两次跨域)</h2><p>实现原理：<strong>同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略</strong>。<br>代理服务器，需要做以下几个步骤：</p>
<ul>
<li>接受客户端请求 。</li>
<li>将<code>请求</code>转发给服务器。</li>
<li>拿到服务器<code>响应</code>数据。</li>
<li>将<code>响应</code>转发给客户端。</li>
</ul>
<p><img src="nodeproxy.jpg" alt></p>
<p>我们先来看个例子：本地文件index.html文件，通过代理服务器<code>http://localhost:3000</code>向目标服务器<code>http://localhost:4000</code>请求数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// index.html(http://127.0.0.1:5500)</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">'http://localhost:3000'</span>,</span></span><br><span class="line"><span class="javascript">        type: <span class="string">'post'</span>,</span></span><br><span class="line"><span class="javascript">        data: &#123; <span class="attr">name</span>: <span class="string">'xiamen'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;,</span></span><br><span class="line"><span class="javascript">        contentType: <span class="string">'application/json;charset=utf-8'</span>,</span></span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(result) <span class="comment">// &#123;"title":"fontend","password":"123456"&#125;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        error: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(msg)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">     <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server1.js 代理服务器(http://localhost:3000)</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">// 第一步：接受客户端请求</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段</span></span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'*'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'Content-Type'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 第二步：将请求转发给服务器</span></span><br><span class="line">  <span class="keyword">const</span> proxyRequest = http</span><br><span class="line">    .request(</span><br><span class="line">      &#123;</span><br><span class="line">        host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        port: <span class="number">4000</span>,</span><br><span class="line">        url: <span class="string">'/'</span>,</span><br><span class="line">        method: request.method,</span><br><span class="line">        headers: request.headers</span><br><span class="line">      &#125;,</span><br><span class="line">      serverResponse =&gt; &#123;</span><br><span class="line">        <span class="comment">// 第三步：收到服务器的响应</span></span><br><span class="line">        <span class="keyword">var</span> body = <span class="string">''</span></span><br><span class="line">        serverResponse.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">          body += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        serverResponse.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'The data is '</span> + body)</span><br><span class="line">          <span class="comment">// 第四步：将响应结果转发给浏览器</span></span><br><span class="line">          response.end(body)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    .end()</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The proxyServer is running at http://localhost:3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server2.js(http://localhost:4000)</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">title</span>: <span class="string">'fontend'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    response.end(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">4000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The server is running at http://localhost:4000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在index.html文件打印出<code>{&quot;title&quot;:&quot;fontend&quot;,&quot;password&quot;:&quot;123456&quot;}</code></p>
<h2 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h2><p>实现原理类似于Node中间件代理，需要你搭建一个中转nginx服务器，用于转发请求。</p>
<p>使用nginx反向代理实现跨域，是最简单的跨域方式。只需要修改nginx的配置即可解决跨域问题，支持所有浏览器，支持session，不需要修改任何代码，并且不会影响服务器性能。</p>
<p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p>
<p>先下载nginx，然后将nginx目录下的nginx.conf修改如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// proxy服务器</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.domain1.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://www.domain2.com:8080;  #反向代理</span><br><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*</span><br><span class="line">        add_header Access-Control-Allow-Credentials true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后通过命令行<code>nginx -s reload</code>启动nginx</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 访问nginx中的代理服务器</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.domain1.com:81/?user=admin'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(); js</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line">    <span class="comment">// 向前台写cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="comment">// HttpOnly:脚本无法读取</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="window-name-iframe"><a href="#window-name-iframe" class="headerlink" title="window.name + iframe"></a>window.name + iframe</h2><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p>
<p>其中a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// a.html(http://localhost:3000/b.html)</span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">id</span>=<span class="string">"iframe"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> first = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      if(first)&#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">        iframe.src = <span class="string">'http://localhost:3000/b.html'</span>;</span></span><br><span class="line"><span class="javascript">        first = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 第2次onload(同域b.html页)成功后，读取同域window.name中数据</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(iframe.contentWindow.name);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>b.html为中间代理页，与a.html同域，内容为空。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// c.html(http://localhost:4000/c.html)</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.name = <span class="string">'我不爱你'</span>  </span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p>
<h2 id="location-hash-iframe"><a href="#location-hash-iframe" class="headerlink" title="location.hash + iframe"></a>location.hash + iframe</h2><p>实现原理： a.html欲与c.html跨域相互通信，通过中间页b.html来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p>
<p>具体实现步骤：一开始a.html给c.html传一个hash值，然后c.html收到hash值后，再把hash值传递给b.html，最后b.html将结果放到a.html的hash值中。<br>同样的，a.html和b.html是同域的，都是<code>http://localhost:3000</code>;而c.html是<code>http://localhost:4000</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// a.html</span><br><span class="line"> <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:4000/c.html#iloveyou"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//检测hash的变化</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">console</span>.log(location.hash);</span></span><br><span class="line">   &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// b.html</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">window</span>.parent.parent.location.hash = location.hash </span></span><br><span class="line"><span class="javascript">   <span class="comment">//b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面</span></span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c.html</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hash);</span><br><span class="line"> <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"> iframe.src = <span class="string">'http://localhost:3000/b.html#idontloveyou'</span>;</span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure>
<h2 id="document-domain-iframe"><a href="#document-domain-iframe" class="headerlink" title="document.domain + iframe"></a>document.domain + iframe</h2><p><strong>该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。</strong></p>
<p>只需要给页面添加<code>document.domain =&#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域。</p>
<p>实现原理：两个页面都通过js强制设置<code>document.domain</code>为基础主域，就实现了同域。</p>
<p>我们看个例子：页面<code>a.zf1.cn:3000/a.html</code>获取页面<code>b.zf1.cn:3000/b.html</code>中a的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// a.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> helloa</span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://b.zf1.cn:3000/b.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">id</span>=<span class="string">"frame"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(frame.contentWindow.a);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/ b.html</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   hellob</span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.domain = <span class="string">'zf1.cn'</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> a = <span class="number">100</span>;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>CORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案</li>
<li>JSONP只支持GET请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li>
<li>不管是Node中间件代理还是nginx反向代理，主要是通过同源策略对服务器不加限制。</li>
<li>日常工作中，用得比较多的跨域方案是cors和nginx反向代理</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage</a></p>
<p><a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011145364</a></p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS中的Web开发</title>
    <url>/2019/03/25/IOS%E4%B8%AD%E7%9A%84Web%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>移动开发领域近年来已经逐渐告别了野蛮生长的时期，进入了相对成熟的时代。而一直以来 Native 和 Web 的争论从未停止，通过开发者孜孜不倦的努力，Web 的效率和 Native 的体验也一直在寻求着平衡。本文聚焦 iOS 开发和 Web 开发的交叉点，希望能通过简要的介绍，帮助开发者一窥 Hybrid 和大前端的构想。</p>
</blockquote>
<a id="more"></a>
<p><img src="intro.jpg" alt></p>
<h1 id="IOS中web容器与加载"><a href="#IOS中web容器与加载" class="headerlink" title="IOS中web容器与加载"></a>IOS中web容器与加载</h1><h2 id="1、IOS中的Web容器"><a href="#1、IOS中的Web容器" class="headerlink" title="1、IOS中的Web容器"></a>1、IOS中的Web容器</h2><p>目前IOS系统为开发者提供三种方式来展示Web内容</p>
<h3 id="UIWebView"><a href="#UIWebView" class="headerlink" title="UIWebView"></a>UIWebView</h3><p>UIWebView 从 iOS2 开始就作为 App 内展示 Web 内容的容器，但是长久以来一直遭受开发者的诟病；系统级的内存泄露、极高内存峰值、较差的稳定性、Touch Delay 以及 Javascript 的运行性能及通信限制等等。在 iOS12 以后已经标记为 Deprecated 不再维护。</p>
<h3 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h3><p>在 iOS 8 中，Apple 引入了新一代的 WebKit framework，同时提供了 WKWebView 用来替代传统的 UIWebView。它更加的稳定、拥有 60fps 滚动刷新率、丰富的手势、KVO、高效的 Web 和 Native 通信，默认进度条等等功能，而最重要的，是使用了和 safari 相同的 Nitro 引擎极大提升了 Javascript 的运行速度。WKWebView 独立的进程管理，也降低了内存占用及 Crash 对主 App 的影响。</p>
<h3 id="SFSafariViewController"><a href="#SFSafariViewController" class="headerlink" title="SFSafariViewController"></a>SFSafariViewController</h3><p>在 iOS 9 中，Apple 引入了 SFSafariViewController。其特点就是在 App 内可以打开一个高度标准化的、和 Safari 一样界面和特性的页面。同时 SFSafariViewController 支持和 Safari 共享 Cookie 和表单数据等等。</p>
<h3 id="Web容器选型"><a href="#Web容器选型" class="headerlink" title="Web容器选型"></a>Web容器选型</h3><p>对于 SFSafariViewController：由于其标准化程度之高，使之界面和交互逻辑无法和 App 统一，基于 App 的整体体验的考虑，一般都使用在相对独立的功能和模块中，最常见的就是在 App 内打开 App Store 或者广告、游戏推广的页面。</p>
<p>对于 UIWebView/WKWebView：如果说之前由于 NSURLProtocol 的问题，好多 App 都在继续使用 UIWebView，那么随着 App 放弃维护 UIWebView（iOS12），全部的 App 应该会陆续的切换到 WKWebView 中来。当然，最初 WKWebView 也为开发者们带来了一些难题，但是随着系统的升级与业务逻辑的适配也逐步的修复，后文会列举几个最为关注的技术点。</p>
<p>UIWebView/WKWebView 对主 App 内存的影响：<br><img src="memory.jpg" alt></p>
<h2 id="2、WebKit-框架与使用"><a href="#2、WebKit-框架与使用" class="headerlink" title="2、WebKit 框架与使用"></a>2、WebKit 框架与使用</h2><h3 id="WebKit-framework"><a href="#WebKit-framework" class="headerlink" title="WebKit.framework"></a>WebKit.framework</h3><p>WebKit 是一个开源的 Web 浏览器引擎。每当谈到 WebKit，开发者常常迷惑于它和 WebKit2、Safari、iOS 中的 framework、以及 Chromium 等浏览器的关系。</p>
<p>广义的 WebKit 其实就是指 WebCore，它主要包含了 HTML 和 CSS 的解析、布局和定位这类渲染 HTML 的功能逻辑。而狭义的 WebKit 就是在 WebCore 的基础上，不同平台封装 Javascript 引擎、网络层、GPU 相关的技术（WebGL、视频）、绘制渲染技术以及各个平台对应的接口，形成我们可以用的 WebView 或浏览器，也就是所谓的 WebKit Ports。</p>
<p><img src="webkit.jpg" alt></p>
<p>比如在 Safari 中 JS 的引擎使用 JavascriptCore，而 Chromium 中使用 V8；渲染方面 Safari 使用 CoreGraphics，而 Chromium 中使用 Skia；网络方面 Safari 使用 CFNetwork，而 Chromium 中使用 Chromium stack 等等。而 WebKit2 是相对于狭义上的 WebKit 架构而言，主要变化是在 API 层支持多进程，分离了 UI 和 Web 接口的进程，使之通过 IPC 来进行通讯。</p>
<p>对于 iOS 中的 WebKit.framework 就是在 WebCore、底层桥接、JSCore 引擎等核心模块的基础上，针对 iOS 平台的项目封装。它基于新的 WKWebView，提供了一系列浏览特性的设置，以及简单方便的加载回调。而具体类及使用，开发者可以查阅官方文档:</p>
<blockquote>
<p><a href="https://developer.apple.com/documentation/webkit" target="_blank" rel="noopener">https://developer.apple.com/documentation/webkit</a></p>
</blockquote>
<p><img src="webkit2.jpg" alt></p>
<h3 id="Web-容器使用流程与关键节点"><a href="#Web-容器使用流程与关键节点" class="headerlink" title="Web 容器使用流程与关键节点"></a>Web 容器使用流程与关键节点</h3><p>对于大部分日常使用来说，开发者需要关注的就是 WKWebView 的创建、配置、加载、以及系统回调的接收。</p>
<p><img src="webrongqi.jpg" alt></p>
<p>对于 Web 开发者，业务逻辑一般通过基于 Web 页面中 Dom 渲染的关键节点来处理。而对于 iOS 开发者，WKWebView 提供的的注册、加载和回调时机，没有明确的与 Web 加载的关键节点相关联。准确的理解和处理两个维度的加载顺序，选择合理的业务逻辑处理时机，才可以实现准确而高效的应用。</p>
<p><img src="webrongqi2.jpg" alt></p>
<h3 id="WKWebView-常见问题"><a href="#WKWebView-常见问题" class="headerlink" title="WKWebView 常见问题"></a>WKWebView 常见问题</h3><p>使用 WKWebView 带来的另外一个好处，就是我们可以通过源码理解部分加载逻辑，为 Crash 提供一些思路，或者使用一些私有方法处理复杂业务逻辑。</p>
<p><strong>NSURLProtocol</strong></p>
<p>WKWebView 最为显著的改变，就是不支持 NSURLProtocol。为了兼容旧的业务逻辑，一部分 App 通过 WKBrowsingContextController 中的非公开方法实现了 NSURLProtocol。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WKBrowsingContextController</span></span><br><span class="line"> + (<span class="keyword">void</span>)registerSchemeForCustomProtocol:(<span class="built_in">NSString</span> *)scheme <span class="built_in">WK_API_DEPRECATED_WITH_REPLACEMENT</span>(<span class="string">"WKURLSchemeHandler"</span>, macos(<span class="number">10.10</span>, <span class="built_in">WK_MAC_TBA</span>), ios(<span class="number">8.0</span>, <span class="built_in">WK_IOS_TBA</span>));</span><br></pre></td></tr></table></figure>
<p>在 iOS 11 中，系统增加了 setURLSchemeHandler 函数用来拦截自定义的 Scheme。但是不同于 UIWebView，新的函数只能拦截自定义的 Scheme(SchemeRegistry.cpp)，对使用最多的 HTTP/HTTPS 依然不能有效的拦截。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SchemeRegistry</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> StringVectorFunction functions[] &#123;</span><br><span class="line">     builtinSecureSchemes,                <span class="comment">// about;data...</span></span><br><span class="line">     builtinSchemesWithUniqueOrigins,     <span class="comment">// javascript...</span></span><br><span class="line">     builtinEmptyDocumentSchemes,</span><br><span class="line">     builtinCanDisplayOnlyIfCanRequestSchemes,</span><br><span class="line">     builtinCORSEnabledSchemes,           <span class="comment">//http;https</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<p><strong>白屏</strong></p>
<p>通常 WKWebView 白屏的原因主要分两种，一种是由于 Web 的进程 Crash（多见于内部进程通信）；一种就是 WebView 渲染时的错误（Debug 一切正常只是没有对应的内容）。对于白屏的检测，前者在 iOS9 之后系统提供了对应 Crash 的回调函数，同时业界也有通过判断 URL/Title 是否为空的方式作为辅助；后者业界通过视图树对比，判断 SubView 是否包含 WKCompsitingView，以及通过随机点截图等方式作为白屏判断的依据。</p>
<p>其他 WKWebView 的系统级问题如 Cookie、POST 参数、异步 Javascript 等等一系列的问题，可以通过业务逻辑的调整重新适配。</p>
<p>由于 WebKit 源码等开放性，我们也可以利用私有方法来简化代码逻辑、实现复杂的产品需求。例如在 WKWebViewPrivate 中可以获得各种页面信息、直接取到 UserAgent、 在 WKBackForwardListPrivate 中可以清理掉全部的跳转历史、以及在 WKContentViewInteraction 中替换方法实现自定义的 MenuItem 等等。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">WKWebView</span> (<span class="title">WKPrivate</span>)</span></span><br><span class="line"> <span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *_userAgent <span class="built_in">WK_API_AVAILABLE</span>(macosx(<span class="number">10.11</span>), ios(<span class="number">9.0</span>));</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">@interface</span> <span class="title">WKBackForwardList</span> (<span class="title">WKPrivate</span>)</span></span><br><span class="line"> - (<span class="keyword">void</span>)_removeAllItems;</span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">@interface</span> <span class="title">WKContentView</span> (<span class="title">WKInteraction</span>)</span></span><br><span class="line"> - (<span class="built_in">BOOL</span>)canPerformActionForWebView:(SEL)action withSender:(<span class="keyword">id</span>)sender;</span><br></pre></td></tr></table></figure>
<h2 id="3、App-中的应用场景"><a href="#3、App-中的应用场景" class="headerlink" title="3、App 中的应用场景"></a>3、App 中的应用场景</h2><p>WKWebView 系统提供了四个用于加载渲染 Web 的函数。这四个函数从加载的类型上可以分为两类：加载 URL &amp; 加载 HTML\Data。所以基于此也延伸出两种不同的业务场景：加载 URL 的页面直出类和加载数据的模板渲染类，同时两种类型各自也有不同的优化重点及方向。</p>
<h3 id="页面直出类"><a href="#页面直出类" class="headerlink" title="页面直出类"></a>页面直出类</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 根据 URL 直接展示 Web 页面</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">WKNavigation</span> *)loadRequest:(<span class="built_in">NSURLRequest</span> *)request;</span><br></pre></td></tr></table></figure>
<p>通常各类 App 中的 Web 页面加载都是通过加载 URL 的方式，比如嵌入的运营活动页面、广告页面等等。</p>
<h3 id="模板渲染类"><a href="#模板渲染类" class="headerlink" title="模板渲染类"></a>模板渲染类</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据模板 &amp; 数据渲染 Web 页面</span></span><br><span class="line">  - (<span class="keyword">nullable</span> <span class="built_in">WKNavigation</span> *)loadHTMLString:(<span class="built_in">NSString</span> *)string baseURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)baseURL;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>需要使用 WebView 展示，且交互逻辑较多的页面，最常见的就是资讯类 App 的内容展示页。</p>
<h1 id="iOS-中-Web-与-Native-的通信"><a href="#iOS-中-Web-与-Native-的通信" class="headerlink" title="iOS 中 Web 与 Native 的通信"></a>iOS 中 Web 与 Native 的通信</h1><p>单纯的使用 Web 容器加载页面已经不能满足复杂的功能，开发者希望数据可以在 Native 和 Web 之间通信传递来实现复杂的功能，而 Javascript 就是通信的媒介。对于有 WebView 的情况，虽然 WKWebView 提供了系统级的方法，但是大部分 App 仍然使用基于 URLScheme 的 WebViewBridge 用以兼容 UIWebView。而脱离了 WebView 容器，系统提供了 JavaScriptCore 的 framework，它也为之后蓬勃发展的跨平台和热修复技术提供了可能。</p>
<h2 id="1-基于-WebView-的通信"><a href="#1-基于-WebView-的通信" class="headerlink" title="1. 基于 WebView 的通信"></a>1. 基于 WebView 的通信</h2><p>基于 WebView 的通信主要有两个 途径，一个是通过系统或私有方法，获取 WebView 当中的 JSContext，使用系统封装的基于 JSCore 的函数通信。另一类就是通过创建自定义 Scheme 的 iframe Dom，客户端在回调中进行拦截实现。</p>
<h3 id="UIWebView-amp-WKWebView-系统级"><a href="#UIWebView-amp-WKWebView-系统级" class="headerlink" title="UIWebView &amp; WKWebView 系统级"></a>UIWebView &amp; WKWebView 系统级</h3><p>在 UIWebView 时代没有提供系统级的函数进行 Web 与 Native 的交互，绝大部分 App 都是通过 WebViewJavascriptBridge（下节介绍）来进行的通信。但是由于 JavascriptCore 的存在，对于 UIWebView 来说只要有效的获取到内部的 JSContext，也可以达到目的。目前已知有效的几个私有方法获取 Context 的方法如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过系统废弃函数获取 context</span></span><br><span class="line">  - (<span class="keyword">void</span>)webView:(WebView *)webView didCreateJavaScriptContext:(JSContext *)context forFrame:(WebFrame *)frame;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 valueForKeyPath 获取 context</span></span><br><span class="line">  <span class="keyword">self</span>.jsContext = [_webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</span><br></pre></td></tr></table></figure>
<p>在 WKWebView 中提供了系统级的 Web 和 Native 通讯机制，通过 Message Handler 的封装使开发效率有了很大的提升。同时系统封装了 JavaScript 对象和 Objective-C 对象的转换逻辑，也进降低了使用的门槛。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js 端发送消息</span></span><br><span class="line">  window.webkit.messageHandlers.&#123;NAME&#125;.postMessage()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Native 在回调中接收</span></span><br><span class="line">  - (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message;</span><br></pre></td></tr></table></figure>
<h3 id="拦截自定义-Scheme-请求-WebViewJavascriptBridge"><a href="#拦截自定义-Scheme-请求-WebViewJavascriptBridge" class="headerlink" title="拦截自定义 Scheme 请求 - WebViewJavascriptBridge"></a>拦截自定义 Scheme 请求 - WebViewJavascriptBridge</h3><p>由于私有方法的稳定性与审核风险，开发者不愿意使用上文提到的 UIWebView 获取 JSContext 的方式进行通信，所以通常都采用基于 iframe 和自定义 Scheme 的 JavascriptBridge 进行通信。虽然在之后的 WKWebView 提供了系统函数，但是大部分 App 都需要兼容 UIWebView 与 WKWebView，所以目前的使用范围仍然十分广泛。</p>
<p>在 Github 中类似的开源框架有很多，但是无外乎都是 Web 侧根据固定的格式创建包含通信信息的 Request，之后创建隐式 iFrame 节点请求；Native 侧在相应的 WebView 回调中解析 Request 的 Scheme，之后按照格式解析数据并处理。</p>
<p>而对于数据传递和回调处理的问题，在兼容两种 WebView、持续的更新的 WebViewJavascriptBridge 中，iFrame request 没有直接传递数据，而是 Web 和 Native 侧维护共同的参数或回调 Queue，Native 通过 Request 中 Scheme 的解析触发对 Queue 里数据的读取。</p>
<p><img src="jsandnative.jpg" alt></p>
<h2 id="脱离-WebView-的通信-JavaScriptCore"><a href="#脱离-WebView-的通信-JavaScriptCore" class="headerlink" title="脱离 WebView 的通信 JavaScriptCore"></a>脱离 WebView 的通信 JavaScriptCore</h2><h3 id="JavascriptCore"><a href="#JavascriptCore" class="headerlink" title="JavascriptCore"></a>JavascriptCore</h3><p>JavascriptCore 一直作为 WebKit 中内置的 JS 引擎使用，在 iOS7 之后，Apple 对原有的 C/C++ 代码进行了 OC 的封装，成系统级的 framework 供开发者使用。作为一个引擎来讲，JavascriptCore 的词法、语法分析，以及多层次的 JIT 编译技术都是值得深入挖掘和学习的方向，由于篇幅的限制暂且不做深入的讨论。</p>
<p><img src="jscore.jpg" alt></p>
<h3 id="JavascriptCore-framework"><a href="#JavascriptCore-framework" class="headerlink" title="JavascriptCore.framework"></a>JavascriptCore.framework</h3><p>虽然 JavascriptCore.framework 只暴露了较少的头文件和系统函数，但却提供了在 App 中脱离 WebView 执行 Javascript 的环境和能力。</p>
<p>JSVirtualMachine：提供了 JS 执行的底层资源及内存。虽然 Java 与 Javascript 没有一点关系，但是同样作为虚拟机，JSVM 和 JVM 做了一部分类似的事情。每个 JSVirtualMachine 独占线程，拥有独立的空间和管理，但是可以包含多个 JSContext。JSContext：提供了 JS 运行的上下文环境和接口。可以不准确的理解为，就是创建了一个 Javascript 中的 Window 对象。JSValue：提供了 OC 和 JS 间数据类型的封装和转换 Type Conversions。除了基本的数据类型，需要注意 OC 中的 Block 转换为 JS 中的 function，Class 转换为 Constructor 等等。</p>
<p>JSManagedValue：Javascript 使用 GC 机制管理内存，而 OC 采用引用计数的方式管理内存。所以在 JavascriptCore 使用过程中，难免会遇到循环引用以及提前释放的问题。JSManagedValue 解决了在两种环境中的内存管理问题。JSExport：提供了类、属性和实例方法的调用接口。内部实现是在 ProtoType &amp; Constructor 中实现对应的属性和方法。</p>
<p><img src="jscore2.jpg" alt></p>
<h3 id="使用-JavascriptCore-进行通信"><a href="#使用-JavascriptCore-进行通信" class="headerlink" title="使用 JavascriptCore 进行通信"></a>使用 JavascriptCore 进行通信</h3><p>Native - Web: 通过 JavascriptCore，Native 可以直接在 Context 中执行 JS 语句，和 Web 侧进行通信和交互。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">JSValue *value = [<span class="keyword">self</span>.jsContext evaluateScript:<span class="string">@"document.cookie"</span>];</span><br></pre></td></tr></table></figure>
<p>Web - Native: 对于 Web 侧向 Native 的通信，JavascriptCore 提供 两种 方式，注册 Block &amp; Export 协议。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Native</span></span><br><span class="line">  <span class="keyword">self</span>.jsContext[<span class="string">@"addMethod"</span>] = ^ <span class="built_in">NSInteger</span>(<span class="built_in">NSInteger</span> a, <span class="built_in">NSInteger</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//JS</span></span><br><span class="line">  console.log(addMethod(<span class="number">1</span>, <span class="number">2</span>));    <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//Native</span></span><br><span class="line">  <span class="class"><span class="keyword">@protocol</span> <span class="title">testJSExportProtocol</span> &lt;<span class="title">JSExport</span>&gt;</span></span><br><span class="line">  <span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSString</span> *string;</span><br><span class="line">  ...</span><br><span class="line">  <span class="class"><span class="keyword">@interface</span> <span class="title">OCClass</span> : <span class="title">NSObject</span> &lt;<span class="title">testJSExportProtocol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//JS</span></span><br><span class="line">  var OCClass = new OCClass();</span><br><span class="line">  console.log(OCClass.string);</span><br></pre></td></tr></table></figure>
<p>对于 JavascriptCore 粗浅的理解，可以认为使用 Block 方法，内部是将 Block 保存到保存到一个 Web 环境中的全局的 Object 中，例如 window。而使用 JSExport 方法，则是在 Web 环境中 Object 的 prototype 中创建属性、实例方法；在 constructor 对象中创建类方法，从而实现 Web 中的调用。</p>
<h2 id="App-中的应用场景"><a href="#App-中的应用场景" class="headerlink" title="App 中的应用场景"></a>App 中的应用场景</h2><p>对于基于 WebView 的通信，主要用于 App 向 H5 页面中注入的 Javascript Open Api，如提供 Native 的拍照、音视频、定位；以及 App 内的登录、分享等等功能。<br>对于 JavaScriptCore，则催生了动态化、跨平台以及热修复等一系列技术的蓬勃发展。</p>
<h1 id="跨平台与热修复"><a href="#跨平台与热修复" class="headerlink" title="跨平台与热修复"></a>跨平台与热修复</h1><p>近几年来国内外移动端各种方案如雨后春笋般涌现，“Write once, run anywhere”不再是开发者的向往。剥离跨平台技术在 Web 侧 DSL、virtualDom 等方面的优化，以及 Native 侧 Runtime 的应用与封装，对于两端通信的核心，依然是 JavascriptCore。</p>
<p>而不同于国外开发者对跨平台技术的积极探索，国内开发者也对热修复技术产生了极大的热情。同样作为 Native 和 Web 的交叉 - JavascriptCore，依然承担着整个技术结构中的通信任务。</p>
<h2 id="1-基于-Web-的热修复技术"><a href="#1-基于-Web-的热修复技术" class="headerlink" title="1. 基于 Web 的热修复技术"></a>1. 基于 Web 的热修复技术</h2><p>对于国内的 iOS 开发者来说，审核周期、敏感业务、支付分成以及 bug 修复都催生了热修复方向的不断探索。在苹果加强审核之前，几乎所有大型的 App 都把热修复当成了 iOS 开发的基础能力，最近在《移动开发还有救么》中也详细的介绍了相关黑科技的前世今生。在所有 iOS 热修复的方案中，基于 Javascript、同时也是影响最大的就是 JSPatch。</p>
<p>基于上文的分析，对于脱离 WebView 的 Native 和 Web 间的通信，我们只能使用 JavascriptCore。而在 JavascriptCore 中提供了两种方式用于通信，即 Context 注册 Block 的回调，以及 JSExport。对于热修复的场景来说，我们不可能把潜在需要修复的函数都一一使用协议进行注册，更不能对新增方法和删除方法等进行处理，所以在 Native 和 Web 通信这个维度，我们只能采用 Context 注册 Block 的方式。</p>
<p>确定了通信采用 Block 回调的方式后，热修复就面临着如何在 JS 中调用类以及类的方法问题。由于没有使用 JSExport 等方式，JS 是无法找到相应类等属性和方法，在 JSPathc 中，通过简单的字符串替换，将所有方法都替换成通用函数（__c），然后就可以将相关信息传递给 Native，进而使用 runtime 接口调用方法。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 替换全部方法调用</span></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">NSString</span> *_replaceStr = <span class="string">@".__c(\"$1\")("</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用方法</span></span><br><span class="line">  __c: function(methodName) &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> function()&#123;</span><br><span class="line">          ...</span><br><span class="line">          var ret = instance ? _OC_callI(instance, selectorName, args, isSuper):</span><br><span class="line">                                _OC_callC(clsName, selectorName, args)</span><br><span class="line">          <span class="keyword">return</span> _formatOCToJS(ret)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>当然对于 JSPatch 以及其他热修复的项目来说，Web 和 Native 通信只是整个框架中的一个技术点，更多的实现原理和细节由于篇幅的关系暂且不做介绍。</p>
<h2 id="2-基于-Web-的跨平台技术"><a href="#2-基于-Web-的跨平台技术" class="headerlink" title="2. 基于 Web 的跨平台技术"></a>2. 基于 Web 的跨平台技术</h2><p>随着 Google 开源了基于 Dart 语言的 Flutter，跨平台的技术又进入了一个新的发展阶段。对于传统的跨平台技术来讲，各个公司以 JavascriptCore 作为通信桥梁，围绕着 DSL 的解析、方法表的注册、模块注册通信、参数传递的设计以及 OC Runtime 的运用等不同方向，封装成了一个又一个跨平台的项目。</p>
<p><img src="rexiufu.jpg" alt></p>
<p>而在其中，以 Javascript 作为前端 DSL 的跨平台技术方案里，FaceBook 的 react-native 以及阿里 (目前托管给了 Apache) 的 Weex 最为流行。在网络上两者的比较文章有很多，集中在学习成本、框架生态、代码侵入、性能以及包大小等, 各个业务可以根据自己的重点选择合理的技术结构。</p>
<p>而不管是 react-native 还是 Weex,Web 和 Native 的通信桥梁仍然是 JavascriptCore。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//weex 举例</span></span><br><span class="line">JSValue* (^callNativeBlock)(JSValue *, JSValue *, JSValue *) = ^JSValue*(JSValue *instance, JSValue *tasks, JSValue *callback)&#123;</span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">return</span> [JSValue valueWithInt32:(int32_t)callNative(instanceId, tasksArray, callbackId) inContext:[JSContext currentContext]];</span><br><span class="line">&#125;;</span><br><span class="line">_jsContext[<span class="string">@"callNative"</span>] = callNativeBlock;</span><br></pre></td></tr></table></figure>
<h1 id="iOS-中-Web-相关优化策略"><a href="#iOS-中-Web-相关优化策略" class="headerlink" title="iOS 中 Web 相关优化策略"></a>iOS 中 Web 相关优化策略</h1><p>随着 Web 技术的不断升级以及 App 动态性业务需求的增多，越来越多的 Web 页面加入到了 iOS App 当中。与之对应的，首屏展示速度——这个对于移动客户端 Web 的最重要体验优化，也成为了移动客户端中 Web 业务最重要的优化方向。</p>
<p>这一章节更为详细的设计与实现，请移步 iOS 新闻类 App 内容页技术探索 (<a href="https://dequan1331.github.io/hybrid-page-kit.html)。" target="_blank" rel="noopener">https://dequan1331.github.io/hybrid-page-kit.html)。</a></p>
<h2 id="1-不同业务场景的优化策略"><a href="#1-不同业务场景的优化策略" class="headerlink" title="1. 不同业务场景的优化策略"></a>1. 不同业务场景的优化策略</h2><p>对于单纯的 Web 页面来说，业界早已有了合理的优化方向以及成熟的优化方案，而对于移动客户端中的 Web 来说，开发者在进行单一的 Web 优化同时，还可以通过优化 Web 容器以及 Web 页面中数据加载方式等多个途径做出优化。</p>
<p>所以对于 iOS 开发中的优化来说，就是通过 Native 和 Web 两个维度的优化关键渲染路径，保证 WebView 优先渲染完毕。由此我们梳理了常规 Web 页面整体的加载顺序，从中找出关键渲染路径，继而逐个分析、优化。</p>
<p><img src="youhua.jpg" alt></p>
<h2 id="2-Web-维度的优化"><a href="#2-Web-维度的优化" class="headerlink" title="2. Web 维度的优化"></a>2. Web 维度的优化</h2><h3 id="通用-Web-优化"><a href="#通用-Web-优化" class="headerlink" title="通用 Web 优化"></a>通用 Web 优化</h3><p>对于 Web 的通用优化方案，一般来说在网络层面，可以通过 DNS 和 CDN 技术减少网络延迟、通过各种 HTTP 缓存技术减少网络请求次数、通过资源压缩和合并减少请求内容等。在渲染层面可以通过精简和优化业务代码、按需加载、防止阻塞、调整加载顺序优化等等。对于这个老生常谈的问题，业内已经有十分成熟和完整的总结，例如《Best Practices for Speeding Up Your Web Site》，已经有了很好的整理和总结。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>脱离较为通用的优化，在对代码侵入宽容度较高的场景中，开发者对 Web 优化有着更为激进的做法。例如在 VasSonic 中，除了 Web 容器复用、数据模板分离、预拉取和通用的优化方式外，还通过自定义 VasSonic 标签将 HTML 页面进行划分，分段进行缓存控制，以达到更高的优化效果。</p>
<h2 id="3-Native-维度的优化"><a href="#3-Native-维度的优化" class="headerlink" title="3. Native 维度的优化"></a>3. Native 维度的优化</h2><h3 id="容器复用和预热"><a href="#容器复用和预热" class="headerlink" title="容器复用和预热"></a>容器复用和预热</h3><p>WKWebView 虽然 JIT 大幅优化了 JS 的执行速度，但是单纯的加载渲染 HTML，WKWebView 比 UIWebView 慢了很多。根据渲染的不同阶段分别对耗时进行测试，同时对比 UIWebView，我们发现 WKWebView 在初始化及渲染开始前的耗时较多。</p>
<p><img src="loadingtime.jpg" alt></p>
<p>针对这种情况，业界主流的做法就是复用 &amp; 预热。预热即时在 App 启动时创建一个 WKWebView，使其内部部分逻辑预热已提升加载速度。而复用又分为两种，较为复杂的是处理边界条件已达到真正的复用，还有一种较为 Triky 的办法就是常驻一个空 WKWebView 在内存。</p>
<p>HybridPageKit 提供了易于集成的完整 WKWebView 重用机制实现, 开发者可以无需关注复用细节，无缝的体验更为高效的 WKWebView。</p>
<h3 id="Native-并行资源请求-amp-离线包"><a href="#Native-并行资源请求-amp-离线包" class="headerlink" title="Native 并行资源请求 &amp; 离线包"></a>Native 并行资源请求 &amp; 离线包</h3><p>由于 Web 页面内请求流程不可控以及网络环境的影响，对于 Web 的加载来说，网络请求一直是优化的重点。开发者较为常用的做法是使用 Native 并行代理数据请求，替代 Web 内核的资源加载。在客户端初始化页面的同时，并行开始网络请求数据；当 Web 页面渲染时向 Native 获取其代理请求的数据。</p>
<p>而将并行加载和预加载做到极致的优化，就是离线包的使用。将常用的需要下载资源（HTML 模板、JS 文件、CSS 文件、占位图片）打包，App 选择合适的时机全部下载到本地，当 Web 页面渲染时向 Native 获取其数据。</p>
<p>通过离线包的使用，Web 页面可以并行（提前）加载页面资源，同时摆脱了网络的影响，提高了页面的加载速度和成功率。当然离线包作为资源动态更新的一个方式，合理的下载时机、增量更新、加密和校验等方面都是需要进行设计和思考的方向，后文会简单介绍。</p>
<h3 id="复杂-Dom-节点-Native-化实现"><a href="#复杂-Dom-节点-Native-化实现" class="headerlink" title="复杂 Dom 节点 Native 化实现"></a>复杂 Dom 节点 Native 化实现</h3><p>当并行请求资源，客户端代理数据请求的技术方案逐渐成熟时，由于 WKWebView 的限制，开发者不得不面对业务调整和适配。其中保留原有代理逻辑、采用 LocalServer 的方式最为普遍。但是由于 WKWebView 的进程间通信、LocalServer Socket 建立与连接、资源的重复编解码都影响了代理请求的效率。</p>
<p><img src="dom.jpg" alt></p>
<p>所以对于一些资讯类 App，通常采用 Dom 节点占位、Native 渲染实现的方式进行优化，如图片、地图、音视频等模块。这样不但能减少通信和请求的建立、提供更加友好的交互、也能并行的进行 View 的渲染和处理，同时减少 Web 页面的业务逻辑。</p>
<p>HybridPageKit 中就提供封装好的功能框架，开发者可以简单的替换 Dom 节点为 NativeView。</p>
<h3 id="按优先级划分业务逻辑"><a href="#按优先级划分业务逻辑" class="headerlink" title="按优先级划分业务逻辑"></a>按优先级划分业务逻辑</h3><p>从 App 的维度上看，一个 Web 页面从入口点击到渲染完成，或多或少都会有 Native 的业务逻辑并行执行。所以这个角度的优化关键渲染路径，就是优先保证 WebView 以及其他在首屏直接展示的 Native 模块优先渲染。所以承载 Web 页面的 Native 容器，可以根据业务逻辑的优先级，在保证 WebView 模块展示之后，选择合适的时机进行数据加载、视图渲染等。这样就能保证在 Native 的维度上，关键路径优先渲染。</p>
<p><img src="youxianji.jpg" alt></p>
<h2 id="4-优化整体流程"><a href="#4-优化整体流程" class="headerlink" title="4. 优化整体流程"></a>4. 优化整体流程</h2><p>所以整体上对于客户端来说，我们可以从 Native 维度（容器和数据加载）以及 Web 维度两个方向提升加载速度，按照页面的加载流程，整体的优化方向如下：</p>
<p><img src="liucheng.jpg" alt></p>
<h1 id="iOS-中-Web-相关延伸业务"><a href="#iOS-中-Web-相关延伸业务" class="headerlink" title="iOS 中 Web 相关延伸业务"></a>iOS 中 Web 相关延伸业务</h1><h2 id="1-模板引擎"><a href="#1-模板引擎" class="headerlink" title="1. 模板引擎"></a>1. 模板引擎</h2><p>为了达到并行加载数据以及并行处理复杂的展示逻辑，对于非直出类型的 Web 页面，绝大部分 App 都采用数据和模板分离下发的方式。而这样的技术架构，导致在客户端内需要增加替换对应 DSL 的模板标签，形成最终的 HTML 的业务逻辑。简单的字符串替换逻辑不但低效，还无法做到合理的组件化管理，以及组件合理的与 Native 交互，而模板引擎相关技术会使这种逻辑和表现分离的业务场景实现的更加简洁和优雅。</p>
<p>基于模板引擎与数据分离，客户端可以根据数据并行创建子业务模块，同时在子业务模块中处理和 Native 交互的部分如图片裁剪适配、点击跳转等等，生成 HTML 代码片段。之后基于模板进行替换生成完整的页面。这样不但减少了大量的字符串替换逻辑，同时业务也得到了合理拆分。</p>
<p><img src="template.jpg" alt></p>
<p>模板引擎的本质就是字符串的解析和替换拼接。在 Web 端不同的使用场景有很多不同语法的引擎类型，而在客户端较为流行的，有使用较为复杂的 MGTemplateEngine，它类似于 Smarty，支持部分模板逻辑。也有基于 mustache，Logic-less 的 GRMustache 可供选择。</p>
<h2 id="2-资源动态更新和管理"><a href="#2-资源动态更新和管理" class="headerlink" title="2. 资源动态更新和管理"></a>2. 资源动态更新和管理</h2><p>无论是离线包、本地注入的 JS、CSS 文件、以及本地化 Web 中的默认图片，目的都是通过提前下载，替换网络请求为本地读取来优化 Web 的加载体验和成功率。而对于这些资源的管理，开发者需要从下载与更新，以及 Web 中的访问这两个方面进行设计优化。</p>
<h3 id="下载与更新"><a href="#下载与更新" class="headerlink" title="下载与更新"></a>下载与更新</h3><p>下载与重试：对于资源或是离线包的下载，选择合适的时机、失败重载时机、失败重载次数都要根据业务灵活调整。通常为了增加成功率和及时更新，在冷启动、前后台切换、关键的操作节点，或者采用定时轮循的方式，都需要进行资源版本号或 MD5 的判断，用以触发下载逻辑。当然对于服务端来说，合理的灰度控制，也是保证业务稳定的重要途径。</p>
<p>签名校验：对于动态下载的资源，我们都需要将原文件的签名进行校验，防止在传输过程中被篡改。对于单项加密的办法就是双端对数据进行 MD5 的加密，之后客户端校验 MD5 是否符合预期；而双向加密可以采用 DES 等加密算法，客户端使用公钥对资源验证使用。</p>
<p>增量更新：为了减少资源和离线包的重复下载，业内大部分使用离线包的场景都采用了增量更新的方式。即客户端在触发请求资源时，带上本地已存在资源的标示，服务端根据标示和最新资源做对比，之后只提供新增或修改的 Patch 供客户端下载。</p>
<h3 id="基于-LocalServer-的访问"><a href="#基于-LocalServer-的访问" class="headerlink" title="基于 LocalServer 的访问"></a>基于 LocalServer 的访问</h3><p>在完成资源的下载与更新后，如何将 Web 请求重定向到本地，大部分 App 都依赖于 NSURLProtocol。上文提到在 WKWebView 中虽然可以使用私有函数实现（或者 iOS11+ 提供系统函数），但是仍然有许多问题。</p>
<p>目前业界一部分 App，都采用了集成 LocalServer 的方式，接管部分 Web 请求，从而达到访问本地资源的目的。同时集成了 LocalServer，通过将本地资源封装成 Response，利用 HTTP 的缓存技术，进一步的优化了读取的时间和性能，实现层次化的缓存结构。而使用了本地资源的 HTTP 缓存，就需要考虑缓存的控制和过期时间。通常可以通过在 URL 上增加本地文件的修改时间、或本地文件的 MD5 来确保缓存的有效性。</p>
<p><img src="localserver.jpg" alt></p>
<h3 id="GCDWebServer-浅析"><a href="#GCDWebServer-浅析" class="headerlink" title="GCDWebServer 浅析"></a>GCDWebServer 浅析</h3><p>排除 Socket 类型，业界流行的 Objc 版针对 HTTP 开源的 WebServer，不外乎年久失修的 CocoaHTTPServer 以及 GCDWebServer。GCDWebServer 是一个基于 GCD 的轻量级服务器，简单的四个模块 - Server / Connection / Request / Reponse，以及通过维护 LIFO 的 Handler 队列传入业务逻辑生成响应。在排除了基于 RFC 的 Request/Response 协议设计之外，关键的代码和流程如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//GCDWebServer 端口绑定</span></span><br><span class="line">  bind(listeningSocket, address, length)</span><br><span class="line">  listen(listeningSocket, (<span class="keyword">int</span>)maxPendingConnections)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//GCDWebServer 绑定 Socket 端口并接收数据源</span></span><br><span class="line">  dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_READ, listeningSocket, <span class="number">0</span>, dispatch_get_global_queue(_dispatchQueuePriority, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//GCDWebServer 接收数据并创建 Connection</span></span><br><span class="line">  dispatch_source_set_event_handler(source, ^&#123;</span><br><span class="line">      ...</span><br><span class="line">     GCDWebServerConnection* connection = [(GCDWebServerConnection*)[<span class="keyword">self</span>-&gt;_connectionClass alloc] initWithServer:<span class="keyword">self</span> localAddress:localAddress remoteAddress:remoteAddress socket:socket]; </span><br><span class="line"></span><br><span class="line">  <span class="comment">//GCDWebServerConnection 读取数据</span></span><br><span class="line">  dispatch_read(_socket, length, dispatch_get_global_queue(_server.dispatchQueuePriority, <span class="number">0</span>), ^(dispatch_data_t buffer, <span class="keyword">int</span> error) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//GCDWebServerConnection 处理 GCDWebServerMatchBlock 和 GCDWebServerAsyncProcessBlock</span></span><br><span class="line">  <span class="keyword">self</span>-&gt;_request = <span class="keyword">self</span>-&gt;_handler.matchBlock(requestMethod, requestURL, requestHeaders, requestPath, requestQuery);</span><br><span class="line">  ...</span><br><span class="line">  _handler.asyncProcessBlock(request, [completion <span class="keyword">copy</span>]);</span><br></pre></td></tr></table></figure>
<p>在 LocalServer 的使用上，也要注意端口的选择 ports used by Apple，以及前后台切换时 suspendInBackground 的设置和业务处理。</p>
<h2 id="3-Javascript-Open-Api"><a href="#3-Javascript-Open-Api" class="headerlink" title="3.Javascript Open Api"></a>3.Javascript Open Api</h2><p>随着 App 业务的不断发展，单纯的 Web 加载与渲染无法满足复杂的交互逻辑，如拍照、音视频、蓝牙、定位等，同时 App 内也需要统一的登录态，统一的分享逻辑以及支付逻辑等。所以针对第三方的 Web 页面，Native 需要注册相应的 Javascript 接口供 Web 使用。</p>
<p>对于 Api 需要提供的能力、接口设计和文档规范，不同的业务逻辑和团队代码风格会有不同的定义，微信 JS-SDK 说明文档 就是一个很好的例子。而脱离 Javascript Open Api 对外的接口设计和封装，在内部的实现上也有一些通用的关键因素，这里简单列举几个：</p>
<h3 id="注入方式和时机"><a href="#注入方式和时机" class="headerlink" title="注入方式和时机"></a>注入方式和时机</h3><p>对于 Javascript 文件的注入，最简单的就是将 JS 文件打包到项目中，使用 WKWebView 提供的系统函数进行注入。这种方式无需网络加载，可以合理的选择注入时机，但是无法动态的进行修改和调整。而对于这部分业务需求需要经常调整的 App 来说，也可以把文件存储到 CDN，通过模板替换或者和 Web 合作者约定，在 Web 的 HTML 中通过 URL 的方式进行加载，这种的方式虽然动态化程度较高，但是需要合作方的配合，同时对于 JS Api 也不能做到拆分的注入。</p>
<p>针对上面的两种方式的优点不足，一个较为合理的方式是 Javascript 文件采用本地注入的方式，同时建立资源的动态更新系统（上文）。这样一方面支持了动态更新，同时也无需合作方的配合，对于不同的业务场景也可以拆分不同的 Api 进行注入，保证安全。</p>
<h3 id="安全控制"><a href="#安全控制" class="headerlink" title="安全控制"></a>安全控制</h3><p>对于 Javascript Open Api 设计实现的另一个重要方面，就是安全性的控制。由于完整的 Api 需要支持 Native 登录、Cookies 等较为敏感的信息获取，同时也支持一些对 UI 和体验影响较多的功能如页面跳转、分享等，所以 App 需要一套权限分级的逻辑控制 Web 相关的接口调用，保证体验和安全。</p>
<p>常规的做法就是对 Javascript Open Api 建立分级的管理，不同权限的 Web 页面只能调用各自权限内的接口。客户端通过 Domain 进行分级，同时支持动态拉取权限 Domain 白名单，灵活的配置 Web 页面的权限。在此基础上 App 内部也可以通过业务逻辑的划分，在 Native 层面使用不同的容器加载页面，而容器根据业务逻辑的不同，注入不同的 JS 文件进行 Api 权限控制。</p>
<p><img src="safe.jpg" alt></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/dequan1331/HybridPageKit" target="_blank" rel="noopener">https://github.com/dequan1331/HybridPageKit</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Jetpack架构组件介绍</title>
    <url>/2019/03/24/Android-Jetpack%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>Google 为了帮助 Android 开发者更快更好地开发 App，推出了一系列组件，这些组件被打包成了一个整体，称作<code>Android Jetpack</code>，它包含的组件如下图所示：</strong><br><a id="more"></a><br><img src="jetpackintro.jpg" alt></p>
<p>老的 <code>support</code> 包被整合进了 <code>Jetpack</code>，例如上图 <code>Foundation</code> 模块的 AppCompat，整合进去之后，包名做了一下修改，全部以 <code>androidx</code> 开头。Android Studio 提供的迁移工具<code>（Refactor &gt; Migrate to AndroidX）</code>可以将源码中的旧包名替换成新的，但是如果 Maven 依赖的产物还未迁移到 <code>AndroidX</code>的话，还需要配置一个工具—— <code>Jetifier</code>，只需要在 <code>build.gradle</code> 中加上两行配置即可：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android.useAndroidX=<span class="keyword">true</span></span><br><span class="line">android.enableJetifier=<span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Jetfier 会在编译阶段直接修改依赖产物的字节码，简单粗暴。</p>
</blockquote>
<h1 id="架构大图"><a href="#架构大图" class="headerlink" title="架构大图"></a>架构大图</h1><p>Jetpack 不属于 Android Framework，不是 Android 开发的必需品，它只是应用层开发的一种辅助手段，帮我们解决了一些常见问题，比如版本兼容、API 易用性、生命周期管理等。其中 Architecture 部分的组件（Android Architecture Components，以下简称 AAC）组合起来形成了一套完整的架构解决方案，在没有更好的方案被发明出来之前，我们姑且把 AAC 当做 Android 架构领域的最佳实践，它的出现一定程度上避免了很多不必要的轮子。</p>
<p>官方给出的架构指导非常明确地表达出了每个架构组件的位置：<br><img src="jiagou.jpg" alt></p>
<p>这张图背后隐含了三大设计思想：</p>
<ul>
<li>关注点分离<code>（SOC / Separation Of Concerns）</code></li>
<li>数据驱动UI<code>（Reactive）</code></li>
<li>唯一真相源<code>（SSOC / Single Source Of Truth）</code></li>
</ul>
<p>SOC 具体到工程实践中就是分层合理，单层的职责越明确，对上下游的依赖越清晰就意味着它的结构更稳定，也<br>更可测（testable）。一个 App 从全局来看，可以划分为三部分：首先是 <code>UI Controller</code> 层，包含 <code>Activity</code> 和 <code>Fragment</code>；其次是 <code>ViewModel</code> 层，既可以做 <code>MVVM</code> 的 <code>VM</code>、<code>MVP</code> 的 <code>P</code>，也可以做 UI 的数据适配，这一层可以实现数据驱动 UI；最后是 <code>Repository</code> 层，它作为 SSOC，是一个 Facade 模式，对上层屏蔽了数据的来源，可以来自 local，也是来自 remote，数据持久化策略向上透明。</p>
<p>一张架构蓝图，三大设计原则，接下来深入细节，看看组件之间如何配合才能实现这个架构。</p>
<h1 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h1><p>与 React/Vue 或者 iOS 相比，Android 的生命周期都比较复杂，如果要监听生命周期，一般情况下只能覆写 Activity / Fragment 的回调方法（onCreate、onResume、onPause、onDestroy 等），样板代码少不了，可维护性也变差。</p>
<p>如果要对生命周期进行简化，可以抽象成一个图，点表示状态，线表示事件：</p>
<p><img src="androidlifecycle.jpg" alt></p>
<p>Lifecycle 负责处理这些点（states）和线（events），Activity / Fragment 是 LifecycleOwner，监听者则是 LifecycleObserver，一个非常清晰的观察者模式。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObserver</span> : <span class="type">LifecycleObserver &#123;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">connectListener</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">disconnectListener</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们的组件需要强绑定声明周期，那么只需要借助 Lifecycle 去监听生命周期的状态和事件即可，再也不用覆写各种回调方法了。下面将要讲到的 LiveData 和 ViewModel 都是 Lifecycle-Aware Components，它们都用到了 Lifecycle。</p>
<p>Android 生命周期管理不当带来的最大问题就是内存泄露，举一个我们经常遇到的场景：一个异步任务（比如网络请求）持有了 UI 元素的引用，只要任务没有执行完，所有与这个 UI 元素有强引用关系的元素都没法被 GC，如果这样的场景多发生几次，很可能会引起 OOM。</p>
<p>为了异步对象引用的问题，最早我们使用 AsyncTask，任务执行在 worker thread，执行结果在主线程上发起回调。AsyncTask 的致命缺点是不支持流式数据（stream），而且回调嵌套太深（callback hell），与软件质量衡量指标之一的 maintainable 背道而驰，不好用自然就会慢慢被淘汰。</p>
<p>后来我们开始使用 RxJava，响应式编程，声明式写法，再借助 retrolambda 这种 backport，即使当年 Android 只支持到 JDK7，我们依然可以利用各种 operator 写出非常简洁的代码，“filter map 我闭~着眼”。RxJava 不但完美解决了线程调度的问题，还为我们提供了 OO 之外的抽象——作用在流上的 lambda，基于函数的抽象。但是，即便完美如斯，生命周期的问题依然无法回避，因为 Java 天生的局限性，一个 lambda 无论伪造地再像高阶函数，它本质上还是一个匿名内部类，这个匿名内部类依然持有对 outer class 实例的引用。于是我们必须通过 CompositeDisposable 来管理订阅关系，发起异步操作时记录订阅，离开页面时取消订阅，仍然需要覆写 onDestory 或者 onPause 。</p>
<p>如果我们以 Repository 层为界把架构蓝图分为上下两部分的话，上面的部分是数据展示，下面的部分是数据获取，数据获取部分因为要请求 Remote 数据，必然会依赖到线程调度，而数据展示必然运行在 UI 线程，与生命周期强相关，这个时候就需要 LiveData 登场了。</p>
<h1 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h1><p>LiveData 也是一个观察者模型，但是它是一个与 Lifecycle 绑定了的 Subject，也就是说，只有当 UI 组件处于 ACTIVE 状态时，它的 Observer 才能收到消息，否则会自动切断订阅关系，不用再像 RxJava 那样通过 <code>CompositeDisposable</code> 来手动处理。</p>
<p>LiveData 的数据类似 EventBus 的 sticky event，不会被消费掉，只要有数据，它的 observer 就会收到通知。如果我们要把 LiveData 用作事件总线，还需要做一些定制，Github 上搜 SingleLiveEvent 可以找到源码实现。</p>
<p>我们没法直接修改 LiveData 的 value，因为它是不可变的（immutable），可变（mutable）版本是 <code>MutableLiveData</code>，通过调用 <code>setValue</code>（主线程）或 <code>postValue</code>（非主线程）可以修改它的 value。如果我们对外暴露一个 LiveData，但是不希望外部可以改变它的值，可以用如下技巧实现：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> _waveCode = MutableLiveData&lt;String&gt;()</span><br><span class="line"><span class="keyword">val</span> waveCode: LiveData&lt;String&gt; = _waveCode</span><br></pre></td></tr></table></figure>
<blockquote>
<p>内部用 MutableLiveData ，可以修改值，对外暴露成 LiveData 类型，只能获取值，不能修改值</p>
</blockquote>
<p>LiveData 有一个实现了中介者模式的子类 —— MediatorLiveData，它可以把多个 LiveData 整合成一个，只要任何一个 LiveData 有数据变化，它的观察者就会收到消息：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> liveData1 = ...</span><br><span class="line"><span class="keyword">val</span> liveData2 = ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> liveDataMerger = MediatorLiveData&lt;&gt;();</span><br><span class="line">liveDataMerger.addSource(liveData1) &#123; value -&gt; liveDataMerger.setValue(value))</span><br><span class="line">liveDataMerger.addSource(liveData2) &#123; value -&gt; liveDataMerger.setValue(value))</span><br></pre></td></tr></table></figure>
<p>综上，我们汇总一下 LiveData 的使用场景：</p>
<ul>
<li>LiveData - immutable 版本</li>
<li>MutableLiveData - mutable 版本</li>
<li>MediatorLiveData - 可汇总多个数据源</li>
<li>SingleLiveEvent - 事件总线</li>
</ul>
<p>LiveData 只存储最新的数据，虽然用法类似 RxJava2 的 Flowable，但是它不支持背压（backpressure），所以不是一个流（stream），利用 LiveDataReactiveStreams 我们可以实现 Flowable 和 LiveData 的互换。</p>
<p>如果把异步获取到的数据封装成 Flowable，通过 <code>toLiveData</code> 方法转换成 LiveData，既利用了 RxJava 的线程模型，还消除了 Flowable 与 UI Controller 生命周期的耦合关系，借助 Data Binding 再把 LiveData 绑定到 xml UI 元素上，数据驱动 UI，妥妥的响应式。于是一幅如下模样的数据流向图就被勾勒了出来：</p>
<p><img src="livedata.jpg" alt></p>
<p>图中右上角的 Local Data 是 AAC 提供的另一个强大武器 —— ORM 框架 Room。</p>
<h1 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h1><p>数据库作为数据持久层，其重要性不言而喻，当设备处于离线状态时，数据库可用于缓存数据；当多个 App 需要共享数据时，数据库可以作为数据源，但是基于原生 API 徒手写 CRUD 实在是痛苦，虽然 Github 上出现了不少 ORM 框架，但是它们的易用性也不敢让人恭维，直到 Room 出来之后，Android 程序员终于可以像 mybatis 那样轻松地操纵数据库了。</p>
<p>Room 是 SQLite 之上的应用抽象层，而 SQLite 是一个位于 Android Framework 层的内存型数据库。虽然 Realm 也是一个优秀的数据库，但是它并没有内置于 Android 系统，所会增大 apk 的体积，使用 Room 则没有这方面烦恼。</p>
<p>Room 的结构抽象得非常简单，数据对象（表名 + 字段）用 <code>@Entity</code> 注解来定义，数据访问用 @Dao 来注解，db 本身则用 <code>@Database</code> 来定义，如果要支持复杂类型，可以定义 <code>@TypeConverters</code>，然后在编译阶段，apt 会根据这些注解生成代码。Room 与 App 其他部分的交互如下图所示：</p>
<p><img src="room.jpg" alt></p>
<p>Entity 是一个数据实体，表示一条记录，它的用法如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity(tableName = <span class="meta-string">"actors"</span>)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span></span>(</span><br><span class="line">        <span class="meta">@PrimaryKey</span> <span class="meta">@ColumnInfo(name = <span class="meta-string">"id"</span>)</span></span><br><span class="line">        <span class="keyword">val</span> actorId: String,</span><br><span class="line">        <span class="keyword">val</span> name: String,</span><br><span class="line">        <span class="keyword">val</span> birthday: Date?,</span><br><span class="line">        <span class="keyword">val</span> pictureUrl: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><code>Actor</code> 是一个用 <code>@Entity</code> 注解的 data class，它会生成一个名字是 <code>actors</code> 的表，注意到有一个字段是 <code>@Date?</code> ，但是 SQLite 本身不支持这种复杂类型（complex type），所以我们还需要写一个可以转换成基础类型的转换器：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Converters</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TypeConverter</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">timestampToDate</span><span class="params">(value: <span class="type">Long</span>?)</span></span> = value?.let &#123; Date(it) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TypeConverter</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">dateToTimestamp</span><span class="params">(date: <span class="type">Date</span>?)</span></span> = date?.time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>转换器通过 <code>@TypeConverters</code> 可作用于 <code>class</code>、<code>field</code>、<code>method</code>、<code>parameter</code>，分别代表不同的作用域。比如作用在 <code>@Database</code> 类的上，那么它的作用域就是 db 中出现的所有 <code>@Dao</code> 和 <code>@Entity</code>。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Database(entities = [Actor::class], version = 1, exportSchema = false)</span></span><br><span class="line"><span class="meta">@TypeConverters(Converters::class)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDatabase</span> : <span class="type">RoomDatabase</span></span>() &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">actorDao</span><span class="params">()</span></span>: ActorDao</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Query</code> 中的 SQL 语句可以直接引用方法参数，而且它的返回值可以是 <code>LiveData</code> 类型，也支持 <code>Flowable</code> 类型，也就是说，Room 原生支持响应式，这是对数据驱动最有利的支持，也是 Room 区别于其他 ORM 框架的显著特征。</p>
<p>至此，我们可以确定，无论数据来自 Remote 还是来自本地 DB，架构蓝图中的 Repository 对 ViewModel 提供的数据可以永远是 LiveData 类型，接下来我们看一下 ViewModel 的妙用。</p>
<h1 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h1><p>ViewModel 是一个多面手，因为它的生命周期比较长，可以跨越因为配置变动（configuration changed，比如屏幕翻转）引起的 Activity 重建，因此 ViewModel 不能持有对 Activity / Fragment 的引用。</p>
<p><img src="viewmodel.jpg" alt></p>
<p>如果 ViewModel 中要用到 context 怎么办呢？没关系，框架提供了一个 ViewModel 的子类 <code>AndroidViewModel</code> ，它在构造时需要传入 <code>Application</code> 实例。</p>
<p>既然 ViewModel 与 UI Controller 无关，当然可以用作 MVP 的 Presenter 层提供 LiveData 给 View 层，因为 LiveData 绑定了 Lifecycle，所以不存在内存泄露的问题。除此之外，ViewModel 也可以用做 MVVM 模式的 VM 层，利用 Data Binding 直接把 ViewModel 的 LiveData 属性绑定到 xml 元素上，xml 中声明式的写法避免了很多样板代码，数据驱动 UI 的最后一步，我们只需要关注数据的变化即可，UI 的状态会自动发生变化。</p>
<p>ViewModel 配合 Data Binding 的用法与 React 非常相似，ViewModel 实例相当于 state，xml 文件就好比 <code>render</code> 函数，只要 <code>state</code> 数据发生变化，<code>render</code> 就会重新渲染 UI，但是 data binding 还有更强大的一点，它支持双向绑定。举个例子，UI 需要展示一个评论框，允许展示评论，也允许用户修改，那么我们可以直接把 <code>EditText</code> 双向绑定到一个 LiveData 之上，只要用户有输入，我们就可以收到通知，完全不需要通过 Kotlin/Java 来操控 UI：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextInputEditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@=&#123;viewModel.commentText&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意，如果要在 xml 中使用 LiveData，需要把 lifecycle owner 赋给 binding：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> binding: MainBinding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.main)</span><br><span class="line"><span class="comment">// Specify the current activity as the lifecycle owner.</span></span><br><span class="line">binding.setLifecycleOwner(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure>
<p>因为 ViewModel 拿到的数据是 Repository 给的，可能不适用于 UI 元素，所以 ViewModel 还承担了数据适配的工作，有时候我们需要汇总 repository 的多个返回值一次性给到 UI，那么就可以使用 LiveData 的“操作符” <code>Transformations.switchMap</code>，用法可以认为等同于 Rx 的 flatMap；如果只想对 LiveData 的 value 做一些映射，可以使用 <code>Transformations.map</code>，目前 Transformations 只有这两个操作符，因为不管 Kotlin 还是 Java8，都提供了很多声明式的操作符，对流的支持都比较友好，而 <code>LiveData</code>本身不是一个流，所以这两个操作符足矣。</p>
<p>除了数据适配之外，ViewModel 还有一个强大的用法 —— Fragment 之间共享数据，这样 ViewModel 又扮演了 FLUX 模式中的 store 这一角色，是多个页面（fragment）之间唯一的数据出口。</p>
<p><img src="viewmodel2.jpg" alt></p>
<p>ViewModel 的用法也非常简单，通过 <code>ViewModelProviders.of</code> 可以获取 ViewModel 实例：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> viewModel = ViewModelProviders.of(requireActivity(), factory)</span><br><span class="line">        .<span class="keyword">get</span>(ActorViewModel::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br></pre></td></tr></table></figure>
<p>一通操作猛如虎之后，UI controller 层变得薄如蝉翼，它只做了一件事情，把数据从左手（ViewModel）倒给了右手（使用了 Data Binding 的 xml）。</p>
<p>如果把 ViewModel 作为 SSOC（唯一真相源），多个 Fragment 之间共享数据，再利用 SingleLiveEvent 做总线，一个 Activity 配多个 Fragment 的写法就避免了 Activity 之间通过 Intent 传递数据的繁琐。但是 Fragment 的堆栈管理一直是一个让人头疼的问题，AAC 的 Navigation 不但完美解决了这个问题，而且还提供可视化的路由，只需拖拽一下就能生成类型安全的跳转逻辑。</p>
<h1 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h1><p>Navigation 用一个图（graph）来表示页面间的路由关系，图的节点（node）表示页面，边（edge）表示跳转关系。例如下图 8 个页面的跳转关系，一目了然：</p>
<p><img src="navigation.jpg" alt></p>
<p>页面与页面之间的连线叫 action，它可以配置进离场动画（Animations），也可以配置出栈行为（Pop Behavior），还支持 Single Top 的启动选项（Launch Options）。进离场动画和启动选项很好理解，出栈行为是一个比较强大的功能，action 箭头所指的方向表示目标页面入栈，箭头的反方向则表示目标页面出栈，而出栈的行为在 Navigation 编辑器中完全可控，我们可以指定要出栈到哪个页面，甚至可以指定目标页面是否也需要出栈：</p>
<p><img src="navigation2.jpg" alt></p>
<p>针对页面节点，还可以定义它要接收的参数（arguments），支持默认值，从此 Fragment 之间的参数传递变得非常直观，非常安全。</p>
<p>看一下具体用法，首先在跳转发起页面，通过 apt 生成的跳转函数传入参数：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> actorId = getSelectedActorId()</span><br><span class="line"><span class="keyword">val</span> direction = ActorListFragmentDirections.showDetail(actorId)</span><br><span class="line">findNavController().navigate(direction)</span><br></pre></td></tr></table></figure>
<p>然后利用目标页面生成的 <code>*Args</code> 获取参数：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">然后利用目标页面生成的 *Args 获取参数：</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的 navArgs 是一个扩展函数，利用了 Kotlin 的 ReadWriteProperty。</p>
</blockquote>
<p>几行代码就搞定了页面之间的跳转，而且还是可视化！从没有想过 Android 的页面跳转竟会变得如何简单，但是 Navigation 的方案并不是原创，iOS 的 Storyboard 很早就支持拖拽生成路由。当年 Android 推出 ConstraintLayout 之时，我们都认为是参考了 Storyboard 的页面拖拽，现在再配上 Navigation，从页面到跳转，一个完整的拖拽链路就形成了。平台虽然有差异化，但是使用场景一致的前提下，解决方案也就殊途同归了。</p>
<p>了解完了与生命周期有关的组件，接下来我们来看细节。</p>
<h1 id="Paging"><a href="#Paging" class="headerlink" title="Paging"></a>Paging</h1><p>UI 没有办法一次性展示所有的数据，端上的系统资源（电量、内存）也有限制，不可能把所有数据都加载到内存中；而且大批量请求数据不但浪费带宽，在某些网络情况（弱网、慢网）下还会导致请求失败，所以分页是很多情景下的刚需。Github 上有各式各样的解决方案，这一次，Google 直接推出了官方的分页组件——Paging。</p>
<p>Paging 将分页逻辑拆解为三部分：</p>
<ul>
<li>数据源 <code>DataSource</code></li>
<li>数据块 <code>PagedList</code> </li>
<li>数据展示 <code>PagedListAdapter</code></li>
</ul>
<p>DataSource 的数据来源于后端服务或者本地数据库，并且用三个子类来表示三种分页模式：</p>
<ul>
<li><strong>PageKeyedDataSource</strong> - 单页数据以 page key 为标识，例如当前页的 Response 中包含了下一页的 url，这个 url 就是 page key。</li>
<li><strong>ItemKeyedDataSource</strong> - 单页数据以 item key 为标识，比如下一页的请求要带当前页最后一个 item 的 id，这个 itemId 就是 item key。</li>
<li><strong>PositionalDataSource</strong> - 单页数据以位置为标识，这种模式比较常见，Room 只支持这一种，因为数据库查询以 OFFSET 和 LIMIT 做分页。</li>
</ul>
<p>PageKeyedDataSource 和 ItemKeyedDataSource 适用于内存型数据，比如直接从后端获取后需要展示的数据。PositionalDataSource 适用于本地 Room 数据或者使用 Room 做缓存的 Cache 数据。</p>
<p>数据流向的关系图如下所示：</p>
<p><img src="paging.jpg" alt></p>
<blockquote>
<p><code>LivePagedListBuilder</code> 利用 <code>DataSource.Factory</code> 和 <code>PageList.Config</code> 创建 <code>LiveData</code>，<code>UI Controller</code> 拿到数据之后交给 <code>PagedListAdapter</code> 展示到 <code>RecyclerView</code>。</p>
</blockquote>
<p>上图表达了数据的流向，如果从 UI 层往回看，页面展示的数据存储在 PagedList 中，PagedList 只是 DataSource 的数据块（chunk），当 PagedList 需要更多数据时，DataSource 就会给更多，当 DataSource 一无所有时便会触发 <code>BoundaryCallback</code> 获取更多数据，直到数据全部展示完毕。</p>
<p>LivePagedListBuilder 会将 <code>PagedList</code> 包装成 <code>LiveData&lt;PagedList&gt;</code> 给到下游，它在整个数据交互链路中的位置如下图所示：</p>
<p><img src="paging2.jpg" alt></p>
<blockquote>
<p>Repository 拿到 Dao 的 DataSource.Factory 之后，调用它的 toLiveData 方法并传入 PagedList.Config，然后生成一个分页的 LiveData<pagedlist> 交给 ViewModel 层。</pagedlist></p>
</blockquote>
<p>Paging 加上生命周期相关的架构组件解决了数据存储、数据流转和数据展示的问题。除此之外，AAC 还包括一个强大的异步任务执行器 WorkManager，它解决了任务执行的 <strong>可靠性</strong>，无论 App 退出还是设备重启，交给 WorkerManager 的任务都会被执行。</p>
<h1 id="WorkManager"><a href="#WorkManager" class="headerlink" title="WorkManager"></a>WorkManager</h1><p>WorkManager 虽然解决了任务执行可靠性的问题，但是它无法精确控制任务的执行时间，因为 WorkManager 要根据 OS 资源来选择执行任务。Android 自身提供了很多方案来解决后台任务执行的问题，可以根据下图的决策路径选择不同的组件：</p>
<p><img src="workmanager.jpg" alt></p>
<p>WorkManager 整体上可分为四部分：任务类型、任务构建、任务监控和任务控制。</p>
<h2 id="一、任务类型"><a href="#一、任务类型" class="headerlink" title="一、任务类型"></a>一、任务类型</h2><p>WorkManager 提供了一次性任务和周期性任务两种任务类型：</p>
<ul>
<li>OneTimeWorkRequest —— 一次性任务</li>
<li>PeriodicTimeWorkRequest —— 周期性任务</li>
</ul>
<h2 id="二、任务构建"><a href="#二、任务构建" class="headerlink" title="二、任务构建"></a>二、任务构建</h2><p>一是执行条件，二是执行顺序。</p>
<ul>
<li><code>Constraints</code> —— 通过 <code>Constraints.Builder</code>构建任务执行的条件（网络类型、电量、设备空间等）</li>
<li>WorkContinuation —— 可以指定任务的执行顺序，例如可以按照 PERT 图的顺序执行任务：<br><img src="workmanager2.jpg" alt></li>
</ul>
<h2 id="三、任务监控"><a href="#三、任务监控" class="headerlink" title="三、任务监控"></a>三、任务监控</h2><p>通过回调来获知任务的当前状态：</p>
<p><img src="workmanager3.jpg" alt></p>
<h2 id="四、任务控制"><a href="#四、任务控制" class="headerlink" title="四、任务控制"></a>四、任务控制</h2><p>包括加入队列，取消任务，其中 UniqueWork 提供了多种加入队列的策略（REPLACE、KEEP、APPEND）：</p>
<ul>
<li>cancelWorkById(UUID) —— 通过 ID 取消单个任务</li>
<li>cancelAllWorkByTag(String) —— 通过 Tag 取消所有任务</li>
<li>cancelUniqueWork(String) —— 通过名字取消唯一任务</li>
</ul>
<p>除此之外，WorkerManager 还提供了四种不同线程模型的 Worker：</p>
<ul>
<li>Worker —— 基于默认后台线程</li>
<li>CoroutineWorker —— 基于 Kotlin 的协程</li>
<li>RxWorker —— 基于 RxJava2</li>
<li>ListenableWorker —— 基于回调的异步</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Google 官方架构组件 AAC 为我们提供了太多通用问题的解决方案，使用场景包括数据持久化、异步任务调度、生命周期管理，UI 分页、UI 导航，当然还有强大的 MVVM 框架 Data Binding，这些架构组件不但使代码变得清晰易读，而且独立于 Android SDK 向下兼容，AAC 使我们更加聚焦产品，专注于解决问题，而不是花太多的时间重复造轮子。</p>
<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="https://developer.android.google.cn/jetpack/androidx/migrate" target="_blank" rel="noopener">https://developer.android.google.cn/jetpack/androidx/migrate</a></p>
<p><a href="https://developer.android.google.cn/jetpack/" target="_blank" rel="noopener">https://developer.android.google.cn/jetpack/</a></p>
<p><a href="https://developer.android.google.cn/jetpack/docs/guide" target="_blank" rel="noopener">https://developer.android.google.cn/jetpack/docs/guide</a></p>
<p><a href="https://proandroiddev.com/advanced-data-binding-binding-to-livedata-one-and-two-way-binding-dae1cd68530f" target="_blank" rel="noopener">https://proandroiddev.com/advanced-data-binding-binding-to-livedata-one-and-two-way-binding-dae1cd68530f</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql优化小技巧</title>
    <url>/2019/03/24/Mysql%E4%BC%98%E5%8C%96%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>程序嵌入SQL语句优化小技巧</p>
<a id="more"></a>
<h1 id="1、比较运算符能用’-’就不用’-lt-gt-’"><a href="#1、比较运算符能用’-’就不用’-lt-gt-’" class="headerlink" title="1、比较运算符能用’=’就不用’&lt;&gt;’"></a>1、比较运算符能用’=’就不用’&lt;&gt;’</h1><p>‘=’增加了索引的使用几率</p>
<h1 id="2、明知只有一条查询结果，那请使用’LIMIT-1’"><a href="#2、明知只有一条查询结果，那请使用’LIMIT-1’" class="headerlink" title="2、明知只有一条查询结果，那请使用’LIMIT 1’"></a>2、明知只有一条查询结果，那请使用’LIMIT 1’</h1><p>‘LIMIT 1’可以避免全表扫描，找到对应结果就不会再继续扫描了</p>
<h1 id="3、为列选择合适的数据类型"><a href="#3、为列选择合适的数据类型" class="headerlink" title="3、为列选择合适的数据类型"></a>3、为列选择合适的数据类型</h1><p>能用<code>TINYINT</code>就不用<code>SMALLLINT</code>,能用<code>SMALLINT</code>就不用<code>INT</code>，内存消耗越小越好</p>
<h1 id="4、将大的DELETE，UPDATE或者INSERT查询变成多个小查询"><a href="#4、将大的DELETE，UPDATE或者INSERT查询变成多个小查询" class="headerlink" title="4、将大的DELETE，UPDATE或者INSERT查询变成多个小查询"></a>4、将大的DELETE，UPDATE或者INSERT查询变成多个小查询</h1><p>为了达到更好的性能以及更好的数据控制，可以将它们变成多个小查询</p>
<p><img src="moresql.png" alt></p>
<h1 id="5、如果结果集允许重复的话，使用UNION-ALL代替UNION"><a href="#5、如果结果集允许重复的话，使用UNION-ALL代替UNION" class="headerlink" title="5、如果结果集允许重复的话，使用UNION ALL代替UNION"></a>5、如果结果集允许重复的话，使用UNION ALL代替UNION</h1><p>因为UNION ALL不去重复，效率高于UNION</p>
<h1 id="6、为获得相同结果集的多次执行，请保持SQL语句前后一致"><a href="#6、为获得相同结果集的多次执行，请保持SQL语句前后一致" class="headerlink" title="6、为获得相同结果集的多次执行，请保持SQL语句前后一致"></a>6、为获得相同结果集的多次执行，请保持SQL语句前后一致</h1><p>目的是为了充分利用查询缓冲，比如根据地域或者产品id查询产品价格，第一次使用了<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> price <span class="keyword">FROM</span> <span class="keyword">order</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">123456</span> <span class="keyword">and</span> region = <span class="string">'BEIJING'</span>;</span><br></pre></td></tr></table></figure></p>
<p>那么第二次同样的查询，请保持以上语句的一致性，比如不要将where语句里面的id和region位置调换顺序。</p>
<h1 id="7、避免使用’SELECT-’"><a href="#7、避免使用’SELECT-’" class="headerlink" title="7、避免使用’SELECT *’"></a>7、避免使用’SELECT *’</h1><p>如果不查询表中所有的列，尽量避免使用<code>SELECT *</code>，因为这样会进行全表扫描，不能有效利用索引，增大了数据库服务器的负担，以及它与应用程序客户端之间的网络IO开销。</p>
<h1 id="8、WHERE子句里面的列尽量被索引"><a href="#8、WHERE子句里面的列尽量被索引" class="headerlink" title="8、WHERE子句里面的列尽量被索引"></a>8、WHERE子句里面的列尽量被索引</h1><p>只是’尽量’，并不是说所有的列。因地制宜，根据实际情况进行调整，索引太多也会降低性能。</p>
<h1 id="9、JOIN子句里面的列尽量被索引"><a href="#9、JOIN子句里面的列尽量被索引" class="headerlink" title="9、JOIN子句里面的列尽量被索引"></a>9、JOIN子句里面的列尽量被索引</h1><p>同样只是’尽量’</p>
<h1 id="10、ORDER-BY的列尽量被索引"><a href="#10、ORDER-BY的列尽量被索引" class="headerlink" title="10、ORDER BY的列尽量被索引"></a>10、ORDER BY的列尽量被索引</h1><p>性能会更好</p>
<h1 id="11、使用LIMIT实现分页逻辑"><a href="#11、使用LIMIT实现分页逻辑" class="headerlink" title="11、使用LIMIT实现分页逻辑"></a>11、使用LIMIT实现分页逻辑</h1><p>提高性能，减少不必要数据库和应用的网络传输</p>
<h1 id="12、使用EXPLAIN关键字去查看执行计划"><a href="#12、使用EXPLAIN关键字去查看执行计划" class="headerlink" title="12、使用EXPLAIN关键字去查看执行计划"></a>12、使用EXPLAIN关键字去查看执行计划</h1><p>EXPLAIN可以检查索引使用情况以及扫描的行。</p>
<h1 id="13、不要在MySQL中使用UTF-8"><a href="#13、不要在MySQL中使用UTF-8" class="headerlink" title="13、不要在MySQL中使用UTF-8"></a>13、不要在MySQL中使用UTF-8</h1><p>1.MySQL的“utf8mb4”是真正的“UTF-8”。<br>2.MySQL的“utf8”是一种“专属的编码”，它能够编码的Unicode字符并不多。</p>
<p>使用“utf8”的MySQL和MariaDB用户都应该改用“utf8mb4”，永远都不要再使用“utf8”。</p>
<p>原理介绍：<a href="https://mp.weixin.qq.com/s/dN0OMvcUT--MQdsRVwDtCA" target="_blank" rel="noopener">链接</a></p>
<h1 id="more"><a href="#more" class="headerlink" title="more"></a>more</h1><p>SQL调优方法还有很多种，同样的查询结果可以有很多种查询方式，最好的方法就是测试！</p>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS入门</title>
    <url>/2019/03/19/CSS%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS入门学习"><a href="#CSS入门学习" class="headerlink" title="CSS入门学习"></a>CSS入门学习</h1><p>Tool: Visual Studio Code</p>
<a id="more"></a>
<blockquote>
<p>文中元素=标签</p>
</blockquote>
<h1 id="外链样式与内链样式"><a href="#外链样式与内链样式" class="headerlink" title="外链样式与内链样式"></a>外链样式与内链样式</h1><h2 id="外链"><a href="#外链" class="headerlink" title="外链"></a>外链</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"style/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="内链"><a href="#内链" class="headerlink" title="内链"></a>内链</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="块元素与内联元素"><a href="#块元素与内联元素" class="headerlink" title="块元素与内联元素"></a>块元素与内联元素</h1><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><p>概念：独占一行的元素，标签代表有<code>div</code>,<code>p</code>，<code>h1~h6</code>等等</p>
<blockquote>
<p>div没有任何语义的标签，而在H5中新增了一些语义标签，具体请看另一片文章关于HTML5的新特性<br>块元素主要作为页面的布局，一般情况块元素用来包含内联元素。p标签不可以包含其他任何块元素</p>
</blockquote>
<p>实例证明:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        哈哈哈</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>浏览器上查看内容可以正常显示，但是检查浏览器元素的显示则解析成了<br><img src="perror.png" alt></p>
<h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><p>概念：只占自身内容大小的元素，标签代表有<code>span</code>,<code>a</code>等</p>
<blockquote>
<p>a标签可以包含任何内联和块元素，但是除了它本身</p>
</blockquote>
<p>实例证明:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>检查浏览器元素的显示则解析成了<br><img src="aerror.png" alt></p>
<h1 id="标签间的关系"><a href="#标签间的关系" class="headerlink" title="标签间的关系"></a>标签间的关系</h1><p>标签之间的关系：</p>
<ul>
<li>父标签：直接包含子标签的标签</li>
<li>子标签：直接被父标签包含的标签</li>
<li>祖先标签：直接或间接包含后代标签的标签，父标签也是祖先标签</li>
<li>后代标签：直接或间接被祖先标签包含的标签，子标签也是后代标签</li>
<li>兄弟标签：拥有相同父标签的标签</li>
</ul>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.c1</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="选择器分组（并集选择器）"><a href="#选择器分组（并集选择器）" class="headerlink" title="选择器分组（并集选择器）"></a>选择器分组（并集选择器）</h2><p>语法：选择器1，选择器2，选择器3{}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.c1</span>,<span class="selector-tag">p</span>,<span class="selector-tag">span</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是一个span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h2><p>语法：*{}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是一个span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个一般用于适配每个浏览器的默认值。</p>
<p><del>## 复合选择器（交集选择器)</del></p>
<p><del>语法：选择器1选择器2{}</del></p>
<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>选中指定标签的指定后代标签</p>
<p>语法：祖先标签 后代标签 {}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#d1</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个在div里的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h2><p>选中父标签的指定子标签</p>
<p>语法：父标签 &gt; 子标签 {}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        div &gt; p &gt; span&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个在div里的段落<span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>我也是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>伪类：专门用来表示标签的一种特殊状态</p>
<blockquote>
<p>hover和active可以被其他标签所使用，不仅只是用于a标签<br>vistited伪类由于涉及到用户隐私问题，所以在该标签内仅仅只能设置color属性，其他设置也无效。<br>也可能还有存在版本问题，IE6可以设置，其余基本测试失败。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line">            color: orange;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>我是超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="伪元素（伪标签）选择器"><a href="#伪元素（伪标签）选择器" class="headerlink" title="伪元素（伪标签）选择器"></a>伪元素（伪标签）选择器</h2><p>表示元素中的一些特许位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span></span><br><span class="line">           color: red;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="css">       <span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span></span><br><span class="line">           color: yellow;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我是一个很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文字</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>根据元素中的属性或者属性值来选指定元素。</p>
<p>语法：</p>
<ul>
<li>标签[属性名]{} 有这个属性的</li>
<li>标签[属性名=”属性值”]{} 以属性为属性值的</li>
<li>标签^[属性名=”属性值”]{} 以属性的属性值为开头的</li>
<li>标签$[属性名=”属性值”]{} 以属性的属性值为结尾的</li>
<li>标签<em>[属性名</em>=”属性值”]{} 以属性的属性值为包含的</li>
</ul>
<p></p><p title="hello">我是一个段落</p>，title就是其中一个属性。<p></p>
<p>title就是一个属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">span</span><span class="selector-attr">[class]</span> &#123;</span></span><br><span class="line">           color: red;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="css">       <span class="selector-tag">p</span><span class="selector-attr">[title="content"]</span> &#123;</span></span><br><span class="line">           color: orange;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">'hh'</span>&gt;</span>我是一个段落<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        我是一个很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文字</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><p>:first-child {}     选中父元素中第一个子元素<br>:last-child {}      选中父元素中最后一个子元素<br>:nth-child(n) {}    选中父元素中正数第n个子元素<br>:nth-last-child(n) {}    选中父元素中倒数第n个子元素<br>:first-of-type {}   选中第一个元素<br>:last-of-type {}    选中最后一个元素<br>:nth-child(n) {}    选中第n个元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line">           color: red;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="紧邻同胞选择器"><a href="#紧邻同胞选择器" class="headerlink" title="紧邻同胞选择器"></a>紧邻同胞选择器</h2><p>选中一个元素后的指定兄弟元素。<br>语法：兄弟元素前 + 兄弟元素后 {}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">       p + span &#123;</span><br><span class="line">           color: red;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是兄弟<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是最后一个span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="一般同胞选择器"><a href="#一般同胞选择器" class="headerlink" title="一般同胞选择器"></a>一般同胞选择器</h2><p>选中一个元素后的所有指定兄弟元素</p>
<p>语法：兄弟元素前 ~ 兄弟元素后 {}</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#r1</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r2</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r3</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r4</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">60%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#r5</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.s1</span>&#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">80%</span>;</span><br></pre></td></tr></table></figure>
<h2 id="否定伪类选择器"><a href="#否定伪类选择器" class="headerlink" title="否定伪类选择器"></a>否定伪类选择器</h2><p>可以从已经选中的元素中剔除某些元素</p>
<p>语法：选择器:not(选择器){}</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">p</span><span class="selector-pseudo">:not(.c)</span> &#123;</span></span><br><span class="line">           color: red;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h2><p>祖先的元素会被他的后代所继承。可以利用继承的特性将一些基本的样式继承给祖先元素。<br>但并不是所有样式都会被后代元素所继承。<br>例如一些背景相关的样式，都不会被继承。</p>
<h2 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h2><p>使用不同选择器时，选中了同一个元素并设置了相同的样式，则优先级高的优先显示。</p>
<p>优先级规则(数值为参考值)：</p>
<ul>
<li>内联样式 优先级 1000</li>
<li>ID选择器 优先级 100</li>
<li>类和伪类 优先级 10</li>
<li>元素选择器 优先级 1</li>
<li>通配选择器 优先级 0</li>
<li>继承样式 无优先级</li>
</ul>
<blockquote>
<p>当选择器有多种选择器时，先将优先级相加再进行比对<br>选择器的优先级不会超过它的最大数量级(虽然很少这样写)<br>如果选择器的优先级相同，谁在代码的位置靠后就用谁。<br>并集选择器的优先级单独计算，并集每个选择器都是独立的。</p>
</blockquote>
<p>特殊情况：在样式后添加一个<code>!important</code>，则该样式会获得最高优先级，甚至超过内联样式。(尽量避免使用，多人开发时比较麻烦)</p>
<h2 id="伪类顺序"><a href="#伪类顺序" class="headerlink" title="伪类顺序"></a>伪类顺序</h2><p>关于a的伪类有四个,<code>:link</code>,<code>:visited</code>,<code>hover</code>,<code>:active</code>，这四个伪类优先级是一样的。</p>
<p>但是特殊情况<code>:hover</code>与<code>:active</code>这两种情况是相同的，都是会同时触发。由于优先级相等，所以看谁在代码后就使用谁。<br>所以写伪类的顺序一般都是有规则的，最好习惯写为<code>:link</code>-&gt;<code>:visited</code>-&gt;<code>:hover</code>-&gt;<code>:active</code></p>
<h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p><em>CSS 框模型 (Box Model) 规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。</em></p>
<p><img src="boxmodel.gif" alt></p>
<p>盒模型<a href="http://www.w3school.com.cn/cssref/index.asp#box" target="_blank" rel="noopener">属性</a></p>
<p>一个盒子分成这么几个部分</p>
<ul>
<li>内容部分</li>
<li>内边距</li>
<li>边框</li>
<li>外边距</li>
</ul>
<blockquote>
<p>他们都有各自的简写方式。<br>盒子大小由内容区、内边距、边框共同决定。</p>
</blockquote>
<h2 id="内容区"><a href="#内容区" class="headerlink" title="内容区"></a>内容区</h2><p>css中定义width与height定义的只是内容区的大小</p>
<h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p><em>元素的边框 (border) 是围绕元素内容和内边距的一条或多条线。CSS border 属性允许你规定元素边框的样式、宽度和颜色。</em></p>
<p>为元素设定边框必须设置三个属性:<code>width</code>,<code>color</code>,<code>style</code>。但是大部分浏览器都会有边框的默认值。</p>
<p>边框样式：<code>border-style</code><br>边框的宽度：<code>border-width</code><br>边框的颜色：<code>border-color</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"></span><br><span class="line">            border-width: 2px;</span><br><span class="line">            border-color: yellow;</span><br><span class="line">            border-style: solid;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="comment">/*简写*/</span></span></span><br><span class="line">            border: 2px green solid;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h2><p><em>元素的内边距在边框和内容区之间。控制该区域最简单的属性是 padding 属性。CSS padding 属性定义元素边框与元素内容之间的空白区域。</em></p>
<p>padding属性接受长度值或者百分比值，但不允许使用负值。</p>
<p>h1 元素的各边都有 10 像素的内边距<br><code>h1 {padding: 10px;}</code></p>
<p>也可以根据上、右、下、左顺序分别赋值<br><code>h1 {padding: 10px 0.25em 2ex 20%;}</code></p>
<p>单边属性</p>
<ul>
<li><code>padding-top</code></li>
<li><code>padding-right</code></li>
<li><code>padding-bottom</code></li>
<li><code>padding-left</code></li>
</ul>
<blockquote>
<p>当宽度为auto（默认值）此时指定的内边距不会影响盒子的可见宽度，而是自动修复宽度而适应内边距。</p>
</blockquote>
<h2 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h2><p><em>围绕在元素边框的空白区域是外边距。设置外边距会在元素外创建额外的“空白”。设置外边距的最简单的方法就是使用 margin 属性，这个属性接受任何长度单位、百分数值甚至负值。</em></p>
<p>margin 属性接受任何长度单位，可以是像素、英寸、毫米或 em。margin 可以设置为 auto。但是允许设置为负值。</p>
<blockquote>
<p>auto值一般设置水平方向，可以用来设置居中。</p>
</blockquote>
<p>用法基本和padding类似。</p>
<blockquote>
<p>由于页面元素都是靠左上来进行布局，则设置左，上外边距时会影响自身盒子的位置，相反，设置右，下外边距时会影响其他盒子的位置。</p>
</blockquote>
<h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a><a href="http://www.w3school.com.cn/css/css_margin_collapsing.asp" target="_blank" rel="noopener">外边距合并</a></h2><p><em>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</em></p>
<p><strong>两种情况：</strong></p>
<ul>
<li><p>第一种：两边为兄弟相邻的元素时</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line"></span><br><span class="line">            margin-bottom: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            background-color: green;</span><br><span class="line"></span><br><span class="line">            margin-top: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 两盒盒子的margin仅仅只有200px，而不是300px，仅取决于最大的那个margin而不是相加的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种：两边为父子关系的元素并某个边与边重叠时</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line"></span><br><span class="line">            margin-top: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 结果会发现box2不是相对于box移动了100px，而是box往下移动了100px，原因是因为box和box2处于父子关系，它们的上边框进行了重叠导致的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>解决方式</strong></p>
<p>1、使用padding，但是会影响盒子原来内容大小<br>2、添加一个空的table标签<br>3、使用<code>:before</code>伪类，添加一个<code>display=table</code>属性和属性值，原理与第二点相似，但是不会添加无意义的文档标签。</p>
<h2 id="内联元素的盒模型"><a href="#内联元素的盒模型" class="headerlink" title="内联元素的盒模型"></a>内联元素的盒模型</h2><p>内联元素无法设置width和height，其余基本和块元素的盒模型相似。</p>
<p>三步走：内容区、padding、margin、border</p>
<h1 id="display中的block、inline、inline-block、none"><a href="#display中的block、inline、inline-block、none" class="headerlink" title="display中的block、inline、inline-block、none"></a>display中的block、inline、inline-block、none</h1><p><code>display</code>属性规定元素应该生成的框(盒模型)的类型。</p>
<p><strong>说明</strong></p>
<p>这个属性用于定义建立布局时元素生成的显示框类型。对于 HTML 等文档类型，如果使用 display 不谨慎会很危险，因为可能违反 HTML 中已经定义的显示层次结构。对于 XML，由于 XML 没有内置的这种层次结构，所有 display 是绝对必要的。</p>
<p>主要使用的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>此元素不会被显示</td>
</tr>
<tr>
<td>block</td>
<td>此元素将显示为块级元素，此元素前后会带有换行符</td>
</tr>
<tr>
<td>inline</td>
<td>默认。此元素会被显示为内联元素，元素前后没有换行符</td>
</tr>
<tr>
<td>inline-block</td>
<td>行内块元素（CSS2.1新增）</td>
</tr>
</tbody>
</table>
<p>更多的值请参考<a href="http://www.w3school.com.cn/cssref/pr_class_display.asp" target="_blank" rel="noopener">链接</a></p>
<p>将一个div设置为内联元素：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"></span><br><span class="line">            background-color: yellow;</span><br><span class="line"></span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 会发现div的设置的宽度和高度设置无效，div已经变为内联元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing" target="_blank" rel="noopener">box-sizing</a></h1><p>CSS 中的 box-sizing 属性定义了 user agent 应该如何计算一个元素的总宽度和总高度。可以更改用于计算元素宽度和高度的默认的 CSS 盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。</p>
<p>在 CSS 盒子模型的默认定义里，你对一个元素所设置的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。</p>
<p><strong>box-sizing 属性可以被用来调整这些表现:</strong></p>
<ul>
<li><code>content-box</code>是默认值。如果你设置一个元素的宽为100px，那么这个元素的内容区会有100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</li>
<li><code>border-box</code>告诉浏览器去理解你设置的边框和内边距的值是包含在width内的。也就是说，如果你将一个元素的width设为100px,那么这100px会包含其它的border和padding，内容区的实际宽度会是width减去border + padding的计算值。大多数情况下这使得我们更容易的去设定一个元素的宽高。</li>
</ul>
<p><strong>属性值</strong></p>
<h2 id="content-box"><a href="#content-box" class="headerlink" title="content-box"></a>content-box</h2><p>默认值，标准盒子模型。 width 与 height 只包括内容的宽和高， 不包括边框（border），内边距（padding），外边距（margin）。注意: 内边距, 边框 &amp; 外边距 都在这个盒子的外部。 比如. 如果 .box {width: 350px}; 而且 {border: 10px solid black;} 那么在浏览器中的渲染的实际宽度将是370px;</p>
<p><strong>尺寸计算公式：</strong><br>width = 内容的宽度<br>height = 内容的高度<br>宽度和高度的计算值都不包含内容的边框（border）和内边距（padding）。</p>
<h2 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h2><p><code>width</code> 和 <code>height</code> 属性包括内容，内边距和边框，但不包括外边距。这是当文档处于 Quirks模式 时Internet Explorer使用的<code>盒模型</code>。注意，填充和边框将在盒子内 , 例如, <code>.box {width: 350px; border: 10px solid black;}</code> 导致在浏览器中呈现的宽度为350px的盒子。内容框不能为负，并且被分配到0，使得不可能使用border-box使元素消失。</p>
<p><strong>尺寸计算公式：</strong><br>width = border + padding + 内容的宽度<br>height = border + padding + 内容的高度</p>
<h2 id="padding-box-bad"><a href="#padding-box-bad" class="headerlink" title="padding-box[bad]"></a><del>padding-box</del>[bad]</h2><p><code>width</code> 和 <code>height</code> 属性包括内容和内边距，但是不包括边框和外边距。只有Firefox实现了这个值，它在Firefox 50中被删除。</p>
<h1 id="visibility中的hidden、visible"><a href="#visibility中的hidden、visible" class="headerlink" title="visibility中的hidden、visible"></a>visibility中的hidden、visible</h1><p>visibility 属性规定元素是否可见，可以被继承。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>visible</td>
<td>默认值，元素是可见的</td>
</tr>
<tr>
<td>hidden</td>
<td>元素是不可见的</td>
</tr>
<tr>
<td>collapse</td>
<td>当在表格元素中使用时，此值可删除一行或一列，但是它不会影响表格的布局。被行或列占据的空间会留给其他内容使用。如果此值被用在其他的元素上，会呈现为 “hidden”。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 visibility 属性的值。</td>
</tr>
</tbody>
</table>
<p><strong>使 h2 元素不可见：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">h2</span><br><span class="line">  &#123;</span><br><span class="line">  visibility:hidden;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h1><p>解决溢出内容显示,overflow 属性规定当内容溢出元素框时发生的事情。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>visible</td>
<td>默认值。内容不会被修剪，会呈现在元素框之外。</td>
</tr>
<tr>
<td>hidden</td>
<td>内容会被修剪，并且其余内容是不可见的。</td>
</tr>
<tr>
<td>scroll</td>
<td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td>auto</td>
<td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 overflow 属性的值。</td>
</tr>
</tbody>
</table>
<p><strong>在一个狭小的div以滚动条的方式显示一段文本</strong><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"></span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>上面这个操作有一些缺陷，不能序列化函数、undefined、循环引用等，详见传送门，但是也能应付一些日常情况了。</span><br><span class="line">事实上，在 Props 是引用类型时，单独修改对象、数组的某个属性或下标，Vue 并不会抛出错误。当然，前提是你要非常清楚自己在做什么，并写好注释，防止你的小伙伴们疑惑。</span><br><span class="line">有的同学可能知道，在组件上绑定的属性，如果没有在组件内部用 Props 声明，会默认绑定到组件的根元素上去。还是之前的栗子：。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h1><p>文档流出在网页最底层，它表示的是一个网页中的位置，我们所创建的元素默认都处于文档流中。<br>原文是<code>normal flow</code>，至于为何翻译成文档流见仁见智。指语言文本从左到右，从上到下显示。但是<code>浮动</code>、<code>绝对定位</code>、<code>固定定位</code>这些都会导致脱离文档流。</p>
<h1 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h1><p>float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。</p>
<p>如果浮动非替换元素，则要指定一个明确的宽度；否则，它们会尽可能地窄。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>元素向左浮动</td>
</tr>
<tr>
<td>right</td>
<td>元素向右浮动。</td>
</tr>
<tr>
<td>none</td>
<td>默认值。元素不浮动，并会显示在其在文本中出现的位置。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 float 属性的值。</td>
</tr>
</tbody>
</table>
<p>设置浮动会脱离文档流，元素会尽量向父元素或者遇到其他元素的左上或者右上靠。如果浮动元素上边是一个块元素，则浮动元素不会浮动超过这个块元素。</p>
<blockquote>
<p>浮动的元素不会盖住文字，会自动环绕在浮动元素周围。<br>当块元素设置float脱离文档流后，宽和高则默认是变成被内容撑开。<br>内联元素使用float脱离文档流后，会变成块元素。</p>
</blockquote>
<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p><strong><code>clear</code> 属性规定元素的哪一侧不允许其他浮动元素。</strong></p>
<p>clear 属性定义了元素的哪边上不允许出现浮动元素。在 CSS1 和 CSS2 中，这是通过自动为清除元素（即设置了 clear 属性的元素）增加上外边距实现的。在 CSS2.1 中，会在元素上外边距之上增加清除空间，而外边距本身并不改变。不论哪一种改变，最终结果都一样，如果声明为左边或右边清除，会使元素的上外边框边界刚好在该边上浮动元素的下外边距边界之下。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>在左侧不允许浮动元素。</td>
</tr>
<tr>
<td>right</td>
<td>在右侧不允许浮动元素。</td>
</tr>
<tr>
<td>both</td>
<td>在左右两侧均不允许浮动元素。</td>
</tr>
<tr>
<td>none</td>
<td>默认值。允许浮动元素出现在两侧。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 clear 属性的值。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>both是清除影响对当前元素影响最大的元素<br>对兄弟元素有效，父子是无效的。<br>清除浮动<code>clean</code>属性，清除其他浮动元素对当前元素的影响</p>
</blockquote>
<p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"></span><br><span class="line">            background-color: yellow;</span><br><span class="line"></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"></span><br><span class="line">            background-color: blue;</span><br><span class="line"></span><br><span class="line">            clear: right;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果box2不设置clear，则box2的位置将被顶到box1的高度上，2⃣而设置了clear后，box2还在原来的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="高度塌陷问题"><a href="#高度塌陷问题" class="headerlink" title="高度塌陷问题"></a>高度塌陷问题</h2><p>原因：在文档流中，父元素高度默认是由子元素的高度撑起来的，但是设置浮动后，子元素脱离了文档流，则导致了父元素的高度塌陷。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line">            border: 2px red solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.sun</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 100px;</span><br><span class="line"></span><br><span class="line">            background-color: yellow;</span><br><span class="line"></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sun"</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="解决方式一"><a href="#解决方式一" class="headerlink" title="解决方式一"></a>解决方式一</h3><p>BFC:Block Formatting （IE6以下并不支持）Context，W3C标准中，页面中都有一个隐含的属性。默认是关闭的，当打开的时候，会出现以下特性：</p>
<ul>
<li>父元素的垂直外边距不会与子元素重叠</li>
<li>开启BFC的元素不会被浮动元素所覆盖</li>
<li>开启BFC的元素可以包含浮动的子元素</li>
</ul>
<p>如何开启BFC（无法直接开启）</p>
<ul>
<li>设置元素浮动</li>
<li>开启元素绝对定位</li>
<li>设置元素的display的值为inline-block</li>
<li>设置元素的overflow的值为非visible的值（推荐hidden）【该方式最简单的方式，副作用最小】</li>
</ul>
<blockquote>
<p>兼容IE6 则可以使用相似于BFC的，成为<code>hasLayout</code>，开启方式则设置<code>zoom:1</code>即可。但是该方式仅支持IE8以下。如需完全兼容和其他浏览器，则设置两者同时设置。或者指定元素宽度。</p>
</blockquote>
<h3 id="解决方式二"><a href="#解决方式二" class="headerlink" title="解决方式二"></a>解决方式二</h3><p>利用清除浮动，直接在高度塌陷的父元素的最后，添加一个空白的div，由于该元素没有浮动，所以它是可以撑开父元素的高度的，对其进行清除浮动，消除了上一个元素的浮动影响，即可撑起父元素的高度，且该方案兼容性比方案一更高，影响度最小。但是添加了一个毫无意义的div标签，可读性变差了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line">            border: 2px red solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.sun</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 100px;</span><br><span class="line"></span><br><span class="line">            background-color: yellow;</span><br><span class="line"></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sun"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="解决方式三"><a href="#解决方式三" class="headerlink" title="解决方式三"></a>解决方式三</h3><p><strong>利用<code>::after</code>伪元素选择器。</strong></p>
<blockquote>
<p><code>::after</code> 选择器在被选元素的内容后面插入内容。<br>请使用 content 属性来指定要插入的内容。</p>
</blockquote>
<p>通过alter伪元素向元素添加一个空白的块元素，然后对其清除元素。和方式二的原理相同，但是该方式可读性更高。不会在html中添加毫无意义的空白标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line">            border: 2px red solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.sun</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 100px;</span><br><span class="line"></span><br><span class="line">            background-color: yellow;</span><br><span class="line"></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*.clearfix &#123;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125;*/</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">            content: "";</span><br><span class="line">            clear: both;</span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sun"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>display的值可以为block，也可以为table。</p>
</blockquote>
<p><strong>标准模版</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>定位指的是将指定的元素摆放在页面中指定的位置，通过定位可以任意的摆放元素。</p>
<p>这个属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。默认值<code>static</code>。<br>元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>absolute</td>
<td>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</td>
</tr>
<tr>
<td>fixed</td>
<td>生成绝对定位的元素，相对于浏览器窗口进行定位。</td>
</tr>
<tr>
<td>relative</td>
<td>生成相对定位的元素，相对于其正常位置进行定位。</td>
</tr>
<tr>
<td>static</td>
<td>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 position 属性的值。</td>
</tr>
</tbody>
</table>
<h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p>相对定位设置了，但不设置偏移量则也没有效果<br>相对定位是相对于元素在文档流原来的位置进行定位<br>相对定位不会脱离文档流<br>相对定位会使得元素提升一个层级<br>相对定位不会改变元素的性质，块元素依然是块元素。内联依然也依然是内联。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: green;</span><br><span class="line"></span><br><span class="line">            position: relative;</span><br><span class="line">            left: 100px;</span><br><span class="line">            top: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 相对于原来box2的位置进行偏移向右100像素，向下100像素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p>开启绝对定位会使元素脱离文档流<br>绝对定位是相当于离它最近的开启了定位的祖先元素进行定位的<br>如果所有的祖先元素都没有开启定位，则相对于浏览器窗口进行定位<br>绝对定位会使得元素提升一个层级并改变元素的性质</p>
<p><strong>如果祖先元素没有任何一个开启了定位，则是相对于浏览器窗口进行定位</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: black;</span><br><span class="line"></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 祖先元素都没有开启定位，则box4的原点位置则是浏览器左上角 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>开启box2元素的定位，则box4原点的位置发生改变</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: green;</span><br><span class="line"></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box3</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box4</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: black;</span><br><span class="line"></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最近的祖先元素box2开启了定位，则原点位置发生了改变，为box2块元素的左上角 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>一般情况自元素开启绝对定位，则父元素会开启相对定位</p>
</blockquote>
<h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>固定定位也是绝对定位的一种，大部分特点和绝对定位一样。但是它永远都相对于浏览器窗口进行定位，不管父元素到底有没有开启定位。而且只会固定在浏览器窗口的位置，不会因为其他因素（滚动条等）而改变元素位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        body &#123;</span><br><span class="line">            height: 5000px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            height: 500px;</span><br><span class="line">            width: 80px;</span><br><span class="line"></span><br><span class="line">            position: fixed;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 固定定位该元素不会因为浏览器页面滚动而发生位置的改变 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>看看我有没有滚动啊啊啊啊啊啊啊啊啊啊啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>应用可以用于底部的返回，导航漂浮菜单</p>
<h1 id="元素层级"><a href="#元素层级" class="headerlink" title="元素层级"></a>元素层级</h1><p>如果定位元素处于相同层级，则后面的元素会盖住前面的元素（结构上）</p>
<p>也可以通过<code>z-index</code>来修改元素层级，但是没有开启定位的元素不起作用。</p>
<p>父元素的层级就算比子元素高，但是也不会盖住子元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">img</span><span class="selector-class">.x</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">left</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">top</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">z-index</span><span class="selector-pseudo">:-1</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"x"</span> <span class="attr">src</span>=<span class="string">"/i/eg_mouse.jpg"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>默认的 z-index 是 0。Z-index -1 拥有更低的优先级。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h1><p>opacity 属性设置元素的不透明级别。<br>值为<code>0-1</code>区间。0表示完全透明，1是完全不透明。</p>
<blockquote>
<p>在IE8以及以下不支持，需要支持则使用如下属性代替，<code>filter</code>滤镜，值为<code>alpha(opacity=50)</code>,区间0-100,相当于opacity=0.5</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span> </span><br><span class="line">body &#123;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">div</span><br><span class="line">&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">opacity</span><span class="selector-pseudo">:0.5</span>;</span></span><br><span class="line">filter:Alpha(opacity=50); /* IE8 以及更早的浏览器 */</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>本元素的不透明度是 0.5。请注意，文本和背景色都受到不透明级别的影响。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>background 简写属性在一个声明中设置所有的背景属性。</p>
<p>可以设置如下属性：</p>
<ul>
<li>background-color        规定要使用的背景颜色。</li>
<li>background-position     规定背景图像的位置。</li>
<li>background-size         规定背景图片的尺寸。</li>
<li>background-repeat       规定如何重复背景图像。</li>
<li>background-origin       规定背景图片的定位区域。    </li>
<li>background-clip         规定背景的绘制区域。</li>
<li>background-attachment   规定背景图像是否固定或者随着页面的其余部分滚动。</li>
<li>background-image        规定要使用的背景图像。</li>
</ul>
<p>简写属性：没有顺序，也没有规定有多少个值。<br><code>background: #00FF00 url(bgimage.gif) no-repeat fixed top;</code></p>
<blockquote>
<p>IE8 以及更早的浏览器不支持一个元素多个背景图像。<br>IE7 以及更早的浏览器不支持 “inherit”。IE8 需要 !DOCTYPE。IE9 支持 “inherit”。</p>
</blockquote>
<h2 id="IE6不支持PNG24"><a href="#IE6不支持PNG24" class="headerlink" title="IE6不支持PNG24"></a>IE6不支持PNG24</h2><p>在IE6中对图片格式为PNG24的支持度不高，解决方式</p>
<ul>
<li>将png转为png-8格式即可，但是清晰度会有一点损失。</li>
<li>使用JS第三方库ie6_png</li>
</ul>
<h2 id="按钮背景闪烁"><a href="#按钮背景闪烁" class="headerlink" title="按钮背景闪烁"></a>按钮背景闪烁</h2><p>有一个按钮，按钮的状态分别设置了三个背景，上代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 93px;</span><br><span class="line">            height: 29px;</span><br><span class="line">            background: url('img/link.png');</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background: url('img/hover.png');</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line">            background: url('img/active.png');</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>造成原因：浏览器外部资源不是同时加载，而是资源被使用才会去加载资源，而上述的例子中，<code>link.png</code>被加载了，但是<code>hover</code>和<code>active</code>下状态没有马上触发，所以没有加载该资源图片，当状态被触发的时候该状态的图片才会加载，但是加载图片并不是立刻能够完成的，所以在加载的过程中有一段时间，背景图片无法显示，造成了背景闪烁。为了解决将图片整合成一张图片，利用<code>background-position</code>来分别显示各自的位置，这种图片又称<code>精灵图/雪碧图</code>。</p>
<p>解决方法:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 93px;</span><br><span class="line">            height: 29px;</span><br><span class="line"></span><br><span class="line">            background: url('img/btn.png');</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background: url('img/btn.png');</span><br><span class="line">            background-position: 93px 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line">            background: url('img/btn.png');</span><br><span class="line">            background-position: 186px 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="CSS精灵图-雪碧图"><a href="#CSS精灵图-雪碧图" class="headerlink" title="CSS精灵图/雪碧图"></a>CSS精灵图/雪碧图</h2><p>CSS Sprite(CSS 精灵), 也称作 雪碧图。</p>
<p>将导航背景图片，按钮背景图片等有规则的合并成一张背景图，即将多张图片合为一张整图，然后用background-position”来实现背景图片的定位技术。</p>
<p><strong>优势</strong></p>
<ul>
<li>通过图片整合来减少对服务器的请求次数，从而提高 页面的加载速度</li>
<li>通过整合图片来减小图片的体积</li>
</ul>
<p>图片整合原则：</p>
<ul>
<li>边切图边整合</li>
<li>定位时避免使用bottom,right等，用具体的数值，为了避免当你的宽度或高度上扩展sprites图时出现位置的错误</li>
<li>将小图标预留足够的空间，因为使用这些图标元素通常会有大量的内容而且可能需要扩展的间距，以至于其它的图片可能会意外出现在本区域内。一般的情况下，会将这些小图标整合到文件的最右侧</li>
<li>单张整合好的sprite图片在100KB以内</li>
<li>按分类整合图片</li>
<li>为了方便计算尺寸，一般情况会将sprites图的坐标计算成整数倍</li>
</ul>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>简单用法不介绍了。table标签，tr行标签，td单元格标签，th表头标签。</p>
<h2 id="去除table与td的距离"><a href="#去除table与td的距离" class="headerlink" title="去除table与td的距离"></a>去除table与td的距离</h2><p>通过<code>border-spacing</code>属性设置这个距离。</p>
<h2 id="表格边框合并"><a href="#表格边框合并" class="headerlink" title="表格边框合并"></a>表格边框合并</h2><p>通过<code>border-collapse</code>设置为<code>collapse</code>即可，一旦设置<code>border-spacing</code>自动失效。</p>
<h2 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h2><p>有一些情况下，表格是非常长的，则这时候需要将表格分为三个部分表头，表主体，表底部。<br>则html提供了三个标签<code>thead</code>,<code>tbody</code>,<code>tfoot</code>来分别表示进行区分。作用就是区分表格的不同部分。如果表格没有写tbody标签，则浏览器会默认添加一个tbody。</p>
<h1 id="CSS-Hack"><a href="#CSS-Hack" class="headerlink" title="CSS Hack"></a>CSS Hack</h1><p>有一些特殊情况，，有一些代码只需要运行在特定的浏览器（IE6等），则可以使用CSS Hack来解决，这段代码只在某些浏览器中识别，而其他浏览器等不会识别。</p>
<p>以下列举的只是一小部分，像火狐等浏览器都有自己的HACK，但是相对于一般用于IE更广法。</p>
<blockquote>
<p>不到万不得已的情况尽量不要使用</p>
</blockquote>
<h2 id="条件Hack"><a href="#条件Hack" class="headerlink" title="条件Hack"></a>条件Hack</h2><p>用于选择IE浏览器及IE的不同版本<br>if条件Hack是HTML级别的（包含但不仅是CSS的Hack，可以选择任何HTML代码块）</p>
<blockquote>
<p>仅对IE10以下有效，其余浏览器解析为html注释。</p>
</blockquote>
<p><strong>判断IE</strong><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE]&gt;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>判断IE6</strong><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if IE 6]&gt;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>判断IE9以下（但不包括IE9）</strong><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>lt为小于，lte为小于等于，gt为大于，gte为大于等于，!为选择指定版本外的所有IE版本(非)</p>
</blockquote>
<h2 id="属性Hack"><a href="#属性Hack" class="headerlink" title="属性Hack"></a>属性Hack</h2><p>选择不同的浏览器及版本<br>尽可能减少对CSS Hack的使用。Hack有风险，使用需谨慎<br>通常如未作特别说明，本文档所有的代码和示例的默认运行环境都为标准模式。<br>一些CSS Hack由于浏览器存在交叉认识，所以需要通过层层覆盖的方式来实现对不同浏览器进行Hack的。如下面这个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_：选择IE6及以下。连接线（中划线）（-）亦可使用，为了避免与某些带中划线的属性混淆，所以使用下划线（_）更为合适。</span><br><span class="line"></span><br><span class="line">*：选择IE7及以下。诸如：（+）与（#）之类的均可使用，不过业界对（*）的认知度更高</span><br><span class="line"></span><br><span class="line">\9：选择IE6+</span><br><span class="line"></span><br><span class="line">\0：选择IE8+和Opera</span><br><span class="line"></span><br><span class="line">[;property:value;];：</span><br><span class="line">选择webkit核心浏览器（Chrome,Safari）。IE7及以下也能识别。中括号内外的3个分号必须保留，第一个分号前可以是任意规则或任意多个规则</span><br><span class="line"></span><br><span class="line">[;color:#f00;]; 与 [color:#f00;color:#f00;]; 与 [margin:0;padding:0;color:#f00;]; 是等价的。生效的始终是中括号内的最后一条规则，所以通常选用第一种写法最为简洁</span><br></pre></td></tr></table></figure>
<p>案例代码：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>属性级Hack_CSS参考手册_web前端开发参考手册系列<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span>&#123;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span>;<span class="attribute">font-size</span>:<span class="number">16px</span>;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>:<span class="selector-id">#c30</span>;          <span class="comment">/* For Firefox */</span></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[;color:#ddd;]</span>;      <span class="comment">/* For webkit(Chrome and Safari) */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>:<span class="selector-id">#090</span>\0;        <span class="comment">/* For Opera */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>:<span class="selector-id">#00f</span>\9;        <span class="comment">/* For IE8+ */</span></span></span><br><span class="line"><span class="css">    *<span class="selector-tag">color</span>:<span class="selector-id">#f00</span>;         <span class="comment">/* For IE7 */</span></span></span><br><span class="line"><span class="css">    _<span class="selector-tag">color</span>:<span class="selector-id">#ff0</span>;         <span class="comment">/* For IE6 */</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>在不同浏览器下看看我的颜色吧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="选择符Hack"><a href="#选择符Hack" class="headerlink" title="选择符Hack"></a>选择符Hack</h2><p>选择不同的浏览器及版本<br>尽可能减少对CSS Hack的使用。Hack有风险，使用需谨慎<br>通常如未作特别说明，本文档所有的代码和示例的默认运行环境都为标准模式。<br>一些CSS Hack由于浏览器存在交叉认识，所以需要通过层层覆盖的方式来实现对不同浏览器进行Hack的。</p>
<blockquote>
<p>用得比较少</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* <span class="selector-tag">html</span> <span class="selector-class">.test</span>&#123;<span class="attribute">color</span>:<span class="number">#090</span>;&#125;       <span class="comment">/* For IE6 and earlier */</span></span><br><span class="line">* + <span class="selector-tag">html</span> <span class="selector-class">.test</span>&#123;<span class="attribute">color</span>:<span class="number">#ff0</span>;&#125;     <span class="comment">/* For IE7 */</span></span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:lang(zh-cn)</span>&#123;<span class="attribute">color</span>:<span class="number">#f00</span>;&#125;  <span class="comment">/* For IE8+ and not IE */</span></span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:nth-child(1)</span>&#123;<span class="attribute">color</span>:<span class="number">#0ff</span>;&#125; <span class="comment">/* For IE9+ and not IE */</span></span><br></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.w3school.com.cn/css" target="_blank" rel="noopener">http://www.w3school.com.cn/css</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac关闭/开启独立显卡</title>
    <url>/2019/03/19/Mac%E5%85%B3%E9%97%AD-%E5%BC%80%E5%90%AF%E7%8B%AC%E7%AB%8B%E6%98%BE%E5%8D%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本人使用的是2018款15寸的Mbp，每次用迅雷播放器观看总是自动帮我切换到独立显卡，功耗和发热实在是太严重了，所以想单独仅使用集成显卡。</p>
<a id="more"></a>
<p>普通的界面中只找到了自动切换模式在<code>设置</code>-<code>节能</code>选项卡中可以找到。</p>
<p><img src="autoswitch.png" alt></p>
<p>而想单独使用，则终端使用命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#强制使用核显(集成显卡)</span></span><br><span class="line">$ sudo pmset -a GPUSwitch 0</span><br><span class="line"><span class="comment">#强制使用独立显卡</span></span><br><span class="line">$ sudo pmset -a GPUSwitch 1</span><br><span class="line"><span class="comment">#自动切换</span></span><br><span class="line">$ sudo pmset -a GPUSwitch 2</span><br></pre></td></tr></table></figure></p>
<p>自由选择切换即可。</p>
<p>或者使用一个<code>gfxCardStatus</code>软件也可实现，但未经尝试。命令更方便。</p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP预定义变量</title>
    <url>/2019/03/19/PHP%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PHP预定义变量"><a href="#PHP预定义变量" class="headerlink" title="PHP预定义变量"></a>PHP预定义变量</h1><p>对于全部脚本而言，PHP 提供了大量的预定义变量。这些变量将所有的外部变量表示成内建环境变量，并且将错误信息表示成返回头。</p>
<a id="more"></a>
<p>超全局变量 — 超全局变量是在全部作用域中始终可用的内置变量</p>
<ul>
<li><code>$GLOBALS</code> — 引用全局作用域中可用的全部变量</li>
<li><code>$_SERVER</code> — 服务器和执行环境信息</li>
<li><code>$_GET</code> — HTTP GET 变量</li>
<li><code>$_POST</code> — HTTP POST 变量</li>
<li><code>$_FILES</code> — HTTP 文件上传变量</li>
<li><code>$_REQUEST</code> — HTTP Request 变量</li>
<li><code>$_SESSION</code> — Session 变量</li>
<li><code>$_ENV</code> — 环境变量</li>
<li><code>$_COOKIE</code> — HTTP Cookies</li>
<li><code>$php_errormsg</code> — 前一个错误信息</li>
<li><code>$HTTP_RAW_POST_DATA</code> — 原生POST数据</li>
<li><code>$http_response_header</code> — HTTP 响应头</li>
<li><code>$argc</code> — 传递给脚本的参数数目</li>
<li><code>$argv</code> — 传递给脚本的参数数组</li>
</ul>
<p>参考资料</p>
<p><a href="https://secure.php.net/manual/zh/reserved.variables.php" target="_blank" rel="noopener">https://secure.php.net/manual/zh/reserved.variables.php</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac缺少freetype解决方案</title>
    <url>/2019/03/19/Mac%E7%BC%BA%E5%B0%91freetype%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Mac OS X 10.14.3</p>
<a id="more"></a>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近在使用thinkphp的验证码模块时，出现了一个异常<br><code>Call to undefined function think\captcha\imagettftext()</code><br>没有<code>imagettftext()</code>这个函数，原因是因为php缺少gd库中的freetype模块导致的。</p>
<p>知道了原因后，查询了网上大致的方法，大概这么几种</p>
<ul>
<li>重新编译PHP</li>
<li>用brew重新安装新的PHP</li>
<li><a href="https://php-osx.liip.ch" target="_blank" rel="noopener">https://php-osx.liip.ch</a> 一句话脚本</li>
</ul>
<p>在尝试了很多遍后，都没有成功。有一篇文章讲到了这些方案比较过时，在Macos10.14版本下更改了安全策略，新增了<code>Rootless</code>机制，具体请看我博客中另一篇文章关于<code>Rootless</code>的介绍。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="方案一（便携）"><a href="#方案一（便携）" class="headerlink" title="方案一（便携）"></a>方案一（便携）</h2><p>使用第三方集成环境例如<code>MAMP</code>,<code>MAMP PRO</code>,<code>XAMPP</code>等</p>
<h2 id="方案二（推荐）"><a href="#方案二（推荐）" class="headerlink" title="方案二（推荐）"></a>方案二（推荐）</h2><h3 id="首先关闭Rootless"><a href="#首先关闭Rootless" class="headerlink" title="首先关闭Rootless"></a>首先关闭Rootless</h3><p>关闭步骤<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、重启 Mac 并按住 Command+R，进入恢复模式</span><br><span class="line">2、打开终端 Terminal</span><br><span class="line">3、输入csrutil disable</span><br></pre></td></tr></table></figure></p>
<p>开启步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、重启 Mac 并按住 Command+R，进入恢复模式</span><br><span class="line">2、打开终端 Terminal</span><br><span class="line">3、输入csrutil enable</span><br></pre></td></tr></table></figure>
<h3 id="重新brew安装php"><a href="#重新brew安装php" class="headerlink" title="重新brew安装php"></a>重新brew安装php</h3><p><del>这里我试过关闭rootless后使用一句话脚本也没有办法安装成功。也试过一些网上的方案例如</del><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install php56 --with-apche --with-freetype</span><br></pre></td></tr></table></figure></p>
<p><del>但是运行出现<code>Error: invalid option: --with-apche</code>此错误，寻思没有解决办法。</del></p>
<p><strong>成功的方案</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install php@7.1 --build-from-source</span><br></pre></td></tr></table></figure>
<blockquote>
<p>记住添加<code>--build-from-source</code>参数</p>
</blockquote>
<p>php 版本可自行通过<code>brew search php</code>来查看需要安装所需，运行后出现<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">==&gt; Installing dependencies <span class="keyword">for</span> php@7.1: pkg-config</span><br><span class="line">==&gt; Installing php@7.1 dependency: pkg-config</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/pkg-config-0.29.2.mojave.bo</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; Pouring pkg-config-0.29.2.mojave.bottle.tar.gz</span><br><span class="line">🍺  /usr/<span class="built_in">local</span>/Cellar/pkg-config/0.29.2: 11 files, 627.2KB</span><br><span class="line">==&gt; Installing php@7.1</span><br><span class="line">==&gt; Downloading https://php.net/get/php-7.1.26.tar.xz/from/this/mirror</span><br><span class="line">==&gt; Downloading from https://secure.php.net/distributions/php-7.1.26.tar.xz</span><br><span class="line">          <span class="comment">#    #    #    #                                         -=O=-      </span></span><br><span class="line">==&gt; Patching</span><br><span class="line">patching file acinclude.m4</span><br><span class="line">Hunk <span class="comment">#1 succeeded at 444 (offset 3 lines).</span></span><br><span class="line">Hunk <span class="comment">#2 succeeded at 459 (offset 3 lines).</span></span><br><span class="line">Hunk <span class="comment">#3 succeeded at 494 (offset 3 lines).</span></span><br><span class="line">Hunk <span class="comment">#4 succeeded at 506 (offset 3 lines).</span></span><br><span class="line">Hunk <span class="comment">#5 succeeded at 2507 (offset 88 lines).</span></span><br><span class="line">==&gt; ./buildconf --force</span><br><span class="line">==&gt; ./configure --prefix=/usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26 --localstatedir=/usr/l</span><br><span class="line">==&gt; make</span><br><span class="line"></span><br><span class="line">==&gt; make install</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set php_ini /usr/<span class="built_in">local</span>/etc/</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set php_dir /usr/<span class="built_in">local</span>/shar</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set doc_dir /usr/<span class="built_in">local</span>/shar</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set ext_dir /usr/<span class="built_in">local</span>/lib/</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set bin_dir /usr/<span class="built_in">local</span>/opt/</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set data_dir /usr/<span class="built_in">local</span>/sha</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set cfg_dir /usr/<span class="built_in">local</span>/shar</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set www_dir /usr/<span class="built_in">local</span>/shar</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set man_dir /usr/<span class="built_in">local</span>/shar</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set test_dir /usr/<span class="built_in">local</span>/sha</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear config-set php_bin /usr/<span class="built_in">local</span>/opt/</span><br><span class="line">==&gt; /usr/<span class="built_in">local</span>/Cellar/php@7.1/7.1.26/bin/pear update-channels</span><br><span class="line">==&gt; Caveats</span><br><span class="line">To <span class="built_in">enable</span> PHP <span class="keyword">in</span> Apache add the following to httpd.conf and restart Apache:</span><br><span class="line">    LoadModule php7_module /usr/<span class="built_in">local</span>/opt/php@7.1/lib/httpd/modules/libphp7.so</span><br><span class="line"></span><br><span class="line">    &lt;FilesMatch \.php$&gt;</span><br><span class="line">        SetHandler application/x-httpd-php</span><br><span class="line">    &lt;/FilesMatch&gt;</span><br><span class="line"></span><br><span class="line">Finally, check DirectoryIndex includes index.php</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line"></span><br><span class="line">The php.ini and php-fpm.ini file can be found <span class="keyword">in</span>:</span><br><span class="line">    /usr/<span class="built_in">local</span>/etc/php/7.1/</span><br><span class="line"></span><br><span class="line">php@7.1 is keg-only, <span class="built_in">which</span> means it was not symlinked into /usr/<span class="built_in">local</span>,</span><br><span class="line">because this is an alternate version of another formula.</span><br><span class="line"></span><br><span class="line">If you need to have php@7.1 first <span class="keyword">in</span> your PATH run:</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/php@7.1/bin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/php@7.1/sbin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line">For compilers to find php@7.1 you may need to <span class="built_in">set</span>:</span><br><span class="line">  <span class="built_in">export</span> LDFLAGS=<span class="string">"-L/usr/local/opt/php@7.1/lib"</span></span><br><span class="line">  <span class="built_in">export</span> CPPFLAGS=<span class="string">"-I/usr/local/opt/php@7.1/include"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To have launchd start php@7.1 now and restart at login:</span><br><span class="line">  brew services start php@7.1</span><br><span class="line">Or, <span class="keyword">if</span> you don<span class="string">'t want/need a background service you can just run:</span></span><br><span class="line"><span class="string">  php-fpm</span></span><br><span class="line"><span class="string">==&gt; Summary</span></span><br><span class="line"><span class="string">🍺  /usr/local/Cellar/php@7.1/7.1.26: 508 files, 63MB, built in 5 minutes 46 seconds</span></span><br><span class="line"><span class="string">==&gt; Caveats</span></span><br><span class="line"><span class="string">==&gt; php@7.1</span></span><br><span class="line"><span class="string">To enable PHP in Apache add the following to httpd.conf and restart Apache:</span></span><br><span class="line"><span class="string">    LoadModule php7_module /usr/local/opt/php@7.1/lib/httpd/modules/libphp7.so</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;FilesMatch \.php$&gt;</span></span><br><span class="line"><span class="string">        SetHandler application/x-httpd-php</span></span><br><span class="line"><span class="string">    &lt;/FilesMatch&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finally, check DirectoryIndex includes index.php</span></span><br><span class="line"><span class="string">    DirectoryIndex index.php index.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The php.ini and php-fpm.ini file can be found in:</span></span><br><span class="line"><span class="string">    /usr/local/etc/php/7.1/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">php@7.1 is keg-only, which means it was not symlinked into /usr/local,</span></span><br><span class="line"><span class="string">because this is an alternate version of another formula.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If you need to have php@7.1 first in your PATH run:</span></span><br><span class="line"><span class="string">  echo '</span><span class="built_in">export</span> PATH=<span class="string">"/usr/local/opt/php@7.1/bin:<span class="variable">$PATH</span>"</span><span class="string">' &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="string">  echo '</span><span class="built_in">export</span> PATH=<span class="string">"/usr/local/opt/php@7.1/sbin:<span class="variable">$PATH</span>"</span><span class="string">' &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For compilers to find php@7.1 you may need to set:</span></span><br><span class="line"><span class="string">  export LDFLAGS="-L/usr/local/opt/php@7.1/lib"</span></span><br><span class="line"><span class="string">  export CPPFLAGS="-I/usr/local/opt/php@7.1/include"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">To have launchd start php@7.1 now and restart at login:</span></span><br><span class="line"><span class="string">  brew services start php@7.1</span></span><br><span class="line"><span class="string">Or, if you don'</span>t want/need a background service you can just run:</span><br><span class="line">  php-fpm</span><br></pre></td></tr></table></figure></p>
<p>主要查看后面的提示信息并配置环境<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/php@7.1/bin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH="/usr/local/opt/php@7.1/sbin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure></p>
<p>然后<code>source ~/.bash_profire</code></p>
<p>再次重新运行thinkphp中的验证码模块，实验成功</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/leiflyy/article/details/53016769" target="_blank" rel="noopener">https://blog.csdn.net/leiflyy/article/details/53016769</a></p>
<p><a href="https://blog.csdn.net/liaobangxiang/article/details/79460290" target="_blank" rel="noopener">https://blog.csdn.net/liaobangxiang/article/details/79460290</a></p>
<p><a href="https://github.com/EricLi404/notes/issues/1" target="_blank" rel="noopener">https://github.com/EricLi404/notes/issues/1</a></p>
<p><a href="https://stackoverflow.com/questions/50259893/home-brew-php-7-2-5-install-with-curl" target="_blank" rel="noopener">https://stackoverflow.com/questions/50259893/home-brew-php-7-2-5-install-with-curl</a></p>
<p><a href="https://hackycy.github.io/2019/03/19/Mac-OS-X-10-11-Rootless-介绍">https://hackycy.github.io/2019/03/19/Mac-OS-X-10-11-Rootless-介绍</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Homebrew</tag>
        <tag>Mac</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS X 10.11+ Rootless 介绍</title>
    <url>/2019/03/19/Mac-OS-X-10-11-Rootless-%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Rootless"><a href="#Rootless" class="headerlink" title="Rootless"></a>Rootless</h1><p>Mac OS X 10.11+ (El Capitan) 以后，引入了 Rootless 安全机制，该机制限制了 root 用户的权限，有部分操作即使是 root 也无法执行。<br>在搭建php环境时遇到了这个，所以记录了下来。</p>
<a id="more"></a>
<blockquote>
<p>该机制的详细介绍，请参考：<br>Wikipedia: System Integrity Protection<br>Apple: System Integrity Protection Guide</p>
</blockquote>
<h1 id="主要限制有："><a href="#主要限制有：" class="headerlink" title="主要限制有："></a>主要限制有：</h1><p>以下目录无法修改：<br>/System, /bin, /sbin, 或者 /usr (/usr/local 除外)，以及内置 App 和系统工具 Utilities。<br>具体的限制名单在 /System/Library/Sandbox/rootless.conf 文件中有定义，该文件行首的 * 表示该行记录不在限制之列<br>无法追踪调试系统进程<br>无法加载未经验证的内核扩展</p>
<h1 id="可能引起的问题和解决方案"><a href="#可能引起的问题和解决方案" class="headerlink" title="可能引起的问题和解决方案"></a>可能引起的问题和解决方案</h1><ul>
<li><p>修改受限制的文件或文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp -f FILE /usr/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错： cp: /usr/bin/FILE: Operation not permitted</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行部分命令受挫</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gem install posix-spawn -v <span class="string">'0.3.11'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错：</span></span><br><span class="line">Building native extensions.  This could take a <span class="keyword">while</span>...</span><br><span class="line">ERROR:  While executing gem ... (Errno::EPERM)</span><br><span class="line">    Operation not permitted - /usr/bin/posix-spawn-benchmark</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="关闭-开启Rootless"><a href="#关闭-开启Rootless" class="headerlink" title="关闭/开启Rootless"></a>关闭/开启Rootless</h1><p>如果遇到的问题难以解决，也可以关闭 rootless 功能，彻底解决引起的权限问题，但是关闭 rootless 将会严重降低系统安全性，必须尽快重新开启。</p>
<h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>1、重启 Mac 并按住 Command+R，进入恢复模式<br>2、打开终端 Terminal<br>3、输入<code>csrutil disable</code></p>
<h2 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h2><p>1、重启 Mac 并按住 Command+R，进入恢复模式<br>2、打开终端 Terminal<br>3、输入<code>csrutil enable</code></p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客Next主题不蒜子失效解决</title>
    <url>/2019/03/17/hexo%E5%8D%9A%E5%AE%A2Next%E4%B8%BB%E9%A2%98%E4%B8%8D%E8%92%9C%E5%AD%90%E5%A4%B1%E6%95%88%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>2018年底发现不蒜子开始失效，但是没有管，现在看了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">官网</a></em></p>
<a id="more"></a>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>官网解释：因七牛强制过期『dn-lbstatics.qbox.me』域名，与客服沟通无果，只能更换域名到『busuanzi.ibruce.info』！</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>直接根据提示替换即可</p>
<p>替换路径<code>themes/next/layout/_third-party/analytics/busuanzi-counter.swig</code>，打开文件</p>
<p>找到<br><code>&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code><br>替换<br><code>&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP之魔术常量</title>
    <url>/2019/03/14/PHP%E4%B9%8B%E9%AD%94%E6%9C%AF%E5%B8%B8%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h1><p>PHP 向它运行的任何脚本提供了大量的<a href="https://secure.php.net/manual/zh/reserved.constants.php" target="_blank" rel="noopener">预定义常量</a>。不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。</p>
<p>有八个魔术常量它们的值随着它们在代码中的位置改变而改变。例如 <code>__LINE__</code>的值就依赖于它在脚本中所处的行来决定。这些特殊的常量不区分大小写，如下：</p>
<a id="more"></a>
<h1 id="几个php的魔术常量"><a href="#几个php的魔术常量" class="headerlink" title="几个php的魔术常量"></a>几个php的魔术常量</h1><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>LINE</strong></td>
<td>文件中的当前行号</td>
</tr>
<tr>
<td><strong>FILE</strong></td>
<td>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。自PHP4.0.2起，<strong>FILE</strong>总是包含一个绝对路径（如果是符号连接，则是解析后的绝对路径），而在此之前的版本有时会包含一个相对路径。</td>
</tr>
<tr>
<td><strong>DIR</strong></td>
<td>文件所在的目录。如果用在被包含的文件中，则返回被包含的文件所在的目录，它等价于dirname(<strong>_FILE</strong>)。除非是根目录，否则目录名不包括末尾的斜杠。（PHP5.3.0中新增）。</td>
</tr>
<tr>
<td><strong>FUNCTION</strong></td>
<td>函数名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该函数被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。</td>
</tr>
<tr>
<td><strong>CLASS</strong></td>
<td>类的名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。类名包括其被声明的作用区域（例如 Foo\Bar）。注意自 PHP 5.4 起 <strong>CLASS</strong> 对 trait 也起作用。当用在 trait 方法中时，<strong>CLASS</strong> 是调用 trait 方法的类的名字。</td>
</tr>
<tr>
<td><strong>TRAIT</strong></td>
<td>Trait 的名字（PHP 5.4.0 新加）。自 PHP 5.4 起此常量返回 trait 被定义时的名字（区分大小写）。Trait 名包括其被声明的作用区域（例如 Foo\Bar）。</td>
</tr>
<tr>
<td><strong>METHOD</strong></td>
<td>类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。</td>
</tr>
<tr>
<td><strong>NAMESPACE</strong></td>
<td>当前命名空间的名称（区分大小写）。此常量是在编译时定义的（PHP 5.3.0 新增）。</td>
</tr>
</tbody>
</table>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://secure.php.net/manual/zh/language.constants.predefined.php" target="_blank" rel="noopener">https://secure.php.net/manual/zh/language.constants.predefined.php</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Android无法获取本地服务器(Localhost)解决方案</title>
    <url>/2019/03/10/Android%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8-Localhost-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Android开发中通过localhost或127.0.0.1访问本地服务器时，会报java.net.ConnectException: localhost/127.0.0.1:8083 -Connection refused异常。</p>
<a id="more"></a>
<p>为什么会报这个异常呢？因为Android模拟器本身把自己当做了localhost或127.0.0.1，而此时我们又通过localhost或127.0.0.1访问本地服务器，所以会抛出异常了。</p>
<p>解决方案：</p>
<p>使用<code>10.0.2.2</code>来代替<code>localhost</code>和<code>127.0.0.1</code>即可</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac显示隐藏文件/文件夹</title>
    <url>/2019/03/08/Mac%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6-%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>Mac下一些隐藏文件夹是没有办法可见的，终端下也不会进行显示，例如用户文件下下的.m2</em></p>
<a id="more"></a>
<h1 id="终端执行命令"><a href="#终端执行命令" class="headerlink" title="终端执行命令"></a>终端执行命令</h1><h2 id="设置隐藏文件可见"><a href="#设置隐藏文件可见" class="headerlink" title="设置隐藏文件可见"></a>设置隐藏文件可见</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ defaults write com.apple.finder AppleShowAllFiles TRUE</span><br></pre></td></tr></table></figure>
<h2 id="设置隐藏文件不可见"><a href="#设置隐藏文件不可见" class="headerlink" title="设置隐藏文件不可见"></a>设置隐藏文件不可见</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ defaults write com.apple.finder AppleShowAllFiles FALSE</span><br></pre></td></tr></table></figure>
<h1 id="重启Finder生效"><a href="#重启Finder生效" class="headerlink" title="重启Finder生效"></a>重启Finder生效</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ killall Finder</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3新特性</title>
    <url>/2019/03/07/CSS3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS3【控制样式，网页布局】"><a href="#CSS3【控制样式，网页布局】" class="headerlink" title="CSS3【控制样式，网页布局】"></a>CSS3【控制样式，网页布局】</h1><h2 id="CSS3中新特性样式篇"><a href="#CSS3中新特性样式篇" class="headerlink" title="CSS3中新特性样式篇"></a>CSS3中新特性样式篇</h2><a id="more"></a>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-origin</span>：   规定背景图片的定位区域。</span><br><span class="line">    ☞ <span class="selector-tag">padding-box</span>    背景图像相对内边距定位（默认值）</span><br><span class="line">    ☞ <span class="selector-tag">border-box</span>     背景图像相对边框定位【以边框左上角为参照进行位置设置】</span><br><span class="line">    ☞ <span class="selector-tag">content-box</span>    背景图像相对内容区域定位【以内容区域左上角为参照进行位置设置】</span><br><span class="line"></span><br><span class="line">   备注：</span><br><span class="line">        1. 默认盒子的背景图片是在盒子的内边距左上角对齐设置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-clip</span>：     规定背景的绘制区域。</span><br><span class="line">    ☞ <span class="selector-tag">border-box</span>     背景被裁切到边框盒子位置 【将背景图片在整个容器中显示】</span><br><span class="line">    ☞ <span class="selector-tag">padding-box</span>    背景被裁切到内边距区域【将背景图片在内边距区域（包含内容区域）显示】</span><br><span class="line">    ☞ <span class="selector-tag">content-box</span>    背景被裁切到内容区域【将背景图片在内容区域显示】</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-size</span>：     规定背景图片的尺寸。</span><br><span class="line">    ☞ <span class="selector-tag">cover</span></span><br><span class="line">    ☞ <span class="selector-tag">contain</span></span><br></pre></td></tr></table></figure>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>：      盒子阴影</span><br><span class="line"><span class="selector-tag">border-radius</span>：   边框圆角</span><br><span class="line"><span class="selector-tag">border-image</span>:    边框图片</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">            <span class="comment">/* 设置边框图片 */</span></span><br><span class="line">            <span class="selector-tag">border-image-source</span>: <span class="selector-tag">url</span>("2<span class="selector-class">.png</span>");</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 边框图片裁切 : 不需要带单位*/</span></span><br><span class="line">            <span class="selector-tag">border-image-slice</span>: 20;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 设置边框图片的平铺方式 */</span></span><br><span class="line">            <span class="comment">/* border-image-repeat: stretch; */</span></span><br><span class="line">            <span class="selector-tag">border-image-repeat</span>: <span class="selector-tag">round</span>;</span><br><span class="line">           <span class="comment">/*  border-image-repeat: repeat; */</span></span><br><span class="line"></span><br><span class="line">           <span class="selector-tag">border-image-width</span>: 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">☞<span class="selector-tag">text-shadow</span>： 设置文本阴影</span><br></pre></td></tr></table></figure>
<h2 id="CSS3新特性之选择器篇"><a href="#CSS3新特性之选择器篇" class="headerlink" title="CSS3新特性之选择器篇"></a>CSS3新特性之选择器篇</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">☞ 属性选择器： </span><br><span class="line">        <span class="selector-attr">[属性名=值]</span> &#123;&#125;</span><br><span class="line">        <span class="selector-attr">[属性名]</span> &#123;&#125;       匹配对应的属性即可</span><br><span class="line">        <span class="selector-attr">[属性名^=值]</span> &#123;&#125;    以值开头</span><br><span class="line">        <span class="selector-attr">[属性名*=值]</span> &#123;&#125;    包含</span><br><span class="line">        <span class="selector-attr">[属性名$=值]</span> &#123;&#125;    以值结束</span><br><span class="line">    </span><br><span class="line">☞ 结构伪类选择器：</span><br><span class="line">      <span class="selector-pseudo">:first-child</span> &#123;&#125;     选中父元素中第一个子元素</span><br><span class="line">      <span class="selector-pseudo">:last-child</span> &#123;&#125;      选中父元素中最后一个子元素</span><br><span class="line">      <span class="selector-pseudo">:nth-child(n)</span> &#123;&#125;    选中父元素中正数第<span class="selector-tag">n</span>个子元素</span><br><span class="line">      <span class="selector-pseudo">:nth-last-child(n)</span> &#123;&#125;    选中父元素中倒数第<span class="selector-tag">n</span>个子元素</span><br><span class="line"></span><br><span class="line">      备注；</span><br><span class="line">         <span class="selector-tag">n</span> 的取值大于等于0</span><br><span class="line">         <span class="selector-tag">n</span> 可以设置预定义的值</span><br><span class="line">            <span class="selector-tag">odd</span><span class="selector-attr">[选中奇数位置的元素]</span>  </span><br><span class="line">            <span class="selector-tag">even</span>【选中偶数位置的元素】</span><br><span class="line"></span><br><span class="line">         <span class="selector-tag">n</span> 可以是一个表达式：</span><br><span class="line">             <span class="selector-tag">an</span>+<span class="selector-tag">b</span>的格式</span><br><span class="line"></span><br><span class="line">☞ 其他选择器：</span><br><span class="line">    <span class="selector-pseudo">:target</span>          被锚链接指向的时候会触发该选择器</span><br><span class="line">    <span class="selector-pseudo">::selection</span>      当被鼠标选中的时候的样式</span><br><span class="line">    <span class="selector-pseudo">::first-line</span>     选中第一行</span><br><span class="line">    <span class="selector-pseudo">::first-letter</span>   选中第一个字符</span><br></pre></td></tr></table></figure>
<h2 id="CSS3新特性之颜色渐变"><a href="#CSS3新特性之颜色渐变" class="headerlink" title="CSS3新特性之颜色渐变"></a>CSS3新特性之颜色渐变</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">☞ 线性渐变：</span><br><span class="line">       1. 开始颜色和结束颜色</span><br><span class="line">       2. 渐变的方向</span><br><span class="line">       3. 渐变的范围</span><br><span class="line"></span><br><span class="line">     <span class="selector-tag">background-image</span>:  <span class="selector-tag">linear-gradient</span>(</span><br><span class="line">              <span class="selector-tag">to</span> <span class="selector-tag">right</span>,</span><br><span class="line">              <span class="selector-tag">red</span>,</span><br><span class="line">              <span class="selector-tag">blue</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  备注：</span><br><span class="line">      表示方向：</span><br><span class="line">           1. to + right | top | bottom | left </span><br><span class="line">           2. 通过角度表示一个方向</span><br><span class="line">             0<span class="selector-tag">deg</span> <span class="selector-attr">[从下向上渐变]</span> </span><br><span class="line">             90<span class="selector-tag">deg</span>【从左向右】</span><br><span class="line"></span><br><span class="line">☞ 径向渐变：</span><br><span class="line">         <span class="comment">/* 径向渐变 */</span></span><br><span class="line">          <span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(</span><br><span class="line">               100<span class="selector-tag">px</span> <span class="selector-tag">at</span> <span class="selector-tag">center</span>,</span><br><span class="line">               <span class="selector-tag">red</span>,</span><br><span class="line">               <span class="selector-tag">blue</span></span><br><span class="line">          );</span><br></pre></td></tr></table></figure>
<h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">☞ 位移</span><br><span class="line">     <span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(100<span class="selector-tag">px</span>,100<span class="selector-tag">px</span>);</span><br><span class="line">      </span><br><span class="line">     备注：</span><br><span class="line">         位移是相对元素自身的位置发生位置改变</span><br><span class="line"></span><br><span class="line">☞ 旋转</span><br><span class="line">      <span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(60<span class="selector-tag">deg</span>);</span><br><span class="line">     备注：</span><br><span class="line">         取值为角度</span><br><span class="line">☞ 缩放</span><br><span class="line">      <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(0<span class="selector-class">.5</span>,1);</span><br><span class="line">      备注：</span><br><span class="line">           取值为倍数关系，缩小大于0小于1，放大设置大于1</span><br><span class="line">  </span><br><span class="line">☞ 倾斜</span><br><span class="line">     <span class="selector-tag">transform</span>: <span class="selector-tag">skew</span>(30<span class="selector-tag">deg</span>,30<span class="selector-tag">deg</span>);</span><br><span class="line">     备注：</span><br><span class="line">        第一个值代表沿着<span class="selector-tag">x</span>轴方向倾斜</span><br><span class="line">        第二个值代表沿着<span class="selector-tag">y</span>轴方向倾斜</span><br></pre></td></tr></table></figure>
<h2 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">☞ 位移</span><br><span class="line">  <span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>()  <span class="selector-tag">translateY</span>()   <span class="selector-tag">translateZ</span>()</span><br><span class="line"></span><br><span class="line">☞ 旋转</span><br><span class="line">   <span class="selector-tag">transform</span>: <span class="selector-tag">rotateX</span>(60<span class="selector-tag">deg</span>)  <span class="selector-tag">rotateY</span>(60<span class="selector-tag">deg</span>)  <span class="selector-tag">rotateZ</span>(60<span class="selector-tag">deg</span>);</span><br><span class="line"></span><br><span class="line">☞ 缩放</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">scaleX</span>(0<span class="selector-class">.5</span>)  <span class="selector-tag">scaleY</span>(1)  <span class="selector-tag">scaleZ</span>(1);</span><br><span class="line">☞ 倾斜</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">skewX</span>(30<span class="selector-tag">deg</span>) <span class="selector-tag">skewY</span>();</span><br><span class="line"></span><br><span class="line">☞ <span class="selector-tag">transform-style</span>: <span class="selector-tag">preserve-3d</span>;</span><br><span class="line">   将平面图形转换为立体图形</span><br></pre></td></tr></table></figure>
<h2 id="CSS3新特性之动画篇"><a href="#CSS3新特性之动画篇" class="headerlink" title="CSS3新特性之动画篇"></a>CSS3新特性之动画篇</h2><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/afighter/p/5731293.html</span><br><span class="line"></span><br><span class="line">补间动画</span><br><span class="line"></span><br><span class="line">           <span class="comment">/* 设置哪些属性要参与到过渡动画效果中： all */</span></span><br><span class="line">           <span class="selector-tag">transition-property</span>: <span class="selector-tag">all</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/* 设置过渡执行时间 */</span></span><br><span class="line">           </span><br><span class="line">           <span class="selector-tag">transition-duration</span>: 1<span class="selector-tag">s</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/* 设置过渡延时执行时间 */</span></span><br><span class="line">           <span class="selector-tag">transition-delay</span>: 1<span class="selector-tag">s</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/* 设置过渡的速度类型 */</span></span><br><span class="line"></span><br><span class="line">           <span class="selector-tag">transition-timing-function</span>: <span class="selector-tag">linear</span>;</span><br></pre></td></tr></table></figure>
<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">/* 1定义动画集 */</span></span><br><span class="line">    @<span class="keyword">keyframes</span>  rotate &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 定义开始状态  0%*/</span></span><br><span class="line">        <span class="selector-tag">from</span> &#123;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 结束状态 100%*/</span></span><br><span class="line">        <span class="selector-tag">to</span> &#123;</span><br><span class="line">           <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">     1. 如果设置动画集使用的是百分比，那么记住百分比是相对整个动画执行时间的。</span><br></pre></td></tr></table></figure>
<h2 id="CSS3新特性之网页布局篇"><a href="#CSS3新特性之网页布局篇" class="headerlink" title="CSS3新特性之网页布局篇"></a>CSS3新特性之网页布局篇</h2><h3 id="伸缩布局或者弹性布局【响应式布局】"><a href="#伸缩布局或者弹性布局【响应式布局】" class="headerlink" title="伸缩布局或者弹性布局【响应式布局】"></a>伸缩布局或者弹性布局【响应式布局】</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">☞ 设置父元素为伸缩盒子【直接父元素】</span><br><span class="line">      <span class="selector-tag">display</span>： <span class="selector-tag">flex</span></span><br><span class="line">  </span><br><span class="line">    为什么在伸缩盒子中，子元素会在一行上显示？</span><br><span class="line">           1. 子元素是按照伸缩盒子中主轴方向显示</span><br><span class="line">           2. 只有伸缩盒子才有主轴和侧轴</span><br><span class="line">           3. 主轴： 默认水平从左向右显示</span><br><span class="line">           4。 侧轴： 始终要垂直于主轴</span><br><span class="line"></span><br><span class="line">☞ 设置伸缩盒子主轴方向（<span class="selector-tag">flex-direction</span>）</span><br><span class="line">          <span class="selector-tag">flex-direction</span>: <span class="selector-tag">row</span>; 【默认值】</span><br><span class="line">          <span class="selector-tag">flex-direction</span>: <span class="selector-tag">row-reverse</span>;</span><br><span class="line">          <span class="selector-tag">flex-direction</span>: <span class="selector-tag">column</span>;</span><br><span class="line">          <span class="selector-tag">flex-direction</span>: <span class="selector-tag">column-reverse</span>;</span><br><span class="line">☞ 设置元素在主轴的对齐方式( <span class="selector-tag">justify-content</span>)</span><br><span class="line">      <span class="comment">/* 设置子元素在主轴方向的对齐方式 */</span></span><br><span class="line">          <span class="selector-tag">justify-content</span>: <span class="selector-tag">flex-start</span>;</span><br><span class="line">          <span class="selector-tag">justify-content</span>: <span class="selector-tag">flex-end</span>;</span><br><span class="line">          <span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br><span class="line">          <span class="selector-tag">justify-content</span>: <span class="selector-tag">space-between</span>;</span><br><span class="line">          <span class="selector-tag">justify-content</span>: <span class="selector-tag">space-around</span>;</span><br><span class="line"></span><br><span class="line">☞ 设置元素在侧轴的对齐方式 （<span class="selector-tag">align-items</span>）</span><br><span class="line">          <span class="selector-tag">align-items</span>: <span class="selector-tag">flex-start</span>;</span><br><span class="line">          <span class="selector-tag">align-items</span>: <span class="selector-tag">flex-end</span>;</span><br><span class="line">          <span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* 默认值 */</span></span><br><span class="line">          <span class="selector-tag">align-items</span>: <span class="selector-tag">stretch</span>;</span><br><span class="line"></span><br><span class="line">☞ 设置元素是否换行显示（<span class="selector-tag">flex-wrap</span>）</span><br><span class="line">        1. 在伸缩盒子中所有的元素默认都会在一行上显示</span><br><span class="line">        2. 如果希望换行：</span><br><span class="line">          flex-wrap: wrap | nowrap;</span><br><span class="line"></span><br><span class="line">☞ 设置元素换行后的对齐方式（ <span class="selector-tag">align-content</span>）</span><br><span class="line">          <span class="selector-tag">align-content</span>: <span class="selector-tag">flex-start</span>;</span><br><span class="line">          <span class="selector-tag">align-content</span>: <span class="selector-tag">flex-end</span>;</span><br><span class="line">          <span class="selector-tag">align-content</span>: <span class="selector-tag">center</span>;</span><br><span class="line">          <span class="selector-tag">align-content</span>: <span class="selector-tag">space-around</span>;</span><br><span class="line">          <span class="selector-tag">align-content</span>: <span class="selector-tag">space-between</span>;</span><br><span class="line">          <span class="comment">/* 换行后的默认值 */</span></span><br><span class="line">          <span class="selector-tag">align-content</span>: <span class="selector-tag">stretch</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS中JSON序列化与反序列化</title>
    <url>/2019/03/06/IOS%E4%B8%ADJSON%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><p>序列化： 将数据结构或对象转换成二进制串的过程。<br>反序列化：将在序列化过程中所生成的二进制串转换成数据结构或者对象的过程。</p>
<a id="more"></a>
<h1 id="NSJSONSerialization"><a href="#NSJSONSerialization" class="headerlink" title="NSJSONSerialization"></a>NSJSONSerialization</h1><h2 id="json-gt-oc"><a href="#json-gt-oc" class="headerlink" title="json-&gt;oc"></a>json-&gt;oc</h2><p>一段服务器的json数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>:<span class="string">"hello"</span>,</span><br><span class="line">    <span class="attr">"code"</span>:<span class="number">200</span>,</span><br><span class="line">    <span class="attr">"msg"</span>:<span class="string">"success"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二进制数据转json,方法<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 第一个参数：json的二进制数据</span></span><br><span class="line"><span class="comment">  * 第二个参数：</span></span><br><span class="line"><span class="comment">  * NSJSONReadingMutableContainers = (1UL &lt;&lt; 0),得到OC对象是可变的</span></span><br><span class="line"><span class="comment">  * NSJSONReadingMutableLeaves = (1UL &lt;&lt; 1), 字典和数组中的字符串都是可变的，iOS7以后出现很多问题，一般不会用到</span></span><br><span class="line"><span class="comment">  * NSJSONReadingAllowFragments = (1UL &lt;&lt; 2) 既不是字典也不是数组，则必须使用该枚举值 如果返回数据为@“\"hahahahaha\"”</span></span><br><span class="line"><span class="comment">  * 第三个参数：错误信息</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *dic = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data options:kNilOptions error:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure></p>
<p>举例</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://127.0.0.1:8000/hello/name"</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</span><br><span class="line">    [<span class="built_in">NSURLConnection</span> sendAsynchronousRequest:request queue:[<span class="built_in">NSOperationQueue</span> mainQueue] completionHandler:^(<span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSError</span> * _Nullable connectionError) &#123;</span><br><span class="line">        <span class="keyword">if</span> (connectionError) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, connectionError);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSHTTPURLResponse</span> *res = (<span class="built_in">NSHTTPURLResponse</span> *) response;</span><br><span class="line">        <span class="keyword">if</span> (res.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">//开始解析json</span></span><br><span class="line">            <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">            <span class="keyword">id</span> json = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data options:<span class="built_in">NSJSONReadingMutableContainers</span> error:&amp;error];</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, error);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, json);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"服务器错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<p>输出结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-03-06 17:44:34.480939+0800 JsonDemo[5349:107008] &#123;</span><br><span class="line">    code = 200;</span><br><span class="line">    data = hello;</span><br><span class="line">    msg = success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="oc-gt-json"><a href="#oc-gt-json" class="headerlink" title="oc-&gt;json"></a>oc-&gt;json</h2><p>举例<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注意：并不是所有的OC对象都可以转化为json 例如字符串</span></span><br><span class="line"><span class="comment">     * 顶层必须是NSArray或者NSDictionnary</span></span><br><span class="line"><span class="comment">     * 所有的元素必须是 NSString, NSNumber, NSArray, NSDictionary, or NSNull</span></span><br><span class="line"><span class="comment">     * 字典中所有的key必须是NSStrings类型的</span></span><br><span class="line"><span class="comment">     * NSNumbers 不能是无穷大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 1、提供转化的OC字典</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *dic = @&#123;</span><br><span class="line">                          <span class="string">@"code"</span>:@<span class="number">200</span>,</span><br><span class="line">                          <span class="string">@"data"</span>:[<span class="built_in">NSNull</span> null],</span><br><span class="line">                          <span class="string">@"msg"</span>:<span class="string">@"oh my json"</span></span><br><span class="line">                          &#125;;</span><br><span class="line">    <span class="comment">// 2、判断OC对象是否可以转换为json对象</span></span><br><span class="line">    <span class="built_in">BOOL</span> isVaild = [<span class="built_in">NSJSONSerialization</span> isValidJSONObject:dic];</span><br><span class="line">    <span class="keyword">if</span> (isVaild) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 第一个参数：需要序列化的数据</span></span><br><span class="line"><span class="comment">         * 第二个参数：如果添加就输出排版美观效果 如果不添加按照默认输出</span></span><br><span class="line"><span class="comment">         *        NSJSONWritingPrettyPrinted = (1UL &lt;&lt; 0)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">NSData</span> *data = [<span class="built_in">NSJSONSerialization</span> dataWithJSONObject:dic options:<span class="built_in">NSJSONWritingPrettyPrinted</span> error:<span class="literal">nil</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[[<span class="built_in">NSString</span> alloc] initWithData:data encoding:<span class="built_in">NSUTF8StringEncoding</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"该对象无法转换"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>控制台输出<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-03-06 17:57:27.734633+0800 JsonDemo[6202:131086] &#123;</span><br><span class="line">  &quot;msg&quot; : &quot;oh my json&quot;,</span><br><span class="line">  &quot;data&quot; : null,</span><br><span class="line">  &quot;code&quot; : 200</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="MJExtension"><a href="#MJExtension" class="headerlink" title="MJExtension"></a>MJExtension</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod <span class="string">'MJExtension'</span></span><br></pre></td></tr></table></figure>
<h3 id="手动导入"><a href="#手动导入" class="headerlink" title="手动导入"></a>手动导入</h3><p>github<a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="noopener">链接</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="字典转模型"><a href="#字典转模型" class="headerlink" title="字典转模型"></a>字典转模型</h3><p>模型USER<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">User</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>)<span class="built_in">NSString</span> *name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>)<span class="built_in">NSString</span> *zhiye;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>)<span class="built_in">NSString</span> *money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSDictionary</span> *dict = @&#123;</span><br><span class="line">                           <span class="string">@"name"</span>:<span class="string">@"ycy"</span>,</span><br><span class="line">                           <span class="string">@"zhiye"</span>:<span class="string">@"程序员"</span>,</span><br><span class="line">                           <span class="string">@"money"</span>:<span class="string">@"-4000"</span></span><br><span class="line">                           &#125;;</span><br><span class="line">    User *user = [User mj_objectWithKeyValues:dict];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,user.name);</span><br></pre></td></tr></table></figure>
<h3 id="JSONString转模型"><a href="#JSONString转模型" class="headerlink" title="JSONString转模型"></a>JSONString转模型</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.Define a JSONString</span></span><br><span class="line"><span class="built_in">NSString</span> *jsonString = <span class="string">@"&#123;\"name\":\"Jack\", \"icon\":\"lufy.png\", \"age\":20&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.JSONString -&gt; User</span></span><br><span class="line">User *user = [User mj_objectWithKeyValues:jsonString];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Print user's properties</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"name=%@, icon=%@, age=%d"</span>, user.name, user.icon, user.age);</span><br><span class="line"><span class="comment">// name=Jack, icon=lufy.png, age=20</span></span><br></pre></td></tr></table></figure>
<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>查看官方文档即可<a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="noopener">链接</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS9以上中的ATS问题</title>
    <url>/2019/03/06/IOS9%E4%BB%A5%E4%B8%8A%E4%B8%AD%E7%9A%84ATS%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>WWDC 15 提出的 <code>ATS (App Transport Security)</code> 是 Apple 在推进网络通讯安全的一个重要方式。在 iOS 9 和 OS X 10.11 中，默认情况下非 HTTPS 的网络访问是被禁止的。</p>
<a id="more"></a>
<p>作为参考，这里将有效的 <code>NSAppTransportSecurity</code> 字典结构</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSAppTransportSecurity</span> : Dictionary &#123;</span><br><span class="line">    <span class="built_in">NSAllowsArbitraryLoads</span> : Boolean</span><br><span class="line">    <span class="built_in">NSAllowsArbitraryLoadsForMedia</span> : Boolean</span><br><span class="line">    <span class="built_in">NSAllowsArbitraryLoadsInWebContent</span> : Boolean</span><br><span class="line">    <span class="built_in">NSAllowsLocalNetworking</span> : Boolean</span><br><span class="line">    <span class="built_in">NSExceptionDomains</span> : Dictionary &#123;</span><br><span class="line">        &lt;domain-name-string&gt; : Dictionary &#123;</span><br><span class="line">            <span class="built_in">NSIncludesSubdomains</span> : Boolean</span><br><span class="line">            <span class="built_in">NSExceptionAllowsInsecureHTTPLoads</span> : Boolean</span><br><span class="line">            <span class="built_in">NSExceptionMinimumTLSVersion</span> : String</span><br><span class="line">            <span class="built_in">NSExceptionRequiresForwardSecrecy</span> : Boolean   <span class="comment">// Default value is YES</span></span><br><span class="line">            <span class="built_in">NSRequiresCertificateTransparency</span> : Boolean</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ATS设定的参照表格</p>
<p><img src="ats.png" alt></p>
<p>如果网站内没有启用https，如何关闭，在<code>info.plist</code>文件中加入<br>source code下<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAllowsArbitraryLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>plist下<br>添加<code>NSAppTransportSecurity</code>字典-&gt;并添加键值对<code>NSAllowsArbitraryLoads</code>=<code>YES</code>来禁用ATS</p>
<h1 id="参照链接"><a href="#参照链接" class="headerlink" title="参照链接"></a>参照链接</h1><p><a href="https://onevcat.com/2016/06/ios-10-ats/" target="_blank" rel="noopener">https://onevcat.com/2016/06/ios-10-ats/</a></p>
<p><a href="https://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http" target="_blank" rel="noopener">https://stackoverflow.com/questions/31254725/transport-security-has-blocked-a-cleartext-http</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS模拟器截图/录制屏幕</title>
    <url>/2019/03/06/IOS%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%88%AA%E5%9B%BE-%E5%BD%95%E5%88%B6%E5%B1%8F%E5%B9%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><a id="more"></a>
<p>iOS 的模拟器截图，按 <code>Command + S</code>或者通过 <code>File</code> 菜单都可以完成。</p>
<h1 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h1><p>终端下运行该命令，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xcrun simctl io booted recordVideo &lt;filename&gt;.&lt;extension&gt;</span><br></pre></td></tr></table></figure>
<p>运行命令后没有报错则已经开始录制屏幕了，如果想要停止则直接<code>Ctrl + C</code> 停止结束命令即可。默认视频会保存在终端的当前目录下，当然你也可以指定当前目录。</p>
<h2 id="xcrun-unable-to-find-simctl解决方法"><a href="#xcrun-unable-to-find-simctl解决方法" class="headerlink" title="xcrun unable to find simctl解决方法"></a>xcrun unable to find simctl解决方法</h2><p>如果出现命令无法执行并报出这个错误<br><code>xcrun: error: unable to find utility &quot;simctl&quot;, not a developer tool or in PATH</code></p>
<p>修改一下打开<code>Xcode</code> &gt; <code>Preferences</code> &gt; <code>Locations</code> 更改一下 <code>Command Line Tools</code>选项就可以了,如图</p>
<p><img src="setting.png" alt></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>Android P/9.0 http网络请求异常问题</title>
    <url>/2019/03/06/Android-P-9-0-http%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>使用Android P系统时，app使用http请求出现异常。</em></p>
<a id="more"></a>
<h1 id="异常原因"><a href="#异常原因" class="headerlink" title="异常原因"></a>异常原因</h1><blockquote>
<p>Google表示，为保证用户数据和设备的安全，针对下一代 Android 系统(Android P)<br>的应用程序，将要求默认使用加密连接，这意味着 Android P 将禁止 App<br>使用所有未加密的连接，因此运行 Android P<br>系统的安卓设备无论是接收或者发送流量，未来都不能明码传输，需要使用下一代(Transport Layer<br>Security)传输层安全协议，而 Android Nougat 和 Oreo 则不受影响。</p>
</blockquote>
<p>因此在<code>Android P</code>中使用<code>HttpUrlConnection</code>时会报出次异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">W/System.err: java.io.IOException: Cleartext HTTP traffic to **** not permitted</span><br></pre></td></tr></table></figure>
<p>而使用OKHttp时，同样也会报出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.net.UnknownServiceException: CLEARTEXT communication ** not permitted by network security policy</span><br></pre></td></tr></table></figure>
<p>在Android P系统的设备上，如果应用使用的是非加密的明文流量的http网络请求，则会导致该应用无法进行网络请求，https则不会受影响，同样地，如果应用嵌套了webview，webview也只能使用https请求。<br>有人认为 Android P 上所有的 App 都需要使用 TLS 加密会降低上网体验，事实上这是一种误解，至于 App 对于少数旧服务器的连接如果非要使用明码传输，开发者需要更改 App 的网络安全配置以允许此类连接。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul>
<li><p>APP内所有请求更改为Https</p>
</li>
<li><p>将targetSdkVersion改为27以下</p>
</li>
<li><p>开启/允许http请求</p>
<p><strong>方法一</strong></p>
<p>在<code>res</code>下新增一个<code>xml</code>目录，然后创建一个名为：<code>network_security_config.xml</code> 文件（名字自定） ，内容如下，大概意思就是允许开启http请求</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后在<code>AndroidManifest.xml</code>文件中的Application标签下增加一行属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:networkSecurityConfig</span>=<span class="string">"@xml/network_security_config"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>方法二</strong></p>
<p>在清单文件中加入 <strong>android:usesCleartextTraffic=”true”</strong> 属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        </span></span><br><span class="line"><span class="tag">        <span class="attr">android:usesCleartextTraffic</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>更多参数修改：<a href="https://developer.android.com/training/articles/security-config#trust-anchors" target="_blank" rel="noopener">https://developer.android.com/training/articles/security-config#trust-anchors</a></p>
</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.jianshu.com/p/57047a84e559" target="_blank" rel="noopener">https://www.jianshu.com/p/57047a84e559</a></p>
<p><a href="https://android-developers.googleblog.com/2018/04/protecting-users-with-tls-by-default-in.html" target="_blank" rel="noopener">https://android-developers.googleblog.com/2018/04/protecting-users-with-tls-by-default-in.html</a> </p>
<p><a href="https://android-developers.googleblog.com/2018/04/dns-over-tls-support-in-android-p.html" target="_blank" rel="noopener">https://android-developers.googleblog.com/2018/04/dns-over-tls-support-in-android-p.html</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Html5新特性</title>
    <url>/2019/03/04/Html5%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="01-HTML5基础"><a href="#01-HTML5基础" class="headerlink" title="01-HTML5基础"></a>01-HTML5基础</h1><h2 id="了解HTML5"><a href="#了解HTML5" class="headerlink" title="了解HTML5"></a>了解HTML5</h2><a id="more"></a>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">☞HTML5属于上一代HTML的新迭代语言，设计HTML5最主要的目的是为了在移动设备上支持多媒体！！！</span><br><span class="line">  例如： video 标签和 audio 及 canvas 标记</span><br><span class="line"></span><br><span class="line">☞ 新特性：</span><br><span class="line">     1. 取消了过时的显示效果标记  &lt;font&gt;&lt;/font&gt; 和 &lt;center&gt;&lt;/center&gt; ...</span><br><span class="line">     2. 新表单元素引入</span><br><span class="line">     3. 新语义标签的引入  </span><br><span class="line">     4. canvas标签（图形设计）</span><br><span class="line">     5. 本地数据库（本地存储）</span><br><span class="line">     6. 一些API</span><br><span class="line">☞ 好处：</span><br><span class="line">     1. 跨平台</span><br><span class="line">         例如：比如你开发了一款HTML5的游戏，你可以很轻易地移植到UC的开放平台、Opera的游戏中心、Facebook应用平台，甚至可以通过封装的技术发放到App Store或Google Play上，所以它的跨平台性非常强大，这也是大多数人对HTML5有兴趣的主要原因。</span><br><span class="line"></span><br><span class="line">☞ 缺点：</span><br><span class="line">     1. pc端浏览器支持不是特别友好，造成用户体验不佳</span><br></pre></td></tr></table></figure>
<h2 id="新语义标签"><a href="#新语义标签" class="headerlink" title="新语义标签"></a>新语义标签</h2><h3 id="网页布局结构标签及兼容处理"><a href="#网页布局结构标签及兼容处理" class="headerlink" title="网页布局结构标签及兼容处理"></a>网页布局结构标签及兼容处理</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">....</span><br><span class="line">http://www.w3school.com.cn/html/html5_semantic_elements.asp</span><br></pre></td></tr></table></figure>
<h3 id="多媒体标签及属性介绍"><a href="#多媒体标签及属性介绍" class="headerlink" title="多媒体标签及属性介绍"></a>多媒体标签及属性介绍</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">☞ <span class="tag">&lt;<span class="name">video</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span> 视频</span><br><span class="line">     属性：controls 显示控制栏</span><br><span class="line">     属性：autoplay 自动播放  </span><br><span class="line">    属性：loop  设置循环播放</span><br><span class="line">☞ <span class="tag">&lt;<span class="name">audio</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span>  音频</span><br><span class="line">     属性：controls 显示控制栏</span><br><span class="line">     属性：autoplay 自动播放  </span><br><span class="line">    属性：loop  设置循环播放</span><br><span class="line">☞ video标签支持的格式    http://www.w3school.com.cn/html5/html_5_video.asp</span><br><span class="line">☞ 多媒体标签在网页中的兼容效果方式</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"code/多媒体标签/trailer.mp4"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"trailer.ogg"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"trailer.WebM"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="新表单元素及属性"><a href="#新表单元素及属性" class="headerlink" title="新表单元素及属性"></a>新表单元素及属性</h2><h3 id="智能表单控件"><a href="#智能表单控件" class="headerlink" title="智能表单控件"></a>智能表单控件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line"> email: 输入合法的邮箱地址</span><br><span class="line"> url：  输入合法的网址</span><br><span class="line"> number： 只能输入数字</span><br><span class="line"> range： 滑块</span><br><span class="line"> color： 拾色器</span><br><span class="line"> date： 显示日期</span><br><span class="line"> month： 显示月份</span><br><span class="line"> week ： 显示第几周</span><br><span class="line"> time：  显示时间</span><br></pre></td></tr></table></figure>
<h3 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> ◆form属性：   </span><br><span class="line">    autocomplete=on | off          自动完成</span><br><span class="line">    novalidate=true | false        是否关闭校验</span><br><span class="line"></span><br><span class="line">  ◆ input属性：</span><br><span class="line">    *autofocus  ： 自动获取焦点</span><br><span class="line">    form：       </span><br><span class="line">    list：</span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">list</span>=<span class="string">"abc"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"abc"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span>12312<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span>12312<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span>12312<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span>12312<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">    multiple：    实现多选效果</span><br><span class="line">    *placeholder ： 占位符  （提示信息）</span><br><span class="line">    *required：    必填项</span><br><span class="line"></span><br><span class="line">作业：</span><br><span class="line">    ◆自己解决required自定义提示信息</span><br><span class="line">    ◆预习和复习</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">留下的疑问：</span><br><span class="line">    ◆ 如何修改表单控件中的默认提示信息 </span><br><span class="line">         1. 表单验证触发oninvalid事件</span><br><span class="line">         2. 通过setCustomValidity方法设置修改内容</span><br></pre></td></tr></table></figure>
<h2 id="HTMl5中的API"><a href="#HTMl5中的API" class="headerlink" title="HTMl5中的API"></a>HTMl5中的API</h2><h3 id="获取页面元素及类名操作和自定义属性"><a href="#获取页面元素及类名操作和自定义属性" class="headerlink" title="获取页面元素及类名操作和自定义属性"></a>获取页面元素及类名操作和自定义属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">☞ <span class="built_in">document</span>.querySelector(<span class="string">"选择器"</span>)；</span><br><span class="line">   备注：</span><br><span class="line">      选择器： 可以是css中的任意一种选择器</span><br><span class="line">       通过该选择器只能选中第一个元素。</span><br><span class="line"></span><br><span class="line">☞ <span class="built_in">document</span>.querySelectorAll(<span class="string">"选择器"</span>);</span><br><span class="line">     备注：</span><br><span class="line">        与<span class="built_in">document</span>.querySelector区别： querySelectorAll 可以选中所有符合选择器规则的元素，返回的是一个列表。querySelector返回的只是单独的一个元素</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">☞ Dom.classList.add(<span class="string">"类名"</span>): 给当前dom元素添加类样式</span><br><span class="line"></span><br><span class="line">☞ Dom.classList.remove(<span class="string">"类名"</span>); 给当前dom元素移除类样式</span><br><span class="line"></span><br><span class="line">☞ classList.contains(<span class="string">"类名"</span>); 检测是否包含类样式</span><br><span class="line"></span><br><span class="line">☞ classList.toggle(<span class="string">"active"</span>);  切换类样式（有就删除，没有就添加）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">☞ 自定义属性           （小案例分析体验自定义属性）</span><br><span class="line"></span><br><span class="line">   data-自定义属性名</span><br><span class="line">   备注：</span><br><span class="line">       在标签中，以data-自定义名称  </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   <span class="number">1.</span> 获取自定义属性   Dom.dataset   返回的是一个对象</span><br><span class="line">      Dom.dataset.属性名  或者  Dom.dataset[属性名]</span><br><span class="line">     </span><br><span class="line">      注意： </span><br><span class="line">              属性名是不包含data-</span><br><span class="line"></span><br><span class="line">   <span class="number">2.</span> 设置自定义属性</span><br><span class="line">      Dom.dataset.自定义属性名=值  或者  Dom.dataset[自定义属性名]=值；</span><br></pre></td></tr></table></figure>
<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> ☞  FileReader</span><br><span class="line">     FileReader             接口有3个用来读取文件方法返回结果在result中</span><br><span class="line">     readAsBinaryString    ---将文件读取为二进制编码</span><br><span class="line">     readAsText           ---将文件读取为文本</span><br><span class="line">     readAsDataURL        ---将文件读取为DataURL</span><br><span class="line"></span><br><span class="line">☞  FileReader 提供的事件模型</span><br><span class="line">    onabort        中断时触发</span><br><span class="line">    onerror        出错时触发</span><br><span class="line">    onload     文件读取成功完成时触发</span><br><span class="line">    onloadend  读取完成触发，无论成功或失败</span><br><span class="line">    onloadstart    读取开始时触发</span><br><span class="line">    onprogress 读取中</span><br><span class="line"></span><br><span class="line">☞ 分析读取图片小案例</span><br></pre></td></tr></table></figure>
<h3 id="获取网络状态"><a href="#获取网络状态" class="headerlink" title="获取网络状态"></a>获取网络状态</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">☞ 获取当前网络状态</span><br><span class="line">       window.navigator.onLine 返回一个布尔值</span><br><span class="line"></span><br><span class="line">☞ 网络状态事件</span><br><span class="line">       1. window.ononline</span><br><span class="line">       2. window.onoffline</span><br></pre></td></tr></table></figure>
<h3 id="获取地理定位"><a href="#获取地理定位" class="headerlink" title="获取地理定位"></a>获取地理定位</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☞  获取一次当前位置</span><br><span class="line">    <span class="built_in">window</span>.navigator.geolocation.getCurrentPosition(success,error);</span><br><span class="line"></span><br><span class="line">     <span class="number">1.</span> coords.latitude   维度</span><br><span class="line">     <span class="number">2.</span> coords.longitude   经度</span><br><span class="line"></span><br><span class="line">☞  实时获取当前位置</span><br><span class="line">    <span class="built_in">window</span>.navigator.geolocation.watchPosition(success,error);</span><br><span class="line"></span><br><span class="line">☞ 分析地理定位小案例</span><br></pre></td></tr></table></figure>
<h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">☞发展：</span><br><span class="line">   随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，传统方式我们以<span class="built_in">document</span>.cookie来进行存储的，但是由于其存储大小只有<span class="number">4</span>k左右，并且解析也相当的复杂，给开发带来诸多不便，HTML5规范则提出解决方案，使用sessionStorage和localStorage存储数据。 </span><br><span class="line"></span><br><span class="line"> ☞  localStorage：</span><br><span class="line">     <span class="number">1.</span> 永久生效</span><br><span class="line">     <span class="number">2.</span> 多窗口共享</span><br><span class="line">     <span class="number">3.</span> 容量大约为<span class="number">20</span>M</span><br><span class="line">     </span><br><span class="line">     ◆<span class="built_in">window</span>.localStorage.setItem(key,value)  设置存储内容</span><br><span class="line">     ◆<span class="built_in">window</span>.localStorage.getItem(key)        获取内容</span><br><span class="line">     ◆<span class="built_in">window</span>.localStorage.removeItem(key)     删除内容</span><br><span class="line">     ◆<span class="built_in">window</span>.localStorage.clear()            清空内容</span><br><span class="line">     </span><br><span class="line"> ☞ sessionStorage：</span><br><span class="line">       <span class="number">1.</span> 生命周期为关闭当前浏览器窗口</span><br><span class="line">        <span class="number">2.</span> 可以在同一个窗口下访问</span><br><span class="line">        <span class="number">3.</span> 数据大小为<span class="number">5</span>M左右</span><br><span class="line">        </span><br><span class="line">      ◆<span class="built_in">window</span>.sessionStorage.setItem(key,value)</span><br><span class="line">     ◆<span class="built_in">window</span>.sessionStorage.getItem(key)</span><br><span class="line">     ◆<span class="built_in">window</span>.sessionStorage.removeItem(key)</span><br><span class="line">     ◆<span class="built_in">window</span>.sessionStorage.clear()</span><br></pre></td></tr></table></figure>
<h3 id="操作多媒体"><a href="#操作多媒体" class="headerlink" title="操作多媒体"></a>操作多媒体</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://www.w3school.com.cn/html5/html5_ref_audio_video_dom.asp</span><br><span class="line"></span><br><span class="line">作业：</span><br><span class="line">     完成一个在线音乐播放器或者视频播放器</span><br></pre></td></tr></table></figure>
<h2 id="Canvas画布"><a href="#Canvas画布" class="headerlink" title="Canvas画布"></a>Canvas画布</h2><h3 id="绘图工具"><a href="#绘图工具" class="headerlink" title="绘图工具"></a>绘图工具</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">☞ 介绍canvas画布</span><br><span class="line">☞ 设置画布大小： 使用属性方式设置</span><br><span class="line">☞ 解决画布重绘问题</span><br><span class="line">     <span class="number">1.</span> 设置一次描边</span><br><span class="line">     <span class="number">2.</span> 开启新的图层</span><br></pre></td></tr></table></figure>
<h3 id="绘图方法"><a href="#绘图方法" class="headerlink" title="绘图方法"></a>绘图方法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ctx.moveTo(x,y)    落笔</span><br><span class="line">ctx.lineTo(x,y)    连线</span><br><span class="line">ctx.stroke()       描边</span><br><span class="line"></span><br><span class="line">ctx.beginPath()；   开启新的图层</span><br><span class="line"></span><br><span class="line">演示： strokeStyle="值"</span><br><span class="line">线宽： linewidth="值"   备注：不需要带单位</span><br><span class="line"></span><br><span class="line">线连接方式：   lineJoin: round | bevel | miter (默认)</span><br><span class="line"></span><br><span class="line">线帽（线两端的结束方式）：  lineCap: butt(默认值) | round | square </span><br><span class="line"></span><br><span class="line">闭合路径： ctx.closePath()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--绘制一条直线演示代码</span><br><span class="line"></span><br><span class="line">--作业：</span><br><span class="line">       1. 从200,100的位置绘制宽为200高为150的矩形</span><br><span class="line">        2. 准备一个600*400的画布，三等分这个画布，分别绘制正方形。直角三角形，梯形</span><br></pre></td></tr></table></figure>
<h3 id="渐变方案"><a href="#渐变方案" class="headerlink" title="渐变方案"></a>渐变方案</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">☞ 线性渐变</span><br><span class="line">   var grd=ctx.createLinearGradient(x0,y0,x1,y1);</span><br><span class="line">        x0--&gt;渐变开始的x坐标</span><br><span class="line">        y0--&gt;渐变开始的y坐标</span><br><span class="line">        x1--&gt;渐变结束的x坐标</span><br><span class="line">        y1--&gt;渐变结束的y坐标</span><br><span class="line">        </span><br><span class="line">    grd.addColorStop(0,&quot;black&quot;);      设置渐变的开始颜色</span><br><span class="line">    grd.addColorStop(0.1,&quot;yellow&quot;);   设置渐变的中间颜色</span><br><span class="line">    grd.addColorStop(1,&quot;red&quot;);        设置渐变的结束颜色</span><br><span class="line"></span><br><span class="line">    ctx.strokeStyle=grd;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    </span><br><span class="line">    备注：</span><br><span class="line">       addColorStop(offse,color);</span><br><span class="line">       中渐变的开始位置和结束位置介于0-1之间，0代表开始，1代表结束。中间可以设置任何小数</span><br><span class="line">       </span><br><span class="line">☞ 径向渐变</span><br><span class="line"></span><br><span class="line">          ctx.createradialGradient(x0,y0,r0,x1,y1,r1);</span><br><span class="line"></span><br><span class="line">          (x0,y0)：渐变的开始圆的 x,y 坐标</span><br><span class="line"></span><br><span class="line">          r0：开始圆的半径</span><br><span class="line"></span><br><span class="line">          (x1,y1)：渐变的结束圆的 x,y 坐标</span><br><span class="line"></span><br><span class="line">          r1：结束圆的半径</span><br></pre></td></tr></table></figure>
<h3 id="填充效果"><a href="#填充效果" class="headerlink" title="填充效果"></a>填充效果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctx.fill();         设置填充效果</span><br><span class="line">ctx.fillstyle=&quot;值&quot;; 设置填充颜色</span><br></pre></td></tr></table></figure>
<h3 id="非零环绕原则"><a href="#非零环绕原则" class="headerlink" title="非零环绕原则"></a>非零环绕原则</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">☞ 绘制一个如下图形</span><br></pre></td></tr></table></figure>
<p><img src="assets/1526470782861.png" alt="52647078286"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">☞ 非零环绕原则：</span><br><span class="line">     1. 任意找一点，越简单越好</span><br><span class="line">     2. 以点为圆心，绘制一条射线，越简单越好（相交的边越少越好）</span><br><span class="line">     3. 以射线为半径顺时针旋转，相交的边同向记为+1，反方向记为-1，如果相加的区域等于0，则不填充。</span><br><span class="line">     4. 非零区域填充</span><br><span class="line">     </span><br><span class="line">☞ 非零环绕原则案例：</span><br></pre></td></tr></table></figure>
<h3 id="绘制虚线"><a href="#绘制虚线" class="headerlink" title="绘制虚线"></a>绘制虚线</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">原理：</span><br><span class="line"></span><br><span class="line"> 设置虚线其实就是设置实线与空白部分直接的距离,利用数组描述其中的关系</span><br><span class="line"></span><br><span class="line"> 例如： [<span class="number">10</span>,<span class="number">10</span>]  实线部分<span class="number">10</span>px 空白部分<span class="number">10</span>px</span><br><span class="line"></span><br><span class="line"> 例如： [<span class="number">10</span>,<span class="number">5</span>]  实线部分<span class="number">10</span>px 空白部分<span class="number">5</span>px</span><br><span class="line"></span><br><span class="line"> 例如： [<span class="number">10</span>,<span class="number">5</span>,<span class="number">20</span>]  实线部分<span class="number">10</span>px  空白<span class="number">5</span>px  实线<span class="number">20</span>px  空白部分<span class="number">10</span>px 实线<span class="number">5</span>px 空白<span class="number">20</span>px....</span><br><span class="line"></span><br><span class="line">绘制：</span><br><span class="line"> ctx.setLineDash(数组);</span><br><span class="line"> ctx.stroke();</span><br><span class="line"> </span><br><span class="line"> 例如：</span><br><span class="line">     ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">     ctx.lineTo(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">     ctx.setLineDash([<span class="number">2</span>,<span class="number">4</span>]);</span><br><span class="line">     ctx.stroke();</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">    如果要将虚线改为实线，只要将数组改为空数组即可。</span><br></pre></td></tr></table></figure>
<h3 id="绘制动画效果"><a href="#绘制动画效果" class="headerlink" title="绘制动画效果"></a>绘制动画效果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">☞ 绘制一个描边矩形： content.strokeRect(x,y,width,height) </span><br><span class="line">☞ 绘制一个填充矩形： content.fillRect(x,y,width,height)  </span><br><span class="line">☞ 清除：           content.clearRect(x,y,width,height)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">☞ 实现动画效果： </span><br><span class="line">       1. 先清屏</span><br><span class="line">       2. 绘制图形</span><br><span class="line">       3. 处理变量</span><br></pre></td></tr></table></figure>
<h3 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">☞ 绘制填充文本</span><br><span class="line">    content.fillText(文本的内容,x,y)</span><br><span class="line"></span><br><span class="line">☞ 绘制镂空文本</span><br><span class="line">     content.strokeText();</span><br><span class="line">     </span><br><span class="line">☞ 设置文字大小：</span><br><span class="line">     content.font=&quot;20px 微软雅黑&quot;</span><br><span class="line">     备注： 该属性设置文字大小，必须按照cssfont属性的方式设置</span><br><span class="line">     </span><br><span class="line">☞ 文字水平对齐方式【文字在圆心点位置的对齐方式】</span><br><span class="line">      content.textalign=&quot;left | right | center&quot;</span><br><span class="line"></span><br><span class="line">☞文字垂直对齐方式</span><br><span class="line">       content.textBaseline=&quot;top | middle | bottom | alphabetic(默认)&quot;</span><br><span class="line"></span><br><span class="line">☞文字阴影效果</span><br><span class="line">       ctx.shadowColor=&quot;red&quot;;  设置文字阴影的颜色</span><br><span class="line"></span><br><span class="line">       ctx.ShadowOffsetX=值;   设置文字阴影的水平偏移量</span><br><span class="line"></span><br><span class="line">       ctx.shadowOffsetY=值;   设置文字阴影的垂直偏移量</span><br><span class="line"></span><br><span class="line">       ctx.shadowBlur=值;      设置文字阴影的模糊度</span><br></pre></td></tr></table></figure>
<h3 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">☞    </span><br><span class="line">    //将图片绘制到画布的指定位置</span><br><span class="line">   content.drawImage(图片对象,x,y);</span><br><span class="line"></span><br><span class="line">☞ </span><br><span class="line">   //将图片绘制到指定区域大小的位置  x,y指的是矩形区域的位置，width和height指的是矩形区域的大小</span><br><span class="line">   content.drawImage(图片对象,x,y,width,height);</span><br><span class="line">   </span><br><span class="line">☞ </span><br><span class="line">   //将图片的指定区域绘制到指定矩形区域内</span><br><span class="line">   content.drawImage(图片对象,sx,sy,swidth,sheight,dx,dy,dwidth,dheight);</span><br><span class="line">   </span><br><span class="line">   sx,sy 指的是要从图片哪块区域开始绘制，swidth，sheight 是值 截取图片区域的大小</span><br><span class="line">   dx,dy 是指矩形区域的位置，dwidth,dheight是值矩形区域的大小</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"> ☞ </span><br><span class="line">    解决图片绘制到某一个区域的按原比例缩放绘制：</span><br><span class="line">      绘制宽：绘制高==原始宽：原始高</span><br></pre></td></tr></table></figure>
<h3 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">☞</span><br><span class="line">  content.arc(x,y,radius,startradian,endradian[,direct]);</span><br><span class="line">  </span><br><span class="line">         x,y    圆心的坐标</span><br><span class="line"></span><br><span class="line">          radius 半径</span><br><span class="line"></span><br><span class="line">          startradian   开始弧度</span><br><span class="line"></span><br><span class="line">          endradian     结束弧度</span><br><span class="line">     </span><br><span class="line">          direct        方向（默认顺时针 false）   true 代表逆时针</span><br><span class="line">          </span><br><span class="line">☞ 0度角在哪？</span><br><span class="line">       以圆心为中心向右为0角 顺时针为正，逆时针为负</span><br><span class="line">          </span><br><span class="line">☞ 备注：</span><br><span class="line">     角度 和 弧度的关系： 角度:弧度= 180:pi</span><br><span class="line">     </span><br><span class="line">      特殊值</span><br><span class="line"></span><br><span class="line">        0度 = 0弧度</span><br><span class="line"></span><br><span class="line">        30度 = π/6   (180度的六分之一)</span><br><span class="line"></span><br><span class="line">        45度 = π/4   </span><br><span class="line"></span><br><span class="line">        60度 = π/3</span><br><span class="line"></span><br><span class="line">        90度 = π/2</span><br><span class="line"></span><br><span class="line">        180度 = π</span><br><span class="line"></span><br><span class="line">        360度 = 2π</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"> ☞ 绘制圆上任意点：  </span><br><span class="line">     公式：</span><br><span class="line">        x=ox+r*cos( 弧度 )</span><br><span class="line"></span><br><span class="line">        y=oy+r*sin( 弧度 )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      ox: 圆心的横坐标</span><br><span class="line"></span><br><span class="line">      oy: 圆心的纵坐标</span><br><span class="line"></span><br><span class="line">      r： 圆的半径</span><br></pre></td></tr></table></figure>
<h3 id="平移【坐标系圆点的平移】"><a href="#平移【坐标系圆点的平移】" class="headerlink" title="平移【坐标系圆点的平移】"></a>平移【坐标系圆点的平移】</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctx.translate(x,y);</span><br><span class="line"></span><br><span class="line">   特点：</span><br><span class="line">      通过该方法可以将原点的位置进行重新设置。</span><br><span class="line"></span><br><span class="line">   注意：</span><br><span class="line">       1. translate(x,y) 中不能设置一个值</span><br><span class="line"></span><br><span class="line">       2. 与moveTo(x,y) 的区别：</span><br><span class="line"></span><br><span class="line">            moveTo(x,y) 指的是将画笔的落笔点的位置改变，而坐标系中的原点位置并没有发生改变</span><br><span class="line"></span><br><span class="line">            translate(x,y) 是将坐标系中的原点位置发生改变</span><br></pre></td></tr></table></figure>
<h3 id="旋转【坐标系旋转】"><a href="#旋转【坐标系旋转】" class="headerlink" title="旋转【坐标系旋转】"></a>旋转【坐标系旋转】</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctx.rotate(弧度)</span><br></pre></td></tr></table></figure>
<h3 id="伸缩"><a href="#伸缩" class="headerlink" title="伸缩"></a>伸缩</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctx.scale(x,y)</span><br><span class="line"></span><br><span class="line">  备注：</span><br><span class="line">      沿着x轴和y轴缩放</span><br><span class="line"></span><br><span class="line">      x,y 为倍数  例如： 0.5  1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS之自动布局AutoLayout</title>
    <url>/2019/03/04/IOS%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%B8%83%E5%B1%80AutoLayout/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AutoLayout自动布局介绍"><a href="#AutoLayout自动布局介绍" class="headerlink" title="AutoLayout自动布局介绍"></a>AutoLayout自动布局介绍</h1><p>UI布局对于iOS开发者来说并不陌生，在iOS6之前，大家都是通过UI控件的Frame属性和Autoresizing Mask来进行UI布局的。AutoLayout则是苹果公司在iOS6推出的一种基于约束的，描述性的布局系统。自从AutoLayout问世以来，逐步得到了iOS开发者们的青睐，尤其是iPhone6机型尺寸的出现。</p>
<a id="more"></a>
<p>AutoLayout占据UI布局的主要领导位置依赖于它的特殊性：</p>
<ul>
<li>基于约束：和以往定义frame的位置和尺寸不同，AutoLayout的位置确定是以所谓相对位置的约束来定义的，比如x坐标为superView的中心，y坐标为屏幕底部上方10像素等</li>
<li>描述性： 约束的定义和各个view的关系使用接近自然语言或者可视化语言（稍后会提到）的方法来进行描述</li>
<li>布局系统：即字面意思，用来负责界面的各个元素的位置。</li>
</ul>
<h1 id="AutoLayout使用原理"><a href="#AutoLayout使用原理" class="headerlink" title="AutoLayout使用原理"></a>AutoLayout使用原理</h1><h2 id="创建约束"><a href="#创建约束" class="headerlink" title="创建约束"></a>创建约束</h2><p>IOS6中新加入了一个类，<code>NSLayoutConstraint</code>,它的约束满足一个公式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">item1.attribute = multiplier ⨉ item2.attribute + constant</span><br></pre></td></tr></table></figure>
<p>相应公式的代码为<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//view_1(红色)top 距离self.view的top</span></span><br><span class="line"><span class="built_in">NSLayoutConstraint</span> *view_1TopToSuperViewTop = [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:view_1</span><br><span class="line">                                  attribute:<span class="built_in">NSLayoutAttributeTop</span></span><br><span class="line">                                  relatedBy:<span class="built_in">NSLayoutRelationEqual</span></span><br><span class="line">                                  toItem:<span class="keyword">self</span>.view</span><br><span class="line">                                  attribute:<span class="built_in">NSLayoutAttributeTop</span></span><br><span class="line">                                  multiplier:<span class="number">1</span></span><br><span class="line">                                  constant:<span class="number">30</span>];</span><br></pre></td></tr></table></figure></p>
<p>这里对应的约束是“view_1的顶部（y）＝ self.view的顶部(y)*1 + 30”。</p>
<h2 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h2><p>在创建约束后，需要将其添加到作用的view上。UIView添加约束的实例方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)addConstraint:(<span class="built_in">NSLayoutConstraint</span> *)constraint <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</span><br><span class="line">- (<span class="keyword">void</span>)addConstraints:(<span class="built_in">NSArray</span>&lt;__kindof <span class="built_in">NSLayoutConstraint</span> *&gt; *)constraints <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</span><br></pre></td></tr></table></figure>
<p>UIView中的一个属性<code>translatesAutoresizingMaskIntoConstraints</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果你定义的view想用autolayout，就将</span></span><br><span class="line">translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</span><br><span class="line"><span class="comment">//如果你使用的不是autolayout，就将</span></span><br><span class="line">translatesAutoresizingMaskIntoConstraints = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure>
<p>约束的属性</p>
<table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">autolayout 对应属性</th>
<th style="text-align:right">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td style="text-align:center">NSLayoutAttributeLeft</td>
<td style="text-align:right">左边框</td>
</tr>
<tr>
<td>top</td>
<td style="text-align:center">NSLayoutAttributeTop</td>
<td style="text-align:right">上边框</td>
</tr>
<tr>
<td>right</td>
<td style="text-align:center">NSLayoutAttributeRight</td>
<td style="text-align:right">右边框</td>
</tr>
<tr>
<td>bottom</td>
<td style="text-align:center">NSLayoutAttributeBottom</td>
<td style="text-align:right">下边框</td>
</tr>
<tr>
<td>centerX</td>
<td style="text-align:center">NSLayoutAttributeCenterX</td>
<td style="text-align:right">center的X坐标</td>
</tr>
<tr>
<td>centerY</td>
<td style="text-align:center">NSLayoutAttributeCenterY</td>
<td style="text-align:right">center的Y坐标</td>
</tr>
<tr>
<td>width</td>
<td style="text-align:center">NSLayoutAttributeWidth</td>
<td style="text-align:right">宽度</td>
</tr>
<tr>
<td>height</td>
<td style="text-align:center">NSLayoutAttributeHeight</td>
<td style="text-align:right">高度</td>
</tr>
<tr>
<td>leading</td>
<td style="text-align:center">NSLayoutAttributeLeading</td>
<td style="text-align:right">正常情况下等同于left</td>
</tr>
<tr>
<td>trailing</td>
<td style="text-align:center">NSLayoutAttributeTrailing</td>
<td style="text-align:right">正常情况下等同于right</td>
</tr>
<tr>
<td>baseline</td>
<td style="text-align:center">NSLayoutAttributeBaseline</td>
<td style="text-align:right">对齐基线</td>
</tr>
<tr>
<td>leftMargin</td>
<td style="text-align:center">NSLayoutAttributeLeftMargin</td>
<td style="text-align:right">左边的Margin</td>
</tr>
<tr>
<td>rightMargin</td>
<td style="text-align:center">NSLayoutAttributeRightMargin</td>
<td style="text-align:right">右边的Margin</td>
</tr>
<tr>
<td>topMargin</td>
<td style="text-align:center">NSLayoutAttributeTopMargin</td>
<td style="text-align:right">顶部的Margin</td>
</tr>
<tr>
<td>bottomMargin</td>
<td style="text-align:center">NSLayoutAttributeBottomMargin</td>
<td style="text-align:right">底部的Margin</td>
</tr>
<tr>
<td>leadingMargin</td>
<td style="text-align:center">NSLayoutAttributeLeadingMargin</td>
<td style="text-align:right">前导（基本等于left）Margin</td>
</tr>
<tr>
<td>trailingMargin</td>
<td style="text-align:center">NSLayoutAttributeTrailingMargin</td>
<td style="text-align:right">后尾（基本等于tail）Margin</td>
</tr>
<tr>
<td>centerXWithinMargins</td>
<td style="text-align:center">NSLayoutAttributeCenterXWithinMargins</td>
<td style="text-align:right">中心X坐标Margin</td>
</tr>
<tr>
<td>centerYWithinMargins</td>
<td style="text-align:center">NSLayoutAttributeCenterYWithinMargins</td>
<td style="text-align:right">中心Y坐标Margin</td>
</tr>
</tbody>
</table>
<p>当然，如何添加也有相应的规则。</p>
<h3 id="对其他的view没有任何关系时，添加到自己的view上"><a href="#对其他的view没有任何关系时，添加到自己的view上" class="headerlink" title="对其他的view没有任何关系时，添加到自己的view上"></a>对其他的view没有任何关系时，添加到自己的view上</h3><p>比如说添加一个按钮的宽和高的约束，对其他的view没有任何关系，则将约束添加到自己身上。</p>
<p>为按钮添加一个宽和高为两百的约束<br><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *btn1;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></span><br><span class="line">    <span class="built_in">NSLayoutConstraint</span> *c1 = [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:<span class="keyword">self</span>.btn1 attribute:<span class="built_in">NSLayoutAttributeWidth</span> relatedBy:<span class="built_in">NSLayoutRelationEqual</span> toItem:<span class="literal">nil</span> attribute:<span class="built_in">NSLayoutAttributeWidth</span> multiplier:<span class="number">1</span> constant:<span class="number">200</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLayoutConstraint</span> *c2 = [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:<span class="keyword">self</span>.btn1 attribute:<span class="built_in">NSLayoutAttributeHeight</span> relatedBy:<span class="built_in">NSLayoutRelationEqual</span> toItem:<span class="literal">nil</span> attribute:<span class="built_in">NSLayoutAttributeHeight</span> multiplier:<span class="number">1</span> constant:<span class="number">200</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.btn1.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</span><br><span class="line">    [<span class="keyword">self</span>.btn1 addConstraint:c1];</span><br><span class="line">    [<span class="keyword">self</span>.btn1 addConstraint:c2];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<h3 id="对于两个同层级view之间的约束关系，则添加到他们的父View上"><a href="#对于两个同层级view之间的约束关系，则添加到他们的父View上" class="headerlink" title="对于两个同层级view之间的约束关系，则添加到他们的父View上"></a>对于两个同层级view之间的约束关系，则添加到他们的父View上</h3><p>例如<code>3.1</code>与<code>3.2</code>为同层级view，约束关系则添加到父view<code>2.1</code>上。</p>
<p><img src="auto1.png" alt></p>
<p>添加了一个蓝色view的上边线与绿色view的下边线对其的约束，两个view为同级约束，则添加到了父view上。</p>
<p><img src="auto2.png" alt></p>
<h3 id="对于两个不同层级的view之间的约束关系，则添加到它们最近的共同的父view上"><a href="#对于两个不同层级的view之间的约束关系，则添加到它们最近的共同的父view上" class="headerlink" title="对于两个不同层级的view之间的约束关系，则添加到它们最近的共同的父view上"></a>对于两个不同层级的view之间的约束关系，则添加到它们最近的共同的父view上</h3><p>例如<code>3.3</code>与<code>3.5</code>为同层级view，约束关系则添加到父view<code>1</code>上。</p>
<p><img src="auto3.png" alt></p>
<p>但是相对于这种情况应该用的很少。</p>
<h3 id="对于两个有层次关系的view之间的约束关系，则添加到层次较高的那个view上"><a href="#对于两个有层次关系的view之间的约束关系，则添加到层次较高的那个view上" class="headerlink" title="对于两个有层次关系的view之间的约束关系，则添加到层次较高的那个view上"></a>对于两个有层次关系的view之间的约束关系，则添加到层次较高的那个view上</h3><p>例如<code>1</code>和<code>2.3</code>为父子关系的view，约束关系则添加到view<code>1</code>上</p>
<p><img src="auto5.png" alt></p>
<h1 id="刷新约束"><a href="#刷新约束" class="headerlink" title="刷新约束"></a>刷新约束</h1><p>可以通过<code>setNeedsUpdateConstraints</code>和<code>layoutIfNeeded</code>两个方法来刷新约束，使得UIView重新布局。</p>
<h1 id="Masonry框架"><a href="#Masonry框架" class="headerlink" title="Masonry框架"></a>Masonry框架</h1><p>Masonry是AutoLayout的一个第三方类库，用链式语法封装了冗长的AutoLayout代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_updateConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_remakeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">mas_makeConstraints 只负责新增约束 Autolayout不能同时存在两条针对于同一对象的约束 否则会报错 </span></span><br><span class="line"><span class="comment">mas_updateConstraints 针对上面的情况 会更新在block中出现的约束 不会导致出现两个相同约束的情况</span></span><br><span class="line"><span class="comment">mas_remakeConstraints 则会清除之前的所有约束 仅保留最新的约束</span></span><br><span class="line"><span class="comment">三种函数善加利用 就可以应对各种情况了</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>常用属性</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//乘以</span></span><br><span class="line">- (MASConstraint * (^)(<span class="built_in">CGFloat</span> multiplier))multipliedBy;</span><br><span class="line"><span class="comment">//除以</span></span><br><span class="line">- (MASConstraint * (^)(<span class="built_in">CGFloat</span> divider))dividedBy;</span><br><span class="line"><span class="comment">//优先级</span></span><br><span class="line">- (MASConstraint * (^)(MASLayoutPriority priority))priority;</span><br></pre></td></tr></table></figure>
<h1 id="Visual-Format-Language"><a href="#Visual-Format-Language" class="headerlink" title="Visual Format Language"></a>Visual Format Language</h1><p>VFL(Visual Format Language)允许你使用一种ASCII格式的字符串定义约束. 通过一行代码, 你可以在水平或者垂直方向上指定多个约束, 这跟一次只能创建一个约束相比会节省大量的代码量。</p>
<ul>
<li>创建水平和垂直约束</li>
<li>在VFL中使用<code>views</code></li>
<li>在VFL中使用<code>metrics</code></li>
<li>使用layout options布局界面</li>
<li>使用layout guides</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.jianshu.com/p/7b61998c6d8f" target="_blank" rel="noopener">https://www.jianshu.com/p/7b61998c6d8f</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5语义性标签兼容解决</title>
    <url>/2019/03/02/HTML5%E8%AF%AD%E4%B9%89%E6%80%A7%E6%A0%87%E7%AD%BE%E5%85%BC%E5%AE%B9%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在大部分的浏览器都能够很好的支持H5，但还是不免得有一些浏览器是不能够支持HTML5的新特性及其一些新标签，特别是在IE8以下的浏览器。</p>
<a id="more"></a>
<h1 id="兼容办法"><a href="#兼容办法" class="headerlink" title="兼容办法"></a>兼容办法</h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><p>通过<code>document.createElement(&quot;nav&quot;);</code>的办法来逐个创建标签元素，但是通过其办法还需要定义好其元素的CSS样式。</p>
<h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><p>使用js插件，这里使用的是<code>html5shiv</code>，BootCDN有提供,<a href="https://www.bootcdn.cn/html5shiv/" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/html5shiv/r29/html5.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="终极解决办法"><a href="#终极解决办法" class="headerlink" title="终极解决办法"></a>终极解决办法</h2><p>单纯使用第二种的时候，有一些浏览器本身就能够支持，所以在代码中进行判断是否需要该js<br>使用条件Hack</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 终极解决方案 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lte IE 8]&gt;</span></span><br><span class="line"><span class="comment">        &lt;script src="https://cdn.bootcss.com/html5shiv/r29/html5.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>是否需要兼容可以看业务是否需要，也可以提示用户进行更换浏览器，毕竟IE是个坑爹的浏览器。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C之Block</title>
    <url>/2019/03/01/Objective-C%E4%B9%8BBlock/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="关于Block"><a href="#关于Block" class="headerlink" title="关于Block"></a>关于Block</h1><p>在iOS4.0之后，block横空出世，它本身封装了一段代码并将这段代码当做变量，通过block()的方式进行回调。</p>
<a id="more"></a>
<blockquote>
<p>block的代码是内联的，效率高于函数调用<br>block对于外部变量默认是只读属性<br>block被Objective-C看成是对象处理</p>
</blockquote>
<p>对于block的底层实现在网上已经有很多资料了，其源码更是可以在<code>opensource.apple.com</code>上下载，因此，本文更着重于对于block的基本应用。</p>
<h1 id="认识Block"><a href="#认识Block" class="headerlink" title="认识Block"></a>认识Block</h1><blockquote>
<p>Block：带有自动变量的匿名函数，它是C语言的拓展功能，之所以是扩展，是因为C语言不允许存在这样的匿名函数</p>
</blockquote>
<ul>
<li><p>匿名函数：匿名函数是指不带函数名称的函数</p>
</li>
<li><p>带有自动变量</p>
<p>这是因为Block拥有捕获外部变量的功能，在Block中访问一个外部的局部变量，Block会持有它的临时状态，自动捕获变量值，外部局部变量的变化不会影响它的状态</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">  printf(<span class="string">"val=%d\n"</span>, val);</span><br><span class="line">&#125;;</span><br><span class="line">val = <span class="number">2</span>;</span><br><span class="line">blk(); <span class="comment">// 这里输出的值是10，而不是2，因为block在实现时就会对它所在方法中定义的栈变量进行一次只读拷贝</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>为了解决block不能修改自动变量的值，可以使用 <code>__block</code> 修饰</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__block <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line"> printf(<span class="string">"val=%d\n"</span>, val);</span><br><span class="line">&#125;;</span><br><span class="line">val = <span class="number">2</span>;</span><br><span class="line">blk(); <span class="comment">// 这里输出的值是2</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>一个简单的block，实现两个数之和</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>(^sum)(<span class="keyword">int</span> a, <span class="keyword">int</span> b) = ^(<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,sum(<span class="number">3</span>,<span class="number">5</span>));</span><br></pre></td></tr></table></figure>
<p>代码左边是一个block的生命，int为block的返回值类型，^符号后面为block的名称，后面括号里面为参数列表，该block的参数列表有两个，两个都是int类型参数。右边为block的定义。用网上一张图来更好的认识到block。<br><img src="blockcode.jpeg" alt></p>
<p><strong>语法：</strong> 由于 Block 的语法是如此的晦涩难记，以至于出现了 <a href="http://fuckingblocksyntax.com/" target="_blank" rel="noopener">fuckingblocksyntax</a> 这样的网站专门用于记录 block 的语法，翻译并摘录如下：</p>
<p>作为变量:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">returnType (^blockName)(parameterTypes) = ^returnType(parameters) &#123;...&#125;;</span><br></pre></td></tr></table></figure>
<p>作为属性:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) returnType (^blockName)(parameterTypes);</span><br></pre></td></tr></table></figure>
<p>作为函数声明中的参数:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)someMethodThatTakesABlock:(returnType (^)(parameterTypes))blockName;</span><br></pre></td></tr></table></figure>
<p>作为函数调用中的参数:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[someObject someMethodThatTakesABlock:^returnType (parameters) &#123;...&#125;];</span><br></pre></td></tr></table></figure>
<p>作为 typedef:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> returnType (^TypeName)(parameterTypes);</span><br><span class="line">TypeName blockName = ^returnType(parameters) &#123;...&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="Block访问外部基本类型数据"><a href="#Block访问外部基本类型数据" class="headerlink" title="Block访问外部基本类型数据"></a>Block访问外部基本类型数据</h1><p><strong>静态变量 和 全局变量在加和不加<code>__block</code>都会直接引用变量地址。也就意味着 可以修改变量的值。在没有加<code>__block</code>参数的情况下。</strong></p>
<p>基本类型常量时，看一段代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="comment">// insert code here...</span></span><br><span class="line">        <span class="built_in">CGPoint</span> p = <span class="built_in">CGPointMake</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">void</span>(^bt)(<span class="keyword">void</span>) = ^()&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%f , %f"</span>, p.x, p.y);</span><br><span class="line">        &#125;;</span><br><span class="line">        bt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2019-03-01 11:35:15.244937+0800 BlockDemo[866:40789] 10.000000 , 10.000000</span><br><span class="line">Program ended with <span class="built_in">exit</span> code: 0</span><br></pre></td></tr></table></figure></p>
<p>可以看到block可以直接访问到外部的局部变量。但是block内使用外部的变量相当于拷贝了一份外部变量来使用，并不能直接修改外部变量的值，例如</p>
<p><img src="block1.png" alt></p>
<p>编译器直接进行报错，但是如果想直接修改外部的局部变量的值，那就需要在外部的局部变量前面加上<code>__block</code>的声明。</p>
<p><img src="block2.png" alt></p>
<h1 id="Block访问外部常量变量"><a href="#Block访问外部常量变量" class="headerlink" title="Block访问外部常量变量"></a>Block访问外部常量变量</h1><p><code>NSString *a = @&quot;hello&quot;;</code> a 为常量变量，@“hello”为常量。）—–不加<strong>block类型 block 会引用常量的地址<code>（浅拷贝）</code>。加</strong>block类型 block会去引用常量变量（如：a变量，a = @”abc”.可以任意修改a 指向的内容。）的地址。 </p>
<p>block 会拷贝变量内容到自己的栈内存上，以便执行时可以调用。 但并不是对str 内容做了深拷贝，重新申请内存。</p>
<p>因为str 是栈内存上的变量，指向 一个常量区的@“hello”. 编译器做的优化是   当block 去拷贝str 指向内容时发现是个常量，</p>
<p>所以会去引用 @“hello” 的指针，没必要再取申请一块内存。</p>
<h1 id="Block访问外部对象变量"><a href="#Block访问外部对象变量" class="headerlink" title="Block访问外部对象变量"></a>Block访问外部对象变量</h1><p><em>如（MyClass </em>class、Block block）。 这里block 也是”类“对象（类似对象，其包含isa指针,clang 反编译可以查看。因为它不像从NSObject 继承下来的对象都支持 retain、copy、release）。*</p>
<p>Block的copy、retain、release操作<br>不同于NSObjec的copy、retain、release操作：</p>
<p>Block_copy与copy等效，Block_release与release等效；</p>
<ul>
<li>Block_copy与copy等效，Block_release与release等效；</li>
<li>对Block不管是retain、copy、release都不会改变引用计数retainCount，retainCount始终是1；</li>
<li>NSGlobalBlock：retain、copy、release操作都无效；</li>
<li>NSStackBlock：retain、release操作无效，必须注意的是，NSStackBlock在函数返回后，Block内存将被回收。即使retain也没用。容易犯的错误是[[mutableAarry addObject:stackBlock]，在函数出栈后，从mutableAarry中取到的stackBlock已经被回收，变成了野指针。正确的做法是先将stackBlock copy到堆上，然后加入数组：[mutableAarry addObject:[[stackBlock copy] autorelease]]。支持copy，copy之后生成新的NSMallocBlock类型对象</li>
<li>NSMallocBlock支持retain、release，虽然retainCount始终是1，但内存管理器中仍然会增加、减少计数。copy之后不会生成新的对象，只是增加了一次引用，类似retain；</li>
<li>尽量不要对Block使用retain操作</li>
</ul>
<h1 id="Block的使用场景"><a href="#Block的使用场景" class="headerlink" title="Block的使用场景"></a>Block的使用场景</h1><ul>
<li><p>声明Block属性 利用Block属性响应事件或传递数据</p>
<p>UIViewController 需要监听TableView中Cell的某个按钮的点击事件，既可以通过Delegate回调，也可以利用Block回调 Block回调的思路： 声明一个Block属性，注意这里要用copy。 利用Block属性进行回调。</p>
</li>
<li><p>方法参数为Block 利用Block实现回调</p>
<p>以 <code>[UIView animateWithDuration:animations:]</code> 为例，animations是一个block对象，利用block实现调用者与UIView之间的数据传递</p>
</li>
<li><p>链式语法</p>
<p>链式编程思想：将block作为方法的返回值，且返回值的类型为调用者本身，并将该方法以setter的形式返回，从而实现连续调用</p>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  CaculateMaker.h</span></span><br><span class="line"><span class="comment">//  ChainBlockTestApp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CaculateMaker</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> result;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 返回类型 CaculateMaker</span></span><br><span class="line"><span class="comment">* 传入参数 CGFloat num</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (CaculateMaker *(^)(<span class="built_in">CGFloat</span> num))add;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  CaculateMaker.m</span></span><br><span class="line"><span class="comment">//  ChainBlockTestApp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"CaculateMaker.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CaculateMaker</span></span></span><br><span class="line"></span><br><span class="line">- (CaculateMaker *(^)(<span class="built_in">CGFloat</span> num))add;&#123;</span><br><span class="line">    <span class="keyword">return</span> ^CaculateMaker *(<span class="built_in">CGFloat</span> num)&#123;</span><br><span class="line">        _result += num;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">CaculateMaker *maker = [[CaculateMaker alloc] init];</span><br><span class="line">maker.add(<span class="number">20</span>).add(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>
<h1 id="为什么Block属性需要用copy修饰？"><a href="#为什么Block属性需要用copy修饰？" class="headerlink" title="为什么Block属性需要用copy修饰？"></a>为什么Block属性需要用copy修饰？</h1><p><strong>因为在MRC情况下如果Block属性不使用copy修饰，在使用中会出现崩溃，在ARC情况下，Block属性使用strong修饰会被默认进行copy，所以ARC情况下，Block属性可以使用strong或copy修饰，不然会出现崩溃。</strong></p>
<p>Block在内存中的位置分为三种类型：</p>
<ul>
<li><p><strong>NSGlobalBlock</strong> 是位于全局区的block，它是设置在程序的数据区中。</p>
</li>
<li><p><strong>NSStackBlock</strong> 是位于栈区，当超出变量作用域时，栈上的Block以及__block变量都会被销毁。</p>
</li>
<li><p><strong>NSMallocBlock</strong> 是位于堆区，在变量作用域结束时不受影响。</p>
</li>
</ul>
<p>这三种类型对应以下三种情况：</p>
<ul>
<li><p>Block中没有截获自动变量时Block类型是<code>__NSGlobalBlock__</code></p>
</li>
<li><p>Block中截获自动变量时Block类型是<code>__NSStackBlock__</code></p>
</li>
<li><p>堆中的Block无法直接创建，当对<code>__NSStackBlock__</code>类型的Block进行copy时，会将Block放到堆中，Block类型变为<code>__NSMallocBlock</code></p>
</li>
</ul>
<p>当Block类型是<code>__NSStackBlock__</code>时，一旦超出了变量作用域，栈上的Block以及<code>__block</code>变量就会被销毁，从而导致调用Block回调时崩溃。因此，Block属性需要用copy修饰来避免这种情况。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)click:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">        TestClass *test = [[TestClass alloc] init];</span><br><span class="line">        </span><br><span class="line">        __block <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 弱引用，block类型是__NSStackBlock__  当TestClass执行回调时必崩 EXC_BAD_ACCESS</span></span><br><span class="line">        test.weakBlock = ^() &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"ok"</span>);</span><br><span class="line">            a = <span class="number">2</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// block类型是__NSStackBlock__  当TestClass执行回调时必崩 EXC_BAD_ACCESS</span></span><br><span class="line">        test.assignBlock = ^() &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"ok"</span>);</span><br><span class="line">            a = <span class="number">3</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// block类型是__MallocBlock__ 正常执行</span></span><br><span class="line">        test.copyBlock = ^() &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"ok"</span>);</span><br><span class="line">            a = <span class="number">4</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// block类型是__MallocBlock__ 正常执行</span></span><br><span class="line">        test.strongBlock = ^() &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"ok"</span>);</span><br><span class="line">            a = <span class="number">5</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"copy property: %@"</span>, test.copyBlock);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"assign property: %@"</span>, test.assignBlock);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"weak property: %@"</span>, test.weakBlock);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"strong property: %@"</span>, test.strongBlock);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        [test start];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Block循环引用"><a href="#Block循环引用" class="headerlink" title="Block循环引用"></a>Block循环引用</h1><p>我们先看一段block导致循环引用的代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XYZBlockKeeper</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="keyword">void</span> (^block)(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XYZBlockKeeper</span></span></span><br><span class="line">- (<span class="keyword">void</span>)configureBlock &#123;</span><br><span class="line">    <span class="keyword">self</span>.block = ^&#123;</span><br><span class="line">        [<span class="keyword">self</span> doSomething];    <span class="comment">// capturing a strong reference to self</span></span><br><span class="line">                               <span class="comment">// creates a strong reference cycle</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>block 在捕获外部变量的时候，会保持一个强引用，当在 block 中捕获 <code>self</code> 时，由于对象会对 block 进行 <code>copy</code>，于是便形成了强引用循环：</p>
<p>为了避免强引用循环，最好捕获一个 <code>self</code> 的弱引用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)configureBlock &#123;</span><br><span class="line">    XYZBlockKeeper * __<span class="keyword">weak</span> weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">self</span>.block = ^&#123;</span><br><span class="line">        [weakSelf doSomething];   <span class="comment">// capture the weak reference</span></span><br><span class="line">                                  <span class="comment">// to avoid the reference cycle</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用弱引用会带来另一个问题，<code>weakSelf</code> 有可能会为 nil，如果多次调用 <code>weakSelf</code> 的方法，有可能在 block 执行过程中 <code>weakSelf</code>变为 nil。因此需要在 block 中将 <code>weakSelf</code> “强化“</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> __typeof__(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="built_in">NSBlockOperation</span> *op = [[[<span class="built_in">NSBlockOperation</span> alloc] init] autorelease];</span><br><span class="line">[ op addExecutionBlock:^ &#123;</span><br><span class="line">    __<span class="keyword">strong</span> __typeof__(<span class="keyword">self</span>) strongSelf = weakSelf;</span><br><span class="line">    [strongSelf doSomething];</span><br><span class="line">    [strongSelf doMoreThing];</span><br><span class="line">&#125; ];</span><br><span class="line">[someOperationQueue addOperation:op];</span><br></pre></td></tr></table></figure>
<p><code>__strong</code> 这一句在执行的时候，如果 WeakSelf 还没有变成 nil，那么就会 retain self，让 self 在 block 执行期间不会变为 nil。这样上面的 <code>doSomething</code> 和 <code>doMoreThing</code> 要么全执行成功，要么全失败，不会出现一个成功一个失败，即执行到中间 <code>self</code> 变成 nil 的情况。</p>
<p>并非所有的block都存在循环引用，下面列举一些常见的block使用的示例：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// self--&gt;requestModel--&gt;block--&gt;self </span></span><br><span class="line">[<span class="keyword">self</span>.requestModel requestData:^(<span class="built_in">NSData</span> *data) &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = <span class="string">@"leafly"</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虽然存在引用环，但是通过主动释放requestModel打破了循环</span></span><br><span class="line">[<span class="keyword">self</span>.requestModel requestData:^(<span class="built_in">NSData</span> *data) &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = <span class="string">@"leafly"</span>;</span><br><span class="line">    <span class="keyword">self</span>.requestModel = <span class="literal">nil</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// t--&gt;block--&gt;self 不存在循环引用</span></span><br><span class="line">Test *t = [[Test alloc] init];</span><br><span class="line"></span><br><span class="line">[t requestData:^(<span class="built_in">NSData</span> *data) &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = <span class="string">@"leafly"</span>;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// AFNetworking--&gt;block--&gt;self 不存在循环引用</span></span><br><span class="line">[AFNetworking requestData:^(<span class="built_in">NSData</span> *data) &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = <span class="string">@"lealfy"</span>;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Block的特性也赋予了它许多的灵活性，但是也会出现很多的一些内存泄漏，不易调试的问题，还要多多深入探究。</p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS基础 - WKWebView使用</title>
    <url>/2019/02/28/IOS%E5%9F%BA%E7%A1%80-WKWebView%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>WKWebView是显示交互式Web内容的对象，例如用于应用内浏览器。</p>
<a id="more"></a>
<p><strong>WKWebView对比UIWebView的优势</strong></p>
<blockquote>
<p>1.WKWebView的内存开销要比UIWebView小很多<br>2.拥有高达60FPS滚动刷新率及内置手势<br>3.支持了更多的HTML5特性<br>4.html页面和WKWebView交互更方便<br>5.Safari相同的JavaScript引擎<br>6.提供常用的属性，如加载网页进度的属性estimatedProgress</p>
</blockquote>
<h1 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a><a href="https://developer.apple.com/documentation/webkit/wkwebview" target="_blank" rel="noopener">WKWebView</a></h1><h2 id="类摘要"><a href="#类摘要" class="headerlink" title="类摘要"></a>类摘要</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WKWebView</span> : <span class="title">UIView</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p> 从iOS 8.0和OS X 10.10开始，使用WKWebView将Web内容添加到您的应用程序。不要使用UIWebView或WebView。</p>
</blockquote>
<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><h3 id="确定WebKit是否可以加载内容"><a href="#确定WebKit是否可以加载内容" class="headerlink" title="确定WebKit是否可以加载内容"></a>确定WebKit是否可以加载内容</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">handlesURLScheme</span>(<span class="title">String</span>) -&gt; <span class="title">Bool</span></span></span><br><span class="line"><span class="class">//返回<span class="title">WebKit</span>是否本机支持使用特定<span class="title">URL</span>方案加载资源。</span></span><br></pre></td></tr></table></figure>
<h3 id="初始化Web视图"><a href="#初始化Web视图" class="headerlink" title="初始化Web视图"></a>初始化Web视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> configuration: <span class="type">WKWebViewConfiguration</span></span><br><span class="line"><span class="comment">//用于初始化Web视图的配置副本。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">init</span>(frame: <span class="type">CGRect</span>, configuration: <span class="type">WKWebViewConfiguration</span>)</span><br><span class="line"><span class="comment">//返回使用指定框架和配置初始化的Web视图。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">init</span>?(coder: <span class="type">NSCoder</span>)</span><br></pre></td></tr></table></figure>
<h3 id="检查视图信息"><a href="#检查视图信息" class="headerlink" title="检查视图信息"></a>检查视图信息</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scrollView: <span class="type">UIScrollView</span></span><br><span class="line"><span class="comment">//与Web视图关联的滚动视图。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> title: <span class="type">String?</span></span><br><span class="line"><span class="comment">//当前页面标题。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url: <span class="type">URL?</span></span><br><span class="line"><span class="comment">//当前活动网址。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> customUserAgent: <span class="type">String?</span></span><br><span class="line"><span class="comment">//自定义用户代理字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> serverTrust: <span class="type">SecTrust?</span></span><br><span class="line"><span class="comment">//当前已提交导航的SecTrustRef对象。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> certificateChain: [<span class="type">Any</span>]</span><br><span class="line"><span class="comment">//形成当前已提交导航的证书链的对象数组。 -- 弃用</span></span><br></pre></td></tr></table></figure>
<h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> navigationDelegate: <span class="type">WKNavigationDelegate?</span></span><br><span class="line"><span class="comment">//Web视图的导航委托。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uiDelegate: <span class="type">WKUIDelegate?</span></span><br><span class="line"><span class="comment">//Web视图的用户界面委托。</span></span><br></pre></td></tr></table></figure>
<h3 id="加载内容"><a href="#加载内容" class="headerlink" title="加载内容"></a>加载内容</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> estimatedProgress: <span class="type">Double</span></span><br><span class="line"><span class="comment">//估计当前导航的加载比例。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasOnlySecureContent: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示页面上的所有资源是否已通过安全加密的连接加载。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadHTMLString</span><span class="params">(String, baseURL: URL?)</span></span> -&gt; <span class="type">WKNavigation?</span></span><br><span class="line"><span class="comment">//设置网页内容和基本URL。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isLoading: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示视图当前是否正在加载内容。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reload</span><span class="params">()</span></span> -&gt; <span class="type">WKNavigation?</span></span><br><span class="line"><span class="comment">//重新加载当前页面。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reload</span><span class="params">(<span class="keyword">Any</span>?)</span></span></span><br><span class="line"><span class="comment">//重新加载当前页面。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reloadFromOrigin</span><span class="params">()</span></span> -&gt; <span class="type">WKNavigation?</span></span><br><span class="line"><span class="comment">//重新加载当前页面，如果可能，使用缓存验证条件执行端到端重新验证。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reloadFromOrigin</span><span class="params">(<span class="keyword">Any</span>?)</span></span></span><br><span class="line"><span class="comment">//重新加载当前页面，如果可能，使用缓存验证条件执行端到端重新验证。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stopLoading</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">//停止加载当前页面上的所有资源。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stopLoading</span><span class="params">(<span class="keyword">Any</span>?)</span></span></span><br><span class="line"><span class="comment">//停止加载当前页面上的所有资源。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">load</span><span class="params">(Data, mimeType: String, characterEncodingName: String, baseURL: URL)</span></span> -&gt; <span class="type">WKNavigation?</span></span><br><span class="line"><span class="comment">//设置网页内容和基本URL。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadFileURL</span><span class="params">(URL, allowingReadAccessTo: URL)</span></span> -&gt; <span class="type">WKNavigation?</span></span><br><span class="line"><span class="comment">//导航到文件系统上请求的文件URL</span></span><br></pre></td></tr></table></figure>
<h3 id="缩放内容"><a href="#缩放内容" class="headerlink" title="缩放内容"></a>缩放内容</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> allowsMagnification: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示放大手势是否会更改Web视图的放大率。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> magnification: <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//页面内容当前缩放的因子。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setMagnification</span><span class="params">(CGFloat, centeredAt: CGPoint)</span></span></span><br><span class="line"><span class="comment">//按指定因子缩放页面内容，并将结果集中在指定点上。</span></span><br></pre></td></tr></table></figure>
<h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> allowsBackForwardNavigationGestures: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示水平滑动手势是否会触发后退列表导航。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> backForwardList: <span class="type">WKBackForwardList</span></span><br><span class="line"><span class="comment">//Web视图的后退列表。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> canGoBack: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示后向列表中是否有可以导航到的后退项。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> canGoForward: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示后向列表中是否存在可以导航到的前向项。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allowsLinkPreview: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，用于确定按下链接是否显示链接目标的预览。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goBack</span><span class="params">()</span></span> -&gt; <span class="type">WKNavigation?</span></span><br><span class="line"><span class="comment">//导航到后退列表中的后退项目。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goBack</span><span class="params">(<span class="keyword">Any</span>?)</span></span></span><br><span class="line"><span class="comment">//导航到后退列表中的后退项目。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goForward</span><span class="params">()</span></span> -&gt; <span class="type">WKNavigation?</span></span><br><span class="line"><span class="comment">//导航到后退列表中的前进项目。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goForward</span><span class="params">(<span class="keyword">Any</span>?)</span></span></span><br><span class="line"><span class="comment">//导航到后退列表中的前进项目。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">go</span><span class="params">(to: WKBackForwardListItem)</span></span> -&gt; <span class="type">WKNavigation?</span></span><br><span class="line"><span class="comment">//导航到后退列表中的项目并将其设置为当前项目。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">load</span><span class="params">(URLRequest)</span></span> -&gt; <span class="type">WKNavigation?</span></span><br><span class="line"><span class="comment">//导航到请求的URL。</span></span><br></pre></td></tr></table></figure>
<h3 id="执行JS"><a href="#执行JS" class="headerlink" title="执行JS"></a>执行JS</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">evaluateJavaScript</span><span class="params">(String, completionHandler: <span class="params">(<span class="params">(<span class="keyword">Any</span>?, Error?)</span></span></span></span> -&gt; <span class="type">Void</span>)?)</span><br><span class="line"><span class="comment">//JavaScript字符串。</span></span><br></pre></td></tr></table></figure>
<h3 id="拍摄快照"><a href="#拍摄快照" class="headerlink" title="拍摄快照"></a>拍摄快照</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">takeSnapshot</span><span class="params">(with: WKSnapshotConfiguration?, completionHandler: <span class="params">(UIImage?, Error?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"><span class="comment">//拍摄视图可见视口的快照。</span></span><br></pre></td></tr></table></figure>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> WebKit</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">WKUIDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> webView: <span class="type">WKWebView!</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">loadView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> webConfiguration = <span class="type">WKWebViewConfiguration</span>()</span><br><span class="line">        webView = <span class="type">WKWebView</span>(frame: .zero, configuration: webConfiguration)</span><br><span class="line">        webView.uiDelegate = <span class="keyword">self</span></span><br><span class="line">        view = webView</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> myURL = <span class="type">URL</span>(string:<span class="string">"https://www.apple.com"</span>)</span><br><span class="line">        <span class="keyword">let</span> myRequest = <span class="type">URLRequest</span>(url: myURL!)</span><br><span class="line">      	<span class="comment">//加载URL</span></span><br><span class="line">        webView.load(myRequest)</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>要允许用户在网页历史记录中前后移动，请使用和方法作为按钮操作。当用户无法向某个方向移动时，请使用和属性禁用按钮。<a href="https://developer.apple.com/documentation/webkit/wkwebview/1414952-goback" target="_blank" rel="noopener"><code>goBack()</code></a>、<a href="https://developer.apple.com/documentation/webkit/wkwebview/1414993-goforward" target="_blank" rel="noopener"><code>goForward()</code></a>、<a href="https://developer.apple.com/documentation/webkit/wkwebview/1414966-cangoback" target="_blank" rel="noopener"><code>canGoBack</code></a>、<a href="https://developer.apple.com/documentation/webkit/wkwebview/1414962-cangoforward" target="_blank" rel="noopener"><code>canGoForward</code></a>。</p>
<p>默认情况下，Web视图会自动将Web内容中显示的电话号码转换为电话链接。点击电话链接后，电话应用程序将启动并拨打该号码。若要关闭此默认行为，请使用不包含该标志的位域设置该属性。<a href="https://developer.apple.com/documentation/webkit/wkwebviewconfiguration/1641937-datadetectortypes" target="_blank" rel="noopener"><code>dataDetectorTypes</code></a>、<a href="https://developer.apple.com/documentation/webkit/wkdatadetectortypes" target="_blank" rel="noopener"><code>WKDataDetectorTypes</code></a>、<a href="https://developer.apple.com/documentation/webkit/wkdatadetectortypes/1641917-phonenumber" target="_blank" rel="noopener"><code>phoneNumber</code></a></p>
<p>您还可以使用以第一次在Web视图中显示的方式以编程方式设置Web内容的比例。此后，用户可以使用手势来改变比例。<a href="https://developer.apple.com/documentation/webkit/wkwebview/1414996-setmagnification" target="_blank" rel="noopener"><code>setMagnification(_:centeredAt:)</code></a></p>
<h1 id="WKNavigationDelegate"><a href="#WKNavigationDelegate" class="headerlink" title="WKNavigationDelegate"></a><a href="https://developer.apple.com/documentation/webkit/wknavigationdelegate" target="_blank" rel="noopener">WKNavigationDelegate</a></h1><p>WKNavigationDelegate协议的方法可帮助您实现在Web视图接受，加载和完成导航请求的过程中触发的自定义行为。</p>
<h2 id="协议方法"><a href="#协议方法" class="headerlink" title="协议方法"></a>协议方法</h2><h3 id="启动导航"><a href="#启动导航" class="headerlink" title="启动导航"></a>启动导航</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, didCommit: WKNavigation!)</span></span></span><br><span class="line"><span class="comment">//在Web视图开始接收Web内容时调用。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, didStartProvisionalNavigation: WKNavigation!)</span></span></span><br><span class="line"><span class="comment">//在Web视图中开始加载Web内容时调用。</span></span><br></pre></td></tr></table></figure>
<h3 id="响应服务器操作"><a href="#响应服务器操作" class="headerlink" title="响应服务器操作"></a>响应服务器操作</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, didCommit: WKNavigation!)</span></span></span><br><span class="line"><span class="comment">//在Web视图开始接收Web内容时调用。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, didReceiveServerRedirectForProvisionalNavigation: WKNavigation!)</span></span></span><br><span class="line"><span class="comment">//在Web视图收到服务器重定向时调用。</span></span><br></pre></td></tr></table></figure>
<h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, didReceive: URLAuthenticationChallenge, completionHandler: <span class="params">(URLSession.AuthChallengeDisposition, URLCredential?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"><span class="comment">//在Web视图需要响应身份验证质询时调用。</span></span><br></pre></td></tr></table></figure>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, didFail: WKNavigation!, withError: Error)</span></span></span><br><span class="line"><span class="comment">//在导航期间发生错误时调用。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, didFailProvisionalNavigation: WKNavigation!, withError: Error)</span></span></span><br><span class="line"><span class="comment">//在Web视图加载内容时发生错误时调用。</span></span><br></pre></td></tr></table></figure>
<h3 id="跟踪加载进度"><a href="#跟踪加载进度" class="headerlink" title="跟踪加载进度"></a>跟踪加载进度</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, didFinish: WKNavigation!)</span></span></span><br><span class="line"><span class="comment">//导航完成时调用。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webViewWebContentProcessDidTerminate</span><span class="params">(WKWebView)</span></span></span><br><span class="line"><span class="comment">//在Web视图的Web内容进程终止时调用。</span></span><br></pre></td></tr></table></figure>
<h3 id="允许导航"><a href="#允许导航" class="headerlink" title="允许导航"></a>允许导航</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, decidePolicyFor: WKNavigationAction, decisionHandler: <span class="params">(WKNavigationActionPolicy)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"><span class="comment">//决定是允许还是取消导航。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, decidePolicyFor: WKNavigationResponse, decisionHandler: <span class="params">(WKNavigationResponsePolicy)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"><span class="comment">//决定在知道响应后是允许还是取消导航。</span></span><br></pre></td></tr></table></figure>
<h3 id="导航政策"><a href="#导航政策" class="headerlink" title="导航政策"></a>导航政策</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">WKNavigationActionPolicy</span></span></span><br><span class="line"><span class="class">//从该方法传回决策处理程序的策略。</span></span><br><span class="line"><span class="class"><span class="title">webView</span>(<span class="title">_</span>:<span class="title">decidePolicyFor</span>:<span class="title">decisionHandler</span>:)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">enum</span> <span class="title">WKNavigationResponsePolicy</span></span></span><br><span class="line"><span class="class">//从该方法传回决策处理程序的策略。</span></span><br><span class="line"><span class="class"><span class="title">webView</span>(<span class="title">_</span>:<span class="title">decidePolicyFor</span>:<span class="title">decisionHandler</span>:)</span></span><br></pre></td></tr></table></figure>
<h1 id="WKUIDelegate"><a href="#WKUIDelegate" class="headerlink" title="WKUIDelegate"></a><a href="https://developer.apple.com/documentation/webkit/wkuidelegate" target="_blank" rel="noopener">WKUIDelegate</a></h1><p>WKUIDelegate协议提供网页的呈现接口的方法，例如alert。</p>
<p>WKWebView委托实现此协议以控制新窗口的打开，增强用户单击元素时显示的默认菜单项的行为，以及执行其他与用户界面相关的任务。可以在处理JavaScript或其他插件内容时调用这些方法。默认Web视图实现假定每个Web视图有一个窗口，因此非传统用户界面可能实现用户界面委托。</p>
<h2 id="协议方法-1"><a href="#协议方法-1" class="headerlink" title="协议方法"></a>协议方法</h2><h3 id="创建Web视图"><a href="#创建Web视图" class="headerlink" title="创建Web视图"></a>创建Web视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, createWebViewWith: WKWebViewConfiguration, <span class="keyword">for</span>: WKNavigationAction, windowFeatures: WKWindowFeatures)</span></span> -&gt; <span class="type">WKWebView?</span></span><br><span class="line"><span class="comment">//创建新的Web视图。</span></span><br></pre></td></tr></table></figure>
<h3 id="显示UI面板"><a href="#显示UI面板" class="headerlink" title="显示UI面板"></a>显示UI面板</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, runJavaScriptAlertPanelWithMessage: String, initiatedByFrame: WKFrameInfo, completionHandler: <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"><span class="comment">//显示JavaScript警报面板。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, runJavaScriptConfirmPanelWithMessage: String, initiatedByFrame: WKFrameInfo, completionHandler: <span class="params">(Bool)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"><span class="comment">//显示JavaScript确认面板。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, runJavaScriptTextInputPanelWithPrompt: String, defaultText: String?, initiatedByFrame: WKFrameInfo, completionHandler: <span class="params">(String?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"><span class="comment">//显示JavaScript文本输入面板。</span></span><br></pre></td></tr></table></figure>
<h3 id="关闭Web视图"><a href="#关闭Web视图" class="headerlink" title="关闭Web视图"></a>关闭Web视图</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webViewDidClose</span><span class="params">(WKWebView)</span></span></span><br><span class="line"><span class="comment">//通知您的应用程序DOM窗口已成功关闭。</span></span><br></pre></td></tr></table></figure>
<h3 id="显示上传面板"><a href="#显示上传面板" class="headerlink" title="显示上传面板"></a>显示上传面板</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, runOpenPanelWith: WKOpenPanelParameters, initiatedByFrame: WKFrameInfo, completionHandler: <span class="params">([URL]?)</span></span></span> -&gt; <span class="type">Void</span>)</span><br><span class="line"><span class="comment">//显示文件上传面板。</span></span><br></pre></td></tr></table></figure>
<h3 id="响应强制触摸操作"><a href="#响应强制触摸操作" class="headerlink" title="响应强制触摸操作"></a>响应强制触摸操作</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, shouldPreviewElement: WKPreviewElementInfo)</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="comment">//确定给定元素是否应显示预览。 -- 弃用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, previewingViewControllerForElement: WKPreviewElementInfo, defaultActions: [WKPreviewActionItem])</span></span> -&gt; <span class="type">UIViewController?</span></span><br><span class="line"><span class="comment">//当用户执行窥视动作时调用。 -- 弃用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(WKWebView, commitPreviewingViewController: UIViewController)</span></span></span><br><span class="line"><span class="comment">//当用户在预览上执行弹出操作时调用。 -- 弃用</span></span><br></pre></td></tr></table></figure>
<h1 id="WKWebViewConfiguration"><a href="#WKWebViewConfiguration" class="headerlink" title="WKWebViewConfiguration"></a><a href="https://developer.apple.com/documentation/webkit/wkwebviewconfiguration" target="_blank" rel="noopener">WKWebViewConfiguration</a></h1><p>用于初始化Web视图的属性集合。使用该类，您可以确定网页的呈现时间，处理媒体播放的方式，用户可以选择的项目的粒度以及许多其他选项。<code>WKWebViewConfiguration</code>仅在首次初始化Web视图时使用。创建后，您无法使用此类更改Web视图的配置。</p>
<h2 id="类方法-1"><a href="#类方法-1" class="headerlink" title="类方法"></a>类方法</h2><h3 id="配置新Web视图的属性"><a href="#配置新Web视图的属性" class="headerlink" title="配置新Web视图的属性"></a>配置新Web视图的属性</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> applicationNameForUserAgent: <span class="type">String?</span></span><br><span class="line"><span class="comment">//用户代理字符串中使用的应用程序的名称。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preferences: <span class="type">WKPreferences</span></span><br><span class="line"><span class="comment">//Web视图要使用的首选项对象。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> processPool: <span class="type">WKProcessPool</span></span><br><span class="line"><span class="comment">//从中获取视图的Web内容过程的进程池。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userContentController: <span class="type">WKUserContentController</span></span><br><span class="line"><span class="comment">//JS注入脚本到WebView</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> websiteDataStore: <span class="type">WKWebsiteDataStore</span></span><br><span class="line"><span class="comment">//Web视图要使用的网站数据存储。</span></span><br></pre></td></tr></table></figure>
<h3 id="确定网页可伸缩性"><a href="#确定网页可伸缩性" class="headerlink" title="确定网页可伸缩性"></a>确定网页可伸缩性</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ignoresViewportScaleLimits: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，用于确定对象是否应始终允许缩放网页。</span></span><br></pre></td></tr></table></figure>
<h3 id="设置渲染首选项"><a href="#设置渲染首选项" class="headerlink" title="设置渲染首选项"></a>设置渲染首选项</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> suppressesIncrementalRendering: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示Web视图是否在内容呈现完全加载到内存之前抑制内容呈现。</span></span><br></pre></td></tr></table></figure>
<h3 id="设置媒体播放首选项"><a href="#设置媒体播放首选项" class="headerlink" title="设置媒体播放首选项"></a>设置媒体播放首选项</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> allowsInlineMediaPlayback: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示HTML5视频是否内联播放或使用本机全屏控制器。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allowsAirPlayForMediaPlayback: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示是否允许AirPlay。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allowsPictureInPictureMediaPlayback: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示HTML5视频是否可以播放画中画。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mediaTypesRequiringUserActionForPlayback: <span class="type">WKAudiovisualMediaTypes</span></span><br><span class="line"><span class="comment">//确定哪些媒体类型需要用户手势才能开始播放。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mediaPlaybackAllowsAirPlay: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//allowsAirPlayForMediaPlayback -- 弃用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> requiresUserActionForMediaPlayback: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示HTML5视频是否要求用户开始播放（true）或视频是否可以自动播放（false）。 -- 弃用</span></span><br><span class="line"><span class="keyword">var</span> mediaPlaybackRequiresUserAction: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//mediaTypesRequiringUserActionForPlayback -- 弃用</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WKAudiovisualMediaTypes</span></span></span><br><span class="line"><span class="class">//需要用户手势才能开始播放的媒体类型</span></span><br></pre></td></tr></table></figure>
<h3 id="设置选择粒度"><a href="#设置选择粒度" class="headerlink" title="设置选择粒度"></a>设置选择粒度</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> selectionGranularity: <span class="type">WKSelectionGranularity</span></span><br><span class="line"><span class="comment">//用户可以在Web视图中以交互方式选择内容的粒度级别。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">WKSelectionGranularity</span></span></span><br><span class="line"><span class="class">//用于以交互方式创建和修改选择的粒度。</span></span><br></pre></td></tr></table></figure>
<h3 id="选择用户界面方向性"><a href="#选择用户界面方向性" class="headerlink" title="选择用户界面方向性"></a>选择用户界面方向性</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userInterfaceDirectionPolicy: <span class="type">WKUserInterfaceDirectionPolicy</span></span><br><span class="line"><span class="comment">//用户界面元素的方向性。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">WKUserInterfaceDirectionPolicy</span></span></span><br><span class="line"><span class="class">//该策略用于确定<span class="title">Web</span>视图中用户界面元素的方向性。</span></span><br></pre></td></tr></table></figure>
<h3 id="识别数据类型"><a href="#识别数据类型" class="headerlink" title="识别数据类型"></a>识别数据类型</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataDetectorTypes: <span class="type">WKDataDetectorTypes</span></span><br><span class="line"><span class="comment">//所需的数据检测类型。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WKDataDetectorTypes</span></span></span><br><span class="line"><span class="class">//检测到的数据类型。</span></span><br></pre></td></tr></table></figure>
<h3 id="为新的URL方案添加处理程序"><a href="#为新的URL方案添加处理程序" class="headerlink" title="为新的URL方案添加处理程序"></a>为新的URL方案添加处理程序</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setURLSchemeHandler</span><span class="params">(WKURLSchemeHandler?, forURLScheme: String)</span></span></span><br><span class="line"><span class="comment">//为给定的URL方案添加URL方案处理程序对象。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">urlSchemeHandler</span><span class="params">(forURLScheme: String)</span></span> -&gt; <span class="type">WKURLSchemeHandler?</span></span><br><span class="line"><span class="comment">//返回给定URL方案的当前注册的方案处理程序</span></span><br></pre></td></tr></table></figure>
<h1 id="WKPreferences"><a href="#WKPreferences" class="headerlink" title="WKPreferences"></a><a href="https://developer.apple.com/documentation/webkit/wkpreferences" target="_blank" rel="noopener">WKPreferences</a></h1><p><code>WKPreferences</code>对象封装用于web视图偏好设置。与Web视图关联的首选项对象由其Web视图配置指定。</p>
<h2 id="类方法-2"><a href="#类方法-2" class="headerlink" title="类方法"></a>类方法</h2><h3 id="设置渲染首选项-1"><a href="#设置渲染首选项-1" class="headerlink" title="设置渲染首选项"></a>设置渲染首选项</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> minimumFontSize: <span class="type">CGFloat</span></span><br><span class="line"><span class="comment">//最小字体大小。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tabFocusesLinks: <span class="type">Bool</span></span><br></pre></td></tr></table></figure>
<h3 id="设置Java和JavaScript首选项"><a href="#设置Java和JavaScript首选项" class="headerlink" title="设置Java和JavaScript首选项"></a>设置Java和JavaScript首选项</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> javaEnabled: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示是否启用了Java。 -- 弃用</span></span><br><span class="line"><span class="keyword">var</span> javaScriptCanOpenWindowsAutomatically: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示JavaScript是否可以打开窗口而无需用户交互。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> javaScriptEnabled: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示是否启用JavaScript。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plugInsEnabled: <span class="type">Bool</span></span><br><span class="line"><span class="comment">//一个布尔值，指示是否启用了插件。 -- 弃用</span></span><br></pre></td></tr></table></figure>
<h1 id="WKProcessPool"><a href="#WKProcessPool" class="headerlink" title="WKProcessPool"></a><a href="https://developer.apple.com/documentation/webkit/wkprocesspool" target="_blank" rel="noopener">WKProcessPool</a></h1><p>WKProcessPool对象表示Web内容进程的池。</p>
<p>与Web视图关联的进程池由其Web视图配置指定。每个Web视图都有自己的Web内容流程，直到达到实现定义的流程限制；之后，具有相同流程池的Web视图最终共享Web内容流程。</p>
<blockquote>
<p>该类没有属性或它自己的方法</p>
</blockquote>
<h1 id="WKUserContentController"><a href="#WKUserContentController" class="headerlink" title="WKUserContentController"></a><a href="https://developer.apple.com/documentation/webkit/wkusercontentcontroller" target="_blank" rel="noopener">WKUserContentController</a></h1><p>该对象为Javascript提供了注射用户脚本到WKWebVIew的方法。</p>
<h2 id="类方法-3"><a href="#类方法-3" class="headerlink" title="类方法"></a>类方法</h2><h3 id="添加消息处理程序"><a href="#添加消息处理程序" class="headerlink" title="添加消息处理程序"></a>添加消息处理程序</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(WKScriptMessageHandler, name: String)</span></span></span><br><span class="line"><span class="comment">//添加脚本消息处理程序。</span></span><br></pre></td></tr></table></figure>
<h3 id="添加和删除用户脚本"><a href="#添加和删除用户脚本" class="headerlink" title="添加和删除用户脚本"></a>添加和删除用户脚本</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addUserScript</span><span class="params">(WKUserScript)</span></span></span><br><span class="line"><span class="comment">//添加用户脚本。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeAllUserScripts</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">//删除所有关联的用户脚本。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeScriptMessageHandler</span><span class="params">(forName: String)</span></span></span><br><span class="line"><span class="comment">//删除脚本消息处理程序。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> userScripts: [<span class="type">WKUserScript</span>]</span><br><span class="line"><span class="comment">//与用户内容控制器关联的用户脚本。</span></span><br></pre></td></tr></table></figure>
<h3 id="添加和删除内容规则"><a href="#添加和删除内容规则" class="headerlink" title="添加和删除内容规则"></a>添加和删除内容规则</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(WKContentRuleList)</span></span></span><br><span class="line"><span class="comment">//添加内容规则列表。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(WKContentRuleList)</span></span></span><br><span class="line"><span class="comment">//删除规则列表。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeAllContentRuleLists</span><span class="params">()</span></span></span><br><span class="line"><span class="comment">//删除所有规则列表。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WKContentRuleList</span></span></span><br><span class="line"><span class="class">//要应用于<span class="title">Web</span>内容的已编译规则列表。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">WKContentRuleListStore</span></span></span><br></pre></td></tr></table></figure>
<h1 id="WKWebView使用"><a href="#WKWebView使用" class="headerlink" title="WKWebView使用"></a>WKWebView使用</h1><p>上边的一些概念介绍完后，我们来使用一下</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p><img src="oftenuse.png" alt></p>
<h2 id="基本创建和配置"><a href="#基本创建和配置" class="headerlink" title="基本创建和配置"></a>基本创建和配置</h2><p>引入模块</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Webkit</span><br></pre></td></tr></table></figure>
<p>ViewController中实现<code>WKUIDelegate</code>、<code>WKNavigationDelegate</code>协议</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WKWebViewController</span>: <span class="title">UIViewController</span>, <span class="title">WKUIDelegate</span>, <span class="title">WKNavigationDelegate</span></span></span><br></pre></td></tr></table></figure>
<p>设置WKWebView的配置项</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> config = <span class="type">WKWebViewConfiguration</span>()</span><br><span class="line">config.preferences = <span class="type">WKPreferences</span>()</span><br><span class="line"><span class="comment">//IOS 下默认NO， Mac下为YES</span></span><br><span class="line">config.preferences.javaScriptCanOpenWindowsAutomatically = <span class="literal">false</span></span><br><span class="line"><span class="comment">//默认为YES</span></span><br><span class="line">config.preferences.javaScriptEnabled = <span class="literal">true</span></span><br><span class="line"><span class="comment">//默认为0</span></span><br><span class="line">config.preferences.minimumFontSize = <span class="number">10</span></span><br><span class="line"><span class="comment">//通过js与webview内容交互配置</span></span><br><span class="line">config.userContentController = <span class="type">WKUserContentController</span>()</span><br><span class="line"><span class="comment">// 在载入时就添加JS,页面通过调用showAlert函数即可</span></span><br><span class="line"><span class="keyword">let</span> script = <span class="type">WKUserScript</span>(source: <span class="string">"function showAlert() &#123; alert('在载入webview时通过Swift注入的JS方法'); &#125;"</span>, injectionTime: .atDocumentStart, forMainFrameOnly: <span class="literal">true</span>) <span class="comment">// 只添加到mainFrame中</span></span><br><span class="line">config.userContentController.addUserScript(script)</span><br></pre></td></tr></table></figure>
<p>创建WKWebVIew并遵守协议</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.webview = <span class="type">WKWebView</span>(frame: <span class="keyword">self</span>.view.frame, configuration: configWebView())</span><br><span class="line"><span class="keyword">self</span>.webview.uiDelegate = <span class="keyword">self</span></span><br><span class="line"><span class="keyword">self</span>.webview.navigationDelegate = <span class="keyword">self</span></span><br><span class="line"><span class="comment">//开启滑动返回</span></span><br><span class="line"><span class="keyword">self</span>.webview.allowsBackForwardNavigationGestures = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="WKWebVIew加载本地html"><a href="#WKWebVIew加载本地html" class="headerlink" title="WKWebVIew加载本地html"></a>WKWebVIew加载本地html</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"index"</span>, withExtension: <span class="string">"html"</span>)!</span><br><span class="line"><span class="keyword">self</span>.webview.loadFileURL(url, allowingReadAccessTo: <span class="type">Bundle</span>.main.bundleURL)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>html文件放在项目目录即可。有文件夹时请更改路径</p>
</blockquote>
<h2 id="实现WKUIDelegate"><a href="#实现WKUIDelegate" class="headerlink" title="实现WKUIDelegate"></a>实现WKUIDelegate</h2><p>在网页中一般都会含有alert、promt、confirm等的对话框，需要我们原生去编码实现。</p>
<p>先创建一个<code>index.html</code>放在项目目录下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert('这是按钮点击的alert')"</span>&gt;</span>alert<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"confirm('这是按钮点击的confirm')"</span>&gt;</span>confirm<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"prompt('这是按钮点击的promt', '默认文字')"</span>&gt;</span>promt<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>新标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建一个类并继承<code>ViewController</code>，并遵循<code>WKUIDelegate</code>协议：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WKUIViewController</span>: <span class="title">UIViewController</span>, <span class="title">WKUIDelegate</span></span></span><br></pre></td></tr></table></figure>
<p>导入库，并添加webview到界面上，并加载本地index.html文件。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"index"</span>, withExtension: <span class="string">"html"</span>)!</span><br><span class="line"><span class="keyword">self</span>.webview.loadFileURL(url, allowingReadAccessTo: <span class="type">Bundle</span>.main.bundleURL)</span><br></pre></td></tr></table></figure>
<p>预览一下界面：</p>
<p><img src="uidelegatedemo.png" alt></p>
<p>可以发现点击是没有任何反应的，但是不实现WKUIDelegate协议或者实现了协议但不实现方法是不会报错的，但是实现了方法又不在方法体内调用回调函数是会报错的。</p>
<p>这里使用UIAlertController简单实现UI：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Alert</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, runJavaScriptAlertPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>(title: <span class="string">"提示"</span>, message: message, preferredStyle: <span class="type">UIAlertController</span>.<span class="type">Style</span>.alert)</span><br><span class="line">  <span class="keyword">let</span> sure = <span class="type">UIAlertAction</span>(title: <span class="string">"确定"</span>, style: <span class="type">UIAlertAction</span>.<span class="type">Style</span>.<span class="keyword">default</span>) &#123; (action: <span class="type">UIAlertAction</span>) <span class="keyword">in</span></span><br><span class="line">    completionHandler()</span><br><span class="line">  &#125;</span><br><span class="line">  alert.addAction(sure)</span><br><span class="line">  <span class="keyword">self</span>.present(alert, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//Confirm</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, runJavaScriptConfirmPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping <span class="params">(Bool)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>(title: <span class="string">"提示"</span>, message: message, preferredStyle: <span class="type">UIAlertController</span>.<span class="type">Style</span>.alert)</span><br><span class="line">  <span class="keyword">let</span> sure = <span class="type">UIAlertAction</span>(title: <span class="string">"确定"</span>, style: <span class="type">UIAlertAction</span>.<span class="type">Style</span>.<span class="keyword">default</span>) &#123; (action: <span class="type">UIAlertAction</span>) <span class="keyword">in</span></span><br><span class="line">    completionHandler(<span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> cancel = <span class="type">UIAlertAction</span>(title: <span class="string">"取消"</span>, style: <span class="type">UIAlertAction</span>.<span class="type">Style</span>.cancel) &#123; (action: <span class="type">UIAlertAction</span>) <span class="keyword">in</span></span><br><span class="line">    completionHandler(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  alert.addAction(sure)</span><br><span class="line">  alert.addAction(cancel)</span><br><span class="line">  <span class="keyword">self</span>.present(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//Prompt</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: String, defaultText: String?, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping <span class="params">(String?)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>(title: <span class="string">"提示"</span>, message: prompt, preferredStyle: <span class="type">UIAlertController</span>.<span class="type">Style</span>.alert)</span><br><span class="line">  alert.addTextField &#123; (field: <span class="type">UITextField</span>) <span class="keyword">in</span></span><br><span class="line">    field.text = defaultText</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> cancel = <span class="type">UIAlertAction</span>(title: <span class="string">"取消"</span>, style: <span class="type">UIAlertAction</span>.<span class="type">Style</span>.cancel) &#123; (action: <span class="type">UIAlertAction</span>) <span class="keyword">in</span></span><br><span class="line">    completionHandler(<span class="literal">nil</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> sure = <span class="type">UIAlertAction</span>(title: <span class="string">"确定"</span>, style: <span class="type">UIAlertAction</span>.<span class="type">Style</span>.<span class="keyword">default</span>) &#123; (action: <span class="type">UIAlertAction</span>) <span class="keyword">in</span></span><br><span class="line">    completionHandler(alert.textFields?.first?.text)</span><br><span class="line">  &#125;</span><br><span class="line">  alert.addAction(sure)</span><br><span class="line">  alert.addAction(cancel)</span><br><span class="line">  <span class="keyword">self</span>.present(alert, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//页面是弹出窗口时</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, createWebViewWith configuration: WKWebViewConfiguration, <span class="keyword">for</span> navigationAction: WKNavigationAction, windowFeatures: WKWindowFeatures)</span></span> -&gt; <span class="type">WKWebView?</span> &#123;</span><br><span class="line">  <span class="comment">//_blank处理</span></span><br><span class="line">  <span class="keyword">self</span>.webview.load(navigationAction.request)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现效果：</p>
<p><img src="uidelegatedemo2.png" alt></p>
<h2 id="实现标题栏和加载进度条"><a href="#实现标题栏和加载进度条" class="headerlink" title="实现标题栏和加载进度条"></a>实现标题栏和加载进度条</h2><p>WKWebView中有三个属性是支持KVO的。因此我们可以通过监听其值的变化来实现对应的功能，即<code>loading</code>、<code>title</code>、<code>estimatedProgress</code>三个属性。</p>
<p>新建一个类并继承<code>ViewController</code>，并遵循<code>WKUIDelegate</code>与<code>WKNavigationDelegate</code>协议：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrowserViewController</span>: <span class="title">UIViewController</span>, <span class="title">WKUIDelegate</span>, <span class="title">WKNavigationDelegate</span></span></span><br></pre></td></tr></table></figure>
<p>初始化WKWebView方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webview: <span class="type">WKWebView!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initWebView</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">self</span>.webview = <span class="type">WKWebView</span>(frame: <span class="keyword">self</span>.view.frame, configuration: <span class="type">WKWebViewConfiguration</span>())</span><br><span class="line">  <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.webview)</span><br><span class="line">  <span class="keyword">self</span>.webview.load(<span class="type">URLRequest</span>(url: <span class="type">URL</span>(string: <span class="string">"https://objccn.io/"</span>)!))</span><br><span class="line">  <span class="comment">//kvo监听以实现标题栏和进度条</span></span><br><span class="line">  <span class="keyword">self</span>.webview.addObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"estimatedProgress"</span>, options: <span class="type">NSKeyValueObservingOptions</span>.new, context: <span class="literal">nil</span>)</span><br><span class="line">  <span class="keyword">self</span>.webview.addObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"title"</span>, options: <span class="type">NSKeyValueObservingOptions</span>.new, context: <span class="literal">nil</span>)</span><br><span class="line">  <span class="comment">//遵守协议</span></span><br><span class="line">  <span class="keyword">self</span>.webview.uiDelegate = <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">self</span>.webview.navigationDelegate = <span class="keyword">self</span></span><br><span class="line">  <span class="comment">//开启滑动返回</span></span><br><span class="line">  <span class="keyword">self</span>.webview.allowsBackForwardNavigationGestures = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始化进度条方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initProgress</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//添加进度条</span></span><br><span class="line">  progress = <span class="type">UIProgressView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">UIScreen</span>.main.bounds.width, height: <span class="number">2</span>))</span><br><span class="line">  progress.backgroundColor = <span class="type">UIColor</span>.blue</span><br><span class="line">  <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.progress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并在ViewDidLoad方法中调用。重载监听方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在监听方法中监听进度条和标题的变化</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">observeValue</span><span class="params">(forKeyPath keyPath: String?, of object: <span class="keyword">Any</span>?, change: [NSKeyValueChangeKey : <span class="keyword">Any</span>]?, context: UnsafeMutableRawPointer?)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> keyPath == <span class="string">"estimatedProgress"</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.progress.setProgress(<span class="type">Float</span>(<span class="keyword">self</span>.webview.estimatedProgress), animated: <span class="literal">true</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> keyPath == <span class="string">"title"</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.navigationController?.title = <span class="keyword">self</span>.webview.title</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.observeValue(forKeyPath: keyPath, of: object, change: change, context: context)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在实现WKNavigationDelegate的两个代理方法以实现进度条的隐藏和现实</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">- (void)webView:(<span class="type">WKWebView</span> *)webView didStartProvisionalNavigation:(<span class="type">WKNavigation</span> *)navigation &#123;</span><br><span class="line">    [<span class="keyword">self</span>.progressView setHidden:<span class="type">NO</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导航完成时调用。</span></span><br><span class="line">- (void)webView:(<span class="type">WKWebView</span> *)webView didFinishNavigation:(<span class="type">WKNavigation</span> *)navigation &#123;</span><br><span class="line">    <span class="keyword">self</span>.progress.progress = <span class="number">0.0</span>;</span><br><span class="line">  	[<span class="keyword">self</span>.progressView setHidden:<span class="type">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在页面消失后取消监听，否则可能会出现一些未知的异常，在ViewController生命周期的viewDidDisappear方法中实现：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">  <span class="keyword">super</span>.viewDidDisappear(animated)</span><br><span class="line">  <span class="keyword">self</span>.webview.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"estimatedProgress"</span>)</span><br><span class="line">  <span class="keyword">self</span>.webview.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"title"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="browserdemo.png" alt></p>
<h2 id="应用内H5跳转第三方APP"><a href="#应用内H5跳转第三方APP" class="headerlink" title="应用内H5跳转第三方APP"></a>应用内H5跳转第三方APP</h2><p>应用内web视图页面都会有一些跳转第三方APP的需求，获取跳转APP Store。</p>
<p>这里有一个<code>redirect.html</code>页面，分别是跳转粉丝福利购、拨打电话、跳转微信APP Store。放在了项目根目录下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">            <span class="attr">href</span>=<span class="string">"taobao://uland.taobao.com/coupon/edetail?e=cSq3k99USIAGQASttHIRqbFZJ9euuZYQylASqMukPydjTfHRi%2FIrN%2BlmuMDII2iZ%2FASFi097%2BCOSU6IuEVIxtk4aJXRcltkaWv9OAj9evKDahba4h8MrZ%2Bdth9k8bqqSHKTgBzHkoM7XTQC0vfau6E%2F9Zk7cDx8UPY2GSU4OeGe2s6x1NZzECw73BakMbfZC&amp;traceId=0b01319f15597018122426441e&amp;union_lens=lensId:0b015dd6_0b58_16b2578f429_586d&amp;xId=jwddSujflRkngxB4Q9tRDr3m1VxxlYIIvkQWXrAl4fhWOjMBIOJ0GkUZr8KQHPXIRTVNgd51FScfpn3ZqARc4s&amp;activityId=d236dbef811a47b69494c70b8b22012e"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel://15622472425"</span>&gt;</span>打电话给客服<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://itunes.apple.com/cn/app/wechat/id414478124?mt=8"</span>&gt;</span>微信链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建WKWebView就不再多讲了，需要跳转第三方APP或者打开APP Store的链接就需要遵循<code>WKNavigationDelegate</code>协议，并实现<code>webView(_:decidePolicyFor:)</code>方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping <span class="params">(WKNavigationActionPolicy)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">  <span class="comment">//判断scheme，http、https、file则正常在页面加载</span></span><br><span class="line">  <span class="keyword">let</span> scheme = navigationAction.request.url?.scheme</span><br><span class="line">  <span class="keyword">if</span> scheme == <span class="string">"http"</span> || scheme == <span class="string">"https"</span> || scheme == <span class="string">"file"</span> &#123;</span><br><span class="line">    <span class="comment">//允许导航</span></span><br><span class="line">    decisionHandler(<span class="type">WKNavigationActionPolicy</span>.allow)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//否则例如scheme为taobao、alipay等则根据第三方sdk在网页中配置url，这里是都可以跳转</span></span><br><span class="line">    <span class="comment">//取消导航，打开APP</span></span><br><span class="line">    <span class="type">UIApplication</span>.shared.openURL(navigationAction.request.url!)</span><br><span class="line">    decisionHandler(<span class="type">WKNavigationActionPolicy</span>.cancel)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于自定义的 <code>URL Scheme</code> 类型链接，如果不实现该方法，在 <code>WKWebView</code> 里直接点击则会报错：<code>Error Domain=NSURLErrorDomain Code=-1002 &quot;unsupported URL&quot;</code>。</p>
<p>如果需要具体判断到打开某些app只要具体判断scheme即可。</p>
<p>跳转APP Store的话因为app store的网页已经配置了Universal Link跳转，所以不需要额外的配置即可跳转。</p>
<p>注意：必需要在真机上测试。</p>
</blockquote>
<h2 id="WKWebView的3Dtouch预览功能"><a href="#WKWebView的3Dtouch预览功能" class="headerlink" title="WKWebView的3Dtouch预览功能"></a>WKWebView的3Dtouch预览功能</h2><p><strong>将WKWebView的<code>allowsLinkPreview</code>属性设置<code>NO</code>即可关闭</strong></p>
<h1 id="仿微信WebView"><a href="#仿微信WebView" class="headerlink" title="仿微信WebView"></a>仿微信WebView</h1><p>运行效果：</p>
<p><img src="https://github.static.si-yee.com/IOSWKWebView/20200604140255.png" alt></p>
<p>实现代码：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  CommonWebViewController.swift</span></span><br><span class="line"><span class="comment">//  xianqi</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by yzy on 2020/4/17.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> WebKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonWebViewController</span>: <span class="title">UIViewController</span>, <span class="title">WKUIDelegate</span>, <span class="title">WKNavigationDelegate</span>, <span class="title">UIScrollViewDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 加载的链接</span></span><br><span class="line">    <span class="keyword">var</span> requestUrl: <span class="type">String?</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.webview.load(<span class="type">URLRequest</span>(url: <span class="type">URL</span>(string: <span class="keyword">self</span>.requestUrl!)!))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="comment">//四周均不延伸，以免出现遮挡</span></span><br><span class="line">        <span class="keyword">self</span>.edgesForExtendedLayout = []</span><br><span class="line">        <span class="keyword">self</span>.initWebView()</span><br><span class="line">        <span class="keyword">self</span>.initProgressView()</span><br><span class="line">        <span class="keyword">self</span>.setupToolbarItems()</span><br><span class="line">        <span class="comment">// 加载URL</span></span><br><span class="line">        <span class="keyword">self</span>.requestUrl = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: toolbar</span></span><br><span class="line">        </span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> goBackItem: <span class="type">UIBarButtonItem</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> item: <span class="type">UIBarButtonItem</span> = <span class="type">UIBarButtonItem</span>(image: <span class="type">UIImage</span>(named: <span class="string">"icon_left_arrow"</span>), style: .done, target: <span class="keyword">self</span>, action: #selector(<span class="type">CommonWebViewController</span>.goBack))</span><br><span class="line">        item.tintColor = <span class="type">UIColor</span>.black</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> goForwardItem: <span class="type">UIBarButtonItem</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> item: <span class="type">UIBarButtonItem</span> = <span class="type">UIBarButtonItem</span>(image: <span class="type">UIImage</span>(named: <span class="string">"icon_right_arrow"</span>), style: .done, target: <span class="keyword">self</span>, action: #selector(<span class="type">CommonWebViewController</span>.goForword))</span><br><span class="line">        item.tintColor = <span class="type">UIColor</span>.black</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> flexibleItem: <span class="type">UIBarButtonItem</span> = &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .flexibleSpace, target: <span class="literal">nil</span>, action: <span class="literal">nil</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">goBack</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.webview.canGoBack &#123;</span><br><span class="line">            webview.goBack()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">goForword</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.webview.canGoForward &#123;</span><br><span class="line">            webview.goForward()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setupToolbarItems</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.navigationController?.toolbar.isTranslucent = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">self</span>.toolbarItems = [flexibleItem, goBackItem, flexibleItem, goForwardItem, flexibleItem]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewWillAppear(animated)</span><br><span class="line">        <span class="comment">// 当Push进来时如果页面没有显示NavBar，则WebView手动显示</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.navigationController?.navigationBar.isHidden ?? <span class="literal">false</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.navigationController?.setNavigationBarHidden(<span class="literal">false</span>, animated: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidAppear(animated)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewWillDisappear(animated)</span><br><span class="line">        hiddenToolbar()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hiddenToolbar</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.navigationController?.setToolbarHidden(<span class="literal">true</span>, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">visibleToolbar</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.navigationController != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.navigationController!.isToolbarHidden &#123;</span><br><span class="line">                <span class="keyword">self</span>.navigationController?.setToolbarHidden(<span class="literal">false</span>, animated: <span class="literal">true</span>)</span><br><span class="line">                <span class="keyword">self</span>.goForwardItem.isEnabled = <span class="keyword">self</span>.webview.canGoForward</span><br><span class="line">                <span class="keyword">self</span>.goBackItem.isEnabled = <span class="keyword">self</span>.webview.canGoBack</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: webview相关</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> webview: <span class="type">WKWebView</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> wv: <span class="type">WKWebView</span> = <span class="type">WKWebView</span>()</span><br><span class="line">        <span class="comment">// normal setting</span></span><br><span class="line">        wv.uiDelegate = <span class="keyword">self</span></span><br><span class="line">        wv.navigationDelegate = <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">return</span> wv</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> progressView: <span class="type">UIProgressView</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> view: <span class="type">UIProgressView</span> = <span class="type">UIProgressView</span>(progressViewStyle: .bar)</span><br><span class="line">        view.trackTintColor = <span class="type">UIColor</span>.gray</span><br><span class="line">        view.progressTintColor = <span class="type">UIColor</span>.green.withAlphaComponent(<span class="number">0.55</span>)</span><br><span class="line">        <span class="keyword">return</span> view</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">initWebView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// add view</span></span><br><span class="line">        <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.webview)</span><br><span class="line">        <span class="comment">// add constraint</span></span><br><span class="line">        <span class="keyword">self</span>.webview.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">11.0</span>, *) &#123;</span><br><span class="line">            <span class="keyword">self</span>.view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: <span class="keyword">self</span>.webview, attribute: .top, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="keyword">self</span>.view.safeAreaLayoutGuide, attribute: .top, multiplier: <span class="number">1.0</span>, constant: <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">self</span>.view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: <span class="keyword">self</span>.webview, attribute: .bottom, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="keyword">self</span>.view.safeAreaLayoutGuide, attribute: .bottom, multiplier: <span class="number">1.0</span>, constant: <span class="number">0</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">            <span class="keyword">self</span>.view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: <span class="keyword">self</span>.webview, attribute: .top, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="keyword">self</span>.view, attribute: .top, multiplier: <span class="number">1.0</span>, constant: <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">self</span>.view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: <span class="keyword">self</span>.webview, attribute: .bottom, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="keyword">self</span>.view, attribute: .bottom, multiplier: <span class="number">1.0</span>, constant: <span class="number">0</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: <span class="keyword">self</span>.webview, attribute: .<span class="keyword">left</span>, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="keyword">self</span>.view, attribute: .<span class="keyword">left</span>, multiplier: <span class="number">1.0</span>, constant: <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">self</span>.view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: <span class="keyword">self</span>.webview, attribute: .<span class="keyword">right</span>, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="keyword">self</span>.view, attribute: .<span class="keyword">right</span>, multiplier: <span class="number">1.0</span>, constant: <span class="number">0</span>))</span><br><span class="line">        <span class="comment">// 监听进度事件</span></span><br><span class="line">        <span class="keyword">self</span>.webview.addObserver(<span class="keyword">self</span>, forKeyPath: #keyPath(<span class="type">WKWebView</span>.estimatedProgress), options: .new, context: <span class="literal">nil</span>)</span><br><span class="line">        <span class="comment">// 监听网页标题</span></span><br><span class="line">        <span class="keyword">self</span>.webview.addObserver(<span class="keyword">self</span>, forKeyPath: #keyPath(<span class="type">WKWebView</span>.title), options: .new, context: <span class="literal">nil</span>)</span><br><span class="line">        <span class="comment">// 监听前进后退</span></span><br><span class="line">        <span class="keyword">self</span>.webview.addObserver(<span class="keyword">self</span>, forKeyPath: #keyPath(<span class="type">WKWebView</span>.canGoForward), options: .new, context: <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">self</span>.webview.addObserver(<span class="keyword">self</span>, forKeyPath: #keyPath(<span class="type">WKWebView</span>.canGoBack), options: .new, context: <span class="literal">nil</span>)</span><br><span class="line">        <span class="comment">// 滚动监听</span></span><br><span class="line">        <span class="keyword">self</span>.webview.scrollView.delegate = <span class="keyword">self</span></span><br><span class="line">        <span class="comment">// 设置UA</span></span><br><span class="line">        <span class="keyword">self</span>.webview.evaluateJavaScript(<span class="string">"navigator.userAgent"</span>) &#123; (oldAgent: <span class="type">Any?</span>, error: <span class="type">Error?</span>) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> error == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">//oldAgent = [NSString stringWithFormat:@"Mozilla/5.0 (%@; CPU iPhone OS %@ like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148", [[UIDevice currentDevice] model], [[[UIDevice currentDevice] systemVersion] stringByReplacingOccurrencesOfString:@"." withString:@"_"]];</span></span><br><span class="line">                <span class="keyword">let</span> uaStr: <span class="type">String</span> = oldAgent <span class="keyword">as</span>? <span class="type">String</span> ?? <span class="string">"Mozilla/5.0 (\(UIDevice.current.model); CPU iPhone OS \(UIDevice.current.systemVersion) like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148"</span></span><br><span class="line">                <span class="comment">// 保存至本地</span></span><br><span class="line">                <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(uaStr, forKey: <span class="string">"USER_AGENT"</span>)</span><br><span class="line">                <span class="comment">// 获取app信息</span></span><br><span class="line">                <span class="keyword">let</span> infoDic = <span class="type">Bundle</span>.main.infoDictionary</span><br><span class="line">                <span class="comment">// 获取App的版本号</span></span><br><span class="line">                <span class="keyword">let</span> appVersion = infoDic?[<span class="string">"CFBundleShortVersionString"</span>]</span><br><span class="line">                <span class="comment">// 获取App的build版本</span></span><br><span class="line">                <span class="keyword">let</span> appBuildVersion = infoDic?[<span class="string">"CFBundleVersion"</span>]</span><br><span class="line">                <span class="comment">// 真实拼接 UA</span></span><br><span class="line">                <span class="keyword">let</span> realUAStr = <span class="string">"\(uaStr)#xianqi#\(appVersion ?? 0)#\(appBuildVersion ?? 0)"</span></span><br><span class="line">                <span class="keyword">self</span>.webview.customUserAgent = realUAStr</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手势拖动时控制Toolbar显示和隐藏 </span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.webview.backForwardList.backList.<span class="built_in">count</span> &lt;= <span class="number">0</span> &amp;&amp; <span class="keyword">self</span>.webview.backForwardList.forwardList.<span class="built_in">count</span> &lt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> vel = scrollView.panGestureRecognizer.velocity(<span class="keyword">in</span>: scrollView)</span><br><span class="line">        <span class="keyword">if</span> vel.y &lt; -<span class="number">8</span> &#123;</span><br><span class="line">            <span class="comment">// 向上拖动</span></span><br><span class="line">            hiddenToolbar()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> vel.y &gt; <span class="number">8</span> &#123;</span><br><span class="line">            <span class="comment">// 向下拖动</span></span><br><span class="line">            visibleToolbar()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 监听</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - keyPath: keyPath description</span></span><br><span class="line">    <span class="comment">///   - object: object description</span></span><br><span class="line">    <span class="comment">///   - change: change description</span></span><br><span class="line">    <span class="comment">///   - context: context description</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">observeValue</span><span class="params">(forKeyPath keyPath: String?, of object: <span class="keyword">Any</span>?, change: [NSKeyValueChangeKey : <span class="keyword">Any</span>]?, context: UnsafeMutableRawPointer?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> keyPath == #keyPath(<span class="type">WKWebView</span>.estimatedProgress) &#123;</span><br><span class="line">            <span class="keyword">self</span>.showProgressView(progress: <span class="type">Float</span>(<span class="keyword">self</span>.webview.estimatedProgress))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> keyPath == #keyPath(<span class="type">WKWebView</span>.title) &#123;</span><br><span class="line">            <span class="keyword">self</span>.observeWebTitle(title: <span class="keyword">self</span>.webview.title)</span><br><span class="line">            <span class="comment">// 控制显示Toolbar</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.webview.backForwardList.backList.<span class="built_in">count</span> &gt; <span class="number">0</span> || <span class="keyword">self</span>.webview.backForwardList.forwardList.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">                visibleToolbar()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> keyPath == #keyPath(<span class="type">WKWebView</span>.canGoForward) &#123;</span><br><span class="line">            <span class="keyword">self</span>.goForwardItem.isEnabled = <span class="keyword">self</span>.webview.canGoForward</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> keyPath == #keyPath(<span class="type">WKWebView</span>.canGoBack) &#123;</span><br><span class="line">            <span class="keyword">self</span>.goBackItem.isEnabled = <span class="keyword">self</span>.webview.canGoBack</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.observeValue(forKeyPath: keyPath, of: object, change: change, context: context)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 用于方便子类重写</span></span><br><span class="line">    <span class="comment">/// - Parameter title: webview的标题</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">observeWebTitle</span><span class="params">(title: String?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.navigationItem.title = title</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">initProgressView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// layout</span></span><br><span class="line">        <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.progressView)</span><br><span class="line">        <span class="comment">// add constraint</span></span><br><span class="line">        <span class="keyword">self</span>.progressView.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> #available(iOS <span class="number">11.0</span>, *) &#123;</span><br><span class="line">            <span class="keyword">self</span>.view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: <span class="keyword">self</span>.progressView, attribute: .top, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="keyword">self</span>.view.safeAreaLayoutGuide, attribute: .top, multiplier: <span class="number">1.0</span>, constant: <span class="number">0</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">            <span class="keyword">self</span>.view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: <span class="keyword">self</span>.progressView, attribute: .top, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="keyword">self</span>.view, attribute: .top, multiplier: <span class="number">1.0</span>, constant: <span class="number">0</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置宽度</span></span><br><span class="line">        <span class="keyword">self</span>.view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: <span class="keyword">self</span>.progressView, attribute: .<span class="keyword">left</span>, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="keyword">self</span>.view, attribute: .<span class="keyword">left</span>, multiplier: <span class="number">1.0</span>, constant: <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">self</span>.view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: <span class="keyword">self</span>.progressView, attribute: .<span class="keyword">right</span>, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="keyword">self</span>.view, attribute: .<span class="keyword">right</span>, multiplier: <span class="number">1.0</span>, constant: <span class="number">0</span>))</span><br><span class="line">        <span class="comment">// 设置高度</span></span><br><span class="line">        <span class="keyword">self</span>.progressView.addConstraint(<span class="type">NSLayoutConstraint</span>(item: <span class="keyword">self</span>.progressView, attribute: .height, relatedBy: .<span class="built_in">equal</span>, toItem: <span class="literal">nil</span>, attribute: .height, multiplier: <span class="number">1.0</span>, constant: <span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showProgressView</span><span class="params">(progress: Float)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.progressView.isHidden &#123;</span><br><span class="line">            <span class="keyword">self</span>.progressView.isHidden = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.progressView.setProgress(progress, animated: <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">if</span> progress == <span class="number">1.0</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.hideProgressView()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hideProgressView</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.progressView.isHidden = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">self</span>.progressView.setProgress(<span class="number">0.1</span>, animated: <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: WKUIDelegate</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, runJavaScriptAlertPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> alert = <span class="type">UIAlertController</span>(title: <span class="string">"提示"</span>, message: message, preferredStyle: <span class="type">UIAlertController</span>.<span class="type">Style</span>.alert)</span><br><span class="line">        <span class="keyword">let</span> sure = <span class="type">UIAlertAction</span>(title: <span class="string">"确定"</span>, style: <span class="type">UIAlertAction</span>.<span class="type">Style</span>.<span class="keyword">default</span>) &#123; (action: <span class="type">UIAlertAction</span>) <span class="keyword">in</span></span><br><span class="line">          completionHandler()</span><br><span class="line">        &#125;</span><br><span class="line">        alert.addAction(sure)</span><br><span class="line">        <span class="keyword">self</span>.present(alert, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: WKNavigationDelegate</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.hideProgressView()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping <span class="params">(WKNavigationActionPolicy)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> scheme = navigationAction.request.url?.scheme</span><br><span class="line">        <span class="comment">// about 用于解决LayUI框架显示问题</span></span><br><span class="line">        <span class="keyword">if</span> scheme == <span class="string">"http"</span> || scheme == <span class="string">"https"</span> || scheme == <span class="string">"file"</span> || scheme == <span class="string">"about"</span> &#123;</span><br><span class="line">            decisionHandler(.allow)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则例如scheme为taobao、alipay等则根据第三方sdk在网页中配置url，这里是都可以跳转</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">UIApplication</span>.shared.canOpenURL(navigationAction.request.url!) &#123;</span><br><span class="line">            <span class="comment">//取消导航，打开APP</span></span><br><span class="line">            <span class="type">UIApplication</span>.shared.openURL(navigationAction.request.url!)</span><br><span class="line">            <span class="comment">// 取消</span></span><br><span class="line">            decisionHandler(.cancel)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        decisionHandler(.allow)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.webview.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"estimatedProgress"</span>)</span><br><span class="line">        <span class="keyword">self</span>.webview.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"title"</span>)</span><br><span class="line">        <span class="keyword">self</span>.webview.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"url"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>包括了设置UA的方式，至于左侧的关闭按钮和右侧的更多按钮则可以自己实现美化。这里不多实现了。</p>
</blockquote>
<h1 id="资料参考"><a href="#资料参考" class="headerlink" title="资料参考"></a>资料参考</h1><p><a href="https://developer.apple.com/documentation/webkit/wkwebview" target="_blank" rel="noopener">https://developer.apple.com/documentation/webkit/wkwebview</a></p>
<p><a href="https://kangzubin.com/wkwebview-link/" target="_blank" rel="noopener">https://kangzubin.com/wkwebview-link/</a></p>
<p><a href="https://www.jianshu.com/p/bf2008d80e2d" target="_blank" rel="noopener">https://www.jianshu.com/p/bf2008d80e2d</a></p>
<p><a href="https://blog.csdn.net/kmonarch/article/details/83585795" target="_blank" rel="noopener">https://blog.csdn.net/kmonarch/article/details/83585795</a></p>
<p><a href="https://www.jianshu.com/p/0f825df61037" target="_blank" rel="noopener">https://www.jianshu.com/p/0f825df61037</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>解决AndroidStudio导入项目在 Building gradle project info 一直卡住</title>
    <url>/2019/02/28/%E8%A7%A3%E5%86%B3AndroidStudio%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E5%9C%A8-Building-gradle-project-info-%E4%B8%80%E7%9B%B4%E5%8D%A1%E4%BD%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong> Android studio一个小小的痛点 </strong></p>
<a id="more"></a>
<h1 id="解决AndroidStudio导入项目在-Building-gradle-project-info-一直卡住"><a href="#解决AndroidStudio导入项目在-Building-gradle-project-info-一直卡住" class="headerlink" title="解决AndroidStudio导入项目在 Building gradle project info 一直卡住"></a>解决AndroidStudio导入项目在 Building gradle project info 一直卡住</h1><p>Android Studio导入项目的时候，一直卡在Building gradle project info这一步，主要原因还是因为被墙的结果。gradle官网虽然可以访问，但是速度连蜗牛都赶不上…</p>
<h2 id="三种解决办法"><a href="#三种解决办法" class="headerlink" title="三种解决办法"></a>三种解决办法</h2><h3 id="离线包下载导入方式"><a href="#离线包下载导入方式" class="headerlink" title="离线包下载导入方式"></a>离线包下载导入方式</h3><p>查看所需gradle版本：打开<code>C:\Users\用户名\.gradle\wrapper\dists\gradle-x.xx-all\xxxxxxxxxxxx</code>，<br>如果里面的gradle-xx-all.zip不完整（如0KB），则说明下载不成功，需要下载离线包放置到该目录下。</p>
<p>下载地址：<a href="http://note.youdao.com/" target="_blank" rel="noopener">https://services.gradle.org/distributions/</a></p>
<h3 id="修改gradle-wrapper-properties方式"><a href="#修改gradle-wrapper-properties方式" class="headerlink" title="修改gradle-wrapper.properties方式"></a>修改gradle-wrapper.properties方式</h3><p>1、随便找一个你之前能够运行的AS项目</p>
<p>2、打开项目的<code>/gradle/wrapper/gradle-wrapper.properties</code>文件</p>
<p>3、复制最后一行distributionUrl这一整行的内容，例如：<code>distributionUrl=https\://services.gradle.org/distributions/</code>gradle-2.8-all.zip，替换到你要导入的项目里的gradle-wrapper.properties文件中。</p>
<p>4、重启Android Studio，重新导入项目就可以了~~</p>
<h3 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h3><p>翻开中国伟大的墙就可以了。本人一直用的蓝灯。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac安装Mysql教程</title>
    <url>/2019/02/25/Mac%E5%AE%89%E8%A3%85Mysql%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>MacOS10以上</li>
</ul>
<a id="more"></a>
<h1 id="下载Mysql"><a href="#下载Mysql" class="headerlink" title="下载Mysql"></a>下载Mysql</h1><p>这里以Mysql5.7为例</p>
<p><a href="https://dev.mysql.com/downloads/mysql/5.7.html#downloads" target="_blank" rel="noopener">官网</a><br>为了方便开发，推荐直接选择dmg文件下载安装</p>
<p><img src="download.png" alt></p>
<h1 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h1><p>直接双击即可，傻瓜式操作。</p>
<blockquote>
<p>注意，安装成功后会弹出一个对话框，你直接忽略了可以看通知面板，<br>这个就是Mysql的初始密码<br>如图</p>
</blockquote>
<p><img src="mysqlpwd.png" alt></p>
<h1 id="启动Mysql"><a href="#启动Mysql" class="headerlink" title="启动Mysql"></a>启动Mysql</h1><p>安装完毕后系统偏好设置会多出一个选项</p>
<p><img src="pane.png" alt></p>
<p>点击进去</p>
<p><img src="mysqlpane.png" alt></p>
<p>安装之后，默认MySQL的状态是stopped，关闭的，需要点击“Start MySQL Server”按钮来启动它，启动之后，状态会变成running。下方还有一个复选框按钮，可以设置是否在系统启动的时候自动启动MySQL，默认是勾选的，建议取消，节省开机时间。</p>
<h1 id="终端连接Mysql"><a href="#终端连接Mysql" class="headerlink" title="终端连接Mysql"></a>终端连接Mysql</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>添加<code>export PATH=${PATH}:/usr/local/mysql/bin</code>即可</p>
<p>登陆Mysql<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></p>
<p>输入刚开始安装对话框中提示的初始密码，登陆成功后请修改密码，否则无法执行其他命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'newpassword'</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>环境搭建</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac使用HomeBrew安装Composer</title>
    <url>/2019/02/25/Mac%E4%BD%BF%E7%94%A8HomeBrew%E5%AE%89%E8%A3%85Composer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>MacOS10以上</li>
</ul>
<a id="more"></a>
<h1 id="安装HomeBrew"><a href="#安装HomeBrew" class="headerlink" title="安装HomeBrew"></a>安装HomeBrew</h1><p>homebrew官网 <a href="https://brew.sh/" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure>
<p>回车安装即可</p>
<h1 id="安装Composer"><a href="#安装Composer" class="headerlink" title="安装Composer"></a>安装Composer</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install composer</span><br></pre></td></tr></table></figure>
<p>安装完毕后composer可能不是最新版本，也可以升级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer self-update</span><br></pre></td></tr></table></figure>
<h1 id="修改Packagist-镜像"><a href="#修改Packagist-镜像" class="headerlink" title="修改Packagist 镜像"></a>修改Packagist 镜像</h1><p>修改 <code>composer</code> 的全局配置文件</p>
<p>打开命令行窗口（windows用户）或控制台（Linux、Mac 用户）并执行如下命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure></p>
<h1 id="使用composer"><a href="#使用composer" class="headerlink" title="使用composer"></a>使用composer</h1><p>举例我要引用phalcon的开发工具包。在项目文件夹下新建文件composer.json，并添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;phalcon/devtools&quot;: &quot;dev-master&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure>
<p>项目文件夹下就会有vendor文件夹，依赖文件都在这下面啦。<br>使用时直接包含autoload.php就可以了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多命令可以直接查看官方文档<a href="http://docs.phpcomposer.com/03-cli.html" target="_blank" rel="noopener">http://docs.phpcomposer.com/03-cli.html</a></p>
</blockquote>
<p>参考链接：</p>
<ul>
<li><a href="https://www.jianshu.com/p/2b96cc9f593e" target="_blank" rel="noopener">https://www.jianshu.com/p/2b96cc9f593e</a></li>
<li><a href="https://pkg.phpcomposer.com/" target="_blank" rel="noopener">https://pkg.phpcomposer.com/</a></li>
<li><a href="https://getcomposer.org/" target="_blank" rel="noopener">https://getcomposer.org/</a></li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Homebrew</tag>
        <tag>Mac</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac使用HomeBrew安装Maven</title>
    <url>/2019/02/20/Mac%E4%BD%BF%E7%94%A8HomeBrew%E5%AE%89%E8%A3%85Maven/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>MacOS10以上</li>
<li>jdk1.6或以上</li>
</ul>
<a id="more"></a>
<h1 id="安装HomeBrew"><a href="#安装HomeBrew" class="headerlink" title="安装HomeBrew"></a>安装HomeBrew</h1><p>homebrew官网 <a href="https://brew.sh/" target="_blank" rel="noopener">链接</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure>
<p>回车安装即可</p>
<h1 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew search maven</span><br><span class="line">==&gt; Formulae</span><br><span class="line">maven ✔                    maven-shell                maven@3.3</span><br><span class="line">maven-completion           maven@3.2                  maven@3.5</span><br><span class="line"></span><br><span class="line">==&gt; Casks</span><br><span class="line">homebrew/cask-fonts/font-maven-pro</span><br><span class="line">$ brew install maven</span><br></pre></td></tr></table></figure>
<h1 id="验证maven是否安装成功"><a href="#验证maven是否安装成功" class="headerlink" title="验证maven是否安装成功"></a>验证maven是否安装成功</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure>
<h1 id="配置Maven仓库"><a href="#配置Maven仓库" class="headerlink" title="配置Maven仓库"></a>配置Maven仓库</h1><p>setting.xml路径为<code>/usr/local/Cellar/maven/3.5.0/libexec/conf/settings.xml</code><br>修改即可。</p>
<p>可将<code>settings.xml</code>直接拷贝到<code>.m2</code>文件夹下，进行配置。</p>
<p>~~如果没有<code>.m2</code>文件夹时,运行命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mvn <span class="built_in">help</span>:system</span><br></pre></td></tr></table></figure></p>
<p>然后打开当前用户的目录，可以在其中找到<code>.m2</code>文件夹~~</p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Homebrew</tag>
        <tag>Mac</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>CocoaPods简单安装和使用</title>
    <url>/2019/01/18/CocoaPods%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是CocoaPods"><a href="#什么是CocoaPods" class="headerlink" title="什么是CocoaPods"></a>什么是CocoaPods</h1><p>CocoaPods是专门为iOS工程提供对第三方库的依赖的管理工具，通过CocoaPods，我们可以更方便地管理每个第三方库的版本，而且不需要我们做太多的配置。直观、集中和自动化地管理我们项目的第三方库。</p>
<a id="more"></a>
<h1 id="安装CocoaPods"><a href="#安装CocoaPods" class="headerlink" title="安装CocoaPods"></a>安装CocoaPods</h1><h2 id="更新gem"><a href="#更新gem" class="headerlink" title="更新gem"></a>更新gem</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure>
<h2 id="更换镜像"><a href="#更换镜像" class="headerlink" title="更换镜像"></a>更换镜像</h2><p>删除自带镜像<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br></pre></td></tr></table></figure></p>
<p>更换<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem sources -a https://gems.ruby-china.com/</span><br></pre></td></tr></table></figure></p>
<p>查看<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure></p>
<p>如图显示即为替换镜像成功<br><img src="gemsourcel.png" alt></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod setup</span><br></pre></td></tr></table></figure>
<p><img src="podsetup.png" alt></p>
<p>到这里CocoaPods就已经安装完毕了。</p>
<h1 id="使用CocoaPods"><a href="#使用CocoaPods" class="headerlink" title="使用CocoaPods"></a>使用CocoaPods</h1><h2 id="查找第三方库"><a href="#查找第三方库" class="headerlink" title="查找第三方库"></a>查找第三方库</h2><p>比如说要查找某个库，直接在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod search QMUIKit</span><br></pre></td></tr></table></figure>
<p>完成后他会自动进入一个新的页面显示搜索结果，上下滑动查看更多，要退出的话按wq就可以了。以后再搜索就不需要建索引了。</p>
<h2 id="引入第三方库到项目中"><a href="#引入第三方库到项目中" class="headerlink" title="引入第三方库到项目中"></a>引入第三方库到项目中</h2><p>这里演示第三方库为QMUIKit</p>
<p>打开xcode新建一个项目，打开终端，进入项目路径中。<br><img src="projectpwd.png" alt></p>
<p>输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure></p>
<p>将自动生成一个Podfile文件，也可以自己生成，命令生成有默认模板<br><img src="projectpwd.png" alt></p>
<p>vim编写,添加qmuikit<br><img src="podqmui.png" alt></p>
<p>安装第三方库<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure></p>
<p><img src="podinstall.png" alt></p>
<p>查看项目目录变化</p>
<p>在访达中<br><img src="fd.png" alt></p>
<p>原本使用xcodeproj打开项目，但是现在要改变成xcworkspace打开项目了。</p>
<p><img src="installcomple.png" alt></p>
<p>这样就可以正常使用该库啦。但是有时候没有只能提示时候，需要更改<code>Build Settings</code>中的<code>User header search paths</code>添加<code>$(SRCROOT)</code>并选择<code>recursive</code></p>
<p><img src="setting.png" alt></p>
<p><img src="showtip.png" alt></p>
<h2 id="增加第三方"><a href="#增加第三方" class="headerlink" title="增加第三方"></a>增加第三方</h2><p>继续编写Podfile文件添加第三方库然后在执行<code>pod install</code>就可以了</p>
<h2 id="更新第三方"><a href="#更新第三方" class="headerlink" title="更新第三方"></a>更新第三方</h2><p>第三方库们都有人在维护升级，我们需要隔断时间就要更新下我们工程中第三方库的版本。只需要终端输入命令<code>pod update</code>就可以了。<br>如果遇到<code>pod install</code>或者<code>pod update</code>慢的问题，原因在于当执行以上两个命令的时候会升级CocoaPods的spec仓库，加一个参数可以省略这一步，然后速度就会提升不少。加参数的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod install --verbose --no-repo-update</span><br><span class="line">pod update --verbose --no-repo-update</span><br></pre></td></tr></table></figure>
<h2 id="删除第三方"><a href="#删除第三方" class="headerlink" title="删除第三方"></a>删除第三方</h2><p>当我们需要去掉某个第三方库时，只需要在Podfile删除该引入该库的语句，然后执行<code>pod update</code>或者<code>pod install</code>就可以了。</p>
<h1 id="升级CocoaPods"><a href="#升级CocoaPods" class="headerlink" title="升级CocoaPods"></a>升级CocoaPods</h1><p>升级CocoaPods版本的命令和安装CocoaPods的命令一样，都是<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br></pre></td></tr></table></figure></p>
<h1 id="卸载CocoaPods"><a href="#卸载CocoaPods" class="headerlink" title="卸载CocoaPods"></a>卸载CocoaPods</h1><p>卸载CocoaPods的命令是<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure></p>
<h1 id="更换gem和pod-repo源"><a href="#更换gem和pod-repo源" class="headerlink" title="更换gem和pod repo源"></a>更换gem和pod repo源</h1><h2 id="gem更换源"><a href="#gem更换源" class="headerlink" title="gem更换源"></a>gem更换源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gem sources --remove https://rubygems.org/ <span class="comment"># 移除默认源</span></span><br><span class="line">$ gem sources -a https://gems.ruby-china.com/ <span class="comment"># 添加Ruby China镜像</span></span><br><span class="line">$ gem sources -l</span><br></pre></td></tr></table></figure>
<p>确保只有<code>gems.ruby-china.org</code>源</p>
<h2 id="pod-repo换源"><a href="#pod-repo换源" class="headerlink" title="pod repo换源"></a>pod repo换源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pod repo remove master</span><br><span class="line">$ pod repo add master https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git</span><br><span class="line">$ pod repo update</span><br></pre></td></tr></table></figure>
<p>我们把它换成<code>清华tuna</code>源</p>
<p>对于旧版的 CocoaPods 可以使用如下方法使用 tuna 的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pod repo remove master</span><br><span class="line">$ pod repo add master https://mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git</span><br><span class="line">$ pod repo update</span><br></pre></td></tr></table></figure>
<p>新版的 CocoaPods 不允许用pod repo add直接添加master库了。如果执行<code>pod repo add</code>出现错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">to setup the master specs repo.....</span><br></pre></td></tr></table></figure>
<p>那么使用以下办法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">$ pod repo <span class="keyword">remove</span> master</span><br><span class="line">$ git clone https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/git/CocoaPods/Specs.git ~/.cocoapods/repos/master</span></span><br></pre></td></tr></table></figure>
<p>另外，如果<code>Podfile</code>文件中有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="string">'https://github.com/CocoaPods/Specs.git'</span></span><br></pre></td></tr></table></figure>
<p>也需要把它换成repo的源，否则依然是使用GitHub源<br> 上面的步骤都完成后，即可使用</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ pod install</span><br><span class="line">$ pod update</span><br></pre></td></tr></table></figure>
<h1 id="CocoaPods-Mac-App"><a href="#CocoaPods-Mac-App" class="headerlink" title="CocoaPods Mac App"></a>CocoaPods Mac App</h1><p>CocoaPods桌面应用版下载地址：<a href="https://cocoapods.org/app" target="_blank" rel="noopener">https://cocoapods.org/app</a></p>
<h1 id="Mac-升级到10-13之后-Cocoapods-不能用"><a href="#Mac-升级到10-13之后-Cocoapods-不能用" class="headerlink" title="Mac 升级到10.13之后 Cocoapods 不能用"></a>Mac 升级到10.13之后 Cocoapods 不能用</h1><p>两句话：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo gem update --system</span><br><span class="line">sudo gem install cocoapods -n /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure>
<p>两行解决问题。或者可以尝试重新安装。</p>
<h1 id="ERROR-While-executing-gem-…-Gem-FilePermissionError"><a href="#ERROR-While-executing-gem-…-Gem-FilePermissionError" class="headerlink" title="ERROR: While executing gem … (Gem::FilePermissionError)"></a>ERROR: While executing gem … (Gem::FilePermissionError)</h1><p>更换语句<code>sudo gem install -n /usr/local/bin</code>加上 项目名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo gem install -n /usr/<span class="built_in">local</span>/bin fastlane</span><br><span class="line">$ sudo gem install -n /usr/<span class="built_in">local</span>/bin cocoapods</span><br></pre></td></tr></table></figure>
<blockquote>
<p>建议的是用 <a href="http://brew.sh/" target="_blank" rel="noopener">homebrew</a> 再装一个 ruby, 这样 local 归 local, system 归 system. 反正也不大.</p>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://juejin.im/entry/5c067eb56fb9a04a0a5ef583?utm_source=gold_browser_extension" target="_blank" rel="noopener">https://juejin.im/entry/5c067eb56fb9a04a0a5ef583?utm_source=gold_browser_extension</a><br><a href="https://guides.cocoapods.org/syntax/podfile.html#podfile" target="_blank" rel="noopener">https://guides.cocoapods.org/syntax/podfile.html#podfile</a><br><a href="https://www.jianshu.com/p/91f3b9d8f402" target="_blank" rel="noopener">https://www.jianshu.com/p/91f3b9d8f402</a><br><a href="https://blog.csdn.net/u014599371/article/details/89916513" target="_blank" rel="noopener">https://blog.csdn.net/u014599371/article/details/89916513</a></p>
]]></content>
      <categories>
        <category>Ios</category>
      </categories>
      <tags>
        <tag>Ios</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat基本使用</title>
    <url>/2018/11/21/Tomcat%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>到apache官网。<a href="http://www.apache.org" target="_blank" rel="noopener">www.apache.org</a>     <a href="http://jakarta.apache.org(产品的主页)" target="_blank" rel="noopener">http://jakarta.apache.org(产品的主页)</a></p>
<p>安装版：window （exe、msi） linux（rmp）<br>压缩版：window（rar，zip） linux（tar，tar.gz）<strong> 学习时候使用 </strong></p>
<a id="more"></a>
<h2 id="运行和关闭tomcat"><a href="#运行和关闭tomcat" class="headerlink" title="运行和关闭tomcat"></a>运行和关闭tomcat</h2><h3 id="启动软件"><a href="#启动软件" class="headerlink" title="启动软件"></a>启动软件</h3><p>a）找到%tomcat%/bin/startup.bat ，双击这个文件<br>b）弹出窗口，显示信息（不要关闭次窗口）<br>c）打开浏览器，输出以下地址 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a><br>d）看到一只猫画面，证明软件启动成功！</p>
<h3 id="关闭软件"><a href="#关闭软件" class="headerlink" title="关闭软件"></a>关闭软件</h3><p>a）找到%tomcat%/bin/shutdown.bat，双击这个文件即可！<br>b）打开浏览器，输出以下地址。看到“无法连接”（最好先清空浏览器缓存）</p>
<h1 id="Tomcat目录结构"><a href="#Tomcat目录结构" class="headerlink" title="Tomcat目录结构"></a>Tomcat目录结构</h1><h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><p>存放常用tomcat命令</p>
<h2 id="conf"><a href="#conf" class="headerlink" title="conf"></a>conf</h2><p>存放server配置文件</p>
<h2 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h2><p>自带jar包</p>
<h2 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h2><p>存放日志</p>
<h2 id="temp"><a href="#temp" class="headerlink" title="temp"></a>temp</h2><p>存放临时文件</p>
<h2 id="webapps"><a href="#webapps" class="headerlink" title="webapps"></a>webapps</h2><p>存放共享资源目录</p>
<h2 id="work"><a href="#work" class="headerlink" title="work"></a>work</h2><p>工作空间</p>
<h1 id="Tomcat常见问题"><a href="#Tomcat常见问题" class="headerlink" title="Tomcat常见问题"></a>Tomcat常见问题</h1><h2 id="一闪而过"><a href="#一闪而过" class="headerlink" title="一闪而过"></a>一闪而过</h2><p>配置好JDK环境即可，即JAVA_HOME,PATH，CLASSPATH环境变量即可。</p>
<h2 id="端口占用的错误"><a href="#端口占用的错误" class="headerlink" title="端口占用的错误"></a>端口占用的错误</h2><p>原因： tomcat启动所需的端口被其他软件占用了！<br>解决办法：<br>a）关闭其他软件程序，释放所需端口<br>b）修改tomcat软件所需端口<br>找到并修改%tomcat%/conf/server.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8081"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="CATALINA环境变量问题"><a href="#CATALINA环境变量问题" class="headerlink" title="CATALINA环境变量问题"></a>CATALINA环境变量问题</h2><p>原因： tomcat软件启动后，除了查找JAVA_HOME后，还会再查找一个叫CATALINA_HOME变量，这个变量的作用是设置tomcat的根目录。<br>解决办法：建议不要设置CATALINA_HOME变量。检查如果有的话，清除掉！！！</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式-JAVA实现</title>
    <url>/2018/11/20/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-JAVA%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>什么是单例？就是保证在一个jvm当中只能由一个实例。（区分不是在多个jvm当中。）</p>
<p>单例模式有七种写法。</p>
<p>本文只提出两种，一种懒汉式和饿汉式。</p>
<a id="more"></a>
<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Singleton.getInstance());</span><br><span class="line">        System.out.println(Singleton.getInstance());</span><br><span class="line">        System.out.println(Singleton.getInstance());</span><br><span class="line">        System.out.println(Singleton.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton mSingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123; <span class="comment">//加锁，线程不安全，故加上</span></span><br><span class="line">                mSingleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mSingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cn.net.sweetlover.patern.Singleton@1540e19d</span><br><span class="line">cn.net.sweetlover.patern.Singleton@1540e19d</span><br><span class="line">cn.net.sweetlover.patern.Singleton@1540e19d</span><br><span class="line">cn.net.sweetlover.patern.Singleton@1540e19d</span><br></pre></td></tr></table></figure>
<p>被需要时才进行初始化，且只有同一个实例，但会发生线程不安全。</p>
<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Singleton.getInstance());</span><br><span class="line">        System.out.println(Singleton.getInstance());</span><br><span class="line">        System.out.println(Singleton.getInstance());</span><br><span class="line">        System.out.println(Singleton.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton mSingleton = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mSingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cn.net.sweetlover.patern.Singleton@1540e19d</span><br><span class="line">cn.net.sweetlover.patern.Singleton@1540e19d</span><br><span class="line">cn.net.sweetlover.patern.Singleton@1540e19d</span><br><span class="line">cn.net.sweetlover.patern.Singleton@1540e19d</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这两者的区分：懒汉式不是线程安全的，且效率比饿汉式要低（因为加了同步），但是节约内存<br>。但饿汉式是天生线程安全的，因为当class被加载的时候就已经被初始化了。</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka简单入门(概念)</title>
    <url>/2018/11/05/kafka%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="kafka简介"><a href="#kafka简介" class="headerlink" title="kafka简介"></a>kafka简介</h1><p><a href="https://kafka.apache.org" target="_blank" rel="noopener">Kafka</a>是目前主流的流处理平台，同时作为消息队列家族的一员，其高吞吐性作为很多场景下的主流选择。</p>
<a id="more"></a>
<h1 id="什么是Kafka"><a href="#什么是Kafka" class="headerlink" title="什么是Kafka"></a>什么是Kafka</h1><ul>
<li>LinkedIn开发</li>
<li>2011年初开源，加入Apache基金会</li>
<li>2012年从Apache Incubator毕业</li>
<li>Apache顶级开源</li>
</ul>
<p>Apache Kafka是一个分布式流媒体平台。这到底是什么意思呢？</p>
<h2 id="流媒体平台有三个关键功能："><a href="#流媒体平台有三个关键功能：" class="headerlink" title="流媒体平台有三个关键功能："></a>流媒体平台有三个关键功能：</h2><ul>
<li>发布和订阅记录流，类似于消息队列或者企业消息传递系统。</li>
<li>以容错的持久方式存储记录流。</li>
<li>记录发生时处理流。</li>
</ul>
<h2 id="Kafka通常用于两大类应用："><a href="#Kafka通常用于两大类应用：" class="headerlink" title="Kafka通常用于两大类应用："></a>Kafka通常用于两大类应用：</h2><ul>
<li>构建可在系统或应用程序之间可靠获取数据的实时流数据管道</li>
<li>构建转换或响应数据流的实时流应用程序</li>
</ul>
<h1 id="Kafka概念"><a href="#Kafka概念" class="headerlink" title="Kafka概念"></a>Kafka概念</h1><h2 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h2><p>消息和数据的生产者，向Kafka的一个topic发布消息的进程/代码/服务。</p>
<h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>消息和数据的消费者，订阅数据（topic）并且处理其发布的消息的进程/代码/服务。</p>
<h2 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h2><p>对于同一个topic，会广播给不同的group，一个group中，只有 <strong> 一个consumer </strong> 可以消费该消息。</p>
<h2 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h2><p>物理概念，Kafka集群中每个kafka节点。</p>
<h2 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h2><p>逻辑概念，Kafka消息的类别，对数据进行区分、隔离。</p>
<h2 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h2><p>物理概念，Kafka下数据存储的基本单元。一个Topic数据，会被分散存储到多个Partition，每个Partition是 <strong> 有序的 </strong> 。</p>
<ul>
<li>每一个Topic被切分为多个Partitions</li>
<li>消费者数目少于或者等于Partition的数目</li>
<li>Broker Group中的每一个Broker保存Topic的一个或多个Partitions</li>
<li>Consumer Group的仅有一个Consumer读取Topic的一个或者多个Partitions，并且是唯一的Consumer</li>
</ul>
<h2 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h2><p>一个partition的多个副本。同一个Partition可能有多个Replica，多个Replica之间数据是一样的，相当于备份一样。</p>
<ul>
<li>当集群中有Broker挂掉的情况，系统可以主动的使Replicas提供服务</li>
<li>系统默认设置每一个Topic的Replication系数为1，可以在创建Topic单独设置</li>
</ul>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>基本单位是Topic的Partition</li>
<li>所有的读和写都从Leader进，Followers只是作为备份</li>
<li>Follower必须能够及时复制Leader的数据</li>
<li>增加容错性和可扩展性。</li>
</ul>
<h2 id="Replication-Leader"><a href="#Replication-Leader" class="headerlink" title="Replication Leader"></a>Replication Leader</h2><p>一个Partition的多个Replica上，需要一个Leader负责该Partition上的Producer和Consumer交互。且有且只有一个。</p>
<h2 id="ReplicaManager"><a href="#ReplicaManager" class="headerlink" title="ReplicaManager"></a>ReplicaManager</h2><p>负责管理当前Broker所有分区的副本的信息，处理KafkaController发起的一些请求，副本状态的切换、添加/读取消息等。</p>
]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Android点击两次返回退出应用</title>
    <url>/2018/10/30/Android%E7%82%B9%E5%87%BB%E4%B8%A4%E6%AC%A1%E8%BF%94%E5%9B%9E%E9%80%80%E5%87%BA%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在一些app中，一般都是主页面都会有一个连续点击两次返回键就能够退出，也是防止返回键误触导致直接退出了应用。示例没有复杂的activity管理，点击两次后直接finish就完成了。</p>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>直接判断用户两次按键的时间差是否在一个预期值之内，是则退出，否则应该出现一些提示来提醒用户。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录用户首次点击返回键的时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mExitFirstTime = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//双击间隔</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mExitIntervalMs = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyUp</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (keyCode)&#123;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_BACK:</span><br><span class="line">                <span class="keyword">long</span> secondTime = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">if</span>(secondTime - mExitFirstTime &gt; mExitIntervalMs)&#123;</span><br><span class="line">                    mExitFirstTime = secondTime;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, R.string.exit_tip, Toast.LENGTH_SHORT)</span><br><span class="line">                            .show();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//消费掉该事件</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    finish();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyUp(keyCode, event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>重写onKeyDown()和onBackPressed()方法都能捕获Back的点击事件，</p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2018/09/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考链接: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></p>
<a id="more"></a>
<h1 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h1><table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\</td>
<td>匹配规则将依照下列规则：在非特殊字符之前的反斜杠表示下一个字符是特殊的，不能从字面上解释。例如，没有前面’\’的’b’通常匹配小写’b’，无论它们出现在哪里。如果加了’\’,这个字符变成了特殊意义的字符，意思是匹配一个字符边界。反斜杠也可以将其后的特殊字符，转义为字面量。例如，模式 /a<em>/ 代表会匹配0个或者多个a。相反，模式 /a\</em>/ 将 ‘<em>‘ 的特殊性移除，从而可以匹配像 “a</em>“ 这样的字符串。</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td>匹配输入的开始，如果多行标志被设置为true，那么也匹配换行符后紧跟的位置。例如, /^A/ 并不匹配 “an A” 中的 ‘A’，但是会匹配 “An E”中的 ‘A’。当 ‘^’ 作为第一个字符出现在一个字符集合模式时，它将会有不同的含义。</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td>匹配输入的结束。如果多行标志被设置为true，那么也匹配换行符前的位置。例如， /t$/ 并不会匹配 “eater” 中的 ‘t’,但是会匹配 “eat” 中的 ‘t’。</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td>匹配前一个表达式0次或者多次。等价于{0,}。例如，/bo*/ 会匹配”A ghost boooooed”中的 ‘booooo’ 和 “A bird warbled” 中的 ‘b’，但是在”A goat grunted” 中将不会匹配任何东西。</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td>匹配前面一个表达式1次或者多次。等价于{1,}。例如，/a+/匹配了在”candy”中的’a’，和在”caaaaaaandy”中所有的’a’。</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td>匹配前面一个表达式0次或者1次。等价于{0,1}。例如，/e?le?/ 匹配”angel”中的’el’，和”angel”中的’el’，和”angle”中的’le’以及”oslo”中的’l’。如果紧跟在任何量词*、+、?或者{}的后面，将会使变量变为非贪婪的（匹配尽量少的字符），和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反。例如，对”123abc”应用 /\d+/ 将会返回’123’，如果使用/\d+?/，则只会匹配到’1’。还可以运用先行断言。</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td>(小数点)匹配除换行符之外的任何单个字符。例如，/.n/将会匹配”nay, an apple is on the tree”中的’an’和’on’，但是不会匹配’nay’。</td>
</tr>
<tr>
<td style="text-align:center">(x)</td>
<td>匹配’x’并且记住匹配项，就像下面的例子展示的那样。括号被称为捕获括号。模式 <code>/(foo) (var) \1 \2/</code>中的’(foo)’和’(bar)’匹配并记住字符串”foo bar foo bar”中的前两个单词，模式中的\1 和 \2 匹配字符串的后两个单词。注意\1、\2、\n是用在正则表达式的匹配环节。</td>
</tr>
<tr>
<td style="text-align:center">(?:x)</td>
<td>匹配’x’但是不记住匹配项。这种叫做非捕获括号，使得你能够定义为正则表达式运算符一起使用的子表达式。来看表达式/(?:foo){1,2}/。如果表达式是/foo{1,2}/，{1,2}将只对’foo’的最后一个字符’o’生效。如果使用非捕获括号，则{1,2}会匹配整个’foo’单词。</td>
</tr>
<tr>
<td style="text-align:center">x(?=y)</td>
<td>匹配’x’仅仅当’x’后面跟着’y’，这种叫做正向肯定查找。例如，/Jack(?=Spart)/会匹配到’Jack’仅仅当他后面跟着’Spart’。/Jack(?=Spart&#124;Frost)/匹配’Jack’仅仅当它后面跟着’Spart’或者是’Frost’。但是’Spart’和’Frost’都不是匹配结果的一部分。</td>
</tr>
<tr>
<td style="text-align:center">x(?!y)</td>
<td>匹配’x’仅仅当’x’后面不跟着’y’，这个叫做正向否定查找。例如，/\d+(?!.)/匹配一个数字仅仅当这个数字后面没有跟小数点的时候。</td>
</tr>
<tr>
<td style="text-align:center">x&#124;y</td>
<td>匹配’x’或者’y’。例如，/green&#124;red/匹配”green apple”中的’green’和”red apple”中的’red’</td>
</tr>
<tr>
<td style="text-align:center">{n}</td>
<td>n是一个正整数，匹配了前面一个字符刚好发生n次。 比如，/a{2}/不会匹配”candy”中的’a’，但是会匹配”caandy”中的所有a，以及”caaandy”中的前两个a。</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td>n,m都是整数。匹配前面的字符至少n次，最多m次。如果n和m的值为0，这个值被忽略。例如，/a{1,3}/ 并不匹配”cndy”中的任意字符，匹配”candy”中的’a’，匹配”caandy”中的前两个’a’，也匹配”caaaaaaaandy”中的前三个a。</td>
</tr>
<tr>
<td style="text-align:center">[xyz]</td>
<td>一个字符集合。匹配方括号中的任意字符，包括转义字符。你可以使用破折号( - )来指定一个字符范围。对于( . )和星号( * )这样的特许符号在一个字符集中没有特殊的意义/他们不必进行转义，不过转义也是起作用的。例如，[abcd]和[a-d]是一样的。他们都匹配”brisket”中的’b’，也都匹配”city”中的’c’。/[a-z.]+/和/[\w.]+/都匹配”test.i.ng”中的所有字符。</td>
</tr>
<tr>
<td style="text-align:center">[^xyz]</td>
<td>反向字符集。也就是说，它匹配任何没有包含在反括号中的字符。你可以使得破折号( - )来指定一个字符范围。任何普通字符在这里都是起作用的。例如，[^abc]和[^a-c]是一样的。他们匹配”brisker”中的’r’，也匹配”chop”中的’h’。</td>
</tr>
<tr>
<td style="text-align:center">[\b]</td>
<td>匹配一个退格（U+0008）。不要和\b混淆了。</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td>匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者没有其他“字”字符在其前面的位置。注意，一个匹配的词的边界并不包含在匹配的内容中。换句话说，一个匹配的词的边界的内容的长度为0.（不要和[\b]混淆了）。例如，/\bm/匹配”moon”中的”m”，/oo\b/并不匹配”oo”，因为’oo’被一个字符’n’紧跟着。/oon\b/匹配”moon”中的’oon’，因为’oon’是这个字符串的结束部分，这样他没有被一个字符紧跟着。/\w\b\w/将不能匹配任何字符串，因为在一个单词中间的字符永远不可能同时满足没有字符跟随和有字符跟随的两种跟随情况。</td>
</tr>
<tr>
<td style="text-align:center">\B</td>
<td>匹配一个非单词边界。他匹配一个前后字符都是相同类型的位置：都是字符或者都不是字符。一个字符串的开始和结尾都被认为不是字符或者空字符串。例如，/\B../匹配”noonday”中的’oo’，而/y\B../则会匹配”possibly yestarday”中的’yes’。</td>
</tr>
<tr>
<td style="text-align:center">\cX</td>
<td>当X是处于A到Z之间的字符的时候。匹配字符串中的一个控制符。例如，/\cM/匹配字符串中的”control-M”(U+000D)。</td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td>匹配一个数字，相当于[0-9]。例如，/\d/或者/[0-9]/匹配”B2 is the bigjj”中的’2’。</td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td>匹配一个非数字字符。相当于[^0-9]。例如，/\D/或者/[^0-9]/匹配”B2 is a jj”中的B。</td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td>匹配一个换页符(U+000C)。</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td>匹配一个换行符(U+000A)。</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td>匹配一个回车符(U+000D)。</td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td>匹配一个空白字符，包括空格、制表符、换页符和换行符。等价于[\f\n\r\t\v\u00a0\u1680\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]。例如，/\s\w*/匹配”foo bar.”中的’bar’。</td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td>匹配一个非空白字符。等价于[^\f\n\r\t\v\u00a0\u1680\u1680\u180e\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]。例如，/\S\w*/匹配”foo bar.”中的’foo’。</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td>匹配一个水平制表符(U+0009)。</td>
</tr>
<tr>
<td style="text-align:center">\v</td>
<td>匹配一个垂直制表符(U+000B)。</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td>匹配一个单字字符(字母、数字或者下划线)。等价于[A-Za-Z0-9_]。例如，/\w/匹配”apple”中的’a’，”$5.28”中的’5’和”3D”中的’3’。</td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td>匹配一个非单字字符。等价于[^A-Za-z0-9_]。例如，/\W/或者/[^A-Za-z0-9_]/匹配”50%”中的’%’。</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td>在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。比如/apple(,)\sorange\1/匹配”apple, orange, cherry, peach.”中的’apple, orange’。</td>
</tr>
<tr>
<td style="text-align:center">\0</td>
<td>匹配NULL(U+0000)字符，不要在这后面跟其它小数，因为<code>0&lt;digits&gt;</code>是一个八进制转义序列。</td>
</tr>
<tr>
<td style="text-align:center">\xhh</td>
<td>与代码hh匹配字符(两个十六进制数字)。</td>
</tr>
<tr>
<td style="text-align:center">\uhhhh</td>
<td>与代码hhhh匹配字符(四个十六进制数字)。</td>
</tr>
<tr>
<td style="text-align:center">\u{hhhh}</td>
<td>(仅当设置了u标志时)使用Unicode值hhhh匹配字符(十六进制数字)。</td>
</tr>
</tbody>
</table>
<p><strong>正则表达式标志</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">标志</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">g</td>
<td style="text-align:left">全局搜索。</td>
</tr>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:left">不区分大小写搜索。</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td style="text-align:left">多行搜索。</td>
</tr>
<tr>
<td style="text-align:center">y</td>
<td style="text-align:left">执行“粘性”搜索,匹配从目标字符串的当前位置开始，可以使用y标志。</td>
</tr>
</tbody>
</table>
<h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><h2 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h2><ul>
<li>数字：^[0-9]*$</li>
<li>n位的数字：^\d{n}$</li>
<li>至少n位的数字：^\d{n,}$</li>
<li>m-n位的数字：^\d{m,n}$</li>
<li>零和非零开头的数字：^(0|[1-9][0-9]*)$</li>
<li>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</li>
<li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})$</li>
<li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</li>
<li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li>
<li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li>
<li>非零的正整数：^[1-9]\d<em>$ 或 ^([1-9][0-9]</em>){1,3}$ 或 ^+?[1-9][0-9]*$</li>
<li>非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</li>
<li>非负整数：^\d+$ 或 ^[1-9]\d*|0$</li>
<li>非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</li>
<li>非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0$</li>
<li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>))|0?.0+|0$</li>
<li>正浮点数：^[1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$</li>
<li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>)))$</li>
<li>浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d<em>[1-9]\d</em>|0?.0+|0)$</li>
</ul>
<h2 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h2><ul>
<li>汉字：^[\u4e00-\u9fa5]{0,}$</li>
<li>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</li>
<li>长度为3-20的所有字符：^.{3,20}$</li>
<li>由26个英文字母组成的字符串：^[A-Za-z]+$</li>
<li>由26个大写英文字母组成的字符串：^[A-Z]+$</li>
<li>由26个小写英文字母组成的字符串：^[a-z]+$</li>
<li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</li>
<li>由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$</li>
<li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li>
<li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</li>
<li>可以输入含有^%&amp;’,;=?$\”等字符：[^%&amp;’,;=?$\x22]+</li>
<li>禁止输入含有~的字符：[^~\x22]+</li>
</ul>
<h2 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h2><ul>
<li>Email地址：^\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*$</li>
<li>域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</li>
<li>InternetURL：[a-zA-z]+://[^\s]<em> 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]</em>)?$</li>
<li>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</li>
<li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</li>
<li>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</li>
<li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: ((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)</li>
<li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)</li>
<li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</li>
<li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</li>
<li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$</li>
<li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</li>
<li>日期格式：^\d{4}-\d{1,2}-\d{1,2}</li>
<li>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</li>
<li>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</li>
<li>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</li>
<li>中文字符的正则表达式：[\u4e00-\u9fa5]</li>
<li>双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li>
<li>空白行的正则表达式：\n\s*\r (可以用来删除空白行)</li>
<li>HTML标记的正则表达式：&lt;(\S<em>?)[^&gt;]</em>&gt;.<em>?|&lt;.</em>? /&gt; ( 首尾空白字符的正则表达式：^\s<em>|\s</em>$或(^\s<em>)|(\s</em>$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li>
<li>腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</li>
<li>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字)</li>
<li>IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</li>
</ul>
<h2 id="钱的输入格式"><a href="#钱的输入格式" class="headerlink" title="钱的输入格式"></a>钱的输入格式</h2><ul>
<li>有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$</li>
<li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</li>
<li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</li>
<li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</li>
<li>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$</li>
<li>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</li>
<li>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</li>
<li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</li>
<li>“+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</li>
</ul>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Go并发之channel</title>
    <url>/2018/09/25/Go%E5%B9%B6%E5%8F%91%E4%B9%8Bchannel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="channel是什么"><a href="#channel是什么" class="headerlink" title="channel是什么"></a>channel是什么</h1><p>channel是Go中一个非常重要的特性，在Go并发之goroutine里有介绍了CSP模型，CSP 是 Communicating Sequential Process 的简称，中文可以叫做通信顺序进程，是一种并发编程模型。Go实现了CSP部分的理论，goroutine对应CSP中并发执行的实体，channel也就对应着CSP中的channel。</p>
<a id="more"></a>
<h1 id="channel操作符"><a href="#channel操作符" class="headerlink" title="channel操作符"></a>channel操作符</h1><p>操作符 <code>&lt;-</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读</span></span><br><span class="line">x &lt;- <span class="keyword">chan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写</span></span><br><span class="line"><span class="keyword">chan</span> &lt;- <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h1 id="channel创建"><a href="#channel创建" class="headerlink" title="channel创建"></a>channel创建</h1><p>必须使用make创建channel</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">bufChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>) <span class="comment">//1、带缓冲channel</span></span><br><span class="line">noBufChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>) <span class="comment">//2、无缓冲channel</span></span><br></pre></td></tr></table></figure>
<p>和map类似，channel也是一个对应make创建的底层数据结构的引用，当我们复制一个channel或者用于函数参数传递时，只是拷贝了一个channel的引用，channel的零值为nil。</p>
<p>以方式1创建的channel是带缓冲的，方式2即为无缓冲的。</p>
<p>示例代码1：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>) <span class="comment">//创建一个int类型的channel</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//匿名函数</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        channel &lt;- <span class="number">10</span> </span><br><span class="line">        fmt.Println(<span class="string">"chan &lt;-"</span>) <span class="comment">//子协程</span></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    &lt;- channel <span class="comment">//没有数据前阻塞</span></span><br><span class="line">    fmt.Println(<span class="string">"&lt;- chan"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="channel_example1.png" alt></p>
<p>再来看一下下面这个例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> channel <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        channel &lt;- <span class="number">10</span></span><br><span class="line">        fmt.Println(<span class="string">"chan &lt;-"</span>) </span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    &lt;- channel </span><br><span class="line">    fmt.Println(<span class="string">"&lt;- chan"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="no_init_chan_deadlock.png" alt></p>
<p>为什么会deadlock，因为channel并没有创建。</p>
<h1 id="不带缓冲channel"><a href="#不带缓冲channel" class="headerlink" title="不带缓冲channel"></a>不带缓冲channel</h1><p>一个基于无缓存的channel的发送操作将导致发送者goroutine阻塞，直到另一个goroutine在相同的channel上执行接收操作，当发送的值通过channel成功传输之后，两个goroutine可以继续执行后面的语句。反之，如果接受操作先发生，那么接收者goroutine也将阻塞，直到有另一个goroutine在相同的channel上执行发送操作。</p>
<p>基于无缓存channel的发送和接收操作将导致两个goroutine做一次同步操作。因为这个原因，无缓存channel有时候也被成为同步channel。当通过一个无缓存channel发送数据时，接收者收到数据发生在唤醒发送者goroutine之前。</p>
<p>channel接受和发送数据都是阻塞的，除非另一端已经准备好，这样使得goroutine同步变得更加的简单，不用显式的lock。<br><strong> 谓阻塞就是读取，会被阻塞，直到有数据接收。其次，任何发送将会被阻塞，直到数据被读出。 </strong> 无缓冲的channel是多个goroutine之间同步很棒的工具。</p>
<p>示例代码：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a []<span class="keyword">int</span>, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    total := <span class="number">0</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> a &#123;</span><br><span class="line">        total += v</span><br><span class="line">    &#125;</span><br><span class="line">    ch&lt;- total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    a := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">    <span class="keyword">go</span> sum(a[:<span class="number">3</span>], ch)</span><br><span class="line">    <span class="keyword">go</span> sum(a[<span class="number">3</span>:], ch)</span><br><span class="line">    x := &lt;-ch</span><br><span class="line">    y := &lt;-ch</span><br><span class="line">    fmt.Println(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="channel_example2.png" alt></p>
<p>结果有两种，这只是其中一种。</p>
<h1 id="带缓冲的channel"><a href="#带缓冲的channel" class="headerlink" title="带缓冲的channel"></a>带缓冲的channel</h1><p>在Go中也允许指定channel的缓冲大小</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">type</span>, value)</span><br></pre></td></tr></table></figure>
<p>当 value = 0 时，channel就是无缓冲的channel，当 value &gt; 0 时， channel有缓冲、是非阻塞的，直到写满value个元素后才阻塞写入。</p>
<p>示例代码：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>) <span class="comment">//缓冲大小为2</span></span><br><span class="line">    ch&lt;- <span class="number">10</span></span><br><span class="line">    ch&lt;- <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(&lt;-ch)</span><br><span class="line">    fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="channel_example3.png" alt></p>
<p>如果代码中将缓存区域设置为1，则会出现deadlock错误。<br>fatal error: all goroutines are asleep - deadlock!</p>
<h1 id="单向channel"><a href="#单向channel" class="headerlink" title="单向channel"></a>单向channel</h1><p>默认情况下是双向的，即可读可写，读代表receive，写代表send。</p>
<p>通常情况我们会将一个通道作为函数参数传递过去，但是默认是双向的，我只想让该参数只能进行读或者写，那就用到了单向channel。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="keyword">int</span> <span class="comment">//默认双向</span></span><br><span class="line"><span class="keyword">var</span> ch2 <span class="keyword">chan</span>&lt;- <span class="keyword">int</span> <span class="comment">//单向，只读</span></span><br><span class="line"><span class="keyword">var</span> ch3 &lt;-<span class="keyword">chan</span> <span class="keyword">int</span> <span class="comment">//单项，只写</span></span><br></pre></td></tr></table></figure>
<p>双向channel可以隐式转换为单向channel，反之则不行。</p>
<h1 id="关闭channel"><a href="#关闭channel" class="headerlink" title="关闭channel"></a>关闭channel</h1><p>关闭channel只需要close函数即可，可以使用多返回值的方式 <code>v,ok := &lt;-ch</code>方式来判断channel是否被关闭。</p>
<p>示例代码：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foreach</span><span class="params">(arr []<span class="keyword">int</span>, b <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> i,v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"i=%d, v=%d \n"</span>, i, v)</span><br><span class="line">    &#125;</span><br><span class="line">    b&lt;- <span class="literal">true</span></span><br><span class="line">    <span class="built_in">close</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arr := []<span class="keyword">int</span>&#123;<span class="number">12</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>&#125;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">go</span> foreach(arr, ch)</span><br><span class="line">    <span class="keyword">if</span> v, ok := &lt;-ch; !ok &#123;</span><br><span class="line">        fmt.Println(v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当一个channel被关闭后，再向该channel发送数据将导致panic异常。</p>
<p>其实你并不需要关闭每一个channel。只要当需要告诉接收者goroutine，所有的数据已经全部发送时才需要关闭channel。不管一个channel是否被关闭，当它没有被引用时将会被Go语言的垃圾自动回收器回收。（不要将关闭一个打开文件的操作和关闭一个channel操作混淆。对于每个打开的文件，都需要在不使用的使用调用对应的Close方法来关闭文件。）<br>试图重复关闭一个channel将导致panic异常，试图关闭一个nil值的channel也将导致panic异常。关闭一个channels还会触发一个广播机制</p>
<h1 id="Range遍历channel"><a href="#Range遍历channel" class="headerlink" title="Range遍历channel"></a>Range遍历channel</h1><p>可以通过range，像操作slice或者map一样操作缓存类型的channel</p>
<p>使用range实现斐波那契数列</p>
<p>示例代码：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">int</span>, f <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    x, y := <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n; i++ &#123;</span><br><span class="line">        f &lt;- x</span><br><span class="line">        x, y = y, x+y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">go</span> fibonacci(<span class="built_in">cap</span>(ch), ch)</span><br><span class="line">    <span class="keyword">for</span> v := <span class="keyword">range</span> ch &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%d  "</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h1><p>Go提供了一个关键字select，通过select可以监听channel上的数据流动。</p>
<p>语法和恶switch非常相似，每个条件由case来描述。但是select有很多限制，其中一条就是每个case语句里必须是一个IO操作。</p>
<p>大致结构<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">selct &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">    <span class="comment">//如果读数据，则执行</span></span><br><span class="line">    <span class="keyword">case</span> ch&lt;- <span class="number">1</span>:</span><br><span class="line">    <span class="comment">//如果写数据，则执行</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">//默认处理流程，但是一般情况select不用该条件，因为无意义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在一个select语句中，Go会按顺序从头到尾评估每一条发送和接收的语句。</p>
<p>但是其中任意一语句都可以，是任意都可以(即没有被堵塞)，那么就从那么可以执行的语句中任意选择来使用。</p>
<p>如果没有任意一条语句可以执行，那么可能有两种情况。</p>
<ul>
<li>如果给出了default语句，则会执行default语句，同时程序的执行会从select语句后的语句中恢复。</li>
<li>如果没有default语句，那么select语句将被阻塞，直到有一个通信可以进行下去。</li>
</ul>
<p>使用select实现斐波那契数列<br>示例代码：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(n <span class="keyword">chan</span> <span class="keyword">int</span>, b <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    x, y := <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> n&lt;- x:</span><br><span class="line">            x, y = y, x+y</span><br><span class="line">        <span class="keyword">case</span> &lt;-b:</span><br><span class="line">            fmt.Println(<span class="string">"end"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用select实现斐波那契</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">    b := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(n); i++ &#123;</span><br><span class="line">            fmt.Println(&lt;-n)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        b&lt;- <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    fibonacci(n, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="select_feibo.png" alt></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Go并发之goroutine</title>
    <url>/2018/09/24/Go%E5%B9%B6%E5%8F%91%E4%B9%8Bgoroutine/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Go语言并发优势"><a href="#Go语言并发优势" class="headerlink" title="Go语言并发优势"></a>Go语言并发优势</h1><p>作为云计算时代的C语言之称的Go语言，第一是因为Go语言设计简单，第二21实际最重要的就是并发程序设计，而Go在语言层面上就支持了并发。在此同时，并发程序的内存管理有时候是非常复杂的，而Go自身也提供了自动垃圾回收机制。</p>
<a id="more"></a>
<p>Go语言为并发编程而内置的上层API是基于CSP模型，这里引用了知乎<a href="https://www.zhihu.com/question/26192499" target="_blank" rel="noopener">原文链接</a>,CSP(Communicating Sequential Process)模型和Actor模型是两门非常复古且外形接近的并发模型。但CSP与Actor有以下几点比较大的区别：</p>
<ul>
<li>CSP并不Focus发送消息的实体/Task，而是关注发送消息时消息所使用的载体，即channel。</li>
<li>在Actor的设计中，Actor与信箱是耦合的，而在CSP中channel是作为first-class独立存在的。</li>
<li>另外一点在于，Actor中有明确的send/receive的关系，而channel中并不区分这样的关系，执行块可以任意选择发送或者取出消息。</li>
</ul>
<p>另外默认情况下的channel是无缓存的,对channel的send动作是同步阻塞的，直到另外一个持有该channel引用的执行块取出消息(channel为空)，反之，receive动作亦然。藉此，我们可以得到一个基本确定的事实，by default时，实际的receive操作只会在send之后才被发生。而Actor中，由于send这个动作是异步的，因此Actor的receive会按照信箱接受到消息的顺序来进行处理。当然，除此以外，channel还有种Buffered Channel的模式，在默认情况的基础上，你可以确定channel内的消息数量，当channel中消息数量不满足于初始化时Buffer数目时，send动作不会被阻塞，写入操作会立即完成(因此Buffered Channel在很大程度上与Actor非常接近)，直到Buffer数目已满，则send动作开始阻塞。</p>
<p>这也意味着显示锁都是可以避免的，因为Go语言通过安全的通道发送和接受以实现同步，也简化了并发程序的编写。</p>
<p>而一般情况下，桌面计算机跑十几二十个线程就有点负载了，而同样的一台计算机，却可以轻松跑<br>起成百上千甚至万个goroutine进行资源竞争。</p>
<h1 id="goroutine是什么"><a href="#goroutine是什么" class="headerlink" title="goroutine是什么"></a>goroutine是什么</h1><p>goroutine是Go并行设计的设置核心，它其实就是协程，但是它比线程更小，十几个goroutine可能体现在底层就是五六个线程，Go语言内部帮你实现了这些goroutine之间的内存共享。执行goroutine只需极少的栈内存，当然会根据相应的数据伸缩。也正是如此，可以同时运行成千上万个并发任务。goroutine比thread更易用、更高效、更轻便。</p>
<h1 id="goroutine的创建"><a href="#goroutine的创建" class="headerlink" title="goroutine的创建"></a>goroutine的创建</h1><p>只需要函数调用前加一个 <strong> go </strong> 关键字，就可以创建并发执行单元。无需了解其他细节，调度器会自动安排到合适的系统线程上执行。</p>
<p>像java语言一样，go也有其main函数，有着其main thread。在go语言中，main函数既在一个单独的goroutine中运行，也可以成为main goroutine。新的goroutine用go语句来创建。</p>
<p>示例代码1：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123; <span class="comment">//死循环</span></span><br><span class="line">        fmt.Println(<span class="string">"this is main goroutine"</span>)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="main_goroutine.png" alt></p>
<p>手动退出，这是一个主协程，那么再看下面一个代码<br>示例代码2：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"this is a new Task"</span>)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"this is main goroutine"</span>)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newTask()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="main_goroutine.png" alt></p>
<p>毫无疑问示例2与示例1中运行结果没有区别，而如何让他们同时执行呢</p>
<p>示例代码3：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"this is a new Task"</span>)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> newTask() <span class="comment">//新建一个协程</span></span><br><span class="line">    <span class="comment">//需要将代码放置前面，如果放置后面，死循环同样没办法执行这条语句</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"this is main goroutine"</span>)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="new_goroutine.png" alt></p>
<p>一个新的协程只需要一个关键字go就已经完成了。</p>
<h1 id="main-goroutine先退出"><a href="#main-goroutine先退出" class="headerlink" title="main goroutine先退出"></a>main goroutine先退出</h1><p>我们再看一个奇怪的现象</p>
<p>示例代码4：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"this is a new Task"</span>)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> newTask()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="main_goroutine_exit_first.png" alt></p>
<p>为什么结果什么都没有，我们明明已经开了一个新的协程来进行执行newTask函数，这就是go中main函数执行的太快了，也就是main goroutine已经执行完了，所有的goroutine都会直接打断，程序退出。</p>
<p>为了防止main goroutine过快的结束，<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"this is a new Task"</span>)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> newTask()</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果：<br><img src="sleep_main.png" alt></p>
<p>让main goroutine睡了5秒，而newTask也刚好执行了5次，也解释了当main goroutine结束时，所有的goroutine都会直接打断，程序退出。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Go环境搭建</title>
    <url>/2018/09/22/Go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Go语言优势"><a href="#Go语言优势" class="headerlink" title="Go语言优势"></a>Go语言优势</h1><p>GO语言（Golang）是云计算时代的C语言。它不仅有着更高的生产效率，也对多处理器系统应用程序的编程进行了优化，语言层面支持并发，内置runtime，支持GC，并且语法简单易学，并不像java有着那么复杂的语法。</p>
<a id="more"></a>
<h1 id="Go可以做什么"><a href="#Go可以做什么" class="headerlink" title="Go可以做什么"></a>Go可以做什么</h1><ul>
<li>服务器编程</li>
<li>分布式系统</li>
<li>网络编程</li>
<li>内存数据库</li>
<li>云平台</li>
<li>and so on</li>
</ul>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>教程基于win10，linux等系统请参考其他文章<br><a href="https://golang.org/" target="_blank" rel="noopener">官网</a>，自行下载msi文件，傻瓜式安装，安装路径不要出现中文避免出差错。<br>需要翻墙，没有可以选择<a href="https://studygolang.com" target="_blank" rel="noopener">Golang中文网</a><br>测试安装：打开终端输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.11 windows/amd64</span><br></pre></td></tr></table></figure></p>
<p>即可完成安装</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>打开终端输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go env</span><br><span class="line"><span class="built_in">set</span> GOARCH=amd64</span><br><span class="line"><span class="built_in">set</span> GOBIN=</span><br><span class="line"><span class="built_in">set</span> GOCACHE=C:\Users\Administrator\AppData\Local\go-build</span><br><span class="line"><span class="built_in">set</span> GOEXE=.exe</span><br><span class="line"><span class="built_in">set</span> GOFLAGS=</span><br><span class="line"><span class="built_in">set</span> GOHOSTARCH=amd64</span><br><span class="line"><span class="built_in">set</span> GOHOSTOS=windows</span><br><span class="line"><span class="built_in">set</span> GOOS=windows</span><br><span class="line"><span class="built_in">set</span> GOPATH=E:\Go</span><br><span class="line"><span class="built_in">set</span> GOPROXY=</span><br><span class="line"><span class="built_in">set</span> GORACE=</span><br><span class="line"><span class="built_in">set</span> GOROOT=G:\Golang</span><br><span class="line"><span class="built_in">set</span> GOTMPDIR=</span><br><span class="line"><span class="built_in">set</span> GOTOOLDIR=G:\Golang\pkg\tool\windows_amd64</span><br><span class="line"><span class="built_in">set</span> GCCGO=gccgo</span><br><span class="line"><span class="built_in">set</span> CC=gcc</span><br><span class="line"><span class="built_in">set</span> CXX=g++</span><br><span class="line"><span class="built_in">set</span> CGO_ENABLED=1</span><br><span class="line"><span class="built_in">set</span> GOMOD=</span><br><span class="line"><span class="built_in">set</span> CGO_CFLAGS=-g -O2</span><br><span class="line"><span class="built_in">set</span> CGO_CPPFLAGS=</span><br><span class="line"><span class="built_in">set</span> CGO_CXXFLAGS=-g -O2</span><br><span class="line"><span class="built_in">set</span> CGO_FFLAGS=-g -O2</span><br><span class="line"><span class="built_in">set</span> CGO_LDFLAGS=-g -O2</span><br><span class="line"><span class="built_in">set</span> PKG_CONFIG=pkg-config</span><br><span class="line"><span class="built_in">set</span> GOGCCFLAGS=-m64 -mthreads -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=C:\Users\ADMINI~1\AppData\Local\Temp\go-build669911038=/tmp/go-build -gno-record-gcc-switches</span><br></pre></td></tr></table></figure></p>
<p>msi包基本会把环境配置完成，但要配置GOPATH目录，不要用默认配置的<br>计算机(右键)-属性-高级系统设置-环境变量<br>在 <strong> 用户变量 </strong> 下添加 <strong> GOPATH </strong><br>值为你想要的路径即可。在配置目录下创建三个文件夹，分别是</p>
<ul>
<li>src目录<br>  此目录是自己在GoPath目录下手动创建的，用于放源代码文件。</li>
<li>pkg目录<br>  此目录是在src的源文件目录下对.go文件通过go install之后自动生成的，放编译后的包文件。</li>
<li>bin目录<br>  此目录是在src的源文件目录下对 .go文件通过go build和go install之后自动生成的，.go文件要调用pkg下的包文件。</li>
</ul>
<p>环境基本搭建完成。<br>再次输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ go env</span><br></pre></td></tr></table></figure></p>
<p>发现修改了即可。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven配置</title>
    <url>/2018/09/22/Maven%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong> Maven基础环境搭建 </strong></p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>window10</li>
<li>jdk1.6或以上</li>
</ul>
<a id="more"></a>
<h1 id="下载Maven"><a href="#下载Maven" class="headerlink" title="下载Maven"></a>下载Maven</h1><p><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">官网</a></p>
<p><img src="downloadmaven.png" alt></p>
<p>直接选择 apache-maven-3.5.4-bin.zip格式下载解压即可</p>
<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><h2 id="MAVEN-HOME"><a href="#MAVEN-HOME" class="headerlink" title="MAVEN_HOME"></a>MAVEN_HOME</h2><p>我的解压存放的目录是 <strong> G:\Maven </strong>，下面目录自行替换</p>
<p>计算机(右键)-属性-高级系统设置-环境变量</p>
<p>新建系统变量 <strong> MAVEN_HOME </strong><br>变量值：<strong> G:\Maven </strong></p>
<p>编辑系统变量 <strong> Path </strong><br>添加变量值： <strong> G:\Maven\bin </strong></p>
<h2 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h2><p>git-bash或者命令提示符下，输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mvn --version</span><br><span class="line">Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)</span><br><span class="line">Maven home: G:\Maven</span><br><span class="line">Java version: 1.8.0_131, vendor: Oracle Corporation, runtime: G:\Java\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: <span class="string">"windows 10"</span>, version: <span class="string">"10.0"</span>, arch: <span class="string">"amd64"</span>, family: <span class="string">"windows"</span></span><br></pre></td></tr></table></figure></p>
<p>出现类似即可。</p>
<h1 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h1><h2 id="修改本地仓库地址"><a href="#修改本地仓库地址" class="headerlink" title="修改本地仓库地址"></a>修改本地仓库地址</h2><p>Maven缺省的本地仓库路径 <code>用户目录/.m2/repository</code></p>
<p>打开maven安装目录下的conf目录中的 <code>settings.xml</code> 文件</p>
<p>搜索 <code>localRepository</code><br><img src="localrepo.png" alt><br>取消注释，修改成想要存放的路径保存即可，如图所示<br><img src="localrepo_later.png" alt></p>
<h3 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h3><p><img src="idea_localrepo_setting.png" alt></p>
<h3 id="Eclipse配置"><a href="#Eclipse配置" class="headerlink" title="Eclipse配置"></a>Eclipse配置</h3><p><img src="eclipse_localrepo_setting.png" alt></p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>开源协议介绍</title>
    <url>/2018/09/22/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一些开源协议的介绍，考古。<br>分别是MIT,Apache,LGPL,GPL,BSD,MPL</p>
<a id="more"></a>
<p>现今存在的开源协议很多，而经过Open Source Initiative组织通过批准的开源协议目前有58种（<a href="http://www.opensource.org/licenses" target="_blank" rel="noopener">http://www.opensource.org/licenses</a> /alphabetical）。</p>
<h1 id="Apache-Licene-2-0"><a href="#Apache-Licene-2-0" class="headerlink" title="Apache Licene 2.0"></a>Apache Licene 2.0</h1><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似：</p>
<ul>
<li>需要给代码的用户一份Apache Licence</li>
<li>如果你修改了代码，需要在被修改的文件中说明。</li>
<li>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</li>
<li>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。</li>
</ul>
<p>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似： </span><br><span class="line">    （1）需要给代码的用户一份Apache Licence </span><br><span class="line">    （2）如果你修改了代码，需要再被修改的文件中说明。 </span><br><span class="line">    （3）在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。 </span><br><span class="line">    （4）如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。 </span><br><span class="line">    Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。 </span><br><span class="line">    Apache Licence 2.0版本授予了用户大量的权利。这些权利可以应用于拷贝权，也可以用于专利权。因为很多许可协议只能适用于拷贝权，不适用于专利权，所以这个灵活性就成了让想有专利的开发者们选择许可协议时的一个显著参考因素。 </span><br><span class="line">    下面是关于Apache许可协议所允许的事项的详细说明： </span><br><span class="line">    （1）权利永恒。一旦被授权，权利永久不失。 </span><br><span class="line">    （2）权利无疆界。在一个国家里被授权，形同于在所有国家被授权。例如，你在美国，但许可权最初在印度被授予，你同样可以使用这个被授权的程序。 </span><br><span class="line">    （3）授权无需付费和支付酬劳。你既不需要在使用之前支付任何的费用，也无需在每次使用时支付任何的费用，或者其它类似情况。 </span><br><span class="line">    （4）权利不排他。使用这种许可协议下的软件时，不妨碍你使用其它软件。 </span><br><span class="line">    （5）权利不可变更。 权利一旦授予，不可剥夺。也就是说，你在使用这个软件的过程中，你无需担心这种情况：当你开发出了令人羡慕的基于这种授权软件的衍生产品时，有人突然跳出来对你说，“抱歉，你将不再被允许使用这个程序。”（在这个协议里有个条款声明：如果你控告别人在这个许可协议下的产品有侵犯专利的行为，那你的授权将会自动终止，但这只是适用于有专利权的作品。只要你不搞有专利作品的诉讼，你永远无需担心这种问题。）</span><br></pre></td></tr></table></figure>
<p>英文原文：<a href="http://www.apache.org/licenses/LICENSE-2.0.html" target="_blank" rel="noopener">http://www.apache.org/licenses/LICENSE-2.0.html</a></p>
<h1 id="MPL-Mozilla-Public-License"><a href="#MPL-Mozilla-Public-License" class="headerlink" title="MPL (Mozilla Public License)"></a>MPL (Mozilla Public License)</h1><p>MPL是The Mozilla Public License的简写，是1998年初Netscape的 Mozilla小组为其开源软件项目设计的软件许可证。MPL许可证出现的最重要原因就是，Netscape公司认为GPL许可证没有很好地平衡开发者对 源代码的需求和他们利用源代码获得的利益。同著名的GPL许可证和BSD许可证相比，MPL在许多权利与义务的约定方面与它们相同（因为都是符合OSIA 认定的开源软件许可证）。但是，相比而言MPL还有以下几个显著的不同之处:</p>
<ul>
<li>MPL虽然要求对于经MPL许可证发布的源代码的修改也要以MPL许可证的方式再许可出来，以保证其他人可以在MPL的条款下共享源代码。但是，在MPL 许可证中对“发布”的定义是“以源代码方式发布的文件”，这就意味着MPL允许一个企业在自己已有的源代码库上加一个接口，除了接口程序的源代码以MPL 许可证的形式对外许可外，源代码库中的源代码就可以不用MPL许可证的方式强制对外许可。这些，就为借鉴别人的源代码用做自己商业软件开发的行为留了一个 豁口。 </li>
<li>MPL许可证第三条第7款中允许被许可人将经过MPL许可证获得的源代码同自己其他类型的代码混合得到自己的软件程序。 </li>
<li>对软件专利的态度，MPL许可证不像GPL许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码（除非他本人是 专利权人，并书面向公众免费许可这些源代码），也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。 </li>
<li>对源代码的定义<br>而在MPL（1.1版本）许可证中，对源代码的定义是:“源代码指的是对作品进行修改最优先择 取的形式，它包括:所有模块的所有源程序，加上有关的接口的定义，加上控制可执行作品的安装和编译的‘原本’（原文为‘Script’），或者不是与初始 源代码显著不同的源代码就是被源代码贡献者选择的从公共领域可以得到的程序代码。” </li>
<li>MPL许可证第3条有专门的一款是关于对源代码修改进行描述的规定，就是要求所有再发布者都得有一个专门的文件就对源代码程序修改的时间和修改的方式有描述。</li>
</ul>
<p>英文原文：<a href="http://www.mozilla.org/MPL/MPL-1.1.html" target="_blank" rel="noopener">http://www.mozilla.org/MPL/MPL-1.1.html</a></p>
<h1 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h1><p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p>
<p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p>
<ul>
<li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</li>
<li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。</li>
<li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li>
</ul>
<p>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对 商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件： </span><br><span class="line">    （1）如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。 </span><br><span class="line">    （2）如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。 </span><br><span class="line">    （3）不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。 </span><br><span class="line">    BSD代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。 而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。 </span><br><span class="line">    新BSD协议（“3条款许可协议”）无任何限制的允许你以任何目的二次分发这种软件，唯一的要求是必须保留拷贝权的声明和协议里的软件权利放弃条款。这种协议还有一个限制，未经许可不得使用这个作品的所有曾经捐助者的署名。 新BSD协议和简化BSD协议的最主要的区别是后者删除了署名条款。</span><br></pre></td></tr></table></figure>
<h1 id="GPL（GNU-General-Public-License）"><a href="#GPL（GNU-General-Public-License）" class="headerlink" title="GPL（GNU General Public License）"></a>GPL（GNU General Public License）</h1><p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代 码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商 业软件公司开发的免费软件了。</p>
<p>GPL协议的主要内容是只要在一个软件中使用(”使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题， 还可以享受免费的优势。</p>
<p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</p>
<p>其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。</p>
<h1 id="GPL-V2-、-V3"><a href="#GPL-V2-、-V3" class="headerlink" title="GPL　V2 、 V3"></a>GPL　V2 、 V3</h1><p>GPL同其它的自由软件许可证一样，许可社会公众享有：运行、复制软件的自由，发行传播软件的自由，获得软件源码的自由，改进软件并将自己作出的改进版本向社会发行传播的自由。<br>GPL还规定：只要这种修改文本在整体上或者其某个部分来源于遵循GPL的程序，该修改文本的 整体就必须按照GPL流通，不仅该修改文本的源码必须向社会公开，而且对于这种修改文本的流通不准许附加修改者自己作出的限制。因此，一项遵循GPL流通 的程序不能同非自由的软件合并。GPL所表达的这种流通规则称为copyleft，表示与copyright(版权)的概念“相左”。</p>
<p>GPL协议最主要的几个原则：</p>
<ul>
<li><p>确保软件自始至终都以开放源代码形式发布，保护开发成果不被窃取用作商业发售。任何一套软 件，只要其中使用了受 GPL 协议保护的第三方软件的源程序，并向非开发人员发布时，软件本身也就自动成为受 GPL 保护并且约束的实体。也就是说，此时它必须开放源代码。</p>
</li>
<li><p>GPL 大致就是一个左侧版权（Copyleft，或译为“反版权”、“版权属左”、“版权所无”、“版责”等）的体现。你可以去掉所有原作的版权 信息，只要你保持开源，并且随源代码、二进制版附上 GPL 的许可证就行，让后人可以很明确地得知此软件的授权信息。GPL 精髓就是，只要使软件在完整开源 的情况下，尽可能使使用者得到自由发挥的空间，使软件得到更快更好的发展。</p>
</li>
<li><p>无论软件以何种形式发布，都必须同时附上源代码。例如在 Web 上提供下载，就必须在二进制版本（如果有的话）下载的同一个页面，清楚地提供源代码下载的链接。如果以光盘形式发布，就必须同时附上源文件的光盘。</p>
</li>
<li><p>开发或维护遵循 GPL 协议开发的软件的公司或个人，可以对使用者收取一定的服务费用。但还是一句老话——必须无偿提供软件的完整源代码，不得将源代码与服务做捆绑或任何变相捆绑销售。</p>
</li>
</ul>
<h1 id="LGPL（GNU-Lesser-General-Public-License）"><a href="#LGPL（GNU-Lesser-General-Public-License）" class="headerlink" title="LGPL（GNU Lesser General Public License）"></a>LGPL（GNU Lesser General Public License）</h1><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。 LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并 发布和销售。</p>
<p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源 代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p>
<p>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</p>
<h1 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h1><p>MIT是和BSD一样宽范的许可协议,作者只想保留版权,而无任何其他了限制.也就是说,你必须在你的发行版里包含原许可协议的声明,无论你是以二进制发布的还是以源代码发布的。</p>
<h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ul>
<li><a href="http://www.open-open.com/solution/view/1319814738108" target="_blank" rel="noopener">http://www.open-open.com/solution/view/1319814738108</a></li>
<li><a href="http://www.open-open.com/solution/view/1405088577732" target="_blank" rel="noopener">http://www.open-open.com/solution/view/1405088577732</a></li>
<li><a href="http://www.open-open.com/solution/view/1319816219625" target="_blank" rel="noopener">http://www.open-open.com/solution/view/1319816219625</a></li>
</ul>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>开源协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Go fmt包的格式化输出</title>
    <url>/2018/09/14/Go-fmt%E5%8C%85%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong> golang 的fmt 包实现了格式化I/O函数，类似于C的 printf 和 scanf </strong></p>
<a id="more"></a>
<h1 id="普通占位符"><a href="#普通占位符" class="headerlink" title="普通占位符"></a>普通占位符</h1><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%v</td>
<td>相应值的默认格式，基本万能</td>
</tr>
<tr>
<td>%+v</td>
<td>打印结构体时，会添加字段名</td>
</tr>
<tr>
<td>%#v</td>
<td>响应值的Go语法表示</td>
</tr>
<tr>
<td>%T</td>
<td>响应值的类型的Go语法表示</td>
</tr>
<tr>
<td>%%</td>
<td>字面上的百分号，并非值的占位符</td>
</tr>
</tbody>
</table>
<h1 id="布尔占位符"><a href="#布尔占位符" class="headerlink" title="布尔占位符"></a>布尔占位符</h1><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%t</td>
<td>true 或者 false</td>
</tr>
</tbody>
</table>
<h1 id="整数占位符"><a href="#整数占位符" class="headerlink" title="整数占位符"></a>整数占位符</h1><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%b</td>
<td>二进制表示</td>
</tr>
<tr>
<td>%c</td>
<td>相应unicode码所表示的字符</td>
</tr>
<tr>
<td>%d</td>
<td>十进制表示</td>
</tr>
<tr>
<td>%o</td>
<td>八进制表示</td>
</tr>
<tr>
<td>%q</td>
<td>单引号围绕的字符字面值，由Go语法安全的转义，如Printf(%q, 0x4E2E)输出’中’</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制表示，字母形式为小写a-f</td>
</tr>
<tr>
<td>%X</td>
<td>十六进制表示，字母形式为A-F</td>
</tr>
<tr>
<td>%U</td>
<td>unicode格式，U+1234 等同于 U+%04X</td>
</tr>
</tbody>
</table>
<h1 id="浮点数和复数的组成部分（实部和虚部）"><a href="#浮点数和复数的组成部分（实部和虚部）" class="headerlink" title="浮点数和复数的组成部分（实部和虚部）"></a>浮点数和复数的组成部分（实部和虚部）</h1><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%b</td>
<td>无小数部分的，指数为二的幂的科学记数法</td>
</tr>
<tr>
<td>%e</td>
<td>科学记数法</td>
</tr>
<tr>
<td>%E</td>
<td>科学计数法</td>
</tr>
<tr>
<td>%f</td>
<td>有小数点而无指数</td>
</tr>
<tr>
<td>%g</td>
<td>根据情况选择%e 或者 %f 以产生更紧凑的输出</td>
</tr>
<tr>
<td>%G</td>
<td>根据情况选择%E 或者 %f 以产生更紧凑的输出</td>
</tr>
</tbody>
</table>
<h1 id="字符串和字节切片"><a href="#字符串和字节切片" class="headerlink" title="字符串和字节切片"></a>字符串和字节切片</h1><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%s</td>
<td>输出字符串表示（字符串类型或[]byte类型）</td>
</tr>
<tr>
<td>%q</td>
<td>双引号围绕的字符串，由Go语法安全地转义</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制，小写字母，每字节两个字符</td>
</tr>
<tr>
<td>%X</td>
<td>十六进制，大写字母，每字节两个字符</td>
</tr>
</tbody>
</table>
<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%p</td>
<td>十六进制表示，前缀0x</td>
</tr>
</tbody>
</table>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符。</td>
</tr>
<tr>
<td>-</td>
<td>在右侧而非左侧填充空格（左对齐该区域）</td>
</tr>
<tr>
<td>#</td>
<td>备用格式：为八进制添加前导 0（%#o）</td>
</tr>
<tr>
<td>‘ ‘</td>
<td>(空格)为数值中省略的正负号留出空白（% d）</td>
</tr>
<tr>
<td>0</td>
<td>填充前导的0而非空格；对于数字，这会将填充移到正负号之后</td>
</tr>
</tbody>
</table>
<p>golang没有 ‘%u’ 点位符，若整数为无符号类型，默认就会被打印成无符号的。</p>
<p>宽度与精度的控制格式以Unicode码点为单位。宽度为该数值占用区域的最小宽度；精度为小数点之后的位数。<br>操作数的类型为int时，宽度与精度都可用字符 ‘*’ 表示。</p>
<p>对于 %g/%G 而言，精度为所有数字的总数，例如：123.45，%.4g 会打印123.5，（而 %6.2f 会打印123.45）。</p>
<p>%e 和 %f 的默认精度为6</p>
<p>对大多数的数值类型而言，宽度为输出的最小字符数，如果必要的话会为已格式化的形式填充空格。</p>
<p>而以字符串类型，精度为输出的最大字符数，如果必要的话会直接截断。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Go标准命令</title>
    <url>/2018/09/14/Go%E6%A0%87%E5%87%86%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Go命令"><a href="#Go命令" class="headerlink" title="Go命令"></a>Go命令</h1><p>Go语言自带有一套完整的命令操作工具，你可以通过在命令行中执行<code>go</code>来查看它们：</p>
<p>图1.3 Go命令显示详细的信息</p>
<p>  这些命令对于我们平时编写的代码非常有用，接下来就让我们了解一些常用的命令。</p>
<a id="more"></a>
<h2 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h2><p>  这个命令主要用于编译代码。在包的编译过程中，若有必要，会同时编译与之相关联的包。</p>
<ul>
<li><p>如果是普通包，就像我们在1.2节中编写的<code>mymath</code>包那样，当你执行<code>go build</code>之后，它不会产生任何文件。如果你需要在<code>$GOPATH/pkg</code>下生成相应的文件，那就得执行<code>go install</code>。</p>
</li>
<li><p>如果是<code>main</code>包，当你执行<code>go build</code>之后，它就会在当前目录下生成一个可执行文件。如果你需要在<code>$GOPATH/bin</code>下生成相应的文件，需要执行<code>go install</code>，或者使用<code>go build -o 路径/a.exe</code>。</p>
</li>
<li><p>如果某个项目文件夹下有多个文件，而你只想编译某个文件，就可在<code>go build</code>之后加上文件名，例如<code>go build a.go</code>；<code>go build</code>命令默认会编译当前目录下的所有go文件。</p>
</li>
<li><p>你也可以指定编译输出的文件名。例如1.2节中的<code>mathapp</code>应用，我们可以指定<code>go build -o astaxie.exe</code>，默认情况是你的package名(非main包)，或者是第一个源文件的文件名(main包)。</p>
<p>（注：实际上，package名在<a href="https://golang.org/ref/spec" target="_blank" rel="noopener">Go语言规范</a>中指代码中“package”后使用的名称，此名称可以与文件夹名不同。默认生成的可执行文件名是文件夹名。）</p>
</li>
<li><p>go build会忽略目录下以“_”或“.”开头的go文件。</p>
</li>
<li><p>如果你的源代码针对不同的操作系统需要不同的处理，那么你可以根据不同的操作系统后缀来命名文件。例如有一个读取数组的程序，它对于不同的操作系统可能有如下几个源文件：</p>
<p>array_linux.go<br>array_darwin.go<br>array_windows.go<br>array_freebsd.go</p>
<p><code>go build</code>的时候会选择性地编译以系统名结尾的文件（Linux、Darwin、Windows、Freebsd）。例如Linux系统下面编译只会选择array_linux.go文件，其它系统命名后缀文件全部忽略。</p>
</li>
</ul>
<p>参数的介绍</p>
<ul>
<li><code>-o</code> 指定输出的文件名，可以带上路径，例如 <code>go build -o a/b/c</code></li>
<li><code>-i</code> 安装相应的包，编译+<code>go install</code></li>
<li><code>-a</code> 更新全部已经是最新的包的，但是对标准包不适用</li>
<li><code>-n</code> 把需要执行的编译命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的</li>
<li><code>-p n</code> 指定可以并行可运行的编译数目，默认是CPU数目</li>
<li><code>-race</code> 开启编译的时候自动检测数据竞争的情况，目前只支持64位的机器</li>
<li><code>-v</code> 打印出来我们正在编译的包名</li>
<li><code>-work</code> 打印出来编译时候的临时文件夹名称，并且如果已经存在的话就不要删除</li>
<li><code>-x</code> 打印出来执行的命令，其实就是和<code>-n</code>的结果类似，只是这个会执行</li>
<li><code>-ccflags &#39;arg list&#39;</code> 传递参数给5c, 6c, 8c 调用</li>
<li><code>-compiler name</code> 指定相应的编译器，gccgo还是gc</li>
<li><code>-gccgoflags &#39;arg list&#39;</code> 传递参数给gccgo编译连接调用</li>
<li><code>-gcflags &#39;arg list&#39;</code> 传递参数给5g, 6g, 8g 调用</li>
<li><code>-installsuffix suffix</code> 为了和默认的安装包区别开来，采用这个前缀来重新安装那些依赖的包，<code>-race</code>的时候默认已经是<code>-installsuffix race</code>,大家可以通过<code>-n</code>命令来验证</li>
<li><code>-ldflags &#39;flag list&#39;</code> 传递参数给5l, 6l, 8l 调用</li>
<li><code>-tags &#39;tag list&#39;</code> 设置在编译的时候可以适配的那些tag，详细的tag限制参考里面的 <a href="http://golang.org/pkg/go/build/" target="_blank" rel="noopener">Build Constraints</a></li>
</ul>
<h2 id="go-clean"><a href="#go-clean" class="headerlink" title="go clean"></a>go clean</h2><p>  这个命令是用来移除当前源码包和关联源码包里面编译生成的文件。这些文件包括</p>
<pre><code>_obj/            旧的object目录，由Makefiles遗留
_test/           旧的test目录，由Makefiles遗留
_testmain.go     旧的gotest文件，由Makefiles遗留
test.out         旧的test记录，由Makefiles遗留
build.out        旧的test记录，由Makefiles遗留
*.[568ao]        object文件，由Makefiles遗留

DIR(.exe)        由go build产生
DIR.test(.exe)   由go test -c产生
MAINFILE(.exe)   由go build MAINFILE.go产生
*.so             由 SWIG 产生
</code></pre><p>  我一般都是利用这个命令清除编译文件，然后github递交源码，在本机测试的时候这些编译文件都是和系统相关的，但是对于源码管理来说没必要。</p>
<pre><code>$ go clean -i -n
cd /Users/astaxie/develop/gopath/src/mathapp
rm -f mathapp mathapp.exe mathapp.test mathapp.test.exe app app.exe
rm -f /Users/astaxie/develop/gopath/bin/mathapp
</code></pre><p>参数介绍</p>
<ul>
<li><code>-i</code> 清除关联的安装的包和可运行文件，也就是通过go install安装的文件</li>
<li><code>-n</code> 把需要执行的清除命令打印出来，但是不执行，这样就可以很容易的知道底层是如何运行的</li>
<li><code>-r</code> 循环的清除在import中引入的包</li>
<li><code>-x</code> 打印出来执行的详细命令，其实就是<code>-n</code>打印的执行版本</li>
</ul>
<h2 id="go-fmt"><a href="#go-fmt" class="headerlink" title="go fmt"></a>go fmt</h2><p>  有过C/C++经验的读者会知道,一些人经常为代码采取K&amp;R风格还是ANSI风格而争论不休。在go中，代码则有标准的风格。由于之前已经有的一些习惯或其它的原因我们常将代码写成ANSI风格或者其它更合适自己的格式，这将为人们在阅读别人的代码时添加不必要的负担，所以go强制了代码格式（比如左大括号必须放在行尾），不按照此格式的代码将不能编译通过，为了减少浪费在排版上的时间，go工具集中提供了一个<code>go fmt</code>命令 它可以帮你格式化你写好的代码文件，使你写代码的时候不需要关心格式，你只需要在写完之后执行<code>go fmt &lt;文件名&gt;.go</code>，你的代码就被修改成了标准格式，但是我平常很少用到这个命令，因为开发工具里面一般都带了保存时候自动格式化功能，这个功能其实在底层就是调用了<code>go fmt</code>。接下来的一节我将讲述两个工具，这两个工具都自带了保存文件时自动化<code>go fmt</code>功能。</p>
<p>使用go fmt命令，其实是调用了gofmt，而且需要参数-w，否则格式化结果不会写入文件。gofmt -w -l src，可以格式化整个项目。</p>
<p>所以go fmt是gofmt的上层一个包装的命令，我们想要更多的个性化的格式化可以参考 <a href="http://golang.org/cmd/gofmt/" target="_blank" rel="noopener">gofmt</a></p>
<p>gofmt的参数介绍</p>
<ul>
<li><code>-l</code> 显示那些需要格式化的文件</li>
<li><code>-w</code> 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出。</li>
<li><code>-r</code> 添加形如“a[b:len(a)] -&gt; a[b:]”的重写规则，方便我们做批量替换</li>
<li><code>-s</code> 简化文件中的代码</li>
<li><code>-d</code> 显示格式化前后的diff而不是写入文件，默认是false</li>
<li><code>-e</code> 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误。</li>
<li><code>-cpuprofile</code> 支持调试模式，写入相应的cpufile到指定的文件</li>
</ul>
<h2 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h2><p>  这个命令是用来动态获取远程代码包的，目前支持的有BitBucket、GitHub、Google Code和Launchpad。这个命令在内部实际上分成了两步操作：第一步是下载源码包，第二步是执行<code>go install</code>。下载源码包的go工具会自动根据不同的域名调用不同的源码工具，对应关系如下：</p>
<pre><code>BitBucket (Mercurial Git)
GitHub (Git)
Google Code Project Hosting (Git, Mercurial, Subversion)
Launchpad (Bazaar)
</code></pre><p>  所以为了<code>go get</code> 能正常工作，你必须确保安装了合适的源码管理工具，并同时把这些命令加入你的PATH中。其实<code>go get</code>支持自定义域名的功能，具体参见<code>go help remote</code>。</p>
<p>参数介绍：</p>
<ul>
<li><code>-d</code> 只下载不安装</li>
<li><code>-f</code> 只有在你包含了<code>-u</code>参数的时候才有效，不让<code>-u</code>去验证import中的每一个都已经获取了，这对于本地fork的包特别有用</li>
<li><code>-fix</code> 在获取源码之后先运行fix，然后再去做其他的事情</li>
<li><code>-t</code> 同时也下载需要为运行测试所需要的包</li>
<li><code>-u</code> 强制使用网络去更新包和它的依赖包</li>
<li><code>-v</code> 显示执行的命令</li>
</ul>
<h2 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a>go install</h2><p>  这个命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或者.a包)，第二步会把编译好的结果移到<code>$GOPATH/pkg</code>或者<code>$GOPATH/bin</code>。</p>
<p>参数支持<code>go build</code>的编译参数。大家只要记住一个参数<code>-v</code>就好了，这个随时随地的可以查看底层的执行信息。</p>
<h2 id="go-test"><a href="#go-test" class="headerlink" title="go test"></a>go test</h2><p>  执行这个命令，会自动读取源码目录下面名为<code>*_test.go</code>的文件，生成并运行测试用的可执行文件。输出的信息类似</p>
<pre><code>ok   archive/tar   0.011s
FAIL archive/zip   0.022s
ok   compress/gzip 0.033s
...
</code></pre><p>  默认的情况下，不需要任何的参数，它会自动把你源码包下面所有test文件测试完毕，当然你也可以带上参数，详情请参考<code>go help testflag</code></p>
<p>这里我介绍几个我们常用的参数：</p>
<ul>
<li><code>-bench regexp</code> 执行相应的benchmarks，例如 <code>-bench=.</code></li>
<li><code>-cover</code> 开启测试覆盖率</li>
<li><code>-run regexp</code> 只运行regexp匹配的函数，例如 <code>-run=Array</code> 那么就执行包含有Array开头的函数</li>
<li><code>-v</code> 显示测试的详细命令</li>
</ul>
<h2 id="go-tool"><a href="#go-tool" class="headerlink" title="go tool"></a>go tool</h2><p><code>go tool</code>下面下载聚集了很多命令，这里我们只介绍两个，fix和vet</p>
<ul>
<li><code>go tool fix .</code> 用来修复以前老版本的代码到新版本，例如go1之前老版本的代码转化到go1,例如API的变化</li>
<li><code>go tool vet directory|files</code> 用来分析当前目录的代码是否都是正确的代码,例如是不是调用fmt.Printf里面的参数不正确，例如函数里面提前return了然后出现了无用代码之类的。</li>
</ul>
<h2 id="go-generate"><a href="#go-generate" class="headerlink" title="go generate"></a>go generate</h2><p>这个命令是从Go1.4开始才设计的，用于在编译前自动化生成某类代码。<code>go generate</code>和<code>go build</code>是完全不一样的命令，通过分析源码中特殊的注释，然后执行相应的命令。这些命令都是很明确的，没有任何的依赖在里面。而且大家在用这个之前心里面一定要有一个理念，这个<code>go generate</code>是给你用的，不是给使用你这个包的人用的，是方便你来生成一些代码的。</p>
<p>这里我们来举一个简单的例子，例如我们经常会使用<code>yacc</code>来生成代码，那么我们常用这样的命令：</p>
<pre><code>go tool yacc -o gopher.go -p parser gopher.y
</code></pre><p>-o 指定了输出的文件名， -p指定了package的名称，这是一个单独的命令，如果我们想让<code>go generate</code>来触发这个命令，那么就可以在当然目录的任意一个<code>xxx.go</code>文件里面的任意位置增加一行如下的注释：</p>
<pre><code>//go:generate go tool yacc -o gopher.go -p parser gopher.y
</code></pre><p>这里我们注意了，<code>//go:generate</code>是没有任何空格的，这其实就是一个固定的格式，在扫描源码文件的时候就是根据这个来判断的。</p>
<p>所以我们可以通过如下的命令来生成，编译，测试。如果<code>gopher.y</code>文件有修改，那么就重新执行<code>go generate</code>重新生成文件就好。</p>
<pre><code>$ go generate
$ go build
$ go test
</code></pre><h2 id="godoc"><a href="#godoc" class="headerlink" title="godoc"></a>godoc</h2><p>在Go1.2版本之前还支持<code>go doc</code>命令，但是之后全部移到了godoc这个命令下，需要这样安装<code>go get golang.org/x/tools/cmd/godoc</code></p>
<p>  很多人说go不需要任何的第三方文档，例如chm手册之类的（其实我已经做了一个了，<a href="https://github.com/astaxie/godoc" target="_blank" rel="noopener">chm手册</a>），因为它内部就有一个很强大的文档工具。</p>
<p>  如何查看相应package的文档呢？<br>  例如builtin包，那么执行<code>godoc builtin</code><br>  如果是http包，那么执行<code>godoc net/http</code><br>  查看某一个包里面的函数，那么执行<code>godoc fmt Printf</code><br>  也可以查看相应的代码，执行<code>godoc -src fmt Printf</code></p>
<p>  通过命令在命令行执行 godoc -http=:端口号 比如<code>godoc -http=:8080</code>。然后在浏览器中打开<code>127.0.0.1:8080</code>，你将会看到一个golang.org的本地copy版本，通过它你可以查询pkg文档等其它内容。如果你设置了GOPATH，在pkg分类下，不但会列出标准包的文档，还会列出你本地<code>GOPATH</code>中所有项目的相关文档，这对于经常被墙的用户来说是一个不错的选择。</p>
<h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><p>  go还提供了其它很多的工具，例如下面的这些工具</p>
<pre><code>go version 查看go当前的版本
go env 查看当前go的环境变量
go list 列出当前全部安装的package
go run 编译并运行Go程序
</code></pre><p>以上这些工具还有很多参数没有一一介绍，用户可以使用<code>go help 命令</code>获取更详细的帮助信息。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang基础</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL错误集</title>
    <url>/2018/09/13/MySQL%E9%94%99%E8%AF%AF%E9%9B%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong> MYSQL错误集记录 </strong></p>
<a id="more"></a>
<h1 id="ERROR-1215-Cannot-add-foreign-key-constraint"><a href="#ERROR-1215-Cannot-add-foreign-key-constraint" class="headerlink" title="ERROR 1215-Cannot add foreign key constraint"></a>ERROR 1215-Cannot add foreign key constraint</h1><p>先看俩个表结构<br><img src="desc_book.png" alt><br><img src="desc_reader.png" alt></p>
<p>对reader表进行添加外键约束book表<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE reader ADD CONSTRAINT fk_book_reader FOREIGN key</span><br><span class="line">    -&gt; reader(book_id) REFERENCES book(book_id);</span><br></pre></td></tr></table></figure></p>
<p>报错：1215-Cannot add foreign key constraint<br>问题分析：</p>
<blockquote>
<p>主外键更多的是某表的主键与子表的某个列进行关联，要求是具备相同的数据类型和属性</p>
</blockquote>
<p>要求：具备相同的数据类型和约束<br>发现：unsigned，数字的字符长度不一致。<br>修改reader表book_id列属性<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE reader MODIFY book_id INT UNSIGNED;</span><br></pre></td></tr></table></figure></p>
<p>再次进行添加外键约束，问题解决。</p>
<h1 id="ERROR-1075-42000-Incorrect-table-definition-there-can-be-only-one-auto-column-and-it-must-be-defined-as-a-key"><a href="#ERROR-1075-42000-Incorrect-table-definition-there-can-be-only-one-auto-column-and-it-must-be-defined-as-a-key" class="headerlink" title="ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key"></a>ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key</h1><p>引发原因，建表语句：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table if not exists user(</span><br><span class="line">    -&gt; id int unsigned auto_increment,</span><br><span class="line">    -&gt; uuid varchar(30) not null,</span><br><span class="line">    -&gt; primary key (uuid,id)</span><br><span class="line">    -&gt; ) engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure></p>
<p>解决方法：当有一个自增键和另外一个字段需要作为主键时，一定要在定义primary key中先定义自增键，否则报错。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table if not exists user(</span><br><span class="line">    -&gt; id int unsigned auto_increment,</span><br><span class="line">    -&gt; uuid varchar(30) not null,</span><br><span class="line">    -&gt; primary key (id,uuid)</span><br><span class="line">    -&gt; ) engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7搭建FTP服务器</title>
    <url>/2018/09/11/Centos7%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前部署阿里云服务器需要上传一些文件，所以搭建了FTP服务器，便记录一下。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Centos7</li>
</ul>
<a id="more"></a>
<h1 id="安装VSFTPD"><a href="#安装VSFTPD" class="headerlink" title="安装VSFTPD"></a>安装VSFTPD</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install vsftpd -y</span><br></pre></td></tr></table></figure>
<h1 id="配置VSFTPD"><a href="#配置VSFTPD" class="headerlink" title="配置VSFTPD"></a>配置VSFTPD</h1><p>vsftpd的配置文件是 <strong> /etc/vsftpd/vsftpd.conf </strong> ，直接用vim打开编辑即可。<br>使用vim编辑器打开vsftpd配置文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure></p>
<p><strong> 关键修改 </strong></p>
<ul>
<li>anonymous_enable=YES<br>  是否允许匿名用户登陆FTP。<br>  为了安全起见关闭这个功能（将等号后的YES改成NO即可）。</li>
<li>dirmessage_enable=YES<br>  切换目录时，显示目录下.message文件中的内容<br>  默认是开启的</li>
<li>local_umask=022<br>  FTP上本地的文件权限，默认是077，不过vsftpd安装后的配置文件里默认是022.<br>  没有什么特殊情况不用修改。</li>
<li>xferlog_enable=YES<br>  启用上传和下载的日志功能，默认开启。</li>
<li>ftpd_banner=XXXX<br>  FTP的欢迎信息。</li>
<li>data_connection_timeout=120<br>  数据连接超时时间。</li>
</ul>
<h1 id="启动VSFTPD"><a href="#启动VSFTPD" class="headerlink" title="启动VSFTPD"></a>启动VSFTPD</h1><p>开机启动<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> vsftpd.service</span><br><span class="line">$ systemctl start vsftpd.service</span><br></pre></td></tr></table></figure></p>
<h1 id="创建FTP用户"><a href="#创建FTP用户" class="headerlink" title="创建FTP用户"></a>创建FTP用户</h1><p>修改完vsftpd的配置文件之后我们还是不能使用vsftpd，因为我们还没有设置ftp的用户。<br>添加一个名为ftpuser的用户，用户文件夹位置为：/home/ftpdir，且禁止此用户登陆服务器：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ useradd -d /home/ftpdir -s /sbin/nologin ftpuser</span><br><span class="line">$ passwd ftpuser</span><br></pre></td></tr></table></figure></p>
<p>这时候系统会要求您输入新的密码并且重复一遍。顺便一提在SSH中，密码一般不会回显，所以初学者可能会觉得输进去没反应，其实是已经输进去了。<br>调整文件夹权限<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod 777 /home/ftpdir</span><br><span class="line">$ <span class="built_in">cd</span> /home</span><br><span class="line">$ ls -l</span><br></pre></td></tr></table></figure></p>
<p><img src="chmod_ftpdir.png" alt></p>
<h1 id="调整防火墙"><a href="#调整防火墙" class="headerlink" title="调整防火墙"></a>调整防火墙</h1><p>我这里用的是传统的管理方式<br>在CentOS 7或RHEL 7或Fedora中防火墙由firewalld来管理，需要还原<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl stop firewalld  </span><br><span class="line">$ systemctl mask firewalld</span><br></pre></td></tr></table></figure></p>
<p>并且安装iptables-services：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install iptables-services -y</span><br></pre></td></tr></table></figure></p>
<p>设置开机启动：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> iptables</span><br><span class="line">$ systemctl start iptables</span><br></pre></td></tr></table></figure></p>
<h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><p><strong> 主动模式 </strong><br>使用Vim编辑器打开iptables配置文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure></p>
<p>添加<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 21 -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>重启服务<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctlrestart iptables.service</span><br></pre></td></tr></table></figure></p>
<p><strong> 被动模式(未测试) </strong></p>
<p>如果ftp处于被动模式下，除了需要修改iptables的配置文件以外，还需要修改vsftpd的配置文件。<br>首先是修改vsftpd的配置文件：<br>使用Vim编辑器打开vsftpd配置文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure></p>
<p>现在配置文件中找到 <strong> “connect_from_port_20=YES” </strong> 并将它修改为 <strong> “connect_from_port_20=NO” </strong> ，关闭掉vsftpd的主动模式。</p>
<p>然后在配置文件的末尾追加：<br><strong> 使vsftpd运行在被动模式 </strong><br>pasv_enable=YES<br><strong> 被动模式最小端口号30000 </strong><br>pasv_min_port=30000<br><strong> 被动模式最大端口号31000 </strong><br>pasv_max_port=31000</p>
<p>保存配置文件并退出。<br>然后重启vsftpd服务：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart vsftpd.service</span><br></pre></td></tr></table></figure></p>
<p>然后再使用Vim编辑器打开iptables配置文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure></p>
<p>添加这两句话：（“#”开头的是注释，可以不添加）<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开放ftp协议21端口，允许接受来自21端口的新建TCP连接</span></span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT</span><br><span class="line"><span class="comment">#开放30000-31000号端口，允许接受来自此端口号段的新建TCP连接 **</span></span><br><span class="line">-A INPUT -p tcp --dport 30000:31000 -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<p>保存并退出，然后重启iptables服务：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart iptables.service</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>FTP</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>FTP</tag>
        <tag>服务器运维</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑小技巧</title>
    <url>/2018/09/10/%E7%94%B5%E8%84%91%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong> 日常电脑使用小技巧 </strong></p>
<a id="more"></a>
<h1 id="不用截图工具截取整个网页"><a href="#不用截图工具截取整个网页" class="headerlink" title="不用截图工具截取整个网页"></a>不用截图工具截取整个网页</h1><p>打开浏览器(测试chrome可用)并调出控制台，快捷键 <strong> f12 </strong><br>然后选择快捷键<code>ctrl + shift + p</code>调出,如图(我也忘记叫什么了),Mac下是<code>shift + command + p</code></p>
<p><img src="html_capt.png" alt></p>
<p>输入capt，出现一下选择，选择如图</p>
<p><img src="html_capt_guide.png" alt></p>
<p>即可截取整张网页，并自动下载至浏览器默认下载目录<br>测试图太长就不放了，可以自行测试，应该浏览器都通用(国外)</p>
]]></content>
      <categories>
        <category>程序人生</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL入门</title>
    <url>/2018/09/10/MySQL%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong> MySql入门教程,Sql语句复习 </strong></p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>centos7</li>
<li>virtualbox</li>
<li>MySQL 5.7</li>
</ul>
<a id="more"></a>
<p><a href="http://www.runoob.com/mysql" target="_blank" rel="noopener">教程</a></p>
<h1 id="SQL语言分类"><a href="#SQL语言分类" class="headerlink" title="SQL语言分类"></a>SQL语言分类</h1><ul>
<li>DQL(数据查询语言)<br>  数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE</li>
<li>DML(数据操纵语言)<br>  数据操纵语言DML主要有三种形式：插入：INSERT，更新：UPDATE，删除：DELETE</li>
<li>DDL(数据定义语言)<br>  数据定义语言DDL用来创建数据库中的各种对象—–表、视图、索引、同义词、聚簇等</li>
<li>DCL(数据控制语言)<br>  数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视</li>
</ul>
<h1 id="Centos下Mysq显示方式设置"><a href="#Centos下Mysq显示方式设置" class="headerlink" title="Centos下Mysq显示方式设置"></a>Centos下Mysq显示方式设置</h1><ul>
<li><p>使用more</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; pager more</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用less</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; pager less</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>less模式下按下键盘q退出</p>
<ul>
<li><p>还原</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; nopager</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用\G按行垂直显示结果<br>如果一行很长，需要这行显示的话，看起结果来就非常的难受。在SQL语句或者命令后使用\G而不是分号结尾，可以将每一行的值垂直输出。这个可能也是大家对于MySQL最熟悉的区别于其他数据库工具的一个特性了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user\G</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="MySQL用户设置"><a href="#MySQL用户设置" class="headerlink" title="MySQL用户设置"></a>MySQL用户设置</h1><p>如果你需要添加 MySQL 用户，你只需要在 mysql 数据库中的 user 表添加新用户即可。</p>
<p>以下为添加用户的的实例，用户名为guest，密码为guest123，并授权用户可进行 SELECT, INSERT 和 UPDATE操作权限：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO user </span><br><span class="line">          (host, user, password, </span><br><span class="line">           select_priv, insert_priv, update_priv) </span><br><span class="line">           VALUES (<span class="string">'localhost'</span>, <span class="string">'guest'</span>, </span><br><span class="line">           PASSWORD(<span class="string">'guest123'</span>), <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>);</span><br><span class="line">Query OK, 1 row affected (0.20 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT host, user, password FROM user WHERE user = <span class="string">'guest'</span>;</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">| host      | user    | password         |</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">| localhost | guest | 6f8c114b58f2ce9e |</span><br><span class="line">+-----------+---------+------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p><strong> 注意：在 MySQL5.7 中 user 表的 password 已换成了authentication_string。 </strong></p>
<p><strong> error </strong><br>这种方式出现过mysql插入用户的时候，突然出现了<strong> Field ‘ssl_cipher’ doesn’t have a default value </strong> 的错误，现已解决，步骤如下：<br>在mysql的user表中增加连接用户帐号：<br>这里不要直接使用INSERT语句添加user记录，使用INSERT可能出现：<br>ERROR 1364 (HY000): Field ‘ssl_cipher’ doesn’t have a default value错误。</p>
<p>你可以在创建用户时，为用户指定权限，在对应的权限列中，在插入语句中设置为 ‘Y’ 即可，用户权限列表如下：</p>
<ul>
<li>Select_priv</li>
<li>Insert_priv</li>
<li>Update_priv</li>
<li>Delete_priv</li>
<li>Create_priv</li>
<li>Drop_priv</li>
<li>Reload_priv</li>
<li>Shutdown_priv</li>
<li>Process_priv</li>
<li>File_priv</li>
<li>Grant_priv</li>
<li>References_priv</li>
<li>Index_priv</li>
<li>Alter_priv</li>
</ul>
<p>另外一种添加用户的方法为通过SQL的 <strong> GRANT </strong> 命令，以下命令会添加用户 zara ，密码为 zara123 。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;GRANT SELECT ON *.* TO <span class="string">'zara'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'zara123'</span> </span><br><span class="line">    -&gt;WITH GRANT OPTION;</span><br><span class="line">Query OK</span><br></pre></td></tr></table></figure></p>
<p>为数据库TUTORIALS添加用户 zara ，密码为 zara123<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP</span><br><span class="line">    -&gt; ON TUTORIALS.*</span><br><span class="line">    -&gt; TO <span class="string">'zara'</span>@<span class="string">'localhost'</span></span><br><span class="line">    -&gt; IDENTIFIED BY <span class="string">'zara123'</span>;</span><br></pre></td></tr></table></figure></p>
<h1 id="管理数据库命令"><a href="#管理数据库命令" class="headerlink" title="管理数据库命令"></a>管理数据库命令</h1><h2 id="USE-dbname"><a href="#USE-dbname" class="headerlink" title="USE (dbname);"></a>USE (dbname);</h2><p>选择要操作的数据库，之后所执行的mysql命令都是针对该数据库<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br></pre></td></tr></table></figure></p>
<h2 id="SHOW-DATABASES"><a href="#SHOW-DATABASES" class="headerlink" title="SHOW DATABASES;"></a>SHOW DATABASES;</h2><p>列出Mysql数据库管理系统的数据库列表<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br></pre></td></tr></table></figure></p>
<h2 id="SHOW-TABLES"><a href="#SHOW-TABLES" class="headerlink" title="SHOW TABLES;"></a>SHOW TABLES;</h2><p>显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW TABLES;</span><br></pre></td></tr></table></figure></p>
<h2 id="SHOW-COLUMNS-FROM-tablename"><a href="#SHOW-COLUMNS-FROM-tablename" class="headerlink" title="SHOW COLUMNS FROM (tablename):"></a>SHOW COLUMNS FROM (tablename):</h2><p>显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</p>
<h2 id="SHOW-INDEX-FROM-tablename"><a href="#SHOW-INDEX-FROM-tablename" class="headerlink" title="SHOW INDEX FROM (tablename):"></a>SHOW INDEX FROM (tablename):</h2><p>显示数据表的详细索引信息，包括PRIMARY KEY（主键）。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW INDEX FROM user;</span><br></pre></td></tr></table></figure></p>
<h2 id="SHOW-TABLE-STATUS-LIKE-FROM-db-name-LIKE-‘pattern’-G"><a href="#SHOW-TABLE-STATUS-LIKE-FROM-db-name-LIKE-‘pattern’-G" class="headerlink" title="SHOW TABLE STATUS LIKE [FROM db_name] [LIKE ‘pattern’] \G:"></a>SHOW TABLE STATUS LIKE [FROM db_name] [LIKE ‘pattern’] \G:</h2><p>该命令将输出Mysql数据库管理系统的性能及统计信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW TABLE STATUS FROM mysql;</span><br></pre></td></tr></table></figure>
<h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>登陆 MySQL 服务后，使用 create 命令创建数据库，语法如下:<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> booklib;</span><br></pre></td></tr></table></figure></p>
<h1 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h1><p>如果使用普通用户可能需要权限来进行删除数据库，登陆root账户，拥有最高权限，删除数据库需要谨慎，一旦删除，数据将会消失。语法如下<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> (dbname);</span><br></pre></td></tr></table></figure></p>
<h1 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h1><ul>
<li>数字类型<ul>
<li>整数: tinyint、smallint、mediumint、int、bigint</li>
<li>浮点数: float、double、real、decimal</li>
</ul>
</li>
<li>日期和时间: date、time、datetime、timestamp、year</li>
<li>字符串类型<ul>
<li>字符串: char、varchar</li>
<li>文本: tinytext、text、mediumtext、longtext</li>
</ul>
</li>
<li>二进制(可用来存储图片、音乐等): tinyblob、blob、mediumblob、longblob</li>
</ul>
<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>单位</th>
<th>最大</th>
<th>特性</th>
</tr>
</thead>
<tbody>
<tr>
<td>CHAR</td>
<td>字符</td>
<td>最大为255字符</td>
<td>存储定长，容易造成空间的浪费</td>
</tr>
<tr>
<td>VARCHAR</td>
<td>字符</td>
<td>可以超过255个字符</td>
<td>存储变长，节省存储空间</td>
</tr>
<tr>
<td>TEXT</td>
<td>字节</td>
<td>总大小为65535字节，约为64KB</td>
<td>-</td>
</tr>
</tbody>
</table>
<ul>
<li>TEXT在MySQL内部大多存储格式为溢出页，效率不如CHAR</li>
<li>Mysql默认为utf-8，那么在英文模式下1个字符=1个字节，在中文模式下1个字符=3个字节。</li>
</ul>
<h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><h3 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h3><table>
<thead>
<tr>
<th style="text-align:left">type</th>
<th style="text-align:left">Storage</th>
<th style="text-align:left">Minumun Value</th>
<th style="text-align:left">Maximum Value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">(Bytes)</td>
<td style="text-align:left">(Signed/Unsigned)</td>
<td style="text-align:left">(Signed/Unsigned)</td>
</tr>
<tr>
<td style="text-align:left">TINYINT</td>
<td style="text-align:left">1</td>
<td style="text-align:left">-128</td>
<td style="text-align:left">127</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">0</td>
<td style="text-align:left">255</td>
</tr>
<tr>
<td style="text-align:left">SMALLINT</td>
<td style="text-align:left">2</td>
<td style="text-align:left">-32768</td>
<td style="text-align:left">32767</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">0</td>
<td style="text-align:left">65535</td>
</tr>
<tr>
<td style="text-align:left">MEDIUMINT</td>
<td style="text-align:left">3</td>
<td style="text-align:left">-8388608</td>
<td style="text-align:left">8388607</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">0</td>
<td style="text-align:left">16777215</td>
</tr>
<tr>
<td style="text-align:left">INT</td>
<td style="text-align:left">4</td>
<td style="text-align:left">-2147483648</td>
<td style="text-align:left">2147483647</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">0</td>
<td style="text-align:left">4294967295</td>
</tr>
<tr>
<td style="text-align:left">BIGINT</td>
<td style="text-align:left">8</td>
<td style="text-align:left">-9223372036854775808</td>
<td style="text-align:left">9223372036854775807</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">0</td>
<td style="text-align:left">18446744073709551615</td>
</tr>
</tbody>
</table>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><table>
<thead>
<tr>
<th>属性</th>
<th>存储空间</th>
<th>精度</th>
<th>精确性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>FLOAT(M, D)</td>
<td>4 bytes</td>
<td>单精度</td>
<td>非精确</td>
<td>单精度浮点型，m总个数，d小数位</td>
</tr>
<tr>
<td>DOUBLE(M, D)</td>
<td>8 bytes</td>
<td>双精度</td>
<td>比Float精度高</td>
<td>双精度浮点型，m总个数，d小数位</td>
</tr>
</tbody>
</table>
<ul>
<li>FLOAT容易造成精度丢失</li>
</ul>
<h3 id="定点数DECIMAL"><a href="#定点数DECIMAL" class="headerlink" title="定点数DECIMAL"></a>定点数DECIMAL</h3><ul>
<li>高精度的数据类型，常用来存储交易相关的数据</li>
<li>DECIMAL(M,N).M代表总精度，N代表小数点右侧的位数（标度）</li>
<li>1 &lt; M &lt; 254, 0 &lt; N &lt; 60;</li>
<li>存储空间变长</li>
</ul>
<h2 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>字节</th>
<th>例</th>
<th>精确性</th>
</tr>
</thead>
<tbody>
<tr>
<td>DATE</td>
<td>三字节</td>
<td>2015-05-01</td>
<td>精确到年月日</td>
</tr>
<tr>
<td>TIME</td>
<td>三字节</td>
<td>11:12:00</td>
<td>精确到时分秒</td>
</tr>
<tr>
<td>DATETIME</td>
<td>八字节</td>
<td>2015-05-01 11::12:00</td>
<td>精确到年月日时分秒</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td></td>
<td>2015-05-01 11::12:00</td>
<td>精确到年月日时分秒</td>
</tr>
</tbody>
</table>
<ul>
<li>MySQL在<code>5.6.4</code>版本之后，<code>TIMESTAMP</code>和<code>DATETIME</code>支持到微秒。</li>
<li><code>TIMESTAMP</code>会根据系统时区进行转换，<code>DATETIME</code>则不会</li>
<li>存储范围的区别  <ul>
<li><code>TIMESTAMP</code>存储范围：1970-01-01 00::00:01 to 2038-01-19 03:14:07</li>
<li><code>DATETIME</code>的存储范围：1000-01-01 00:00:00 to 9999-12-31 23:59:59</li>
</ul>
</li>
<li>一般使用<code>TIMESTAMP</code>国际化</li>
<li>如存时间戳使用数字类型<code>BIGINT</code></li>
</ul>
<h1 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h1><p>创建MYSQL数据以下信息</p>
<ul>
<li>表名</li>
<li>表字段名</li>
<li>定义表每个字段</li>
</ul>
<p>语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> (tablename) (<span class="keyword">column</span> <span class="keyword">name</span> <span class="keyword">column</span> <span class="keyword">type</span>, ...)</span><br></pre></td></tr></table></figure></p>
<p>例子：创建一个书本表，书本有编号,名字，出版社，作者名称，价格，出版日期<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE IF NOT EXISTS book(</span><br><span class="line">     &gt; book_id INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">     &gt; book_name VARCHAR(50) NOT NULL,</span><br><span class="line">     &gt; author VARCHAR(10) NOT NULL,</span><br><span class="line">     &gt; pub VARCHAR(100),</span><br><span class="line">     &gt; pub_date DATE,</span><br><span class="line">     &gt; PRIMARY KEY (book_id)</span><br><span class="line">     &gt; ) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure></p>
<p>解析：</p>
<ul>
<li>如果不想字段为NULL，可以设置字段为NOT NULL，但是一旦字段该数值为null，则会报错。</li>
<li>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。</li>
<li>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li>
<li>ENGINE 设置存储引擎，CHARSET 设置编码。</li>
</ul>
<p><img src="create_table_engine.png" alt></p>
<h1 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h1><p>MySQL删除数据表，语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> (tablename);</span><br></pre></td></tr></table></figure></p>
<p>示例:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DROP TABLE book;</span><br></pre></td></tr></table></figure></p>
<h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>使用 <strong> INSERT INTO </strong> 语句来插入数据,语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN )</span><br><span class="line">                       <span class="keyword">VALUES</span></span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p>
</blockquote>
<p>示例:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO book(book_name, author, pub, pub_date)</span><br><span class="line">    -&gt; VALUES(<span class="string">'Android Coder'</span>, <span class="string">'bitch'</span>, <span class="string">'english'</span>, NOW())</span><br></pre></td></tr></table></figure></p>
<p>一次插入多行语句<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO book(book_name, author, pub, pub_date)</span><br><span class="line">    -&gt; VALUES</span><br><span class="line">    -&gt; (<span class="string">'python'</span>, <span class="string">'pp'</span>, <span class="string">'english'</span>, DATE(<span class="string">'2010-08-10'</span>)),</span><br><span class="line">    -&gt; (<span class="string">'kotlin'</span>, <span class="string">'kk'</span>, <span class="string">'amearica'</span>, DATE(<span class="string">'2013-07-10'</span>));</span><br></pre></td></tr></table></figure></p>
<p><img src="insert_table_engine.png" alt><br><img src="inserts_table_engine.png" alt></p>
<h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><p>使用SQL SELECT 查询数据,语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br><span class="line">[<span class="keyword">LIMIT</span> N][ <span class="keyword">OFFSET</span> M]</span><br></pre></td></tr></table></figure></p>
<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</li>
<li>SELECT 命令可以读取一条或者多条记录。</li>
<li>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li>
<li>你可以使用 WHERE 语句来包含任何条件。</li>
<li>你可以使用 LIMIT 属性来设定返回的记录数。</li>
<li>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM book;</span><br></pre></td></tr></table></figure>
<h1 id="WHERE-字句"><a href="#WHERE-字句" class="headerlink" title="WHERE 字句"></a>WHERE 字句</h1><p>我们知道从 MySQL 表中使用 SQL SELECT 语句来读取数据。<br>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句中。<br>语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN <span class="keyword">FROM</span> table_name1, table_name2...</span><br><span class="line">[<span class="keyword">WHERE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] condition2.....</span><br></pre></td></tr></table></figure></p>
<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号,   </li>
<li>分割，并使用WHERE语句来设定查询条件。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以使用 AND 或者 OR 指定一个或多个条件。</li>
<li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li>
<li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li>
</ul>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等号，检测两边值是否相等，相等返回true</td>
<td>A = B 返回true</td>
</tr>
<tr>
<td>&lt;&gt;, !=</td>
<td>不等于，检测两边值是否相等，相等返回false</td>
<td>A != B 返回false</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于，检测左边值是否大于右边值，大于则返回true</td>
<td>A &gt; B 返回true</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于，检测左边值是否小于右边值，小于则返回true</td>
<td>A &lt; B 返回true</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于，检测左边值是否大于等于右边值，同上</td>
<td>A &gt;= B 返回true</td>
</tr>
<tr>
<td>&lt;=</td>
<td>大于等于，检测左边值是否大于等于右边值，同上</td>
<td>A &lt;= B 返回true</td>
</tr>
</tbody>
</table>
<blockquote>
<p>如果我们想在 MySQL 数据表中读取指定的数据，WHERE 子句是非常有用的。<br>使用主键来作为 WHERE 子句的条件查询是非常快速的。<br>如果给定的条件在表中没有任何匹配的记录，那么查询不会返回任何数据。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM book WHERE author=<span class="string">'bitch'</span></span><br></pre></td></tr></table></figure>
<p><img src="select_table_engine.png" alt></p>
<h1 id="UPDATE-查询"><a href="#UPDATE-查询" class="headerlink" title="UPDATE 查询"></a>UPDATE 查询</h1><p>使用SQL UPDATE语句修改或更新数据库中数据</p>
<p>语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> field1=<span class="keyword">new</span>-value1, field2=<span class="keyword">new</span>-value2</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure></p>
<ul>
<li>你可以同时更新一个或多个字段。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以在一个单独表中同时更新数据。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE book SET author = <span class="string">'jack'</span> WHERE book_id = 4;</span><br></pre></td></tr></table></figure>
<p><img src="update_table_engine.png" alt></p>
<h1 id="DELETE-删除"><a href="#DELETE-删除" class="headerlink" title="DELETE 删除"></a>DELETE 删除</h1><p>SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录。<br>语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure></p>
<ul>
<li>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</li>
<li>你可以在 WHERE 子句中指定任何条件</li>
<li>您可以在单个表中一次性删除记录。</li>
</ul>
<p>请谨慎</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELETE FROM book WHERE book_name = <span class="string">'TEST'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="delete_table_engine.png" alt></p>
<h1 id="LIKE-子句"><a href="#LIKE-子句" class="headerlink" title="LIKE 子句"></a>LIKE 子句</h1><p>MySQL 中使用 SQL SELECT 命令来读取数据， 同时我们可以在 SELECT 语句中使用 WHERE 子句来获取指定的记录。<br>WHERE 子句中可以使用等号 = 来设定获取数据的条件，如 “runoob_author = ‘RUNOOB.COM’”。<br>但是有时候我们需要获取 runoob_author 字段含有 “COM” 字符的所有记录，这时我们就需要在 WHERE 子句中使用 SQL LIKE 子句。<br>SQL LIKE 子句中使用百分号 %字符来表示任意字符，类似于UNIX或正则表达式中的星号 *。<br>如果没有使用百分号 %, LIKE 子句与等号 = 的效果是一样的。</p>
<p>语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN </span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> field1 <span class="keyword">LIKE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] filed2 = <span class="string">'somevalue'</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以在 WHERE 子句中使用LIKE子句。</li>
<li>你可以使用LIKE子句代替等号 =。</li>
<li>LIKE 通常与 % 一同使用，类似于一个元字符的搜索。</li>
<li>你可以使用 AND 或者 OR 指定一个或多个条件。</li>
<li>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</li>
</ul>
<blockquote>
<p>like 匹配/模糊匹配，会与 % 和 _ 结合使用。<br>‘%a’     //以a结尾的数据<br>‘a%’     //以a开头的数据<br>‘%a%’    //含有a的数据<br>‘_a_’    //三位且中间字母是a的<br>‘<em>a’     //两位且结尾字母是a的<br>‘a</em>‘     //两位且开头字母是a的</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM book WHERE pub LIKE <span class="string">'a%'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="like_table_engine.png" alt></p>
<h1 id="UNION-操作符"><a href="#UNION-操作符" class="headerlink" title="UNION 操作符"></a>UNION 操作符</h1><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p>
<p>语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span></span><br><span class="line">[<span class="keyword">WHERE</span> conditions]</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span>]</span><br><span class="line"><span class="keyword">SELECT</span> expression1, expression2, ... expression_n</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">tables</span></span><br><span class="line">[<span class="keyword">WHERE</span> conditions];</span><br></pre></td></tr></table></figure></p>
<ul>
<li>expression1, expression2, … expression_n: 要检索的列。</li>
<li>tables: 要检索的数据表。</li>
<li>WHERE conditions: 可选， 检索条件。</li>
<li>DISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</li>
<li>ALL: 可选，返回所有结果集，包含重复数据。</li>
</ul>
<p><a href="http://www.runoob.com/mysql/mysql-union-operation.html" target="_blank" rel="noopener">案例</a></p>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>读取的数据进行排序，我们就可以使用 MySQL 的 ORDER BY 子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。</p>
<p>语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN table_name1, table_name2...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> field1, [field2...] [<span class="keyword">ASC</span> [<span class="keyword">DESC</span>]]</span><br></pre></td></tr></table></figure></p>
<ul>
<li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li>
<li>你可以设定多个字段来排序。</li>
<li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 </li>
<li>默认情况下，它是按升序排列。</li>
<li>你可以添加 WHERE…LIKE 子句来设置条件。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM book ORDER BY pub_date ASC;</span><br></pre></td></tr></table></figure>
<p><img src="orderby_table_engine.png" alt></p>
<h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><p>GROUP BY 语句根据一个或多个列对结果集进行分组。<br>在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。</p>
<p>语法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, <span class="keyword">function</span>(column_name)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column_name;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*), book_name FROM book GROUP BY book_name;</span><br></pre></td></tr></table></figure>
<p><img src="groupby_table_engine.png" alt></p>
<p><strong> 注意 </strong></p>
<ul>
<li>group by 语句用法有一个注意点，在 select 语句中，所查询的字段除了聚合函数（SUM ,AVG,COUNT…)以外 必须只能是分组的字段，举例：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> book_id,book_name,<span class="keyword">count</span>(*) <span class="keyword">FROM</span> book <span class="keyword">GROUP</span> <span class="keyword">BY</span> book_name;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>以上会报错,纠正<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> book_id,book_name,<span class="keyword">count</span>(*) <span class="keyword">FROM</span> book <span class="keyword">GROUP</span> <span class="keyword">BY</span> book_id,book_name;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>分组后的条件使用 HAVING 来限定，WHERE 是对原始数据进行条件限制。几个关键字的使用顺序为 where 、group by 、having、order by </li>
</ul>
<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>使用 MySQL 的 JOIN 在两个或多个表中查询数据。<br>你可以在 SELECT, UPDATE 和 DELETE 语句中使用 Mysql 的 JOIN 来联合多表查询。<br>JOIN 按照功能大致分为如下三类：</p>
<ul>
<li>INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</li>
<li>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li>
<li>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>
</ul>
<p><a href="http://www.runoob.com/mysql/mysql-join.html" target="_blank" rel="noopener">实例</a></p>
<h1 id="NULL-值处理"><a href="#NULL-值处理" class="headerlink" title="NULL 值处理"></a>NULL 值处理</h1><p>我们已经知道 MySQL 使用 SQL SELECT 命令及 WHERE 子句来读取数据表中的数据,但是当提供的查询条件字段为 NULL 时，该命令可能就无法正常工作。<br>为了处理这种情况，MySQL提供了三大运算符:</p>
<ul>
<li>IS NULL: 当列的值是 NULL,此运算符返回 true。</li>
<li>IS NOT NULL: 当列的值不为 NULL, 运算符返回 true。</li>
<li>&lt;=&gt;: 比较操作符（不同于=运算符），当比较的的两个值为 NULL 时返回 true。</li>
</ul>
<p>关于 NULL 的条件比较运算是比较特殊的。你不能使用 = NULL 或 != NULL 在列中查找 NULL 值 。<br>在 MySQL 中，NULL 值与任何其它值的比较（即使是 NULL）永远返回 false，即 NULL = NULL 返回false 。<br>MySQL 中处理 NULL 使用 IS NULL 和 IS NOT NULL 运算符。</p>
<p>实例:<br><img src="null_1.png" alt><br>表中有一行有NULL值的数据，如果使用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM book WHERE pub = NULL;</span><br></pre></td></tr></table></figure></p>
<p>会出现<br><img src="null_2.png" alt><br>判断NULL， =和！=是不起作用的<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM book WHERE author IS NULL;</span><br><span class="line">mysql&gt; SELECT * FROM book WHERE author IS NOT NULL;</span><br></pre></td></tr></table></figure></p>
<p><img src="null_3.png" alt><br><img src="null_4.png" alt></p>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="http://www.runoob.com/mysql/mysql-regexp.html" target="_blank" rel="noopener">案例</a></p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务！</p>
<ul>
<li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li>
<li>事务用来管理 insert,update,delete 语句</li>
</ul>
<p>一般来说，事务是必须满足4个条件（ACID）：：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。</p>
<ul>
<li>原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
<li>一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li>
<li>隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li>
<li>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>
</ul>
<blockquote>
<p>在 MySQL 命令行的默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行<br>COMMIT 操作。因此要显式地开启一个事务务须使用命令 BEGIN 或 START<br>TRANSACTION，或者执行命令 SET AUTOCOMMIT=0，用来禁止使用当前会话的自动提交。</p>
</blockquote>
<p>事务控制语句：</p>
<ul>
<li>BEGIN或START TRANSACTION；显式地开启一个事务；</li>
<li>COMMIT；也可以使用COMMIT WORK，不过二者是等价的。COMMIT会提交事务，并使已对数据库进行的所有修改成为永久性的；</li>
<li>ROLLBACK；有可以使用ROLLBACK WORK，不过二者是等价的。回滚会结束用户的事务，并撤销正在进行的所有未提交的修改；</li>
<li>SAVEPOINT identifier；SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT；</li>
<li>RELEASE SAVEPOINT identifier；删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li>
<li>ROLLBACK TO identifier；把事务回滚到标记点；</li>
<li>SET TRANSACTION；用来设置事务的隔离级别。InnoDB存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。</li>
</ul>
<p><a href="http://www.runoob.com/mysql/mysql-transaction.html" target="_blank" rel="noopener">案例</a><br><img src="transition.png" alt></p>
<h1 id="ALTER命令"><a href="#ALTER命令" class="headerlink" title="ALTER命令"></a>ALTER命令</h1><p>当我们需要修改数据表名或者修改数据表字段时，就需要使用到MySQL ALTER命令。</p>
<p>ALTER TABLE：添加，修改，删除表的列，约束等表的定义。</p>
<ul>
<li>查看列：desc 表名;</li>
<li>修改表名：alter table t_book rename to bbb;</li>
<li>添加列：alter table 表名 add column 列名 varchar(30);</li>
<li>删除列：alter table 表名 drop column 列名;</li>
<li>修改列名MySQL： alter table bbb change nnnnn hh int;</li>
<li>修改列属性：alter table t_book modify name varchar(22);</li>
</ul>
<p>sp_rename：SQLServer 内置的存储过程，用与修改表的定义。</p>
<p><a href="http://www.runoob.com/mysql/mysql-alter.html" target="_blank" rel="noopener">案例</a></p>
<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>MySQL 查看约束，添加约束，删除约束 添加列，修改列，删除列</p>
<ul>
<li>查看表的字段信息：desc 表名;</li>
<li>查看表的所有信息：show create table 表名;</li>
<li>添加主键约束：alter table 表名 add constraint 主键 （形如：PK_表名） primary key 表名(主键字段);</li>
<li>添加外键约束：alter table 从表 add constraint 外键（形如：FK_从表_主表） foreign key 从表(外键字段) references 主表(主键字段);</li>
<li>删除主键约束：alter table 表名 drop primary key;</li>
<li>删除外键约束：alter table 表名 drop foreign key 外键（区分大小写）;</li>
<li>修改表名：alter table t_book rename to bbb;</li>
<li>添加列：alter table 表名 add column 列名 varchar(30);</li>
<li>删除列：alter table 表名 drop column 列名;</li>
<li>修改列名： alter table bbb change nnnnn hh int;</li>
<li>修改列属性：alter table t_book modify name varchar(22);</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc book;</span><br><span class="line">mysql&gt; desc reader;</span><br></pre></td></tr></table></figure>
<p><img src="desc_table_reader_and_book.png" alt><br>添加book_id列到reader表，并添加外键约束(book表中的book_id)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE reader ADD book_id INT UNSIGNED;</span><br><span class="line">mysql&gt; desc reader;</span><br></pre></td></tr></table></figure></p>
<p><img src="alter_reader_add_bid.png" alt><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE reader ADD CONSTRAINT fk_book_reader FOREIGN key</span><br><span class="line">    -&gt; reader(book_id) REFERENCES book(book_id);</span><br></pre></td></tr></table></figure></p>
<p><img src="reader_add_foreign_key.png" alt><br>出现1215详情见另一篇文章[MySQL错误集]</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。<br>打个比方，如果合理的设计且使用索引的MySQL是一辆兰博基尼的话，那么没有设计和使用索引的MySQL就是一个人力三轮车。<br>索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。<br>创建索引时，你需要确保该索引是应用在  SQL 查询语句的条件(一般作为 WHERE 子句的条件)。<br>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。<br>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。<br>建立索引会占用磁盘空间的索引文件。</p>
<h1 id="显示索引"><a href="#显示索引" class="headerlink" title="显示索引"></a>显示索引</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW INDEX FROM table_name\G</span><br></pre></td></tr></table></figure>
<h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>这是最基本的索引，它没有任何限制。它有以下几种创建方式：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> indexName <span class="keyword">ON</span> mytable(cname(<span class="keyword">length</span>));</span><br></pre></td></tr></table></figure></p>
<p>如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</p>
<h3 id="修改表结构-添加索引"><a href="#修改表结构-添加索引" class="headerlink" title="修改表结构(添加索引)"></a>修改表结构(添加索引)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> tableName <span class="keyword">ADD</span> <span class="keyword">INDEX</span> indexName(columnName)</span><br></pre></td></tr></table></figure>
<h3 id="创建表的时候直接指定"><a href="#创建表的时候直接指定" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line">  <span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,   </span><br><span class="line">  username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line">  <span class="keyword">INDEX</span> [indexName] (username(<span class="keyword">length</span>))  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="删除索引的语法"><a href="#删除索引的语法" class="headerlink" title="删除索引的语法"></a>删除索引的语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> [indexName] <span class="keyword">ON</span> mytable;</span><br></pre></td></tr></table></figure>
<p>为book表中book_name建立基本的索引<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE INDEX INDEX_BOOKNAME ON book(book_name(50));</span><br></pre></td></tr></table></figure></p>
<p><img src="create_index.png" alt></p>
<h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。它有以下几种创建方式：</p>
<h3 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> indexName <span class="keyword">ON</span> mytable(username(<span class="keyword">length</span>))</span><br></pre></td></tr></table></figure>
<h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> mytable <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [indexName] (username(<span class="keyword">length</span>))</span><br></pre></td></tr></table></figure>
<h3 id="创建表的时候直接指定-1"><a href="#创建表的时候直接指定-1" class="headerlink" title="创建表的时候直接指定"></a>创建表的时候直接指定</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line">username <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line"><span class="keyword">UNIQUE</span> [indexName] (username(<span class="keyword">length</span>))  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="使用ALTER-命令添加和删除索引"><a href="#使用ALTER-命令添加和删除索引" class="headerlink" title="使用ALTER 命令添加和删除索引"></a>使用ALTER 命令添加和删除索引</h2><p>有四种方式来添加数据表的索引：</p>
<ul>
<li>ALTER TABLE tbl_name ADD PRIMARY KEY (column_list): 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</li>
<li>ALTER TABLE tbl_name ADD UNIQUE index_name (column_list): 这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</li>
<li>ALTER TABLE tbl_name ADD INDEX index_name (column_list): 添加普通索引，索引值可出现多次。</li>
<li>ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):该语句指定了索引为 FULLTEXT ，用于全文索引。</li>
</ul>
<p>例子：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE reader ADD INDEX (reader_name);</span><br></pre></td></tr></table></figure></p>
<p>你还可以在 ALTER 命令中使用 DROP 子句来删除索引。尝试以下实例删除索引:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE reader DROP INDEX (reader_name);</span><br></pre></td></tr></table></figure></p>
<p>使用 ALTER 命令添加和删除主键</p>
<p>主键只能作用于一个列上，添加主键索引时，你需要确保该主键默认不为空（NOT NULL）。实例如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl MODIFY i INT NOT NULL;</span><br><span class="line">mysql&gt; ALTER TABLE testalter_tbl ADD PRIMARY KEY (i);</span><br></pre></td></tr></table></figure></p>
<p>你也可以使用 ALTER 命令删除主键：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure></p>
<p>删除主键时只需指定PRIMARY KEY，但在删除索引时，你必须知道索引名。</p>
<h1 id="临时表"><a href="#临时表" class="headerlink" title="临时表"></a>临时表</h1><p>MySQL 临时表在我们需要保存一些临时数据时是非常有用的。临时表只在当前连接可见，当关闭连接时，Mysql会自动删除表并释放所有空间。<br>临时表在MySQL 3.23版本中添加，如果你的MySQL版本低于 3.23版本就无法使用MySQL的临时表。不过现在一般很少有再使用这么低版本的MySQL数据库服务了。<br>MySQL临时表只在当前连接可见，如果你使用PHP脚本来创建MySQL临时表，那每当PHP脚本执行完成后，该临时表也会自动销毁。<br>如果你使用了其他MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表，当然你也可以手动销毁。</p>
<p>语法和建表差不多，只不过 <strong> TABLE </strong> 关键字改成 <strong> TEMPORARY TABLE </strong> 即可。</p>
<p>删除和普通删除表语法没区别。</p>
<h1 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h1><p>使用 <strong> SHOW CREATE TABLE </strong> 命令获取创建数据表(CREATE TABLE) 语句，该语句包含了原数据表的结构，索引等。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW CREATE TABLE book\G</span><br></pre></td></tr></table></figure></p>
<p><img src="show_create_table.png" alt></p>
<p>复制表的内容，你就可以使用 <strong> INSERT INTO … SELECT </strong> 语句来实现<br><a href="http://www.runoob.com/mysql/mysql-clone-tables.html" target="_blank" rel="noopener">案例</a></p>
<p>note:<br>来给大家区分下mysql复制表的两种方式。<br>第一、只复制表结构到新表<br>create table 新表 select <em> from 旧表 where 1=2<br>或者<br>create table 新表 like 旧表<br>第二、复制表结构及数据到新表<br>create table新表 select </em> from 旧表 </p>
<h1 id="序列使用"><a href="#序列使用" class="headerlink" title="序列使用"></a>序列使用</h1><p>MySQL 序列是一组整数：1, 2, 3, …，由于一张数据表只能有一个字段自增主键， 如果你想实现其他字段也实现自动增加，就可以使用MySQL序列来实现。</p>
<p>前面也有用到过的 <strong> AUTO_INCREMENT </strong> 来定义列既可以实现序列</p>
<h2 id="重置序列"><a href="#重置序列" class="headerlink" title="重置序列"></a>重置序列</h2><p>如果你删除了数据表中的多条记录，并希望对剩下数据的AUTO_INCREMENT列进行重新排列，那么你可以通过删除自增的列，然后重新添加来实现。 不过该操作要非常小心，如果在删除的同时又有新记录添加，有可能会出现数据混乱。操作如下所示：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE insect DROP id;</span><br><span class="line">mysql&gt; ALTER TABLE insect</span><br><span class="line">    -&gt; ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,</span><br><span class="line">    -&gt; ADD PRIMARY KEY (id);</span><br></pre></td></tr></table></figure></p>
<h2 id="序列的开始值"><a href="#序列的开始值" class="headerlink" title="序列的开始值"></a>序列的开始值</h2><h3 id="创建表时"><a href="#创建表时" class="headerlink" title="创建表时"></a>创建表时</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE insect</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; PRIMARY KEY (id),</span><br><span class="line">    -&gt; name VARCHAR(30) NOT NULL, </span><br><span class="line">    -&gt; date DATE NOT NULL,</span><br><span class="line">    -&gt; origin VARCHAR(30) NOT NULL</span><br><span class="line">)engine=innodb auto_increment=100 charset=utf8;</span><br></pre></td></tr></table></figure>
<h3 id="ALTER修改"><a href="#ALTER修改" class="headerlink" title="ALTER修改"></a>ALTER修改</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE t AUTO_INCREMENT = 100;</span><br></pre></td></tr></table></figure>
<h1 id="处理重复数据"><a href="#处理重复数据" class="headerlink" title="处理重复数据"></a>处理重复数据</h1><p>防止表中出现重复数据<br>你可以在MySQL数据表中设置指定的字段为 <strong> PRIMARY KEY（主键） </strong> 或者 <strong> UNIQUE（唯一）</strong> 索引来保证数据的唯一性。</p>
<h2 id="统计重复数据"><a href="#统计重复数据" class="headerlink" title="统计重复数据"></a>统计重复数据</h2><p>以下我们将统计表中 first_name 和 last_name的重复记录数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT COUNT(*) as repetitions, last_name, first_name</span><br><span class="line">    -&gt; FROM person_tbl</span><br><span class="line">    -&gt; GROUP BY last_name, first_name</span><br><span class="line">    -&gt; HAVING repetitions &gt; 1;</span><br></pre></td></tr></table></figure></p>
<p>以上查询语句将返回 person_tbl 表中重复的记录数。 一般情况下，查询重复的值，请执行以下操作：</p>
<ul>
<li>确定哪一列包含的值可能会重复。</li>
<li>在列选择列表使用COUNT(*)列出的那些列。</li>
<li>在GROUP BY子句中列出的列。</li>
<li>HAVING子句设置重复数大于1。</li>
</ul>
<h2 id="过滤重复数据"><a href="#过滤重复数据" class="headerlink" title="过滤重复数据"></a>过滤重复数据</h2><p>如果你需要读取不重复的数据可以在 SELECT 语句中使用 DISTINCT 关键字来过滤重复数据。<br>你也可以使用 GROUP BY 来读取数据表中不重复的数据：</p>
<h1 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h1><p><a href="http://www.runoob.com/mysql/mysql-database-export.html" target="_blank" rel="noopener">更多</a></p>
<h2 id="导出-SQL-格式的数据"><a href="#导出-SQL-格式的数据" class="headerlink" title="导出 SQL 格式的数据"></a>导出 SQL 格式的数据</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysqldump -u root -p (dbName) (tableName) &gt; dump.txt</span><br><span class="line">password ******</span><br></pre></td></tr></table></figure>
<p>表名可不加，不加则导出整个数据库<br>实例:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysqldump -u root -p booklib &gt; /tmp/booklib.txt</span><br></pre></td></tr></table></figure></p>
<h1 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h1><p><a href="http://www.runoob.com/mysql/mysql-database-import.html" target="_blank" rel="noopener">更多</a></p>
<h2 id="source命令导入"><a href="#source命令导入" class="headerlink" title="source命令导入"></a>source命令导入</h2><p>先登录进数据库<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database booklib;      <span class="comment"># 创建数据库</span></span><br><span class="line">mysql&gt; use booklib;                  <span class="comment"># 使用已创建的数据库 </span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> names utf8;           <span class="comment"># 设置编码</span></span><br><span class="line">mysql&gt; <span class="built_in">source</span> /tmp/booklib.sql  <span class="comment"># 导入备份数据库</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装Mysql5.7</title>
    <url>/2018/09/07/Centos7%E5%AE%89%E8%A3%85Mysql5-7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>centos7</li>
<li>virtualbox</li>
</ul>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="centos7需要检查是否已经安装了Mariadb"><a href="#centos7需要检查是否已经安装了Mariadb" class="headerlink" title="centos7需要检查是否已经安装了Mariadb"></a>centos7需要检查是否已经安装了Mariadb</h2><p>在安装MySQL之前要检查当前环境中是否已经装了Mariadb，如果存在则需要卸载，否则可能导致MySQL安装失败<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure></p>
<p>如果输出maraidb等的信息则需要进行卸载，如图<br><img src="rpm_qa_grep_mariadb.png" alt><br>需要进行强制卸载<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</span><br></pre></td></tr></table></figure></p>
<h2 id="Yum-Repo"><a href="#Yum-Repo" class="headerlink" title="Yum Repo"></a>Yum Repo</h2><p>官方<a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/" target="_blank" rel="noopener">指导</a><br>点击<a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">链接</a>查看最新的Yum Repository<br><img src="mysql_yum_rpm_repo.png" alt><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 设置rpm</span><br><span class="line">$ rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</span><br><span class="line">$ yum repolist all | grep mysql</span><br></pre></td></tr></table></figure></p>
<p>如图<br><img src="set_rpm.png" alt><br>需要安装5.7版本，则需要选择发布系列,编辑<code>/etc/yum.repos.d/mysql-community.repo</code> 文件来选择系列 。这是文件中发布系列的子存储库的典型条目：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysql80-community]</span><br><span class="line">name=MySQL 8.0 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-8.0-community/el/6/<span class="variable">$basearch</span>/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure></p>
<p>找到要配置的子存储库的条目，然后编辑该enabled选项。指定<code>enabled=0</code>禁用子存储库，或 <code>enabled=1</code>启用子存储库。例如，要安装MySQL 5.7，请确保您拥有<code>enabled=0</code>,MySQL 8.0的上述子存储库条目，并且具有 <code>enabled=1</code>,5.7系列的条目：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Enable to use MySQL 5.7</span></span><br><span class="line">[mysql57-community]</span><br><span class="line">name=MySQL 5.7 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/6/<span class="variable">$basearch</span>/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure></p>
<p>您应该只在任何时候为一个发布系列启用子存储库。当启用多个版本系列的子存储库时，Yum将使用最新的系列。</p>
<p>通过运行以下命令并检查其输出来验证是否已启用和禁用了正确的子存储库（对于启用dnf的系统，请使用dnf替换 命令中的 yum）：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum repolist enabled | grep mysql</span><br></pre></td></tr></table></figure></p>
<p><img src="repolist_enabled_mysql.png" alt></p>
<p>安装mysql<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y mysql-community-server</span><br></pre></td></tr></table></figure></p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>使用以下命令启动MySQL服务器：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl start mysqld.service</span><br></pre></td></tr></table></figure></p>
<p>检查MySQL服务器的状态<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl status mysqld.service</span><br></pre></td></tr></table></figure></p>
<p>MySQL服务器初始化（从MySQL5.7开始）：在服务器初始启动时，如果服务器的数据目录为空，则会发生以下情况：</p>
<ul>
<li>服务器已初始化。</li>
<li>在数据目录中生成SSL证书和密钥文件。</li>
<li>该validate_password插件安装并启用。</li>
<li>将‘root‘@’localhost’ 创建一个超级用户帐户。设置超级用户的密码并将其存储在错误日志文件中。要显示它，请使用以下命令：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep <span class="string">'temporary password'</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>通过上面命令获取生成的临时密码登录并为超级用户帐户设置自定义密码，尽快更改root密码：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br></pre></td></tr></table></figure></p>
<p>修改root本地登录密码<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'MyNewPass4!'</span>;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意<br>MySQL的 <strong> validate_password </strong><br>插件默认安装。这将要求密码包含至少一个大写字母，一个小写字<br>母，一个数字和一个特殊字符，并且密码总长度至少为8个字符。</p>
</blockquote>
<p><a href="mysql_set_root_pwd.png">实例</a></p>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Centos7</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo + github 搭建个人博客</title>
    <url>/2018/09/07/hexo-github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我的历史上第一篇教程，Hexo+github搭建个人博客。虽然网上有很多，但是想从这一篇开始我的写作之路。</p>
<a id="more"></a>
<h1 id="一些前戏"><a href="#一些前戏" class="headerlink" title="一些前戏"></a>一些前戏</h1><p><strong>搭建此博客时，百度了很多资料，但是上手还是从官方资料开始上手</strong><br>这是官方链接<br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a><br><a href="https://github.com/iissnan/hexo-theme-next/blob/master/README.cn.md" target="_blank" rel="noopener">Next主题</a><br><a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">图标库</a></p>
<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>Hexo博客的前提需要在本地先安装nodejs与git<br>推荐一下使用<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM</a>，本人是windows环境下搭建，建议用git-bash</p>
<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">NodeJs</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a><br>以上的安装就不写在文章里了，不会可自行百度</li>
</ul>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><strong> 安装Hexo </strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><p>安装Hexo完成后，请执行以下命令，hexo会在指定文件夹中创建文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> e:/ </span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p>
<p>新建完成后会生成hexo所需要的一些文件<br><strong>_config.yml</strong><br>网站的一些主要配置信息都在这文件下进行配置<br>详细参数可点击链接进行查看<br><a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">config</a></p>
<h1 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>
<p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站</p>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [post|draft|page] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>生成静态文件。</p>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="noopener">http://localhost:4000/。</a></p>
<h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>部署网站。</p>
<h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>
<h1 id="Hexo美化"><a href="#Hexo美化" class="headerlink" title="Hexo美化"></a>Hexo美化</h1><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>这里安装的是比较热门的<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next</a>主题<br>里面也有中文文档，安装说明都很详细，具体安装不在本教程说明,但是具体说明主题中的 <strong> _config.yml </strong> 文件和站点中的<strong> _config.yml </strong>文件配置是有区别之分的，请详细查看清楚具体是配置哪个配置文件。</p>
<h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>修改站点配置文件 <strong> _config.yml </strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>该文章下配置的主题基于<strong>2014-2017    <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a></strong>的版本</p>
<p>更多版本请看：<a href="https://theme-next.org/" target="_blank" rel="noopener">https://theme-next.org/</a></p>
</blockquote>
<h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><p>选择 Scheme</p>
<p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Gemini - 左侧网站信息及目录，块+片段结构布局 </li>
</ul>
<blockquote>
<p>Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有四行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。</p>
</blockquote>
<h2 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h2><p><img src="bg_program.gif" alt="canvas-nest演示"></p>
<p>目前NexT主题最新的是V6.0版本，这个版本中可以有4种动态背景：</p>
<ul>
<li>Canvas-nest</li>
<li>three_waves</li>
<li>canvas_lines</li>
<li>canvas_sphere<br>在 <strong> _config.yml </strong>文件中即可配置，但是需要下载配置<br><a href="https://github.com/theme-next/theme-next-canvas-nest" target="_blank" rel="noopener">栗子</a></li>
</ul>
<h2 id="点击出现桃心效果"><a href="#点击出现桃心效果" class="headerlink" title="点击出现桃心效果"></a>点击出现桃心效果</h2><p><strong>lover.js</strong>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
<p>拷贝所有代码，在/themes/next/source/js/src里面新建love.js，然后在<code>\themes\next\layout\_layout.swig</code>文件末尾添加以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt; </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/love.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h2><p>默认的网站图标是一个N，当然是需要制定一个图了，在网上找到图后，将其放在 <strong> /themes/next/source/images </strong> 里面,找到主题配置文件中的favicon关键字，进行替换,如图<br><img src="favicon_replace.png" alt></p>
<h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a><a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">本地搜索</a></h2><p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>
<p>配置<code>__config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># unescape html strings to the readable one</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="页面加载进度条"><a href="#页面加载进度条" class="headerlink" title="页面加载进度条"></a><a href="https://github.com/theme-next/theme-next-pace" target="_blank" rel="noopener">页面加载进度条</a></h2><p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br></pre></td></tr></table></figure>
<p>Install module to <code>source/lib</code> directory:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure>
<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file and select your theme:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br></pre></td></tr></table></figure>
<p><strong>And, if you wants to use the CDN, then need to set:</strong> (you also need to find your corresponding theme css link in <a href="https://www.jsdelivr.com/package/npm/pace-js?path=themes" target="_blank" rel="noopener">jsdelivr</a>)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">pace:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1/pace.min.js</span></span><br><span class="line">  <span class="attr">pace_css:</span> <span class="string">//cdn.jsdelivr.net/npm/pace-js@1/themes/blue/pace-theme-minimal.css</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Themes list:</strong></p>
<ul>
<li>pace-theme-big-counter</li>
<li>pace-theme-bounce</li>
<li>pace-theme-barber-shop</li>
<li>pace-theme-center-atom</li>
<li>pace-theme-center-circle</li>
<li>pace-theme-center-radar</li>
<li>pace-theme-center-simple</li>
<li>pace-theme-corner-indicator</li>
<li>pace-theme-fill-left</li>
<li>pace-theme-flash</li>
<li>pace-theme-loading-bar</li>
<li>pace-theme-mac-osx</li>
<li>pace-theme-minimal</li>
</ul>
<p>各种进度条样式的预览效果：<a href="https://github.hubspot.com/pace/docs/welcome/" target="_blank" rel="noopener">https://github.hubspot.com/pace/docs/welcome/</a></p>
</blockquote>
<h2 id="文章浏览进度条"><a href="#文章浏览进度条" class="headerlink" title="文章浏览进度条"></a><a href="https://github.com/theme-next/theme-next-reading-progress" target="_blank" rel="noopener">文章浏览进度条</a></h2><p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br></pre></td></tr></table></figure>
<p>Install module to <code>source/lib</code> directory:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-reading-progress <span class="built_in">source</span>/lib/reading_progress</span><br></pre></td></tr></table></figure>
<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#37c6c0"</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">2px</span></span><br></pre></td></tr></table></figure>
<p><strong>And, if you wants to use the CDN, then need to set:</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">reading_progress:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1/reading_progress.min.js</span></span><br></pre></td></tr></table></figure>
<h2 id="实现统计功能"><a href="#实现统计功能" class="headerlink" title="实现统计功能"></a>实现统计功能</h2><p><strong> 实现效果图 </strong><br><img src="word_count.png" alt></p>
<p>具体实现方法<br>在博客根目录下,git-bash<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></p>
<p>然后在主题的配置文件中，配置如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">word_count: true</span><br></pre></td></tr></table></figure></p>
<p><strong> 修改主题 swig 布局 </strong><br>为了能在文章信息处显示字数，我们需要修改 <strong> themes/next/layout/_macro/post.swig </strong> ，在 <strong> class </strong> 为 <strong> post-meta </strong> 的 div 中的添加如下内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.word_count %&#125;</span><br><span class="line">    &lt;span class=&quot;post-letters-count&quot;&gt;</span><br><span class="line">        &amp;nbsp; | &amp;nbsp;</span><br><span class="line">        &lt;i class=&quot;fa fa-align-right&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span&gt;字数统计:&#123;&#123; wordcount(post.content) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">        &amp;nbsp; | &amp;nbsp;</span><br><span class="line">        &lt;i class=&quot;fa fa-align-left&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span&gt;阅读时长:&#123;&#123; min2read(post.content) &#125;&#125;分&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h2><p>修改文件 <strong> themes\next\source\css_common\components\post\post.styl </strong> ，在末尾添加如下css样式，：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其中选择 <strong> .post-body </strong> 是为了不影响标题，选择 <strong> p </strong>  是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p>
<h2 id="添加背景"><a href="#添加背景" class="headerlink" title="添加背景"></a>添加背景</h2><p>在 <strong> theme/next/source/css/_custom </strong> 文件夹下打开 <strong> custom.styl </strong> 文件，往里面添加以下代码：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;   </span><br><span class="line">        <span class="attribute">background</span>:<span class="built_in">url</span>(图片链接);</span><br><span class="line">        <span class="attribute">background-size</span>:cover;</span><br><span class="line">        <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">        <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">        <span class="attribute">background-position</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>本地图片将图片放至主题目录下 <strong> source\images </strong></p>
<h2 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h2><p>找到Next主题下的配置文件中的：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward</span></span><br><span class="line"><span class="attr">reward_comment:</span> <span class="string">坚持技术分享，您的支持将鼓励我继续创作！</span></span><br><span class="line"><span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br><span class="line"><span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure>
<p>配置文字和对应收款码即可</p>
<p><strong>删除打赏文字闪动样式</strong></p>
<p>进入<code>themes\next\source\css\_common\components\post\post-reward.styl</code>,找到以下样式并删除</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wechat</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">animation</span>: roll <span class="number">1s</span> infinite linear;</span><br><span class="line">    <span class="attribute">-webkit-animation</span>: roll <span class="number">1s</span> infinite linear;</span><br><span class="line">    <span class="attribute">-moz-animation</span>: roll <span class="number">1s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#alipay</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">animation</span>: roll <span class="number">1s</span> infinite linear;</span><br><span class="line">    <span class="attribute">-webkit-animation</span>: roll <span class="number">1s</span> infinite linear;</span><br><span class="line">    <span class="attribute">-moz-animation</span>: roll <span class="number">1s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#bitcoin</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: roll <span class="number">1s</span> infinite linear;</span><br><span class="line">    <span class="attribute">-webkit-animation</span>: roll <span class="number">1s</span> infinite linear;</span><br><span class="line">    <span class="attribute">-moz-animation</span>: roll <span class="number">1s</span> infinite linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改文章底部的那个带-号的标签"><a href="#修改文章底部的那个带-号的标签" class="headerlink" title="修改文章底部的那个带#号的标签"></a>修改文章底部的那个带#号的标签</h2><p><strong>具体实现方法</strong></p>
<p>修改模板 <code>/themes/next/layout/_macro/post.swig</code> ，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将<code>#</code>换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
<h2 id="在网站底部加上访问量"><a href="#在网站底部加上访问量" class="headerlink" title="在网站底部加上访问量"></a>在网站底部加上访问量</h2><p><strong> 具体实现方法 </strong><br>打开 <code>\themes\next\layout\_partials\footer.swig</code> 文件,在<code>copyright</code>前加上画红线这句话：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>然后再合适的位置添加显示统计的代码，如图：<br><img src="site_count.png" alt></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">    本站访客数:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &amp;nbsp|&amp;nbsp</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里有两中不同计算方式的统计代码：</p>
<ul>
<li><p>pv的方式，单个用户连续点击n篇文章，记录n次访问量</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>uv的方式，单个用户连续点击n篇文章，只记录1次访客数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">  本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p>打开 <strong> themes\next\layout_partials\head </strong> 文件,在以下位置插入这样一段代码：<br><img src="safe_read.png" alt><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span><br><span class="line">                alert(<span class="string">'密码错误！'</span>);</span><br><span class="line">                <span class="keyword">if</span> (history.length === <span class="number">1</span>) &#123;</span><br><span class="line">                    location.replace(<span class="string">"http://xxxxxxx.xxx"</span>); <span class="comment">// 这里替换成你的首页</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    history.back();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后在文章上写成类似这样：<br><img src="safe_read_demo.png" alt><br>就ok啦，不过很容易被破解掉噢</p>
<p><strong> 当然还有另一种方式 </strong><br><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">guide1</a><br><a href="https://github.com/edolphin-ydf/hexo-encrypt" target="_blank" rel="noopener">guide2</a><br>按照指引就可以啦~</p>
<h2 id="Fancybox3图片浏览"><a href="#Fancybox3图片浏览" class="headerlink" title="Fancybox3图片浏览"></a>Fancybox3图片浏览</h2><p>博客上的图片点击浏览功能插件。</p>
<p>如果已经安装了旧版，则先删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm -rf themes/next/<span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure>
<p>然后bash去到<code>themes/next</code>目录</p>
<p>获取插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 <span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure>
<p>修改next主题下的<code>_config.yml</code>文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>如果想要配置CDN，则再加上</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">fancybox:</span> <span class="string">//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br><span class="line">  <span class="attr">fancybox_css:</span> <span class="string">//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span></span><br></pre></td></tr></table></figure>
<h2 id="代码块复制"><a href="#代码块复制" class="headerlink" title="代码块复制"></a>代码块复制</h2><p>在Next主题配置文件中找到：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Manual define the border radius in codeblock</span></span><br><span class="line">  <span class="comment"># Leave it empty for the default 1</span></span><br><span class="line">  <span class="attr">border_radius:</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>开启即可</p>
<h1 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h1><p>首先需要进行创建您个人的github账户</p>
<ol start="0">
<li>创建公钥<br>打开git-bash,执行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>github官方命令 <a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">链接</a></p>
<ol>
<li>直接按三次回车，可不用输入密码，然后打开C盘查找Users/当前用户目录(Administrator),找到.ssh文件夹，打开文件夹下的id_rsa.pub文件，可用记事本文件打开将里面文字全部复制</li>
<li>打开github个人主页 (<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a>) ,点击 Add SSH Key 按钮，粘贴进去保存即可</li>
<li><p>安装 hexo-deployer-git。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建github仓库<br><img src="new_repo.png" alt><br>仓库名中填写<code>&lt;github的用户名&gt;.github.io</code></p>
</li>
<li>修改 <strong> _config.yml </strong> 文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; </span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>repository url使用ssh url即可，message不填也可<br>branch用master分支即可</p>
<ol start="6">
<li>执行<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>或者<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure></p>
<ol start="7">
<li>进入博客的github所在仓库，进入仓库设置,查看GitHub Pages<br><img src="github_page.png" alt><br>即可完成部署</li>
</ol>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><p>这里只提到一些编写过程中遇到的问题</p>
<p><a href="https://coding.net/help/doc/project/markdown.html#i-6" target="_blank" rel="noopener">markdown语法</a></p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>这里涉及到<a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">资源文件夹</a></p>
<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>当Hexo项目中只用到少量图片时，可以将图片统一放在 <strong> source/images </strong> 文件夹中，通过markdown语法访问它们。<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure></p>
<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>图片除了可以放在统一的 <strong> source/images </strong> 文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置 <strong> config.yml </strong>来生成。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure></p>
<p>把 <strong> _config.yml </strong> 中配置post_asset_folder设置为true后，通过命令hexo new &lt;文章名字&gt;，hexo就会在文章的目录下建立一个和文章同名的文件夹，然后把图片资源放进该文件夹下，即可通过<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure></p>
<p>记住和第一点绝对路径有区别，别在路径前面加/，否则会出错</p>
<h2 id="文档格式"><a href="#文档格式" class="headerlink" title="文档格式"></a>文档格式</h2><p>假设我们的文章名为 “hello hexo markdwon”，在命令行键入以下命令即可：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello hexo markdown</span><br><span class="line">date: 2016-11-16 18:11:25</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>这些内容是干嘛的呢？事实上，他们就是用于设置 MarkDown 文档在被解析为静态网页文件时的相关配置，这些配置参数一般位于文件中最上方以 — 分隔的区域。</p>
<p>其中，title 的值是当前文档名，也是将来在网页中显示的文章标题。</p>
<p>date 值是我们新建文档时的当地时区时间。</p>
<p>tags 值是文档的标签，我们可以随意赋值为文档贴标签。其用法如下：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello hexo markdown</span><br><span class="line">date: 2016-11-16 18:11:25</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>hello</span><br><span class="line"><span class="bullet">- </span>hexo</span><br><span class="line"><span class="bullet">- </span>markdown</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<h2 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h2><p>categories 是用来给文章分类的，它跟 tags 不同的是其具有顺序性和层次性。</p>
<p>categories 的用法同 tags 一样，只不过斗个 categories 值是分先后顺序的。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">- </span>hexo</span><br></pre></td></tr></table></figure>
<h2 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h2><p>有的时候，主题模板配置的不够好的话，Hexo 最终生成的静态站点是不会自动生成文章摘要的。</p>
<p>所以，为了保险起见，我们也自己手动设置文章摘要，这样也方便避免自动生成的摘要不优雅的情况。</p>
<p>设置文章摘要，我们只需在想显示为摘要的内容之后添 <code>&lt;!-- more --&gt;</code> 即可。像下面这样：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello hexo markdown</span><br><span class="line">date: 2016-11-16 18:11:25</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>hello</span><br><span class="line"><span class="bullet">- </span>hexo</span><br><span class="line"><span class="bullet">- </span>markdown</span><br><span class="line">---</span><br><span class="line">我是短小精悍的文章摘要(๑•̀ㅂ•́)و✧</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span></span><br><span class="line">紧接着文章摘要的正文内容</span><br></pre></td></tr></table></figure></p>
<p>这样， <code>&lt;!-- more --&gt;</code>  之前、文档配置参数之后中的内容便会被渲染为站点中的文章摘要。</p>
<p>注意！文章摘要在文章详情页是正文中最前面的内容。</p>
<h1 id="Hexo内置标签"><a href="#Hexo内置标签" class="headerlink" title="Hexo内置标签"></a>Hexo内置标签</h1><h2 id="Note提示块"><a href="#Note提示块" class="headerlink" title="Note提示块"></a>Note提示块</h2><div class="note default"><p>default 提示块标签</p></div>
<div class="note primary"><p>primary 提示块标签</p></div>
<div class="note success"><p>success 提示块标签</p></div>
<div class="note info"><p>info 提示块标签</p></div>
<div class="note warning"><p>warning 提示块标签</p></div>
<div class="note danger"><p>danger 提示块标签</p></div>
<p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>Next主题配置文件可以修改风格：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Note tag (bs-callout).</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="Tab标签"><a href="#Tab标签" class="headerlink" title="Tab标签"></a>Tab标签</h2><p>tab 标签用于快速创建 tab 选项卡，语法如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs [Unique name], [index] %&#125;</span><br><span class="line">  &lt;!-- tab [Tab caption]@[icon] --&gt;</span><br><span class="line">  标签页内容（支持行内标签）</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<p>其中，各参数意义如下：</p>
<ul>
<li>Unique name: 全局唯一的 Tab 名称，将作为各个标签页的 id 属性前缀</li>
<li>index: 当前激活的标签页索引，如果未定义则默认选中显示第一个标签页，如果设为 - 1 则默认隐藏所有标签页</li>
<li>Tab caption: 当前标签页的标题，如果不指定则会以 Unique name 加上索引作为标题</li>
<li>icon: 在标签页标题中添加 Font awesome 图标</li>
</ul>
<p>使用示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Tab标签列表 %&#125;</span><br><span class="line">  &lt;!-- tab 标签页1 --&gt;</span><br><span class="line">    标签页1文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">  &lt;!-- tab 标签页2 --&gt;</span><br><span class="line">    标签页2文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">  &lt;!-- tab 标签页3 --&gt;</span><br><span class="line">    标签页3文本内容</span><br><span class="line">  &lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="tab标签列表"><ul class="nav-tabs"><li class="tab active"><a href="#tab标签列表-1">标签页1</a></li><li class="tab"><a href="#tab标签列表-2">标签页2</a></li><li class="tab"><a href="#tab标签列表-3">标签页3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab标签列表-1"><p>  标签页1文本内容</p></div><div class="tab-pane" id="tab标签列表-2"><p>  标签页2文本内容</p></div><div class="tab-pane" id="tab标签列表-3"><p>  标签页3文本内容</p></div></div></div>
<p>Next主题配置查看</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tabs tag.</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="attr">tabs:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="Label标签"><a href="#Label标签" class="headerlink" title="Label标签"></a>Label标签</h2><p>通过 label 标签可以为文字添加背景色，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label [class]@text  %&#125;</span><br></pre></td></tr></table></figure>
<p>支持的 class 种类包括 <code>default</code> <code>primary</code> <code>success</code> <code>info</code> <code>warning</code> <code>danger</code>，默认使用 <code>default</code> 作为缺省。</p>
<p>使用示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I heard the echo, &#123;% label default@from the valleys and the heart %&#125;</span><br><span class="line">Open to the lonely soul of &#123;% label info@sickle harvesting %&#125;</span><br><span class="line">Repeat outrightly, but also repeat the well-being of</span><br><span class="line">Eventually &#123;% label warning@swaying in the desert oasis %&#125;</span><br><span class="line">&#123;% label success@I believe %&#125; I am</span><br><span class="line">&#123;% label primary@Born as the bright summer flowers %&#125;</span><br><span class="line">Do not withered undefeated fiery demon rule</span><br><span class="line">Heart rate and breathing to bear &#123;% label danger@the load of the cumbersome %&#125;</span><br><span class="line">Bored</span><br></pre></td></tr></table></figure>
<blockquote>
<p>I heard the echo, <span class="label default">from the valleys and the heart</span><br>Open to the lonely soul of <span class="label info">sickle harvesting</span><br>Repeat outrightly, but also repeat the well-being of<br>Eventually <span class="label warning">swaying in the desert oasis</span><br><span class="label success">I believe</span> I am<br><span class="label primary">Born as the bright summer flowers</span><br>Do not withered undefeated fiery demon rule<br>Heart rate and breathing to bear <span class="label danger">the load of the cumbersome</span><br>Bored</p>
</blockquote>
<p>可在主题配置文件中设置 <code>label: false</code> 来取消 label 标签默认 CSS 样式。</p>
<h2 id="Button按钮"><a href="#Button按钮" class="headerlink" title="Button按钮"></a>Button按钮</h2><p>通过 button 标签可以快速添加带有主题样式的按钮，语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% button /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure>
<p>也可简写为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% btn /path/to/url/, text, icon [class], title %&#125;</span><br></pre></td></tr></table></figure>
<p>其中， 图标 ID 来源于 <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">FontAwesome</a> 。</p>
<p>使用示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% btn #, 文本 %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 标题,, 标题 %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 图标, home %&#125;</span><br><span class="line">&#123;% btn #, 文本 &amp; 大图标 (固定宽度), home fa-fw fa-lg %&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<a class="btn" href="#">文本</a>
<a class="btn" href="#" title="标题">文本 & 标题</a>
<a class="btn" href="#"><i class="fa fa-home"></i>文本 & 图标</a>
<a class="btn" href="#"><i class="fa fa-home fa-fw fa-lg"></i>文本 & 大图标 (固定宽度)</a>
</blockquote>
<h2 id="引用站内链接"><a href="#引用站内链接" class="headerlink" title="引用站内链接"></a>引用站内链接</h2><p>可以通过如下语法引入站内文章的地址或链接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_path slug %&#125;</span><br><span class="line">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>slug</code> 表示 <code>_post</code> 目录下的 Markdown 文件名。</p>
<p><code>post_path</code> 标签将会渲染为文章的地址，即 <code>permalink</code>；而 <code>post_link</code> 标签将会渲染为链接，可以通过 <code>title</code> 指定链接标题。</p>
<p>如以下标签将会生成 <code>/posts/hexo-github-搭建个人博客.html</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_path hexo-github-搭建个人博客 %&#125;</span><br></pre></td></tr></table></figure>
<p>而以下标签则会生成/2018/09/07/hexo-github-搭建个人博客/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_link hexo-github-搭建个人博客 链接标题 %&#125;</span><br></pre></td></tr></table></figure>
<p>这种站内引用方式比直接使用 url 引用的形式更为可靠，因为即使修改了 <code>permalink</code> 格式，或者修改了文章的路由地址，只要 Markdown 文件名没有发生改变，引用链接都不会失效。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://yearito.cn/posts/hexo-writing-skills.html" target="_blank" rel="noopener">http://yearito.cn/posts/hexo-writing-skills.html</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
